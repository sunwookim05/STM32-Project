
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c0  080034c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  080034d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080034d4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048ef  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000112c  00000000  00000000  00024923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00025a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  00025f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012387  00000000  00000000  00026348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005db0  00000000  00000000  000386cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071098  00000000  00000000  0003e47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000119c  00000000  00000000  000af568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003444 	.word	0x08003444

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003444 	.word	0x08003444

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f852 	bl	80002f8 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_d2uiz>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2200      	movs	r2, #0
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002c2:	0004      	movs	r4, r0
 80002c4:	000d      	movs	r5, r1
 80002c6:	f000 fffb 	bl	80012c0 <__aeabi_dcmpge>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d104      	bne.n	80002d8 <__aeabi_d2uiz+0x1c>
 80002ce:	0020      	movs	r0, r4
 80002d0:	0029      	movs	r1, r5
 80002d2:	f000 ff65 	bl	80011a0 <__aeabi_d2iz>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002da:	2200      	movs	r2, #0
 80002dc:	0020      	movs	r0, r4
 80002de:	0029      	movs	r1, r5
 80002e0:	f000 fbcc 	bl	8000a7c <__aeabi_dsub>
 80002e4:	f000 ff5c 	bl	80011a0 <__aeabi_d2iz>
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	061b      	lsls	r3, r3, #24
 80002ec:	469c      	mov	ip, r3
 80002ee:	4460      	add	r0, ip
 80002f0:	e7f1      	b.n	80002d6 <__aeabi_d2uiz+0x1a>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	41e00000 	.word	0x41e00000

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 fffa 	bl	8001310 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 fff5 	bl	8001310 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_ddiv>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	4681      	mov	r9, r0
 800049e:	0005      	movs	r5, r0
 80004a0:	030c      	lsls	r4, r1, #12
 80004a2:	0048      	lsls	r0, r1, #1
 80004a4:	4692      	mov	sl, r2
 80004a6:	001f      	movs	r7, r3
 80004a8:	b085      	sub	sp, #20
 80004aa:	0b24      	lsrs	r4, r4, #12
 80004ac:	0d40      	lsrs	r0, r0, #21
 80004ae:	0fce      	lsrs	r6, r1, #31
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_ddiv+0x26>
 80004b4:	e156      	b.n	8000764 <__aeabi_ddiv+0x2d4>
 80004b6:	4bd4      	ldr	r3, [pc, #848]	; (8000808 <__aeabi_ddiv+0x378>)
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d100      	bne.n	80004be <__aeabi_ddiv+0x2e>
 80004bc:	e172      	b.n	80007a4 <__aeabi_ddiv+0x314>
 80004be:	0f6b      	lsrs	r3, r5, #29
 80004c0:	00e4      	lsls	r4, r4, #3
 80004c2:	431c      	orrs	r4, r3
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	4698      	mov	r8, r3
 80004cc:	4bcf      	ldr	r3, [pc, #828]	; (800080c <__aeabi_ddiv+0x37c>)
 80004ce:	00ed      	lsls	r5, r5, #3
 80004d0:	469b      	mov	fp, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	4483      	add	fp, r0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	033c      	lsls	r4, r7, #12
 80004dc:	007b      	lsls	r3, r7, #1
 80004de:	4650      	mov	r0, sl
 80004e0:	0b24      	lsrs	r4, r4, #12
 80004e2:	0d5b      	lsrs	r3, r3, #21
 80004e4:	0fff      	lsrs	r7, r7, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_ddiv+0x5c>
 80004ea:	e11f      	b.n	800072c <__aeabi_ddiv+0x29c>
 80004ec:	4ac6      	ldr	r2, [pc, #792]	; (8000808 <__aeabi_ddiv+0x378>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x64>
 80004f2:	e162      	b.n	80007ba <__aeabi_ddiv+0x32a>
 80004f4:	49c5      	ldr	r1, [pc, #788]	; (800080c <__aeabi_ddiv+0x37c>)
 80004f6:	0f42      	lsrs	r2, r0, #29
 80004f8:	468c      	mov	ip, r1
 80004fa:	00e4      	lsls	r4, r4, #3
 80004fc:	4659      	mov	r1, fp
 80004fe:	4314      	orrs	r4, r2
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	4463      	add	r3, ip
 8000504:	0412      	lsls	r2, r2, #16
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	4314      	orrs	r4, r2
 800050a:	469b      	mov	fp, r3
 800050c:	00c2      	lsls	r2, r0, #3
 800050e:	2000      	movs	r0, #0
 8000510:	0033      	movs	r3, r6
 8000512:	407b      	eors	r3, r7
 8000514:	469a      	mov	sl, r3
 8000516:	464b      	mov	r3, r9
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d827      	bhi.n	800056c <__aeabi_ddiv+0xdc>
 800051c:	49bc      	ldr	r1, [pc, #752]	; (8000810 <__aeabi_ddiv+0x380>)
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	58cb      	ldr	r3, [r1, r3]
 8000522:	469f      	mov	pc, r3
 8000524:	46b2      	mov	sl, r6
 8000526:	9b00      	ldr	r3, [sp, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d016      	beq.n	800055a <__aeabi_ddiv+0xca>
 800052c:	2b03      	cmp	r3, #3
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0xa2>
 8000530:	e28e      	b.n	8000a50 <__aeabi_ddiv+0x5c0>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d000      	beq.n	8000538 <__aeabi_ddiv+0xa8>
 8000536:	e0d9      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000538:	2300      	movs	r3, #0
 800053a:	2400      	movs	r4, #0
 800053c:	2500      	movs	r5, #0
 800053e:	4652      	mov	r2, sl
 8000540:	051b      	lsls	r3, r3, #20
 8000542:	4323      	orrs	r3, r4
 8000544:	07d2      	lsls	r2, r2, #31
 8000546:	4313      	orrs	r3, r2
 8000548:	0028      	movs	r0, r5
 800054a:	0019      	movs	r1, r3
 800054c:	b005      	add	sp, #20
 800054e:	bcf0      	pop	{r4, r5, r6, r7}
 8000550:	46bb      	mov	fp, r7
 8000552:	46b2      	mov	sl, r6
 8000554:	46a9      	mov	r9, r5
 8000556:	46a0      	mov	r8, r4
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	2400      	movs	r4, #0
 800055c:	2500      	movs	r5, #0
 800055e:	4baa      	ldr	r3, [pc, #680]	; (8000808 <__aeabi_ddiv+0x378>)
 8000560:	e7ed      	b.n	800053e <__aeabi_ddiv+0xae>
 8000562:	46ba      	mov	sl, r7
 8000564:	46a0      	mov	r8, r4
 8000566:	0015      	movs	r5, r2
 8000568:	9000      	str	r0, [sp, #0]
 800056a:	e7dc      	b.n	8000526 <__aeabi_ddiv+0x96>
 800056c:	4544      	cmp	r4, r8
 800056e:	d200      	bcs.n	8000572 <__aeabi_ddiv+0xe2>
 8000570:	e1c7      	b.n	8000902 <__aeabi_ddiv+0x472>
 8000572:	d100      	bne.n	8000576 <__aeabi_ddiv+0xe6>
 8000574:	e1c2      	b.n	80008fc <__aeabi_ddiv+0x46c>
 8000576:	2301      	movs	r3, #1
 8000578:	425b      	negs	r3, r3
 800057a:	469c      	mov	ip, r3
 800057c:	002e      	movs	r6, r5
 800057e:	4640      	mov	r0, r8
 8000580:	2500      	movs	r5, #0
 8000582:	44e3      	add	fp, ip
 8000584:	0223      	lsls	r3, r4, #8
 8000586:	0e14      	lsrs	r4, r2, #24
 8000588:	431c      	orrs	r4, r3
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	4699      	mov	r9, r3
 800058e:	0423      	lsls	r3, r4, #16
 8000590:	0c1f      	lsrs	r7, r3, #16
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	4649      	mov	r1, r9
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9701      	str	r7, [sp, #4]
 800059a:	f7ff fe3b 	bl	8000214 <__aeabi_uidivmod>
 800059e:	0002      	movs	r2, r0
 80005a0:	437a      	muls	r2, r7
 80005a2:	040b      	lsls	r3, r1, #16
 80005a4:	0c31      	lsrs	r1, r6, #16
 80005a6:	4680      	mov	r8, r0
 80005a8:	4319      	orrs	r1, r3
 80005aa:	428a      	cmp	r2, r1
 80005ac:	d907      	bls.n	80005be <__aeabi_ddiv+0x12e>
 80005ae:	2301      	movs	r3, #1
 80005b0:	425b      	negs	r3, r3
 80005b2:	469c      	mov	ip, r3
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	44e0      	add	r8, ip
 80005b8:	428c      	cmp	r4, r1
 80005ba:	d800      	bhi.n	80005be <__aeabi_ddiv+0x12e>
 80005bc:	e207      	b.n	80009ce <__aeabi_ddiv+0x53e>
 80005be:	1a88      	subs	r0, r1, r2
 80005c0:	4649      	mov	r1, r9
 80005c2:	f7ff fe27 	bl	8000214 <__aeabi_uidivmod>
 80005c6:	0409      	lsls	r1, r1, #16
 80005c8:	468c      	mov	ip, r1
 80005ca:	0431      	lsls	r1, r6, #16
 80005cc:	4666      	mov	r6, ip
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	0c09      	lsrs	r1, r1, #16
 80005d2:	4342      	muls	r2, r0
 80005d4:	0003      	movs	r3, r0
 80005d6:	4331      	orrs	r1, r6
 80005d8:	428a      	cmp	r2, r1
 80005da:	d904      	bls.n	80005e6 <__aeabi_ddiv+0x156>
 80005dc:	1909      	adds	r1, r1, r4
 80005de:	3b01      	subs	r3, #1
 80005e0:	428c      	cmp	r4, r1
 80005e2:	d800      	bhi.n	80005e6 <__aeabi_ddiv+0x156>
 80005e4:	e1ed      	b.n	80009c2 <__aeabi_ddiv+0x532>
 80005e6:	1a88      	subs	r0, r1, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	4690      	mov	r8, r2
 80005f0:	4641      	mov	r1, r8
 80005f2:	9b00      	ldr	r3, [sp, #0]
 80005f4:	040e      	lsls	r6, r1, #16
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001f      	movs	r7, r3
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	0c36      	lsrs	r6, r6, #16
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c19      	lsrs	r1, r3, #16
 8000604:	000b      	movs	r3, r1
 8000606:	4373      	muls	r3, r6
 8000608:	0c12      	lsrs	r2, r2, #16
 800060a:	437e      	muls	r6, r7
 800060c:	9103      	str	r1, [sp, #12]
 800060e:	4351      	muls	r1, r2
 8000610:	437a      	muls	r2, r7
 8000612:	0c1f      	lsrs	r7, r3, #16
 8000614:	46bc      	mov	ip, r7
 8000616:	1876      	adds	r6, r6, r1
 8000618:	4466      	add	r6, ip
 800061a:	42b1      	cmp	r1, r6
 800061c:	d903      	bls.n	8000626 <__aeabi_ddiv+0x196>
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	0249      	lsls	r1, r1, #9
 8000622:	468c      	mov	ip, r1
 8000624:	4462      	add	r2, ip
 8000626:	0c31      	lsrs	r1, r6, #16
 8000628:	188a      	adds	r2, r1, r2
 800062a:	0431      	lsls	r1, r6, #16
 800062c:	041e      	lsls	r6, r3, #16
 800062e:	0c36      	lsrs	r6, r6, #16
 8000630:	198e      	adds	r6, r1, r6
 8000632:	4290      	cmp	r0, r2
 8000634:	d302      	bcc.n	800063c <__aeabi_ddiv+0x1ac>
 8000636:	d112      	bne.n	800065e <__aeabi_ddiv+0x1ce>
 8000638:	42b5      	cmp	r5, r6
 800063a:	d210      	bcs.n	800065e <__aeabi_ddiv+0x1ce>
 800063c:	4643      	mov	r3, r8
 800063e:	1e59      	subs	r1, r3, #1
 8000640:	9b00      	ldr	r3, [sp, #0]
 8000642:	469c      	mov	ip, r3
 8000644:	4465      	add	r5, ip
 8000646:	001f      	movs	r7, r3
 8000648:	429d      	cmp	r5, r3
 800064a:	419b      	sbcs	r3, r3
 800064c:	425b      	negs	r3, r3
 800064e:	191b      	adds	r3, r3, r4
 8000650:	18c0      	adds	r0, r0, r3
 8000652:	4284      	cmp	r4, r0
 8000654:	d200      	bcs.n	8000658 <__aeabi_ddiv+0x1c8>
 8000656:	e1a0      	b.n	800099a <__aeabi_ddiv+0x50a>
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x1cc>
 800065a:	e19b      	b.n	8000994 <__aeabi_ddiv+0x504>
 800065c:	4688      	mov	r8, r1
 800065e:	1bae      	subs	r6, r5, r6
 8000660:	42b5      	cmp	r5, r6
 8000662:	41ad      	sbcs	r5, r5
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	426d      	negs	r5, r5
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	4284      	cmp	r4, r0
 800066c:	d100      	bne.n	8000670 <__aeabi_ddiv+0x1e0>
 800066e:	e1d5      	b.n	8000a1c <__aeabi_ddiv+0x58c>
 8000670:	4649      	mov	r1, r9
 8000672:	f7ff fdcf 	bl	8000214 <__aeabi_uidivmod>
 8000676:	9a01      	ldr	r2, [sp, #4]
 8000678:	040b      	lsls	r3, r1, #16
 800067a:	4342      	muls	r2, r0
 800067c:	0c31      	lsrs	r1, r6, #16
 800067e:	0005      	movs	r5, r0
 8000680:	4319      	orrs	r1, r3
 8000682:	428a      	cmp	r2, r1
 8000684:	d900      	bls.n	8000688 <__aeabi_ddiv+0x1f8>
 8000686:	e16c      	b.n	8000962 <__aeabi_ddiv+0x4d2>
 8000688:	1a88      	subs	r0, r1, r2
 800068a:	4649      	mov	r1, r9
 800068c:	f7ff fdc2 	bl	8000214 <__aeabi_uidivmod>
 8000690:	9a01      	ldr	r2, [sp, #4]
 8000692:	0436      	lsls	r6, r6, #16
 8000694:	4342      	muls	r2, r0
 8000696:	0409      	lsls	r1, r1, #16
 8000698:	0c36      	lsrs	r6, r6, #16
 800069a:	0003      	movs	r3, r0
 800069c:	430e      	orrs	r6, r1
 800069e:	42b2      	cmp	r2, r6
 80006a0:	d900      	bls.n	80006a4 <__aeabi_ddiv+0x214>
 80006a2:	e153      	b.n	800094c <__aeabi_ddiv+0x4bc>
 80006a4:	9803      	ldr	r0, [sp, #12]
 80006a6:	1ab6      	subs	r6, r6, r2
 80006a8:	0002      	movs	r2, r0
 80006aa:	042d      	lsls	r5, r5, #16
 80006ac:	431d      	orrs	r5, r3
 80006ae:	9f02      	ldr	r7, [sp, #8]
 80006b0:	042b      	lsls	r3, r5, #16
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	435a      	muls	r2, r3
 80006b6:	437b      	muls	r3, r7
 80006b8:	469c      	mov	ip, r3
 80006ba:	0c29      	lsrs	r1, r5, #16
 80006bc:	4348      	muls	r0, r1
 80006be:	0c13      	lsrs	r3, r2, #16
 80006c0:	4484      	add	ip, r0
 80006c2:	4463      	add	r3, ip
 80006c4:	4379      	muls	r1, r7
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d903      	bls.n	80006d2 <__aeabi_ddiv+0x242>
 80006ca:	2080      	movs	r0, #128	; 0x80
 80006cc:	0240      	lsls	r0, r0, #9
 80006ce:	4684      	mov	ip, r0
 80006d0:	4461      	add	r1, ip
 80006d2:	0c18      	lsrs	r0, r3, #16
 80006d4:	0412      	lsls	r2, r2, #16
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	0c12      	lsrs	r2, r2, #16
 80006da:	1841      	adds	r1, r0, r1
 80006dc:	189b      	adds	r3, r3, r2
 80006de:	428e      	cmp	r6, r1
 80006e0:	d200      	bcs.n	80006e4 <__aeabi_ddiv+0x254>
 80006e2:	e0ff      	b.n	80008e4 <__aeabi_ddiv+0x454>
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x258>
 80006e6:	e0fa      	b.n	80008de <__aeabi_ddiv+0x44e>
 80006e8:	2301      	movs	r3, #1
 80006ea:	431d      	orrs	r5, r3
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <__aeabi_ddiv+0x384>)
 80006ee:	445a      	add	r2, fp
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_ddiv+0x266>
 80006f4:	e0aa      	b.n	800084c <__aeabi_ddiv+0x3bc>
 80006f6:	076b      	lsls	r3, r5, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_ddiv+0x26c>
 80006fa:	e13d      	b.n	8000978 <__aeabi_ddiv+0x4e8>
 80006fc:	08ed      	lsrs	r5, r5, #3
 80006fe:	4643      	mov	r3, r8
 8000700:	01db      	lsls	r3, r3, #7
 8000702:	d506      	bpl.n	8000712 <__aeabi_ddiv+0x282>
 8000704:	4642      	mov	r2, r8
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <__aeabi_ddiv+0x388>)
 8000708:	401a      	ands	r2, r3
 800070a:	4690      	mov	r8, r2
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	00d2      	lsls	r2, r2, #3
 8000710:	445a      	add	r2, fp
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <__aeabi_ddiv+0x38c>)
 8000714:	429a      	cmp	r2, r3
 8000716:	dd00      	ble.n	800071a <__aeabi_ddiv+0x28a>
 8000718:	e71f      	b.n	800055a <__aeabi_ddiv+0xca>
 800071a:	4643      	mov	r3, r8
 800071c:	075b      	lsls	r3, r3, #29
 800071e:	431d      	orrs	r5, r3
 8000720:	4643      	mov	r3, r8
 8000722:	0552      	lsls	r2, r2, #21
 8000724:	025c      	lsls	r4, r3, #9
 8000726:	0b24      	lsrs	r4, r4, #12
 8000728:	0d53      	lsrs	r3, r2, #21
 800072a:	e708      	b.n	800053e <__aeabi_ddiv+0xae>
 800072c:	4652      	mov	r2, sl
 800072e:	4322      	orrs	r2, r4
 8000730:	d100      	bne.n	8000734 <__aeabi_ddiv+0x2a4>
 8000732:	e07b      	b.n	800082c <__aeabi_ddiv+0x39c>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x2aa>
 8000738:	e0fa      	b.n	8000930 <__aeabi_ddiv+0x4a0>
 800073a:	0020      	movs	r0, r4
 800073c:	f000 fdca 	bl	80012d4 <__clzsi2>
 8000740:	0002      	movs	r2, r0
 8000742:	3a0b      	subs	r2, #11
 8000744:	231d      	movs	r3, #29
 8000746:	0001      	movs	r1, r0
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	4652      	mov	r2, sl
 800074c:	3908      	subs	r1, #8
 800074e:	40da      	lsrs	r2, r3
 8000750:	408c      	lsls	r4, r1
 8000752:	4314      	orrs	r4, r2
 8000754:	4652      	mov	r2, sl
 8000756:	408a      	lsls	r2, r1
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <__aeabi_ddiv+0x390>)
 800075a:	4458      	add	r0, fp
 800075c:	469b      	mov	fp, r3
 800075e:	4483      	add	fp, r0
 8000760:	2000      	movs	r0, #0
 8000762:	e6d5      	b.n	8000510 <__aeabi_ddiv+0x80>
 8000764:	464b      	mov	r3, r9
 8000766:	4323      	orrs	r3, r4
 8000768:	4698      	mov	r8, r3
 800076a:	d044      	beq.n	80007f6 <__aeabi_ddiv+0x366>
 800076c:	2c00      	cmp	r4, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x2e2>
 8000770:	e0ce      	b.n	8000910 <__aeabi_ddiv+0x480>
 8000772:	0020      	movs	r0, r4
 8000774:	f000 fdae 	bl	80012d4 <__clzsi2>
 8000778:	0001      	movs	r1, r0
 800077a:	0002      	movs	r2, r0
 800077c:	390b      	subs	r1, #11
 800077e:	231d      	movs	r3, #29
 8000780:	1a5b      	subs	r3, r3, r1
 8000782:	4649      	mov	r1, r9
 8000784:	0010      	movs	r0, r2
 8000786:	40d9      	lsrs	r1, r3
 8000788:	3808      	subs	r0, #8
 800078a:	4084      	lsls	r4, r0
 800078c:	000b      	movs	r3, r1
 800078e:	464d      	mov	r5, r9
 8000790:	4323      	orrs	r3, r4
 8000792:	4698      	mov	r8, r3
 8000794:	4085      	lsls	r5, r0
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <__aeabi_ddiv+0x394>)
 8000798:	1a83      	subs	r3, r0, r2
 800079a:	469b      	mov	fp, r3
 800079c:	2300      	movs	r3, #0
 800079e:	4699      	mov	r9, r3
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	e69a      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007a4:	464b      	mov	r3, r9
 80007a6:	4323      	orrs	r3, r4
 80007a8:	4698      	mov	r8, r3
 80007aa:	d11d      	bne.n	80007e8 <__aeabi_ddiv+0x358>
 80007ac:	2308      	movs	r3, #8
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b06      	subs	r3, #6
 80007b2:	2500      	movs	r5, #0
 80007b4:	4683      	mov	fp, r0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	e68f      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007ba:	4652      	mov	r2, sl
 80007bc:	4322      	orrs	r2, r4
 80007be:	d109      	bne.n	80007d4 <__aeabi_ddiv+0x344>
 80007c0:	2302      	movs	r3, #2
 80007c2:	4649      	mov	r1, r9
 80007c4:	4319      	orrs	r1, r3
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <__aeabi_ddiv+0x398>)
 80007c8:	4689      	mov	r9, r1
 80007ca:	469c      	mov	ip, r3
 80007cc:	2400      	movs	r4, #0
 80007ce:	2002      	movs	r0, #2
 80007d0:	44e3      	add	fp, ip
 80007d2:	e69d      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007d4:	2303      	movs	r3, #3
 80007d6:	464a      	mov	r2, r9
 80007d8:	431a      	orrs	r2, r3
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <__aeabi_ddiv+0x398>)
 80007dc:	4691      	mov	r9, r2
 80007de:	469c      	mov	ip, r3
 80007e0:	4652      	mov	r2, sl
 80007e2:	2003      	movs	r0, #3
 80007e4:	44e3      	add	fp, ip
 80007e6:	e693      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007e8:	230c      	movs	r3, #12
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	46a0      	mov	r8, r4
 80007f0:	4683      	mov	fp, r0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	e671      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007f6:	2304      	movs	r3, #4
 80007f8:	4699      	mov	r9, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	469b      	mov	fp, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	2500      	movs	r5, #0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	e669      	b.n	80004da <__aeabi_ddiv+0x4a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	000007ff 	.word	0x000007ff
 800080c:	fffffc01 	.word	0xfffffc01
 8000810:	0800345c 	.word	0x0800345c
 8000814:	000003ff 	.word	0x000003ff
 8000818:	feffffff 	.word	0xfeffffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	000003f3 	.word	0x000003f3
 8000824:	fffffc0d 	.word	0xfffffc0d
 8000828:	fffff801 	.word	0xfffff801
 800082c:	4649      	mov	r1, r9
 800082e:	2301      	movs	r3, #1
 8000830:	4319      	orrs	r1, r3
 8000832:	4689      	mov	r9, r1
 8000834:	2400      	movs	r4, #0
 8000836:	2001      	movs	r0, #1
 8000838:	e66a      	b.n	8000510 <__aeabi_ddiv+0x80>
 800083a:	2300      	movs	r3, #0
 800083c:	2480      	movs	r4, #128	; 0x80
 800083e:	469a      	mov	sl, r3
 8000840:	2500      	movs	r5, #0
 8000842:	4b8a      	ldr	r3, [pc, #552]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	e67a      	b.n	800053e <__aeabi_ddiv+0xae>
 8000848:	2501      	movs	r5, #1
 800084a:	426d      	negs	r5, r5
 800084c:	2301      	movs	r3, #1
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	2b38      	cmp	r3, #56	; 0x38
 8000852:	dd00      	ble.n	8000856 <__aeabi_ddiv+0x3c6>
 8000854:	e670      	b.n	8000538 <__aeabi_ddiv+0xa8>
 8000856:	2b1f      	cmp	r3, #31
 8000858:	dc00      	bgt.n	800085c <__aeabi_ddiv+0x3cc>
 800085a:	e0bf      	b.n	80009dc <__aeabi_ddiv+0x54c>
 800085c:	211f      	movs	r1, #31
 800085e:	4249      	negs	r1, r1
 8000860:	1a8a      	subs	r2, r1, r2
 8000862:	4641      	mov	r1, r8
 8000864:	40d1      	lsrs	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	2b20      	cmp	r3, #32
 800086a:	d004      	beq.n	8000876 <__aeabi_ddiv+0x3e6>
 800086c:	4641      	mov	r1, r8
 800086e:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <__aeabi_ddiv+0x5e0>)
 8000870:	445b      	add	r3, fp
 8000872:	4099      	lsls	r1, r3
 8000874:	430d      	orrs	r5, r1
 8000876:	1e6b      	subs	r3, r5, #1
 8000878:	419d      	sbcs	r5, r3
 800087a:	2307      	movs	r3, #7
 800087c:	432a      	orrs	r2, r5
 800087e:	001d      	movs	r5, r3
 8000880:	2400      	movs	r4, #0
 8000882:	4015      	ands	r5, r2
 8000884:	4213      	tst	r3, r2
 8000886:	d100      	bne.n	800088a <__aeabi_ddiv+0x3fa>
 8000888:	e0d4      	b.n	8000a34 <__aeabi_ddiv+0x5a4>
 800088a:	210f      	movs	r1, #15
 800088c:	2300      	movs	r3, #0
 800088e:	4011      	ands	r1, r2
 8000890:	2904      	cmp	r1, #4
 8000892:	d100      	bne.n	8000896 <__aeabi_ddiv+0x406>
 8000894:	e0cb      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 8000896:	1d11      	adds	r1, r2, #4
 8000898:	4291      	cmp	r1, r2
 800089a:	4192      	sbcs	r2, r2
 800089c:	4252      	negs	r2, r2
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	000a      	movs	r2, r1
 80008a2:	0219      	lsls	r1, r3, #8
 80008a4:	d400      	bmi.n	80008a8 <__aeabi_ddiv+0x418>
 80008a6:	e0c2      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 80008a8:	2301      	movs	r3, #1
 80008aa:	2400      	movs	r4, #0
 80008ac:	2500      	movs	r5, #0
 80008ae:	e646      	b.n	800053e <__aeabi_ddiv+0xae>
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	4641      	mov	r1, r8
 80008b4:	031b      	lsls	r3, r3, #12
 80008b6:	4219      	tst	r1, r3
 80008b8:	d008      	beq.n	80008cc <__aeabi_ddiv+0x43c>
 80008ba:	421c      	tst	r4, r3
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x43c>
 80008be:	431c      	orrs	r4, r3
 80008c0:	0324      	lsls	r4, r4, #12
 80008c2:	46ba      	mov	sl, r7
 80008c4:	0015      	movs	r5, r2
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	e638      	b.n	800053e <__aeabi_ddiv+0xae>
 80008cc:	2480      	movs	r4, #128	; 0x80
 80008ce:	4643      	mov	r3, r8
 80008d0:	0324      	lsls	r4, r4, #12
 80008d2:	431c      	orrs	r4, r3
 80008d4:	0324      	lsls	r4, r4, #12
 80008d6:	46b2      	mov	sl, r6
 80008d8:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008da:	0b24      	lsrs	r4, r4, #12
 80008dc:	e62f      	b.n	800053e <__aeabi_ddiv+0xae>
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_ddiv+0x454>
 80008e2:	e703      	b.n	80006ec <__aeabi_ddiv+0x25c>
 80008e4:	19a6      	adds	r6, r4, r6
 80008e6:	1e68      	subs	r0, r5, #1
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d200      	bcs.n	80008ee <__aeabi_ddiv+0x45e>
 80008ec:	e08d      	b.n	8000a0a <__aeabi_ddiv+0x57a>
 80008ee:	428e      	cmp	r6, r1
 80008f0:	d200      	bcs.n	80008f4 <__aeabi_ddiv+0x464>
 80008f2:	e0a3      	b.n	8000a3c <__aeabi_ddiv+0x5ac>
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x468>
 80008f6:	e0b3      	b.n	8000a60 <__aeabi_ddiv+0x5d0>
 80008f8:	0005      	movs	r5, r0
 80008fa:	e6f5      	b.n	80006e8 <__aeabi_ddiv+0x258>
 80008fc:	42aa      	cmp	r2, r5
 80008fe:	d900      	bls.n	8000902 <__aeabi_ddiv+0x472>
 8000900:	e639      	b.n	8000576 <__aeabi_ddiv+0xe6>
 8000902:	4643      	mov	r3, r8
 8000904:	07de      	lsls	r6, r3, #31
 8000906:	0858      	lsrs	r0, r3, #1
 8000908:	086b      	lsrs	r3, r5, #1
 800090a:	431e      	orrs	r6, r3
 800090c:	07ed      	lsls	r5, r5, #31
 800090e:	e639      	b.n	8000584 <__aeabi_ddiv+0xf4>
 8000910:	4648      	mov	r0, r9
 8000912:	f000 fcdf 	bl	80012d4 <__clzsi2>
 8000916:	0001      	movs	r1, r0
 8000918:	0002      	movs	r2, r0
 800091a:	3115      	adds	r1, #21
 800091c:	3220      	adds	r2, #32
 800091e:	291c      	cmp	r1, #28
 8000920:	dc00      	bgt.n	8000924 <__aeabi_ddiv+0x494>
 8000922:	e72c      	b.n	800077e <__aeabi_ddiv+0x2ee>
 8000924:	464b      	mov	r3, r9
 8000926:	3808      	subs	r0, #8
 8000928:	4083      	lsls	r3, r0
 800092a:	2500      	movs	r5, #0
 800092c:	4698      	mov	r8, r3
 800092e:	e732      	b.n	8000796 <__aeabi_ddiv+0x306>
 8000930:	f000 fcd0 	bl	80012d4 <__clzsi2>
 8000934:	0003      	movs	r3, r0
 8000936:	001a      	movs	r2, r3
 8000938:	3215      	adds	r2, #21
 800093a:	3020      	adds	r0, #32
 800093c:	2a1c      	cmp	r2, #28
 800093e:	dc00      	bgt.n	8000942 <__aeabi_ddiv+0x4b2>
 8000940:	e700      	b.n	8000744 <__aeabi_ddiv+0x2b4>
 8000942:	4654      	mov	r4, sl
 8000944:	3b08      	subs	r3, #8
 8000946:	2200      	movs	r2, #0
 8000948:	409c      	lsls	r4, r3
 800094a:	e705      	b.n	8000758 <__aeabi_ddiv+0x2c8>
 800094c:	1936      	adds	r6, r6, r4
 800094e:	3b01      	subs	r3, #1
 8000950:	42b4      	cmp	r4, r6
 8000952:	d900      	bls.n	8000956 <__aeabi_ddiv+0x4c6>
 8000954:	e6a6      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000956:	42b2      	cmp	r2, r6
 8000958:	d800      	bhi.n	800095c <__aeabi_ddiv+0x4cc>
 800095a:	e6a3      	b.n	80006a4 <__aeabi_ddiv+0x214>
 800095c:	1e83      	subs	r3, r0, #2
 800095e:	1936      	adds	r6, r6, r4
 8000960:	e6a0      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000962:	1909      	adds	r1, r1, r4
 8000964:	3d01      	subs	r5, #1
 8000966:	428c      	cmp	r4, r1
 8000968:	d900      	bls.n	800096c <__aeabi_ddiv+0x4dc>
 800096a:	e68d      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 800096c:	428a      	cmp	r2, r1
 800096e:	d800      	bhi.n	8000972 <__aeabi_ddiv+0x4e2>
 8000970:	e68a      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000972:	1e85      	subs	r5, r0, #2
 8000974:	1909      	adds	r1, r1, r4
 8000976:	e687      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000978:	230f      	movs	r3, #15
 800097a:	402b      	ands	r3, r5
 800097c:	2b04      	cmp	r3, #4
 800097e:	d100      	bne.n	8000982 <__aeabi_ddiv+0x4f2>
 8000980:	e6bc      	b.n	80006fc <__aeabi_ddiv+0x26c>
 8000982:	2305      	movs	r3, #5
 8000984:	425b      	negs	r3, r3
 8000986:	42ab      	cmp	r3, r5
 8000988:	419b      	sbcs	r3, r3
 800098a:	3504      	adds	r5, #4
 800098c:	425b      	negs	r3, r3
 800098e:	08ed      	lsrs	r5, r5, #3
 8000990:	4498      	add	r8, r3
 8000992:	e6b4      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000994:	42af      	cmp	r7, r5
 8000996:	d900      	bls.n	800099a <__aeabi_ddiv+0x50a>
 8000998:	e660      	b.n	800065c <__aeabi_ddiv+0x1cc>
 800099a:	4282      	cmp	r2, r0
 800099c:	d804      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 800099e:	d000      	beq.n	80009a2 <__aeabi_ddiv+0x512>
 80009a0:	e65c      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	d800      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 80009a6:	e659      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a8:	2302      	movs	r3, #2
 80009aa:	425b      	negs	r3, r3
 80009ac:	469c      	mov	ip, r3
 80009ae:	9b00      	ldr	r3, [sp, #0]
 80009b0:	44e0      	add	r8, ip
 80009b2:	469c      	mov	ip, r3
 80009b4:	4465      	add	r5, ip
 80009b6:	429d      	cmp	r5, r3
 80009b8:	419b      	sbcs	r3, r3
 80009ba:	425b      	negs	r3, r3
 80009bc:	191b      	adds	r3, r3, r4
 80009be:	18c0      	adds	r0, r0, r3
 80009c0:	e64d      	b.n	800065e <__aeabi_ddiv+0x1ce>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	d800      	bhi.n	80009c8 <__aeabi_ddiv+0x538>
 80009c6:	e60e      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009c8:	1e83      	subs	r3, r0, #2
 80009ca:	1909      	adds	r1, r1, r4
 80009cc:	e60b      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009ce:	428a      	cmp	r2, r1
 80009d0:	d800      	bhi.n	80009d4 <__aeabi_ddiv+0x544>
 80009d2:	e5f4      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009d4:	1e83      	subs	r3, r0, #2
 80009d6:	4698      	mov	r8, r3
 80009d8:	1909      	adds	r1, r1, r4
 80009da:	e5f0      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009dc:	4925      	ldr	r1, [pc, #148]	; (8000a74 <__aeabi_ddiv+0x5e4>)
 80009de:	0028      	movs	r0, r5
 80009e0:	4459      	add	r1, fp
 80009e2:	408d      	lsls	r5, r1
 80009e4:	4642      	mov	r2, r8
 80009e6:	408a      	lsls	r2, r1
 80009e8:	1e69      	subs	r1, r5, #1
 80009ea:	418d      	sbcs	r5, r1
 80009ec:	4641      	mov	r1, r8
 80009ee:	40d8      	lsrs	r0, r3
 80009f0:	40d9      	lsrs	r1, r3
 80009f2:	4302      	orrs	r2, r0
 80009f4:	432a      	orrs	r2, r5
 80009f6:	000b      	movs	r3, r1
 80009f8:	0751      	lsls	r1, r2, #29
 80009fa:	d100      	bne.n	80009fe <__aeabi_ddiv+0x56e>
 80009fc:	e751      	b.n	80008a2 <__aeabi_ddiv+0x412>
 80009fe:	210f      	movs	r1, #15
 8000a00:	4011      	ands	r1, r2
 8000a02:	2904      	cmp	r1, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_ddiv+0x578>
 8000a06:	e746      	b.n	8000896 <__aeabi_ddiv+0x406>
 8000a08:	e74b      	b.n	80008a2 <__aeabi_ddiv+0x412>
 8000a0a:	0005      	movs	r5, r0
 8000a0c:	428e      	cmp	r6, r1
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_ddiv+0x582>
 8000a10:	e66a      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a12:	9a00      	ldr	r2, [sp, #0]
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d000      	beq.n	8000a1a <__aeabi_ddiv+0x58a>
 8000a18:	e666      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a1a:	e667      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <__aeabi_ddiv+0x5e8>)
 8000a1e:	445a      	add	r2, fp
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_ddiv+0x596>
 8000a24:	e710      	b.n	8000848 <__aeabi_ddiv+0x3b8>
 8000a26:	2301      	movs	r3, #1
 8000a28:	2500      	movs	r5, #0
 8000a2a:	4498      	add	r8, r3
 8000a2c:	e667      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000a2e:	075d      	lsls	r5, r3, #29
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0b1c      	lsrs	r4, r3, #12
 8000a34:	08d2      	lsrs	r2, r2, #3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4315      	orrs	r5, r2
 8000a3a:	e580      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a3c:	9800      	ldr	r0, [sp, #0]
 8000a3e:	3d02      	subs	r5, #2
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	4282      	cmp	r2, r0
 8000a44:	41bf      	sbcs	r7, r7
 8000a46:	427f      	negs	r7, r7
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	1936      	adds	r6, r6, r4
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	e7dd      	b.n	8000a0c <__aeabi_ddiv+0x57c>
 8000a50:	2480      	movs	r4, #128	; 0x80
 8000a52:	4643      	mov	r3, r8
 8000a54:	0324      	lsls	r4, r4, #12
 8000a56:	431c      	orrs	r4, r3
 8000a58:	0324      	lsls	r4, r4, #12
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000a5c:	0b24      	lsrs	r4, r4, #12
 8000a5e:	e56e      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a60:	9a00      	ldr	r2, [sp, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3ea      	bcc.n	8000a3c <__aeabi_ddiv+0x5ac>
 8000a66:	0005      	movs	r5, r0
 8000a68:	e7d3      	b.n	8000a12 <__aeabi_ddiv+0x582>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	000007ff 	.word	0x000007ff
 8000a70:	0000043e 	.word	0x0000043e
 8000a74:	0000041e 	.word	0x0000041e
 8000a78:	000003ff 	.word	0x000003ff

08000a7c <__aeabi_dsub>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	4645      	mov	r5, r8
 8000a84:	46de      	mov	lr, fp
 8000a86:	b5e0      	push	{r5, r6, r7, lr}
 8000a88:	001e      	movs	r6, r3
 8000a8a:	0017      	movs	r7, r2
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	030b      	lsls	r3, r1, #12
 8000a90:	0d52      	lsrs	r2, r2, #21
 8000a92:	0a5b      	lsrs	r3, r3, #9
 8000a94:	4690      	mov	r8, r2
 8000a96:	0f42      	lsrs	r2, r0, #29
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	0fcd      	lsrs	r5, r1, #31
 8000a9c:	4ccd      	ldr	r4, [pc, #820]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000a9e:	0331      	lsls	r1, r6, #12
 8000aa0:	00c3      	lsls	r3, r0, #3
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	0070      	lsls	r0, r6, #1
 8000aa6:	0f7a      	lsrs	r2, r7, #29
 8000aa8:	0a49      	lsrs	r1, r1, #9
 8000aaa:	00ff      	lsls	r7, r7, #3
 8000aac:	469a      	mov	sl, r3
 8000aae:	46b9      	mov	r9, r7
 8000ab0:	0d40      	lsrs	r0, r0, #21
 8000ab2:	0ff6      	lsrs	r6, r6, #31
 8000ab4:	4311      	orrs	r1, r2
 8000ab6:	42a0      	cmp	r0, r4
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dsub+0x40>
 8000aba:	e0b1      	b.n	8000c20 <__aeabi_dsub+0x1a4>
 8000abc:	2201      	movs	r2, #1
 8000abe:	4056      	eors	r6, r2
 8000ac0:	46b3      	mov	fp, r6
 8000ac2:	42b5      	cmp	r5, r6
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x4c>
 8000ac6:	e088      	b.n	8000bda <__aeabi_dsub+0x15e>
 8000ac8:	4642      	mov	r2, r8
 8000aca:	1a12      	subs	r2, r2, r0
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_dsub+0x56>
 8000ad0:	e0ae      	b.n	8000c30 <__aeabi_dsub+0x1b4>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dsub+0x5c>
 8000ad6:	e0c1      	b.n	8000c5c <__aeabi_dsub+0x1e0>
 8000ad8:	48be      	ldr	r0, [pc, #760]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000ada:	4580      	cmp	r8, r0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dsub+0x64>
 8000ade:	e151      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	0400      	lsls	r0, r0, #16
 8000ae4:	4301      	orrs	r1, r0
 8000ae6:	2a38      	cmp	r2, #56	; 0x38
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dsub+0x70>
 8000aea:	e17b      	b.n	8000de4 <__aeabi_dsub+0x368>
 8000aec:	2a1f      	cmp	r2, #31
 8000aee:	dd00      	ble.n	8000af2 <__aeabi_dsub+0x76>
 8000af0:	e1ee      	b.n	8000ed0 <__aeabi_dsub+0x454>
 8000af2:	2020      	movs	r0, #32
 8000af4:	003e      	movs	r6, r7
 8000af6:	1a80      	subs	r0, r0, r2
 8000af8:	000c      	movs	r4, r1
 8000afa:	40d6      	lsrs	r6, r2
 8000afc:	40d1      	lsrs	r1, r2
 8000afe:	4087      	lsls	r7, r0
 8000b00:	4662      	mov	r2, ip
 8000b02:	4084      	lsls	r4, r0
 8000b04:	1a52      	subs	r2, r2, r1
 8000b06:	1e78      	subs	r0, r7, #1
 8000b08:	4187      	sbcs	r7, r0
 8000b0a:	4694      	mov	ip, r2
 8000b0c:	4334      	orrs	r4, r6
 8000b0e:	4327      	orrs	r7, r4
 8000b10:	1bdc      	subs	r4, r3, r7
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	419b      	sbcs	r3, r3
 8000b16:	4662      	mov	r2, ip
 8000b18:	425b      	negs	r3, r3
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4699      	mov	r9, r3
 8000b1e:	464b      	mov	r3, r9
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	d400      	bmi.n	8000b26 <__aeabi_dsub+0xaa>
 8000b24:	e118      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000b26:	464b      	mov	r3, r9
 8000b28:	0258      	lsls	r0, r3, #9
 8000b2a:	0a43      	lsrs	r3, r0, #9
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	464b      	mov	r3, r9
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0xba>
 8000b34:	e137      	b.n	8000da6 <__aeabi_dsub+0x32a>
 8000b36:	4648      	mov	r0, r9
 8000b38:	f000 fbcc 	bl	80012d4 <__clzsi2>
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	3908      	subs	r1, #8
 8000b40:	2320      	movs	r3, #32
 8000b42:	0022      	movs	r2, r4
 8000b44:	4648      	mov	r0, r9
 8000b46:	1a5b      	subs	r3, r3, r1
 8000b48:	40da      	lsrs	r2, r3
 8000b4a:	4088      	lsls	r0, r1
 8000b4c:	408c      	lsls	r4, r1
 8000b4e:	4643      	mov	r3, r8
 8000b50:	4310      	orrs	r0, r2
 8000b52:	4588      	cmp	r8, r1
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dsub+0xdc>
 8000b56:	e136      	b.n	8000dc6 <__aeabi_dsub+0x34a>
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	1c4b      	adds	r3, r1, #1
 8000b5c:	2b1f      	cmp	r3, #31
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dsub+0xe6>
 8000b60:	e0ea      	b.n	8000d38 <__aeabi_dsub+0x2bc>
 8000b62:	2220      	movs	r2, #32
 8000b64:	0026      	movs	r6, r4
 8000b66:	1ad2      	subs	r2, r2, r3
 8000b68:	0001      	movs	r1, r0
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	40de      	lsrs	r6, r3
 8000b6e:	40d8      	lsrs	r0, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	4091      	lsls	r1, r2
 8000b74:	1e62      	subs	r2, r4, #1
 8000b76:	4194      	sbcs	r4, r2
 8000b78:	4681      	mov	r9, r0
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	4331      	orrs	r1, r6
 8000b7e:	430c      	orrs	r4, r1
 8000b80:	0763      	lsls	r3, r4, #29
 8000b82:	d009      	beq.n	8000b98 <__aeabi_dsub+0x11c>
 8000b84:	230f      	movs	r3, #15
 8000b86:	4023      	ands	r3, r4
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d005      	beq.n	8000b98 <__aeabi_dsub+0x11c>
 8000b8c:	1d23      	adds	r3, r4, #4
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	41a4      	sbcs	r4, r4
 8000b92:	4264      	negs	r4, r4
 8000b94:	44a1      	add	r9, r4
 8000b96:	001c      	movs	r4, r3
 8000b98:	464b      	mov	r3, r9
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	d400      	bmi.n	8000ba0 <__aeabi_dsub+0x124>
 8000b9e:	e0de      	b.n	8000d5e <__aeabi_dsub+0x2e2>
 8000ba0:	4641      	mov	r1, r8
 8000ba2:	4b8c      	ldr	r3, [pc, #560]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000ba4:	3101      	adds	r1, #1
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dsub+0x130>
 8000baa:	e0e7      	b.n	8000d7c <__aeabi_dsub+0x300>
 8000bac:	464b      	mov	r3, r9
 8000bae:	488a      	ldr	r0, [pc, #552]	; (8000dd8 <__aeabi_dsub+0x35c>)
 8000bb0:	08e4      	lsrs	r4, r4, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	0240      	lsls	r0, r0, #9
 8000bbc:	4323      	orrs	r3, r4
 8000bbe:	0d4a      	lsrs	r2, r1, #21
 8000bc0:	0b04      	lsrs	r4, r0, #12
 8000bc2:	0512      	lsls	r2, r2, #20
 8000bc4:	07ed      	lsls	r5, r5, #31
 8000bc6:	4322      	orrs	r2, r4
 8000bc8:	432a      	orrs	r2, r5
 8000bca:	0018      	movs	r0, r3
 8000bcc:	0011      	movs	r1, r2
 8000bce:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd0:	46bb      	mov	fp, r7
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	46a9      	mov	r9, r5
 8000bd6:	46a0      	mov	r8, r4
 8000bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bda:	4642      	mov	r2, r8
 8000bdc:	1a12      	subs	r2, r2, r0
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	dd52      	ble.n	8000c88 <__aeabi_dsub+0x20c>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x16c>
 8000be6:	e09c      	b.n	8000d22 <__aeabi_dsub+0x2a6>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dsub+0x172>
 8000bec:	e0ca      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	0400      	lsls	r0, r0, #16
 8000bf2:	4301      	orrs	r1, r0
 8000bf4:	2a38      	cmp	r2, #56	; 0x38
 8000bf6:	dd00      	ble.n	8000bfa <__aeabi_dsub+0x17e>
 8000bf8:	e149      	b.n	8000e8e <__aeabi_dsub+0x412>
 8000bfa:	2a1f      	cmp	r2, #31
 8000bfc:	dc00      	bgt.n	8000c00 <__aeabi_dsub+0x184>
 8000bfe:	e197      	b.n	8000f30 <__aeabi_dsub+0x4b4>
 8000c00:	0010      	movs	r0, r2
 8000c02:	000e      	movs	r6, r1
 8000c04:	3820      	subs	r0, #32
 8000c06:	40c6      	lsrs	r6, r0
 8000c08:	2a20      	cmp	r2, #32
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_dsub+0x19a>
 8000c0c:	2040      	movs	r0, #64	; 0x40
 8000c0e:	1a82      	subs	r2, r0, r2
 8000c10:	4091      	lsls	r1, r2
 8000c12:	430f      	orrs	r7, r1
 8000c14:	46b9      	mov	r9, r7
 8000c16:	464c      	mov	r4, r9
 8000c18:	1e62      	subs	r2, r4, #1
 8000c1a:	4194      	sbcs	r4, r2
 8000c1c:	4334      	orrs	r4, r6
 8000c1e:	e13a      	b.n	8000e96 <__aeabi_dsub+0x41a>
 8000c20:	000a      	movs	r2, r1
 8000c22:	433a      	orrs	r2, r7
 8000c24:	d028      	beq.n	8000c78 <__aeabi_dsub+0x1fc>
 8000c26:	46b3      	mov	fp, r6
 8000c28:	42b5      	cmp	r5, r6
 8000c2a:	d02b      	beq.n	8000c84 <__aeabi_dsub+0x208>
 8000c2c:	4a6b      	ldr	r2, [pc, #428]	; (8000ddc <__aeabi_dsub+0x360>)
 8000c2e:	4442      	add	r2, r8
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d05d      	beq.n	8000cf0 <__aeabi_dsub+0x274>
 8000c34:	4642      	mov	r2, r8
 8000c36:	4644      	mov	r4, r8
 8000c38:	1a82      	subs	r2, r0, r2
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dsub+0x1c4>
 8000c3e:	e0f5      	b.n	8000e2c <__aeabi_dsub+0x3b0>
 8000c40:	4665      	mov	r5, ip
 8000c42:	431d      	orrs	r5, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dsub+0x1cc>
 8000c46:	e19c      	b.n	8000f82 <__aeabi_dsub+0x506>
 8000c48:	1e55      	subs	r5, r2, #1
 8000c4a:	2a01      	cmp	r2, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dsub+0x1d4>
 8000c4e:	e1fb      	b.n	8001048 <__aeabi_dsub+0x5cc>
 8000c50:	4c60      	ldr	r4, [pc, #384]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c52:	42a2      	cmp	r2, r4
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dsub+0x1dc>
 8000c56:	e1bd      	b.n	8000fd4 <__aeabi_dsub+0x558>
 8000c58:	002a      	movs	r2, r5
 8000c5a:	e0f0      	b.n	8000e3e <__aeabi_dsub+0x3c2>
 8000c5c:	0008      	movs	r0, r1
 8000c5e:	4338      	orrs	r0, r7
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dsub+0x1e8>
 8000c62:	e0c3      	b.n	8000dec <__aeabi_dsub+0x370>
 8000c64:	1e50      	subs	r0, r2, #1
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dsub+0x1f0>
 8000c6a:	e1a8      	b.n	8000fbe <__aeabi_dsub+0x542>
 8000c6c:	4c59      	ldr	r4, [pc, #356]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c6e:	42a2      	cmp	r2, r4
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dsub+0x1f8>
 8000c72:	e087      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000c74:	0002      	movs	r2, r0
 8000c76:	e736      	b.n	8000ae6 <__aeabi_dsub+0x6a>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4056      	eors	r6, r2
 8000c7c:	46b3      	mov	fp, r6
 8000c7e:	42b5      	cmp	r5, r6
 8000c80:	d000      	beq.n	8000c84 <__aeabi_dsub+0x208>
 8000c82:	e721      	b.n	8000ac8 <__aeabi_dsub+0x4c>
 8000c84:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <__aeabi_dsub+0x360>)
 8000c86:	4442      	add	r2, r8
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dsub+0x212>
 8000c8c:	e0b5      	b.n	8000dfa <__aeabi_dsub+0x37e>
 8000c8e:	4642      	mov	r2, r8
 8000c90:	4644      	mov	r4, r8
 8000c92:	1a82      	subs	r2, r0, r2
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dsub+0x21e>
 8000c98:	e138      	b.n	8000f0c <__aeabi_dsub+0x490>
 8000c9a:	4e4e      	ldr	r6, [pc, #312]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c9c:	42b0      	cmp	r0, r6
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x226>
 8000ca0:	e1de      	b.n	8001060 <__aeabi_dsub+0x5e4>
 8000ca2:	2680      	movs	r6, #128	; 0x80
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	0436      	lsls	r6, r6, #16
 8000ca8:	4334      	orrs	r4, r6
 8000caa:	46a4      	mov	ip, r4
 8000cac:	2a38      	cmp	r2, #56	; 0x38
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_dsub+0x236>
 8000cb0:	e196      	b.n	8000fe0 <__aeabi_dsub+0x564>
 8000cb2:	2a1f      	cmp	r2, #31
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dsub+0x23c>
 8000cb6:	e224      	b.n	8001102 <__aeabi_dsub+0x686>
 8000cb8:	2620      	movs	r6, #32
 8000cba:	1ab4      	subs	r4, r6, r2
 8000cbc:	46a2      	mov	sl, r4
 8000cbe:	4664      	mov	r4, ip
 8000cc0:	4656      	mov	r6, sl
 8000cc2:	40b4      	lsls	r4, r6
 8000cc4:	46a1      	mov	r9, r4
 8000cc6:	001c      	movs	r4, r3
 8000cc8:	464e      	mov	r6, r9
 8000cca:	40d4      	lsrs	r4, r2
 8000ccc:	4326      	orrs	r6, r4
 8000cce:	0034      	movs	r4, r6
 8000cd0:	4656      	mov	r6, sl
 8000cd2:	40b3      	lsls	r3, r6
 8000cd4:	1e5e      	subs	r6, r3, #1
 8000cd6:	41b3      	sbcs	r3, r6
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	4663      	mov	r3, ip
 8000cdc:	40d3      	lsrs	r3, r2
 8000cde:	18c9      	adds	r1, r1, r3
 8000ce0:	19e4      	adds	r4, r4, r7
 8000ce2:	42bc      	cmp	r4, r7
 8000ce4:	41bf      	sbcs	r7, r7
 8000ce6:	427f      	negs	r7, r7
 8000ce8:	46b9      	mov	r9, r7
 8000cea:	4680      	mov	r8, r0
 8000cec:	4489      	add	r9, r1
 8000cee:	e0d8      	b.n	8000ea2 <__aeabi_dsub+0x426>
 8000cf0:	4640      	mov	r0, r8
 8000cf2:	4c3b      	ldr	r4, [pc, #236]	; (8000de0 <__aeabi_dsub+0x364>)
 8000cf4:	3001      	adds	r0, #1
 8000cf6:	4220      	tst	r0, r4
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dsub+0x280>
 8000cfa:	e0b4      	b.n	8000e66 <__aeabi_dsub+0x3ea>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d000      	beq.n	8000d04 <__aeabi_dsub+0x288>
 8000d02:	e144      	b.n	8000f8e <__aeabi_dsub+0x512>
 8000d04:	4660      	mov	r0, ip
 8000d06:	4318      	orrs	r0, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dsub+0x290>
 8000d0a:	e190      	b.n	800102e <__aeabi_dsub+0x5b2>
 8000d0c:	0008      	movs	r0, r1
 8000d0e:	4338      	orrs	r0, r7
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dsub+0x298>
 8000d12:	e1aa      	b.n	800106a <__aeabi_dsub+0x5ee>
 8000d14:	4661      	mov	r1, ip
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	0749      	lsls	r1, r1, #29
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	4661      	mov	r1, ip
 8000d1e:	08cc      	lsrs	r4, r1, #3
 8000d20:	e027      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000d22:	0008      	movs	r0, r1
 8000d24:	4338      	orrs	r0, r7
 8000d26:	d061      	beq.n	8000dec <__aeabi_dsub+0x370>
 8000d28:	1e50      	subs	r0, r2, #1
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x2b4>
 8000d2e:	e139      	b.n	8000fa4 <__aeabi_dsub+0x528>
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d027      	beq.n	8000d84 <__aeabi_dsub+0x308>
 8000d34:	0002      	movs	r2, r0
 8000d36:	e75d      	b.n	8000bf4 <__aeabi_dsub+0x178>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	391f      	subs	r1, #31
 8000d3c:	40ca      	lsrs	r2, r1
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	d003      	beq.n	8000d4c <__aeabi_dsub+0x2d0>
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	4098      	lsls	r0, r3
 8000d4a:	4304      	orrs	r4, r0
 8000d4c:	1e63      	subs	r3, r4, #1
 8000d4e:	419c      	sbcs	r4, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	4699      	mov	r9, r3
 8000d54:	4698      	mov	r8, r3
 8000d56:	430c      	orrs	r4, r1
 8000d58:	0763      	lsls	r3, r4, #29
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_dsub+0x2e2>
 8000d5c:	e712      	b.n	8000b84 <__aeabi_dsub+0x108>
 8000d5e:	464b      	mov	r3, r9
 8000d60:	464a      	mov	r2, r9
 8000d62:	08e4      	lsrs	r4, r4, #3
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	4323      	orrs	r3, r4
 8000d68:	08d4      	lsrs	r4, r2, #3
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	4919      	ldr	r1, [pc, #100]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000d6e:	428a      	cmp	r2, r1
 8000d70:	d00e      	beq.n	8000d90 <__aeabi_dsub+0x314>
 8000d72:	0324      	lsls	r4, r4, #12
 8000d74:	0552      	lsls	r2, r2, #21
 8000d76:	0b24      	lsrs	r4, r4, #12
 8000d78:	0d52      	lsrs	r2, r2, #21
 8000d7a:	e722      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	2400      	movs	r4, #0
 8000d80:	2300      	movs	r3, #0
 8000d82:	e71e      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	4662      	mov	r2, ip
 8000d88:	0752      	lsls	r2, r2, #29
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	08d4      	lsrs	r4, r2, #3
 8000d90:	001a      	movs	r2, r3
 8000d92:	4322      	orrs	r2, r4
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dsub+0x31c>
 8000d96:	e1fc      	b.n	8001192 <__aeabi_dsub+0x716>
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	0312      	lsls	r2, r2, #12
 8000d9c:	4314      	orrs	r4, r2
 8000d9e:	0324      	lsls	r4, r4, #12
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	e70d      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000da6:	0020      	movs	r0, r4
 8000da8:	f000 fa94 	bl	80012d4 <__clzsi2>
 8000dac:	0001      	movs	r1, r0
 8000dae:	3118      	adds	r1, #24
 8000db0:	291f      	cmp	r1, #31
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dsub+0x33a>
 8000db4:	e6c4      	b.n	8000b40 <__aeabi_dsub+0xc4>
 8000db6:	3808      	subs	r0, #8
 8000db8:	4084      	lsls	r4, r0
 8000dba:	4643      	mov	r3, r8
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	4588      	cmp	r8, r1
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_dsub+0x34a>
 8000dc4:	e6c8      	b.n	8000b58 <__aeabi_dsub+0xdc>
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__aeabi_dsub+0x35c>)
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	4010      	ands	r0, r2
 8000dcc:	4698      	mov	r8, r3
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e6d6      	b.n	8000b80 <__aeabi_dsub+0x104>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	000007ff 	.word	0x000007ff
 8000dd8:	ff7fffff 	.word	0xff7fffff
 8000ddc:	fffff801 	.word	0xfffff801
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	430f      	orrs	r7, r1
 8000de6:	1e7a      	subs	r2, r7, #1
 8000de8:	4197      	sbcs	r7, r2
 8000dea:	e691      	b.n	8000b10 <__aeabi_dsub+0x94>
 8000dec:	4661      	mov	r1, ip
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	0749      	lsls	r1, r1, #29
 8000df2:	430b      	orrs	r3, r1
 8000df4:	4661      	mov	r1, ip
 8000df6:	08cc      	lsrs	r4, r1, #3
 8000df8:	e7b8      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	4cd3      	ldr	r4, [pc, #844]	; (800114c <__aeabi_dsub+0x6d0>)
 8000dfe:	3001      	adds	r0, #1
 8000e00:	4220      	tst	r0, r4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dsub+0x38a>
 8000e04:	e0a2      	b.n	8000f4c <__aeabi_dsub+0x4d0>
 8000e06:	4640      	mov	r0, r8
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_dsub+0x392>
 8000e0c:	e101      	b.n	8001012 <__aeabi_dsub+0x596>
 8000e0e:	4660      	mov	r0, ip
 8000e10:	4318      	orrs	r0, r3
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dsub+0x39a>
 8000e14:	e15e      	b.n	80010d4 <__aeabi_dsub+0x658>
 8000e16:	0008      	movs	r0, r1
 8000e18:	4338      	orrs	r0, r7
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_dsub+0x3a2>
 8000e1c:	e15f      	b.n	80010de <__aeabi_dsub+0x662>
 8000e1e:	4661      	mov	r1, ip
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	0749      	lsls	r1, r1, #29
 8000e24:	430b      	orrs	r3, r1
 8000e26:	4661      	mov	r1, ip
 8000e28:	08cc      	lsrs	r4, r1, #3
 8000e2a:	e7a2      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000e2c:	4dc8      	ldr	r5, [pc, #800]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000e2e:	42a8      	cmp	r0, r5
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dsub+0x3b8>
 8000e32:	e0cf      	b.n	8000fd4 <__aeabi_dsub+0x558>
 8000e34:	2580      	movs	r5, #128	; 0x80
 8000e36:	4664      	mov	r4, ip
 8000e38:	042d      	lsls	r5, r5, #16
 8000e3a:	432c      	orrs	r4, r5
 8000e3c:	46a4      	mov	ip, r4
 8000e3e:	2a38      	cmp	r2, #56	; 0x38
 8000e40:	dc56      	bgt.n	8000ef0 <__aeabi_dsub+0x474>
 8000e42:	2a1f      	cmp	r2, #31
 8000e44:	dd00      	ble.n	8000e48 <__aeabi_dsub+0x3cc>
 8000e46:	e0d1      	b.n	8000fec <__aeabi_dsub+0x570>
 8000e48:	2520      	movs	r5, #32
 8000e4a:	001e      	movs	r6, r3
 8000e4c:	1aad      	subs	r5, r5, r2
 8000e4e:	4664      	mov	r4, ip
 8000e50:	40ab      	lsls	r3, r5
 8000e52:	40ac      	lsls	r4, r5
 8000e54:	40d6      	lsrs	r6, r2
 8000e56:	1e5d      	subs	r5, r3, #1
 8000e58:	41ab      	sbcs	r3, r5
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	4664      	mov	r4, ip
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	1b09      	subs	r1, r1, r4
 8000e64:	e049      	b.n	8000efa <__aeabi_dsub+0x47e>
 8000e66:	4660      	mov	r0, ip
 8000e68:	1bdc      	subs	r4, r3, r7
 8000e6a:	1a46      	subs	r6, r0, r1
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	4180      	sbcs	r0, r0
 8000e70:	4240      	negs	r0, r0
 8000e72:	4681      	mov	r9, r0
 8000e74:	0030      	movs	r0, r6
 8000e76:	464e      	mov	r6, r9
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	0200      	lsls	r0, r0, #8
 8000e7e:	d476      	bmi.n	8000f6e <__aeabi_dsub+0x4f2>
 8000e80:	464b      	mov	r3, r9
 8000e82:	4323      	orrs	r3, r4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_dsub+0x40c>
 8000e86:	e652      	b.n	8000b2e <__aeabi_dsub+0xb2>
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e771      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000e8e:	4339      	orrs	r1, r7
 8000e90:	000c      	movs	r4, r1
 8000e92:	1e62      	subs	r2, r4, #1
 8000e94:	4194      	sbcs	r4, r2
 8000e96:	18e4      	adds	r4, r4, r3
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	4463      	add	r3, ip
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	d400      	bmi.n	8000eaa <__aeabi_dsub+0x42e>
 8000ea8:	e756      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	469c      	mov	ip, r3
 8000eae:	4ba8      	ldr	r3, [pc, #672]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000eb0:	44e0      	add	r8, ip
 8000eb2:	4598      	cmp	r8, r3
 8000eb4:	d038      	beq.n	8000f28 <__aeabi_dsub+0x4ac>
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	48a6      	ldr	r0, [pc, #664]	; (8001154 <__aeabi_dsub+0x6d8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4003      	ands	r3, r0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	0863      	lsrs	r3, r4, #1
 8000ec2:	4014      	ands	r4, r2
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	07c3      	lsls	r3, r0, #31
 8000ec8:	431c      	orrs	r4, r3
 8000eca:	0843      	lsrs	r3, r0, #1
 8000ecc:	4699      	mov	r9, r3
 8000ece:	e657      	b.n	8000b80 <__aeabi_dsub+0x104>
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	000e      	movs	r6, r1
 8000ed4:	3820      	subs	r0, #32
 8000ed6:	40c6      	lsrs	r6, r0
 8000ed8:	2a20      	cmp	r2, #32
 8000eda:	d004      	beq.n	8000ee6 <__aeabi_dsub+0x46a>
 8000edc:	2040      	movs	r0, #64	; 0x40
 8000ede:	1a82      	subs	r2, r0, r2
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	430f      	orrs	r7, r1
 8000ee4:	46b9      	mov	r9, r7
 8000ee6:	464f      	mov	r7, r9
 8000ee8:	1e7a      	subs	r2, r7, #1
 8000eea:	4197      	sbcs	r7, r2
 8000eec:	4337      	orrs	r7, r6
 8000eee:	e60f      	b.n	8000b10 <__aeabi_dsub+0x94>
 8000ef0:	4662      	mov	r2, ip
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4193      	sbcs	r3, r2
 8000efa:	1afc      	subs	r4, r7, r3
 8000efc:	42a7      	cmp	r7, r4
 8000efe:	41bf      	sbcs	r7, r7
 8000f00:	427f      	negs	r7, r7
 8000f02:	1bcb      	subs	r3, r1, r7
 8000f04:	4699      	mov	r9, r3
 8000f06:	465d      	mov	r5, fp
 8000f08:	4680      	mov	r8, r0
 8000f0a:	e608      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0x498>
 8000f12:	e0be      	b.n	8001092 <__aeabi_dsub+0x616>
 8000f14:	1e56      	subs	r6, r2, #1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x4a0>
 8000f1a:	e109      	b.n	8001130 <__aeabi_dsub+0x6b4>
 8000f1c:	4c8c      	ldr	r4, [pc, #560]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000f1e:	42a2      	cmp	r2, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dsub+0x4a8>
 8000f22:	e119      	b.n	8001158 <__aeabi_dsub+0x6dc>
 8000f24:	0032      	movs	r2, r6
 8000f26:	e6c1      	b.n	8000cac <__aeabi_dsub+0x230>
 8000f28:	4642      	mov	r2, r8
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e648      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000f30:	2020      	movs	r0, #32
 8000f32:	000c      	movs	r4, r1
 8000f34:	1a80      	subs	r0, r0, r2
 8000f36:	003e      	movs	r6, r7
 8000f38:	4087      	lsls	r7, r0
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	40d6      	lsrs	r6, r2
 8000f3e:	1e78      	subs	r0, r7, #1
 8000f40:	4187      	sbcs	r7, r0
 8000f42:	40d1      	lsrs	r1, r2
 8000f44:	4334      	orrs	r4, r6
 8000f46:	433c      	orrs	r4, r7
 8000f48:	448c      	add	ip, r1
 8000f4a:	e7a4      	b.n	8000e96 <__aeabi_dsub+0x41a>
 8000f4c:	4a80      	ldr	r2, [pc, #512]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dsub+0x4d8>
 8000f52:	e0e9      	b.n	8001128 <__aeabi_dsub+0x6ac>
 8000f54:	19df      	adds	r7, r3, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	419b      	sbcs	r3, r3
 8000f5a:	4461      	add	r1, ip
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	18c9      	adds	r1, r1, r3
 8000f60:	07cc      	lsls	r4, r1, #31
 8000f62:	087f      	lsrs	r7, r7, #1
 8000f64:	084b      	lsrs	r3, r1, #1
 8000f66:	4699      	mov	r9, r3
 8000f68:	4680      	mov	r8, r0
 8000f6a:	433c      	orrs	r4, r7
 8000f6c:	e6f4      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000f6e:	1afc      	subs	r4, r7, r3
 8000f70:	42a7      	cmp	r7, r4
 8000f72:	41bf      	sbcs	r7, r7
 8000f74:	4663      	mov	r3, ip
 8000f76:	427f      	negs	r7, r7
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	1bcb      	subs	r3, r1, r7
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	465d      	mov	r5, fp
 8000f80:	e5d5      	b.n	8000b2e <__aeabi_dsub+0xb2>
 8000f82:	08ff      	lsrs	r7, r7, #3
 8000f84:	074b      	lsls	r3, r1, #29
 8000f86:	465d      	mov	r5, fp
 8000f88:	433b      	orrs	r3, r7
 8000f8a:	08cc      	lsrs	r4, r1, #3
 8000f8c:	e6ee      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 8000f8e:	4662      	mov	r2, ip
 8000f90:	431a      	orrs	r2, r3
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dsub+0x51a>
 8000f94:	e082      	b.n	800109c <__aeabi_dsub+0x620>
 8000f96:	000b      	movs	r3, r1
 8000f98:	433b      	orrs	r3, r7
 8000f9a:	d11b      	bne.n	8000fd4 <__aeabi_dsub+0x558>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	e6f9      	b.n	8000d98 <__aeabi_dsub+0x31c>
 8000fa4:	19dc      	adds	r4, r3, r7
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	419b      	sbcs	r3, r3
 8000faa:	4461      	add	r1, ip
 8000fac:	4689      	mov	r9, r1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	4499      	add	r9, r3
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	d444      	bmi.n	8001042 <__aeabi_dsub+0x5c6>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4698      	mov	r8, r3
 8000fbc:	e6cc      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000fbe:	1bdc      	subs	r4, r3, r7
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	1a51      	subs	r1, r2, r1
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	4699      	mov	r9, r3
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	e5a4      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8000fd4:	08ff      	lsrs	r7, r7, #3
 8000fd6:	074b      	lsls	r3, r1, #29
 8000fd8:	465d      	mov	r5, fp
 8000fda:	433b      	orrs	r3, r7
 8000fdc:	08cc      	lsrs	r4, r1, #3
 8000fde:	e6d7      	b.n	8000d90 <__aeabi_dsub+0x314>
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	0014      	movs	r4, r2
 8000fe6:	1e63      	subs	r3, r4, #1
 8000fe8:	419c      	sbcs	r4, r3
 8000fea:	e679      	b.n	8000ce0 <__aeabi_dsub+0x264>
 8000fec:	0015      	movs	r5, r2
 8000fee:	4664      	mov	r4, ip
 8000ff0:	3d20      	subs	r5, #32
 8000ff2:	40ec      	lsrs	r4, r5
 8000ff4:	46a0      	mov	r8, r4
 8000ff6:	2a20      	cmp	r2, #32
 8000ff8:	d005      	beq.n	8001006 <__aeabi_dsub+0x58a>
 8000ffa:	2540      	movs	r5, #64	; 0x40
 8000ffc:	4664      	mov	r4, ip
 8000ffe:	1aaa      	subs	r2, r5, r2
 8001000:	4094      	lsls	r4, r2
 8001002:	4323      	orrs	r3, r4
 8001004:	469a      	mov	sl, r3
 8001006:	4654      	mov	r4, sl
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	419c      	sbcs	r4, r3
 800100c:	4643      	mov	r3, r8
 800100e:	4323      	orrs	r3, r4
 8001010:	e773      	b.n	8000efa <__aeabi_dsub+0x47e>
 8001012:	4662      	mov	r2, ip
 8001014:	431a      	orrs	r2, r3
 8001016:	d023      	beq.n	8001060 <__aeabi_dsub+0x5e4>
 8001018:	000a      	movs	r2, r1
 800101a:	433a      	orrs	r2, r7
 800101c:	d000      	beq.n	8001020 <__aeabi_dsub+0x5a4>
 800101e:	e0a0      	b.n	8001162 <__aeabi_dsub+0x6e6>
 8001020:	4662      	mov	r2, ip
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	0752      	lsls	r2, r2, #29
 8001026:	4313      	orrs	r3, r2
 8001028:	4662      	mov	r2, ip
 800102a:	08d4      	lsrs	r4, r2, #3
 800102c:	e6b0      	b.n	8000d90 <__aeabi_dsub+0x314>
 800102e:	000b      	movs	r3, r1
 8001030:	433b      	orrs	r3, r7
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x5ba>
 8001034:	e728      	b.n	8000e88 <__aeabi_dsub+0x40c>
 8001036:	08ff      	lsrs	r7, r7, #3
 8001038:	074b      	lsls	r3, r1, #29
 800103a:	465d      	mov	r5, fp
 800103c:	433b      	orrs	r3, r7
 800103e:	08cc      	lsrs	r4, r1, #3
 8001040:	e697      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8001042:	2302      	movs	r3, #2
 8001044:	4698      	mov	r8, r3
 8001046:	e736      	b.n	8000eb6 <__aeabi_dsub+0x43a>
 8001048:	1afc      	subs	r4, r7, r3
 800104a:	42a7      	cmp	r7, r4
 800104c:	41bf      	sbcs	r7, r7
 800104e:	4663      	mov	r3, ip
 8001050:	427f      	negs	r7, r7
 8001052:	1ac9      	subs	r1, r1, r3
 8001054:	1bcb      	subs	r3, r1, r7
 8001056:	4699      	mov	r9, r3
 8001058:	2301      	movs	r3, #1
 800105a:	465d      	mov	r5, fp
 800105c:	4698      	mov	r8, r3
 800105e:	e55e      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8001060:	074b      	lsls	r3, r1, #29
 8001062:	08ff      	lsrs	r7, r7, #3
 8001064:	433b      	orrs	r3, r7
 8001066:	08cc      	lsrs	r4, r1, #3
 8001068:	e692      	b.n	8000d90 <__aeabi_dsub+0x314>
 800106a:	1bdc      	subs	r4, r3, r7
 800106c:	4660      	mov	r0, ip
 800106e:	42a3      	cmp	r3, r4
 8001070:	41b6      	sbcs	r6, r6
 8001072:	1a40      	subs	r0, r0, r1
 8001074:	4276      	negs	r6, r6
 8001076:	1b80      	subs	r0, r0, r6
 8001078:	4681      	mov	r9, r0
 800107a:	0200      	lsls	r0, r0, #8
 800107c:	d560      	bpl.n	8001140 <__aeabi_dsub+0x6c4>
 800107e:	1afc      	subs	r4, r7, r3
 8001080:	42a7      	cmp	r7, r4
 8001082:	41bf      	sbcs	r7, r7
 8001084:	4663      	mov	r3, ip
 8001086:	427f      	negs	r7, r7
 8001088:	1ac9      	subs	r1, r1, r3
 800108a:	1bcb      	subs	r3, r1, r7
 800108c:	4699      	mov	r9, r3
 800108e:	465d      	mov	r5, fp
 8001090:	e576      	b.n	8000b80 <__aeabi_dsub+0x104>
 8001092:	08ff      	lsrs	r7, r7, #3
 8001094:	074b      	lsls	r3, r1, #29
 8001096:	433b      	orrs	r3, r7
 8001098:	08cc      	lsrs	r4, r1, #3
 800109a:	e667      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 800109c:	000a      	movs	r2, r1
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	433a      	orrs	r2, r7
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dsub+0x62a>
 80010a4:	e66f      	b.n	8000d86 <__aeabi_dsub+0x30a>
 80010a6:	4662      	mov	r2, ip
 80010a8:	0752      	lsls	r2, r2, #29
 80010aa:	4313      	orrs	r3, r2
 80010ac:	4662      	mov	r2, ip
 80010ae:	08d4      	lsrs	r4, r2, #3
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0312      	lsls	r2, r2, #12
 80010b4:	4214      	tst	r4, r2
 80010b6:	d007      	beq.n	80010c8 <__aeabi_dsub+0x64c>
 80010b8:	08c8      	lsrs	r0, r1, #3
 80010ba:	4210      	tst	r0, r2
 80010bc:	d104      	bne.n	80010c8 <__aeabi_dsub+0x64c>
 80010be:	465d      	mov	r5, fp
 80010c0:	0004      	movs	r4, r0
 80010c2:	08fb      	lsrs	r3, r7, #3
 80010c4:	0749      	lsls	r1, r1, #29
 80010c6:	430b      	orrs	r3, r1
 80010c8:	0f5a      	lsrs	r2, r3, #29
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	0752      	lsls	r2, r2, #29
 80010d0:	4313      	orrs	r3, r2
 80010d2:	e65d      	b.n	8000d90 <__aeabi_dsub+0x314>
 80010d4:	074b      	lsls	r3, r1, #29
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	433b      	orrs	r3, r7
 80010da:	08cc      	lsrs	r4, r1, #3
 80010dc:	e649      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 80010de:	19dc      	adds	r4, r3, r7
 80010e0:	429c      	cmp	r4, r3
 80010e2:	419b      	sbcs	r3, r3
 80010e4:	4461      	add	r1, ip
 80010e6:	4689      	mov	r9, r1
 80010e8:	425b      	negs	r3, r3
 80010ea:	4499      	add	r9, r3
 80010ec:	464b      	mov	r3, r9
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_dsub+0x678>
 80010f2:	e631      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 80010f4:	464a      	mov	r2, r9
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <__aeabi_dsub+0x6d8>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	4691      	mov	r9, r2
 80010fe:	4698      	mov	r8, r3
 8001100:	e62a      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8001102:	0016      	movs	r6, r2
 8001104:	4664      	mov	r4, ip
 8001106:	3e20      	subs	r6, #32
 8001108:	40f4      	lsrs	r4, r6
 800110a:	46a0      	mov	r8, r4
 800110c:	2a20      	cmp	r2, #32
 800110e:	d005      	beq.n	800111c <__aeabi_dsub+0x6a0>
 8001110:	2640      	movs	r6, #64	; 0x40
 8001112:	4664      	mov	r4, ip
 8001114:	1ab2      	subs	r2, r6, r2
 8001116:	4094      	lsls	r4, r2
 8001118:	4323      	orrs	r3, r4
 800111a:	469a      	mov	sl, r3
 800111c:	4654      	mov	r4, sl
 800111e:	1e63      	subs	r3, r4, #1
 8001120:	419c      	sbcs	r4, r3
 8001122:	4643      	mov	r3, r8
 8001124:	431c      	orrs	r4, r3
 8001126:	e5db      	b.n	8000ce0 <__aeabi_dsub+0x264>
 8001128:	0002      	movs	r2, r0
 800112a:	2400      	movs	r4, #0
 800112c:	2300      	movs	r3, #0
 800112e:	e548      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8001130:	19dc      	adds	r4, r3, r7
 8001132:	42bc      	cmp	r4, r7
 8001134:	41bf      	sbcs	r7, r7
 8001136:	4461      	add	r1, ip
 8001138:	4689      	mov	r9, r1
 800113a:	427f      	negs	r7, r7
 800113c:	44b9      	add	r9, r7
 800113e:	e738      	b.n	8000fb2 <__aeabi_dsub+0x536>
 8001140:	464b      	mov	r3, r9
 8001142:	4323      	orrs	r3, r4
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x6cc>
 8001146:	e69f      	b.n	8000e88 <__aeabi_dsub+0x40c>
 8001148:	e606      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007fe 	.word	0x000007fe
 8001150:	000007ff 	.word	0x000007ff
 8001154:	ff7fffff 	.word	0xff7fffff
 8001158:	08ff      	lsrs	r7, r7, #3
 800115a:	074b      	lsls	r3, r1, #29
 800115c:	433b      	orrs	r3, r7
 800115e:	08cc      	lsrs	r4, r1, #3
 8001160:	e616      	b.n	8000d90 <__aeabi_dsub+0x314>
 8001162:	4662      	mov	r2, ip
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	0752      	lsls	r2, r2, #29
 8001168:	4313      	orrs	r3, r2
 800116a:	4662      	mov	r2, ip
 800116c:	08d4      	lsrs	r4, r2, #3
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0312      	lsls	r2, r2, #12
 8001172:	4214      	tst	r4, r2
 8001174:	d007      	beq.n	8001186 <__aeabi_dsub+0x70a>
 8001176:	08c8      	lsrs	r0, r1, #3
 8001178:	4210      	tst	r0, r2
 800117a:	d104      	bne.n	8001186 <__aeabi_dsub+0x70a>
 800117c:	465d      	mov	r5, fp
 800117e:	0004      	movs	r4, r0
 8001180:	08fb      	lsrs	r3, r7, #3
 8001182:	0749      	lsls	r1, r1, #29
 8001184:	430b      	orrs	r3, r1
 8001186:	0f5a      	lsrs	r2, r3, #29
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	0752      	lsls	r2, r2, #29
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	4313      	orrs	r3, r2
 8001190:	e5fe      	b.n	8000d90 <__aeabi_dsub+0x314>
 8001192:	2300      	movs	r3, #0
 8001194:	4a01      	ldr	r2, [pc, #4]	; (800119c <__aeabi_dsub+0x720>)
 8001196:	001c      	movs	r4, r3
 8001198:	e513      	b.n	8000bc2 <__aeabi_dsub+0x146>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff

080011a0 <__aeabi_d2iz>:
 80011a0:	000a      	movs	r2, r1
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	4c13      	ldr	r4, [pc, #76]	; (80011f4 <__aeabi_d2iz+0x54>)
 80011a6:	0053      	lsls	r3, r2, #1
 80011a8:	0309      	lsls	r1, r1, #12
 80011aa:	0005      	movs	r5, r0
 80011ac:	0b09      	lsrs	r1, r1, #12
 80011ae:	2000      	movs	r0, #0
 80011b0:	0d5b      	lsrs	r3, r3, #21
 80011b2:	0fd2      	lsrs	r2, r2, #31
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	dd04      	ble.n	80011c2 <__aeabi_d2iz+0x22>
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <__aeabi_d2iz+0x58>)
 80011ba:	4283      	cmp	r3, r0
 80011bc:	dd02      	ble.n	80011c4 <__aeabi_d2iz+0x24>
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <__aeabi_d2iz+0x5c>)
 80011c0:	18d0      	adds	r0, r2, r3
 80011c2:	bd30      	pop	{r4, r5, pc}
 80011c4:	2080      	movs	r0, #128	; 0x80
 80011c6:	0340      	lsls	r0, r0, #13
 80011c8:	4301      	orrs	r1, r0
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <__aeabi_d2iz+0x60>)
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	281f      	cmp	r0, #31
 80011d0:	dd08      	ble.n	80011e4 <__aeabi_d2iz+0x44>
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <__aeabi_d2iz+0x64>)
 80011d4:	1ac3      	subs	r3, r0, r3
 80011d6:	40d9      	lsrs	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	4258      	negs	r0, r3
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d1f0      	bne.n	80011c2 <__aeabi_d2iz+0x22>
 80011e0:	0018      	movs	r0, r3
 80011e2:	e7ee      	b.n	80011c2 <__aeabi_d2iz+0x22>
 80011e4:	4c08      	ldr	r4, [pc, #32]	; (8001208 <__aeabi_d2iz+0x68>)
 80011e6:	40c5      	lsrs	r5, r0
 80011e8:	46a4      	mov	ip, r4
 80011ea:	4463      	add	r3, ip
 80011ec:	4099      	lsls	r1, r3
 80011ee:	000b      	movs	r3, r1
 80011f0:	432b      	orrs	r3, r5
 80011f2:	e7f2      	b.n	80011da <__aeabi_d2iz+0x3a>
 80011f4:	000003fe 	.word	0x000003fe
 80011f8:	0000041d 	.word	0x0000041d
 80011fc:	7fffffff 	.word	0x7fffffff
 8001200:	00000433 	.word	0x00000433
 8001204:	00000413 	.word	0x00000413
 8001208:	fffffbed 	.word	0xfffffbed

0800120c <__aeabi_ui2d>:
 800120c:	b510      	push	{r4, lr}
 800120e:	1e04      	subs	r4, r0, #0
 8001210:	d010      	beq.n	8001234 <__aeabi_ui2d+0x28>
 8001212:	f000 f85f 	bl	80012d4 <__clzsi2>
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <__aeabi_ui2d+0x48>)
 8001218:	1a1b      	subs	r3, r3, r0
 800121a:	280a      	cmp	r0, #10
 800121c:	dc11      	bgt.n	8001242 <__aeabi_ui2d+0x36>
 800121e:	220b      	movs	r2, #11
 8001220:	0021      	movs	r1, r4
 8001222:	1a12      	subs	r2, r2, r0
 8001224:	40d1      	lsrs	r1, r2
 8001226:	3015      	adds	r0, #21
 8001228:	030a      	lsls	r2, r1, #12
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	4084      	lsls	r4, r0
 800122e:	0b12      	lsrs	r2, r2, #12
 8001230:	0d5b      	lsrs	r3, r3, #21
 8001232:	e001      	b.n	8001238 <__aeabi_ui2d+0x2c>
 8001234:	2300      	movs	r3, #0
 8001236:	2200      	movs	r2, #0
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	4313      	orrs	r3, r2
 800123c:	0020      	movs	r0, r4
 800123e:	0019      	movs	r1, r3
 8001240:	bd10      	pop	{r4, pc}
 8001242:	0022      	movs	r2, r4
 8001244:	380b      	subs	r0, #11
 8001246:	4082      	lsls	r2, r0
 8001248:	055b      	lsls	r3, r3, #21
 800124a:	0312      	lsls	r2, r2, #12
 800124c:	2400      	movs	r4, #0
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	0d5b      	lsrs	r3, r3, #21
 8001252:	e7f1      	b.n	8001238 <__aeabi_ui2d+0x2c>
 8001254:	0000041e 	.word	0x0000041e

08001258 <__aeabi_cdrcmple>:
 8001258:	4684      	mov	ip, r0
 800125a:	0010      	movs	r0, r2
 800125c:	4662      	mov	r2, ip
 800125e:	468c      	mov	ip, r1
 8001260:	0019      	movs	r1, r3
 8001262:	4663      	mov	r3, ip
 8001264:	e000      	b.n	8001268 <__aeabi_cdcmpeq>
 8001266:	46c0      	nop			; (mov r8, r8)

08001268 <__aeabi_cdcmpeq>:
 8001268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800126a:	f000 f905 	bl	8001478 <__ledf2>
 800126e:	2800      	cmp	r0, #0
 8001270:	d401      	bmi.n	8001276 <__aeabi_cdcmpeq+0xe>
 8001272:	2100      	movs	r1, #0
 8001274:	42c8      	cmn	r0, r1
 8001276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001278 <__aeabi_dcmpeq>:
 8001278:	b510      	push	{r4, lr}
 800127a:	f000 f855 	bl	8001328 <__eqdf2>
 800127e:	4240      	negs	r0, r0
 8001280:	3001      	adds	r0, #1
 8001282:	bd10      	pop	{r4, pc}

08001284 <__aeabi_dcmplt>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f000 f8f7 	bl	8001478 <__ledf2>
 800128a:	2800      	cmp	r0, #0
 800128c:	db01      	blt.n	8001292 <__aeabi_dcmplt+0xe>
 800128e:	2000      	movs	r0, #0
 8001290:	bd10      	pop	{r4, pc}
 8001292:	2001      	movs	r0, #1
 8001294:	bd10      	pop	{r4, pc}
 8001296:	46c0      	nop			; (mov r8, r8)

08001298 <__aeabi_dcmple>:
 8001298:	b510      	push	{r4, lr}
 800129a:	f000 f8ed 	bl	8001478 <__ledf2>
 800129e:	2800      	cmp	r0, #0
 80012a0:	dd01      	ble.n	80012a6 <__aeabi_dcmple+0xe>
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	2001      	movs	r0, #1
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <__aeabi_dcmpgt>:
 80012ac:	b510      	push	{r4, lr}
 80012ae:	f000 f87d 	bl	80013ac <__gedf2>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	dc01      	bgt.n	80012ba <__aeabi_dcmpgt+0xe>
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	2001      	movs	r0, #1
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <__aeabi_dcmpge>:
 80012c0:	b510      	push	{r4, lr}
 80012c2:	f000 f873 	bl	80013ac <__gedf2>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	da01      	bge.n	80012ce <__aeabi_dcmpge+0xe>
 80012ca:	2000      	movs	r0, #0
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	2001      	movs	r0, #1
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)

080012d4 <__clzsi2>:
 80012d4:	211c      	movs	r1, #28
 80012d6:	2301      	movs	r3, #1
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	4298      	cmp	r0, r3
 80012dc:	d301      	bcc.n	80012e2 <__clzsi2+0xe>
 80012de:	0c00      	lsrs	r0, r0, #16
 80012e0:	3910      	subs	r1, #16
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d301      	bcc.n	80012ec <__clzsi2+0x18>
 80012e8:	0a00      	lsrs	r0, r0, #8
 80012ea:	3908      	subs	r1, #8
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d301      	bcc.n	80012f6 <__clzsi2+0x22>
 80012f2:	0900      	lsrs	r0, r0, #4
 80012f4:	3904      	subs	r1, #4
 80012f6:	a202      	add	r2, pc, #8	; (adr r2, 8001300 <__clzsi2+0x2c>)
 80012f8:	5c10      	ldrb	r0, [r2, r0]
 80012fa:	1840      	adds	r0, r0, r1
 80012fc:	4770      	bx	lr
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	02020304 	.word	0x02020304
 8001304:	01010101 	.word	0x01010101
	...

08001310 <__clzdi2>:
 8001310:	b510      	push	{r4, lr}
 8001312:	2900      	cmp	r1, #0
 8001314:	d103      	bne.n	800131e <__clzdi2+0xe>
 8001316:	f7ff ffdd 	bl	80012d4 <__clzsi2>
 800131a:	3020      	adds	r0, #32
 800131c:	e002      	b.n	8001324 <__clzdi2+0x14>
 800131e:	0008      	movs	r0, r1
 8001320:	f7ff ffd8 	bl	80012d4 <__clzsi2>
 8001324:	bd10      	pop	{r4, pc}
 8001326:	46c0      	nop			; (mov r8, r8)

08001328 <__eqdf2>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	464e      	mov	r6, r9
 800132c:	4645      	mov	r5, r8
 800132e:	46de      	mov	lr, fp
 8001330:	4657      	mov	r7, sl
 8001332:	4690      	mov	r8, r2
 8001334:	b5e0      	push	{r5, r6, r7, lr}
 8001336:	0017      	movs	r7, r2
 8001338:	031a      	lsls	r2, r3, #12
 800133a:	0b12      	lsrs	r2, r2, #12
 800133c:	0005      	movs	r5, r0
 800133e:	4684      	mov	ip, r0
 8001340:	4819      	ldr	r0, [pc, #100]	; (80013a8 <__eqdf2+0x80>)
 8001342:	030e      	lsls	r6, r1, #12
 8001344:	004c      	lsls	r4, r1, #1
 8001346:	4691      	mov	r9, r2
 8001348:	005a      	lsls	r2, r3, #1
 800134a:	0fdb      	lsrs	r3, r3, #31
 800134c:	469b      	mov	fp, r3
 800134e:	0b36      	lsrs	r6, r6, #12
 8001350:	0d64      	lsrs	r4, r4, #21
 8001352:	0fc9      	lsrs	r1, r1, #31
 8001354:	0d52      	lsrs	r2, r2, #21
 8001356:	4284      	cmp	r4, r0
 8001358:	d019      	beq.n	800138e <__eqdf2+0x66>
 800135a:	4282      	cmp	r2, r0
 800135c:	d010      	beq.n	8001380 <__eqdf2+0x58>
 800135e:	2001      	movs	r0, #1
 8001360:	4294      	cmp	r4, r2
 8001362:	d10e      	bne.n	8001382 <__eqdf2+0x5a>
 8001364:	454e      	cmp	r6, r9
 8001366:	d10c      	bne.n	8001382 <__eqdf2+0x5a>
 8001368:	2001      	movs	r0, #1
 800136a:	45c4      	cmp	ip, r8
 800136c:	d109      	bne.n	8001382 <__eqdf2+0x5a>
 800136e:	4559      	cmp	r1, fp
 8001370:	d017      	beq.n	80013a2 <__eqdf2+0x7a>
 8001372:	2c00      	cmp	r4, #0
 8001374:	d105      	bne.n	8001382 <__eqdf2+0x5a>
 8001376:	0030      	movs	r0, r6
 8001378:	4328      	orrs	r0, r5
 800137a:	1e43      	subs	r3, r0, #1
 800137c:	4198      	sbcs	r0, r3
 800137e:	e000      	b.n	8001382 <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	bcf0      	pop	{r4, r5, r6, r7}
 8001384:	46bb      	mov	fp, r7
 8001386:	46b2      	mov	sl, r6
 8001388:	46a9      	mov	r9, r5
 800138a:	46a0      	mov	r8, r4
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	0033      	movs	r3, r6
 8001390:	2001      	movs	r0, #1
 8001392:	432b      	orrs	r3, r5
 8001394:	d1f5      	bne.n	8001382 <__eqdf2+0x5a>
 8001396:	42a2      	cmp	r2, r4
 8001398:	d1f3      	bne.n	8001382 <__eqdf2+0x5a>
 800139a:	464b      	mov	r3, r9
 800139c:	433b      	orrs	r3, r7
 800139e:	d1f0      	bne.n	8001382 <__eqdf2+0x5a>
 80013a0:	e7e2      	b.n	8001368 <__eqdf2+0x40>
 80013a2:	2000      	movs	r0, #0
 80013a4:	e7ed      	b.n	8001382 <__eqdf2+0x5a>
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	000007ff 	.word	0x000007ff

080013ac <__gedf2>:
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	4647      	mov	r7, r8
 80013b0:	46ce      	mov	lr, r9
 80013b2:	0004      	movs	r4, r0
 80013b4:	0018      	movs	r0, r3
 80013b6:	0016      	movs	r6, r2
 80013b8:	031b      	lsls	r3, r3, #12
 80013ba:	0b1b      	lsrs	r3, r3, #12
 80013bc:	4d2d      	ldr	r5, [pc, #180]	; (8001474 <__gedf2+0xc8>)
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	4699      	mov	r9, r3
 80013c2:	b580      	push	{r7, lr}
 80013c4:	0043      	lsls	r3, r0, #1
 80013c6:	030f      	lsls	r7, r1, #12
 80013c8:	46a4      	mov	ip, r4
 80013ca:	46b0      	mov	r8, r6
 80013cc:	0b3f      	lsrs	r7, r7, #12
 80013ce:	0d52      	lsrs	r2, r2, #21
 80013d0:	0fc9      	lsrs	r1, r1, #31
 80013d2:	0d5b      	lsrs	r3, r3, #21
 80013d4:	0fc0      	lsrs	r0, r0, #31
 80013d6:	42aa      	cmp	r2, r5
 80013d8:	d021      	beq.n	800141e <__gedf2+0x72>
 80013da:	42ab      	cmp	r3, r5
 80013dc:	d013      	beq.n	8001406 <__gedf2+0x5a>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d122      	bne.n	8001428 <__gedf2+0x7c>
 80013e2:	433c      	orrs	r4, r7
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <__gedf2+0x42>
 80013e8:	464d      	mov	r5, r9
 80013ea:	432e      	orrs	r6, r5
 80013ec:	d022      	beq.n	8001434 <__gedf2+0x88>
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d010      	beq.n	8001414 <__gedf2+0x68>
 80013f2:	4281      	cmp	r1, r0
 80013f4:	d022      	beq.n	800143c <__gedf2+0x90>
 80013f6:	2002      	movs	r0, #2
 80013f8:	3901      	subs	r1, #1
 80013fa:	4008      	ands	r0, r1
 80013fc:	3801      	subs	r0, #1
 80013fe:	bcc0      	pop	{r6, r7}
 8001400:	46b9      	mov	r9, r7
 8001402:	46b0      	mov	r8, r6
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	464d      	mov	r5, r9
 8001408:	432e      	orrs	r6, r5
 800140a:	d129      	bne.n	8001460 <__gedf2+0xb4>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d1f0      	bne.n	80013f2 <__gedf2+0x46>
 8001410:	433c      	orrs	r4, r7
 8001412:	d1ee      	bne.n	80013f2 <__gedf2+0x46>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1f2      	bne.n	80013fe <__gedf2+0x52>
 8001418:	2001      	movs	r0, #1
 800141a:	4240      	negs	r0, r0
 800141c:	e7ef      	b.n	80013fe <__gedf2+0x52>
 800141e:	003d      	movs	r5, r7
 8001420:	4325      	orrs	r5, r4
 8001422:	d11d      	bne.n	8001460 <__gedf2+0xb4>
 8001424:	4293      	cmp	r3, r2
 8001426:	d0ee      	beq.n	8001406 <__gedf2+0x5a>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e2      	bne.n	80013f2 <__gedf2+0x46>
 800142c:	464c      	mov	r4, r9
 800142e:	4326      	orrs	r6, r4
 8001430:	d1df      	bne.n	80013f2 <__gedf2+0x46>
 8001432:	e7e0      	b.n	80013f6 <__gedf2+0x4a>
 8001434:	2000      	movs	r0, #0
 8001436:	2c00      	cmp	r4, #0
 8001438:	d0e1      	beq.n	80013fe <__gedf2+0x52>
 800143a:	e7dc      	b.n	80013f6 <__gedf2+0x4a>
 800143c:	429a      	cmp	r2, r3
 800143e:	dc0a      	bgt.n	8001456 <__gedf2+0xaa>
 8001440:	dbe8      	blt.n	8001414 <__gedf2+0x68>
 8001442:	454f      	cmp	r7, r9
 8001444:	d8d7      	bhi.n	80013f6 <__gedf2+0x4a>
 8001446:	d00e      	beq.n	8001466 <__gedf2+0xba>
 8001448:	2000      	movs	r0, #0
 800144a:	454f      	cmp	r7, r9
 800144c:	d2d7      	bcs.n	80013fe <__gedf2+0x52>
 800144e:	2900      	cmp	r1, #0
 8001450:	d0e2      	beq.n	8001418 <__gedf2+0x6c>
 8001452:	0008      	movs	r0, r1
 8001454:	e7d3      	b.n	80013fe <__gedf2+0x52>
 8001456:	4243      	negs	r3, r0
 8001458:	4158      	adcs	r0, r3
 800145a:	0040      	lsls	r0, r0, #1
 800145c:	3801      	subs	r0, #1
 800145e:	e7ce      	b.n	80013fe <__gedf2+0x52>
 8001460:	2002      	movs	r0, #2
 8001462:	4240      	negs	r0, r0
 8001464:	e7cb      	b.n	80013fe <__gedf2+0x52>
 8001466:	45c4      	cmp	ip, r8
 8001468:	d8c5      	bhi.n	80013f6 <__gedf2+0x4a>
 800146a:	2000      	movs	r0, #0
 800146c:	45c4      	cmp	ip, r8
 800146e:	d2c6      	bcs.n	80013fe <__gedf2+0x52>
 8001470:	e7ed      	b.n	800144e <__gedf2+0xa2>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	000007ff 	.word	0x000007ff

08001478 <__ledf2>:
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	4647      	mov	r7, r8
 800147c:	46ce      	mov	lr, r9
 800147e:	0004      	movs	r4, r0
 8001480:	0018      	movs	r0, r3
 8001482:	0016      	movs	r6, r2
 8001484:	031b      	lsls	r3, r3, #12
 8001486:	0b1b      	lsrs	r3, r3, #12
 8001488:	4d2c      	ldr	r5, [pc, #176]	; (800153c <__ledf2+0xc4>)
 800148a:	004a      	lsls	r2, r1, #1
 800148c:	4699      	mov	r9, r3
 800148e:	b580      	push	{r7, lr}
 8001490:	0043      	lsls	r3, r0, #1
 8001492:	030f      	lsls	r7, r1, #12
 8001494:	46a4      	mov	ip, r4
 8001496:	46b0      	mov	r8, r6
 8001498:	0b3f      	lsrs	r7, r7, #12
 800149a:	0d52      	lsrs	r2, r2, #21
 800149c:	0fc9      	lsrs	r1, r1, #31
 800149e:	0d5b      	lsrs	r3, r3, #21
 80014a0:	0fc0      	lsrs	r0, r0, #31
 80014a2:	42aa      	cmp	r2, r5
 80014a4:	d00d      	beq.n	80014c2 <__ledf2+0x4a>
 80014a6:	42ab      	cmp	r3, r5
 80014a8:	d010      	beq.n	80014cc <__ledf2+0x54>
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d127      	bne.n	80014fe <__ledf2+0x86>
 80014ae:	433c      	orrs	r4, r7
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d111      	bne.n	80014d8 <__ledf2+0x60>
 80014b4:	464d      	mov	r5, r9
 80014b6:	432e      	orrs	r6, r5
 80014b8:	d10e      	bne.n	80014d8 <__ledf2+0x60>
 80014ba:	2000      	movs	r0, #0
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d015      	beq.n	80014ec <__ledf2+0x74>
 80014c0:	e00e      	b.n	80014e0 <__ledf2+0x68>
 80014c2:	003d      	movs	r5, r7
 80014c4:	4325      	orrs	r5, r4
 80014c6:	d110      	bne.n	80014ea <__ledf2+0x72>
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d118      	bne.n	80014fe <__ledf2+0x86>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10b      	bne.n	80014ea <__ledf2+0x72>
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d102      	bne.n	80014dc <__ledf2+0x64>
 80014d6:	433c      	orrs	r4, r7
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d00b      	beq.n	80014f4 <__ledf2+0x7c>
 80014dc:	4281      	cmp	r1, r0
 80014de:	d014      	beq.n	800150a <__ledf2+0x92>
 80014e0:	2002      	movs	r0, #2
 80014e2:	3901      	subs	r1, #1
 80014e4:	4008      	ands	r0, r1
 80014e6:	3801      	subs	r0, #1
 80014e8:	e000      	b.n	80014ec <__ledf2+0x74>
 80014ea:	2002      	movs	r0, #2
 80014ec:	bcc0      	pop	{r6, r7}
 80014ee:	46b9      	mov	r9, r7
 80014f0:	46b0      	mov	r8, r6
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d1f9      	bne.n	80014ec <__ledf2+0x74>
 80014f8:	2001      	movs	r0, #1
 80014fa:	4240      	negs	r0, r0
 80014fc:	e7f6      	b.n	80014ec <__ledf2+0x74>
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ec      	bne.n	80014dc <__ledf2+0x64>
 8001502:	464c      	mov	r4, r9
 8001504:	4326      	orrs	r6, r4
 8001506:	d1e9      	bne.n	80014dc <__ledf2+0x64>
 8001508:	e7ea      	b.n	80014e0 <__ledf2+0x68>
 800150a:	429a      	cmp	r2, r3
 800150c:	dd04      	ble.n	8001518 <__ledf2+0xa0>
 800150e:	4243      	negs	r3, r0
 8001510:	4158      	adcs	r0, r3
 8001512:	0040      	lsls	r0, r0, #1
 8001514:	3801      	subs	r0, #1
 8001516:	e7e9      	b.n	80014ec <__ledf2+0x74>
 8001518:	429a      	cmp	r2, r3
 800151a:	dbeb      	blt.n	80014f4 <__ledf2+0x7c>
 800151c:	454f      	cmp	r7, r9
 800151e:	d8df      	bhi.n	80014e0 <__ledf2+0x68>
 8001520:	d006      	beq.n	8001530 <__ledf2+0xb8>
 8001522:	2000      	movs	r0, #0
 8001524:	454f      	cmp	r7, r9
 8001526:	d2e1      	bcs.n	80014ec <__ledf2+0x74>
 8001528:	2900      	cmp	r1, #0
 800152a:	d0e5      	beq.n	80014f8 <__ledf2+0x80>
 800152c:	0008      	movs	r0, r1
 800152e:	e7dd      	b.n	80014ec <__ledf2+0x74>
 8001530:	45c4      	cmp	ip, r8
 8001532:	d8d5      	bhi.n	80014e0 <__ledf2+0x68>
 8001534:	2000      	movs	r0, #0
 8001536:	45c4      	cmp	ip, r8
 8001538:	d2d8      	bcs.n	80014ec <__ledf2+0x74>
 800153a:	e7f5      	b.n	8001528 <__ledf2+0xb0>
 800153c:	000007ff 	.word	0x000007ff

08001540 <read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_ADC(uint16_t *cds, uint16_t *vr){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start(&hadc);
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <read_ADC+0x60>)
 800154c:	0018      	movs	r0, r3
 800154e:	f000 fc55 	bl	8001dfc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001552:	23fa      	movs	r3, #250	; 0xfa
 8001554:	009a      	lsls	r2, r3, #2
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <read_ADC+0x60>)
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f000 fce2 	bl	8001f24 <HAL_ADC_PollForConversion>
	*cds = HAL_ADC_GetValue(&hadc);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <read_ADC+0x60>)
 8001562:	0018      	movs	r0, r3
 8001564:	f000 fd7a 	bl	800205c <HAL_ADC_GetValue>
 8001568:	0003      	movs	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001570:	23fa      	movs	r3, #250	; 0xfa
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <read_ADC+0x60>)
 8001576:	0011      	movs	r1, r2
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fcd3 	bl	8001f24 <HAL_ADC_PollForConversion>
	*vr = HAL_ADC_GetValue(&hadc);
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <read_ADC+0x60>)
 8001580:	0018      	movs	r0, r3
 8001582:	f000 fd6b 	bl	800205c <HAL_ADC_GetValue>
 8001586:	0003      	movs	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <read_ADC+0x60>)
 8001590:	0018      	movs	r0, r3
 8001592:	f000 fc87 	bl	8001ea4 <HAL_ADC_Stop>
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000028 	.word	0x20000028

080015a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	uint16_t cds, vr;
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015aa:	f000 fa43 	bl	8001a34 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ae:	f000 f887 	bl	80016c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015b2:	f000 f94b 	bl	800184c <MX_GPIO_Init>
	MX_ADC_Init();
 80015b6:	f000 f8d7 	bl	8001768 <MX_ADC_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		read_ADC(&cds, &vr);
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	1dbb      	adds	r3, r7, #6
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff ffbd 	bl	8001540 <read_ADC>
		vr = (uint16_t)((double)vr / 1023.75);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff fe1e 	bl	800120c <__aeabi_ui2d>
 80015d0:	2200      	movs	r2, #0
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <main+0x118>)
 80015d4:	f7fe ff5c 	bl	8000490 <__aeabi_ddiv>
 80015d8:	0002      	movs	r2, r0
 80015da:	000b      	movs	r3, r1
 80015dc:	0010      	movs	r0, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	f7fe fe6c 	bl	80002bc <__aeabi_d2uiz>
 80015e4:	0003      	movs	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	801a      	strh	r2, [r3, #0]
		LED(1, (vr == 0 || cds > 4000));
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <main+0x60>
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	23fa      	movs	r3, #250	; 0xfa
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d801      	bhi.n	8001604 <main+0x60>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <main+0x62>
 8001604:	2300      	movs	r3, #0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	23a0      	movs	r3, #160	; 0xa0
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	0018      	movs	r0, r3
 8001610:	f001 f91c 	bl	800284c <HAL_GPIO_WritePin>
		LED(2, (vr == 1 || cds > 4000));
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d007      	beq.n	800162c <main+0x88>
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	23fa      	movs	r3, #250	; 0xfa
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	429a      	cmp	r2, r3
 8001626:	d801      	bhi.n	800162c <main+0x88>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <main+0x8a>
 800162c:	2300      	movs	r3, #0
 800162e:	b2da      	uxtb	r2, r3
 8001630:	23a0      	movs	r3, #160	; 0xa0
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0018      	movs	r0, r3
 8001638:	f001 f908 	bl	800284c <HAL_GPIO_WritePin>
		LED(3, (vr == 2 || cds > 4000));
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d007      	beq.n	8001654 <main+0xb0>
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	23fa      	movs	r3, #250	; 0xfa
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	429a      	cmp	r2, r3
 800164e:	d801      	bhi.n	8001654 <main+0xb0>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <main+0xb2>
 8001654:	2300      	movs	r3, #0
 8001656:	b2da      	uxtb	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	0059      	lsls	r1, r3, #1
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	0018      	movs	r0, r3
 8001662:	f001 f8f3 	bl	800284c <HAL_GPIO_WritePin>
		LED(4, (vr == 3 || cds > 4000));
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d007      	beq.n	800167e <main+0xda>
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	23fa      	movs	r3, #250	; 0xfa
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	429a      	cmp	r2, r3
 8001678:	d801      	bhi.n	800167e <main+0xda>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <main+0xdc>
 800167e:	2300      	movs	r3, #0
 8001680:	b2da      	uxtb	r2, r3
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	0099      	lsls	r1, r3, #2
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0018      	movs	r0, r3
 800168c:	f001 f8de 	bl	800284c <HAL_GPIO_WritePin>
		LED(5, (vr == 4 || cds > 4000));
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d007      	beq.n	80016a8 <main+0x104>
 8001698:	1dbb      	adds	r3, r7, #6
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	23fa      	movs	r3, #250	; 0xfa
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d801      	bhi.n	80016a8 <main+0x104>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <main+0x106>
 80016a8:	2300      	movs	r3, #0
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	00d9      	lsls	r1, r3, #3
 80016b0:	23a0      	movs	r3, #160	; 0xa0
 80016b2:	05db      	lsls	r3, r3, #23
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 f8c9 	bl	800284c <HAL_GPIO_WritePin>
		read_ADC(&cds, &vr);
 80016ba:	e77e      	b.n	80015ba <main+0x16>
 80016bc:	408ffe00 	.word	0x408ffe00

080016c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b095      	sub	sp, #84	; 0x54
 80016c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016c6:	2418      	movs	r4, #24
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	0018      	movs	r0, r3
 80016cc:	2338      	movs	r3, #56	; 0x38
 80016ce:	001a      	movs	r2, r3
 80016d0:	2100      	movs	r1, #0
 80016d2:	f001 feaf 	bl	8003434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	0018      	movs	r0, r3
 80016da:	2314      	movs	r3, #20
 80016dc:	001a      	movs	r2, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	f001 fea8 	bl	8003434 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <SystemClock_Config+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <SystemClock_Config+0xa4>)
 80016ea:	401a      	ands	r2, r3
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <SystemClock_Config+0xa0>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0109      	lsls	r1, r1, #4
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016f6:	0021      	movs	r1, r4
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2210      	movs	r2, #16
 80016fc:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2201      	movs	r2, #1
 8001702:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	22a0      	movs	r2, #160	; 0xa0
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001718:	187b      	adds	r3, r7, r1
 800171a:	0018      	movs	r0, r3
 800171c:	f001 f8b4 	bl	8002888 <HAL_RCC_OscConfig>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x68>
		Error_Handler();
 8001724:	f000 f8ea 	bl	80018fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	220f      	movs	r2, #15
 800172c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2100      	movs	r1, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f001 fc60 	bl	8003010 <HAL_RCC_ClockConfig>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x98>
		Error_Handler();
 8001754:	f000 f8d2 	bl	80018fc <Error_Handler>
	}
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b015      	add	sp, #84	; 0x54
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	40007000 	.word	0x40007000
 8001764:	ffffe7ff 	.word	0xffffe7ff

08001768 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800176e:	003b      	movs	r3, r7
 8001770:	0018      	movs	r0, r3
 8001772:	2308      	movs	r3, #8
 8001774:	001a      	movs	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	f001 fe5c 	bl	8003434 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <MX_ADC_Init+0xd8>)
 800177e:	4a31      	ldr	r2, [pc, #196]	; (8001844 <MX_ADC_Init+0xdc>)
 8001780:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <MX_ADC_Init+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <MX_ADC_Init+0xd8>)
 800178a:	22c0      	movs	r2, #192	; 0xc0
 800178c:	0612      	lsls	r2, r2, #24
 800178e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_ADC_Init+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_ADC_Init+0xd8>)
 8001798:	2207      	movs	r2, #7
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_ADC_Init+0xd8>)
 800179e:	2201      	movs	r2, #1
 80017a0:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_ADC_Init+0xd8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_ADC_Init+0xd8>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <MX_ADC_Init+0xd8>)
 80017b2:	2221      	movs	r2, #33	; 0x21
 80017b4:	2100      	movs	r1, #0
 80017b6:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_ADC_Init+0xd8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_ADC_Init+0xd8>)
 80017c0:	22c2      	movs	r2, #194	; 0xc2
 80017c2:	32ff      	adds	r2, #255	; 0xff
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <MX_ADC_Init+0xd8>)
 80017c8:	222c      	movs	r2, #44	; 0x2c
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_ADC_Init+0xd8>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_ADC_Init+0xd8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_ADC_Init+0xd8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_ADC_Init+0xd8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_ADC_Init+0xd8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_ADC_Init+0xd8>)
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f990 	bl	8001b14 <HAL_ADC_Init>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC_Init+0x94>
		Error_Handler();
 80017f8:	f000 f880 	bl	80018fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80017fc:	003b      	movs	r3, r7
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001802:	003b      	movs	r3, r7
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0152      	lsls	r2, r2, #5
 8001808:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800180a:	003a      	movs	r2, r7
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_ADC_Init+0xd8>)
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f000 fc2f 	bl	8002074 <HAL_ADC_ConfigChannel>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <MX_ADC_Init+0xb6>
		Error_Handler();
 800181a:	f000 f86f 	bl	80018fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800181e:	003b      	movs	r3, r7
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <MX_ADC_Init+0xe0>)
 8001822:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001824:	003a      	movs	r2, r7
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_ADC_Init+0xd8>)
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fc22 	bl	8002074 <HAL_ADC_ConfigChannel>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <MX_ADC_Init+0xd0>
		Error_Handler();
 8001834:	f000 f862 	bl	80018fc <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000028 	.word	0x20000028
 8001844:	40012400 	.word	0x40012400
 8001848:	04000002 	.word	0x04000002

0800184c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001852:	240c      	movs	r4, #12
 8001854:	193b      	adds	r3, r7, r4
 8001856:	0018      	movs	r0, r3
 8001858:	2314      	movs	r3, #20
 800185a:	001a      	movs	r2, r3
 800185c:	2100      	movs	r1, #0
 800185e:	f001 fde9 	bl	8003434 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <MX_GPIO_Init+0xa8>)
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <MX_GPIO_Init+0xa8>)
 8001868:	2104      	movs	r1, #4
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_GPIO_Init+0xa8>)
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_GPIO_Init+0xa8>)
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_GPIO_Init+0xa8>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_GPIO_Init+0xa8>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001892:	23f8      	movs	r3, #248	; 0xf8
 8001894:	00d9      	lsls	r1, r3, #3
 8001896:	23a0      	movs	r3, #160	; 0xa0
 8001898:	05db      	lsls	r3, r3, #23
 800189a:	2200      	movs	r2, #0
 800189c:	0018      	movs	r0, r3
 800189e:	f000 ffd5 	bl	800284c <HAL_GPIO_WritePin>
			LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SW_A_Pin */
	GPIO_InitStruct.Pin = SW_A_Pin;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	01d2      	lsls	r2, r2, #7
 80018a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	2201      	movs	r2, #1
 80018b4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SW_A_GPIO_Port, &GPIO_InitStruct);
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <MX_GPIO_Init+0xac>)
 80018ba:	0019      	movs	r1, r3
 80018bc:	0010      	movs	r0, r2
 80018be:	f000 fe4f 	bl	8002560 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
	 LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin;
 80018c2:	0021      	movs	r1, r4
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	22f8      	movs	r2, #248	; 0xf8
 80018c8:	00d2      	lsls	r2, r2, #3
 80018ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2201      	movs	r2, #1
 80018d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	187a      	adds	r2, r7, r1
 80018e0:	23a0      	movs	r3, #160	; 0xa0
 80018e2:	05db      	lsls	r3, r3, #23
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 fe3a 	bl	8002560 <HAL_GPIO_Init>

}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b009      	add	sp, #36	; 0x24
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	50000800 	.word	0x50000800

080018fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_MspInit+0x24>)
 800190e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x24>)
 8001912:	2101      	movs	r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_MspInit+0x24>)
 800191a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_MspInit+0x24>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0549      	lsls	r1, r1, #21
 8001922:	430a      	orrs	r2, r1
 8001924:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	240c      	movs	r4, #12
 800193a:	193b      	adds	r3, r7, r4
 800193c:	0018      	movs	r0, r3
 800193e:	2314      	movs	r3, #20
 8001940:	001a      	movs	r2, r3
 8001942:	2100      	movs	r1, #0
 8001944:	f001 fd76 	bl	8003434 <memset>
  if(hadc->Instance==ADC1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d122      	bne.n	8001998 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0089      	lsls	r1, r1, #2
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 8001966:	2101      	movs	r1, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001978:	193b      	adds	r3, r7, r4
 800197a:	2203      	movs	r2, #3
 800197c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	193b      	adds	r3, r7, r4
 8001980:	2203      	movs	r2, #3
 8001982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	193b      	adds	r3, r7, r4
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	193a      	adds	r2, r7, r4
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	0011      	movs	r1, r2
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fde4 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b009      	add	sp, #36	; 0x24
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	40012400 	.word	0x40012400
 80019a4:	40021000 	.word	0x40021000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f886 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80019e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopForever+0xe>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopForever+0x16>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a0a:	f7ff ffe4 	bl	80019d6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f001 fced 	bl	80033ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fdc7 	bl	80015a4 <main>

08001a16 <LoopForever>:

LoopForever:
    b LoopForever
 8001a16:	e7fe      	b.n	8001a16 <LoopForever>
   ldr   r0, =_estack
 8001a18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a24:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8001a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a2c:	20000088 	.word	0x20000088

08001a30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_COMP_IRQHandler>
	...

08001a34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x3c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_Init+0x3c>)
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f811 	bl	8001a74 <HAL_InitTick>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e001      	b.n	8001a62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a5e:	f7ff ff53 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_InitTick+0x60>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	0019      	movs	r1, r3
 8001a86:	23fa      	movs	r3, #250	; 0xfa
 8001a88:	0098      	lsls	r0, r3, #2
 8001a8a:	f7fe fb3d 	bl	8000108 <__udivsi3>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	0019      	movs	r1, r3
 8001a92:	0020      	movs	r0, r4
 8001a94:	f7fe fb38 	bl	8000108 <__udivsi3>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fd53 	bl	8002546 <HAL_SYSTICK_Config>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e00f      	b.n	8001ac8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d80b      	bhi.n	8001ac6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	425b      	negs	r3, r3
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 fd30 	bl	800251c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_InitTick+0x64>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b003      	add	sp, #12
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	18d2      	adds	r2, r2, r3
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_IncTick+0x20>)
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000084 	.word	0x20000084

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	20000084 	.word	0x20000084

08001b14 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e159      	b.n	8001dda <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2250      	movs	r2, #80	; 0x50
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fef6 	bl	8001930 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	2210      	movs	r2, #16
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d005      	beq.n	8001b5c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b5a:	d00b      	beq.n	8001b74 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	2210      	movs	r2, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2250      	movs	r2, #80	; 0x50
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e132      	b.n	8001dda <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	4a9a      	ldr	r2, [pc, #616]	; (8001de4 <HAL_ADC_Init+0x2d0>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d108      	bne.n	8001ba4 <HAL_ADC_Init+0x90>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_Init+0x90>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_Init+0x92>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d149      	bne.n	8001c3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	23c0      	movs	r3, #192	; 0xc0
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d00b      	beq.n	8001bce <HAL_ADC_Init+0xba>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d005      	beq.n	8001bce <HAL_ADC_Init+0xba>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d111      	bne.n	8001bf2 <HAL_ADC_Init+0xde>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	0892      	lsrs	r2, r2, #2
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6919      	ldr	r1, [r3, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	e014      	b.n	8001c1c <HAL_ADC_Init+0x108>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	0892      	lsrs	r2, r2, #2
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c08:	4978      	ldr	r1, [pc, #480]	; (8001dec <HAL_ADC_Init+0x2d8>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2118      	movs	r1, #24
 8001c28:	438a      	bics	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c44:	496a      	ldr	r1, [pc, #424]	; (8001df0 <HAL_ADC_Init+0x2dc>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	065a      	lsls	r2, r3, #25
 8001c54:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <HAL_ADC_Init+0x2d4>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	d108      	bne.n	8001c7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	0549      	lsls	r1, r1, #21
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	495b      	ldr	r1, [pc, #364]	; (8001df4 <HAL_ADC_Init+0x2e0>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_Init+0x18c>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0x18e>
 8001ca0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ca2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	5c1b      	ldrb	r3, [r3, r0]
 8001caa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001cac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	202c      	movs	r0, #44	; 0x2c
 8001cb2:	5c1b      	ldrb	r3, [r3, r0]
 8001cb4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cb6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001cc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ccc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cda:	23c2      	movs	r3, #194	; 0xc2
 8001cdc:	33ff      	adds	r3, #255	; 0xff
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d00b      	beq.n	8001cfa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2221      	movs	r2, #33	; 0x21
 8001cfe:	5c9b      	ldrb	r3, [r3, r2]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d11a      	bne.n	8001d3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	5c9b      	ldrb	r3, [r3, r2]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	e00b      	b.n	8001d3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	2220      	movs	r2, #32
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	2201      	movs	r2, #1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d11f      	bne.n	8001d82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	492a      	ldr	r1, [pc, #168]	; (8001df8 <HAL_ADC_Init+0x2e4>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d60:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001d66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	e00e      	b.n	8001da0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2107      	movs	r1, #7
 8001dac:	438a      	bics	r2, r1
 8001dae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4393      	bics	r3, r2
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	fffffefd 	.word	0xfffffefd
 8001de8:	40012708 	.word	0x40012708
 8001dec:	ffc3ffff 	.word	0xffc3ffff
 8001df0:	fdffffff 	.word	0xfdffffff
 8001df4:	fffe0219 	.word	0xfffe0219
 8001df8:	fffffc03 	.word	0xfffffc03

08001dfc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	230f      	movs	r3, #15
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2204      	movs	r2, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d138      	bne.n	8001e8a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2250      	movs	r2, #80	; 0x50
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Start+0x2a>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e038      	b.n	8001e98 <HAL_ADC_Start+0x9c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2250      	movs	r2, #80	; 0x50
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d007      	beq.n	8001e46 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e36:	230f      	movs	r3, #15
 8001e38:	18fc      	adds	r4, r7, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f99f 	bl	8002180 <ADC_Enable>
 8001e42:	0003      	movs	r3, r0
 8001e44:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d120      	bne.n	8001e92 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_ADC_Start+0xa4>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	0052      	lsls	r2, r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2250      	movs	r2, #80	; 0x50
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	221c      	movs	r2, #28
 8001e76:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2104      	movs	r1, #4
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	781b      	ldrb	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b005      	add	sp, #20
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	fffff0fe 	.word	0xfffff0fe

08001ea4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2250      	movs	r2, #80	; 0x50
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_Stop+0x1e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e029      	b.n	8001f16 <HAL_ADC_Stop+0x72>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2250      	movs	r2, #80	; 0x50
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001eca:	250f      	movs	r5, #15
 8001ecc:	197c      	adds	r4, r7, r5
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 fa24 	bl	800231e <ADC_ConversionStop>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eda:	197b      	adds	r3, r7, r5
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d112      	bne.n	8001f08 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ee2:	197c      	adds	r4, r7, r5
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f9b2 	bl	8002250 <ADC_Disable>
 8001eec:	0003      	movs	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ef0:	197b      	adds	r3, r7, r5
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_ADC_Stop+0x7c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f10:	230f      	movs	r3, #15
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	fffffefe 	.word	0xfffffefe

08001f24 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e014      	b.n	8001f6e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10b      	bne.n	8001f6a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	2220      	movs	r2, #32
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2250      	movs	r2, #80	; 0x50
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e072      	b.n	8002050 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f6e:	f7ff fdc7 	bl	8001b00 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f76:	e01f      	b.n	8001fb8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x70>
 8001f84:	f7ff fdbc 	bl	8001b00 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d211      	bcs.n	8001fb8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2250      	movs	r2, #80	; 0x50
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e04b      	b.n	8002050 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0d9      	beq.n	8001f78 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d12e      	bne.n	800203e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d129      	bne.n	800203e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d122      	bne.n	800203e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	d110      	bne.n	8002026 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	210c      	movs	r1, #12
 8002010:	438a      	bics	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_ADC_PollForConversion+0x134>)
 800201a:	4013      	ands	r3, r2
 800201c:	2201      	movs	r2, #1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
 8002024:	e00b      	b.n	800203e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	2220      	movs	r2, #32
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	2201      	movs	r2, #1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}
 8002058:	fffffefe 	.word	0xfffffefe

0800205c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2250      	movs	r2, #80	; 0x50
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x18>
 8002088:	2302      	movs	r3, #2
 800208a:	e06c      	b.n	8002166 <HAL_ADC_ConfigChannel+0xf2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2250      	movs	r2, #80	; 0x50
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d00b      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2220      	movs	r2, #32
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2250      	movs	r2, #80	; 0x50
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e056      	b.n	8002166 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_ADC_ConfigChannel+0xfc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d028      	beq.n	8002114 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	035b      	lsls	r3, r3, #13
 80020ce:	0b5a      	lsrs	r2, r3, #13
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	02db      	lsls	r3, r3, #11
 80020e0:	4013      	ands	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	0409      	lsls	r1, r1, #16
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f000 f960 	bl	80023b8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	4013      	ands	r3, r2
 8002102:	d02b      	beq.n	800215c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	03c9      	lsls	r1, r1, #15
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e023      	b.n	800215c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	035b      	lsls	r3, r3, #13
 8002120:	0b5b      	lsrs	r3, r3, #13
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	02db      	lsls	r3, r3, #11
 8002134:	4013      	ands	r3, r2
 8002136:	d005      	beq.n	8002144 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 800213e:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_ADC_ConfigChannel+0x104>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d005      	beq.n	800215c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_ADC_ConfigChannel+0x100>)
 8002156:	4909      	ldr	r1, [pc, #36]	; (800217c <HAL_ADC_ConfigChannel+0x108>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2250      	movs	r2, #80	; 0x50
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	00001001 	.word	0x00001001
 8002174:	40012708 	.word	0x40012708
 8002178:	ff7fffff 	.word	0xff7fffff
 800217c:	ffbfffff 	.word	0xffbfffff

08002180 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2203      	movs	r2, #3
 8002194:	4013      	ands	r3, r2
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <ADC_Enable+0x2c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <ADC_Enable+0x2c>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <ADC_Enable+0x2e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d146      	bne.n	8002240 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <ADC_Enable+0xcc>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	d00d      	beq.n	80021da <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	2210      	movs	r2, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	2201      	movs	r2, #1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e033      	b.n	8002242 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 f8e4 	bl	80023b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f0:	f7ff fc86 	bl	8001b00 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021f8:	e01b      	b.n	8002232 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021fa:	f7ff fc81 	bl	8001b00 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b0a      	cmp	r3, #10
 8002206:	d914      	bls.n	8002232 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	2b01      	cmp	r3, #1
 8002214:	d00d      	beq.n	8002232 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	2210      	movs	r2, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	2201      	movs	r2, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	4013      	ands	r3, r2
 800223c:	2b01      	cmp	r3, #1
 800223e:	d1dc      	bne.n	80021fa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	80000017 	.word	0x80000017

08002250 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2203      	movs	r2, #3
 8002264:	4013      	ands	r3, r2
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <ADC_Disable+0x2c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <ADC_Disable+0x2c>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <ADC_Disable+0x2e>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d048      	beq.n	8002314 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2205      	movs	r2, #5
 800228a:	4013      	ands	r3, r2
 800228c:	2b01      	cmp	r3, #1
 800228e:	d110      	bne.n	80022b2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2102      	movs	r1, #2
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2203      	movs	r2, #3
 80022a6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fc2a 	bl	8001b00 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b0:	e029      	b.n	8002306 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2210      	movs	r2, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	2201      	movs	r2, #1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e023      	b.n	8002316 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ce:	f7ff fc17 	bl	8001b00 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b0a      	cmp	r3, #10
 80022da:	d914      	bls.n	8002306 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10d      	bne.n	8002306 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	2210      	movs	r2, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	2201      	movs	r2, #1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d0dc      	beq.n	80022ce <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d03a      	beq.n	80023ac <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	2b04      	cmp	r3, #4
 8002342:	d10d      	bne.n	8002360 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800234e:	d107      	bne.n	8002360 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2110      	movs	r1, #16
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002360:	f7ff fbce 	bl	8001b00 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002368:	e01a      	b.n	80023a0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800236a:	f7ff fbc9 	bl	8001b00 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b0a      	cmp	r3, #10
 8002376:	d913      	bls.n	80023a0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2204      	movs	r2, #4
 8002380:	4013      	ands	r3, r2
 8002382:	d00d      	beq.n	80023a0 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	2210      	movs	r2, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	2201      	movs	r2, #1
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e006      	b.n	80023ae <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d1de      	bne.n	800236a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <ADC_DelayMicroSecond+0x38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	490b      	ldr	r1, [pc, #44]	; (80023f4 <ADC_DelayMicroSecond+0x3c>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fd fe9e 	bl	8000108 <__udivsi3>
 80023cc:	0003      	movs	r3, r0
 80023ce:	001a      	movs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4353      	muls	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80023d6:	e002      	b.n	80023de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3b01      	subs	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f9      	bne.n	80023d8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20000000 	.word	0x20000000
 80023f4:	000f4240 	.word	0x000f4240

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	0002      	movs	r2, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b7f      	cmp	r3, #127	; 0x7f
 800240c:	d828      	bhi.n	8002460 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800240e:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <__NVIC_SetPriority+0xd4>)
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b25b      	sxtb	r3, r3
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	33c0      	adds	r3, #192	; 0xc0
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	589b      	ldr	r3, [r3, r2]
 800241e:	1dfa      	adds	r2, r7, #7
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	0011      	movs	r1, r2
 8002424:	2203      	movs	r2, #3
 8002426:	400a      	ands	r2, r1
 8002428:	00d2      	lsls	r2, r2, #3
 800242a:	21ff      	movs	r1, #255	; 0xff
 800242c:	4091      	lsls	r1, r2
 800242e:	000a      	movs	r2, r1
 8002430:	43d2      	mvns	r2, r2
 8002432:	401a      	ands	r2, r3
 8002434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	401a      	ands	r2, r3
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	0018      	movs	r0, r3
 8002444:	2303      	movs	r3, #3
 8002446:	4003      	ands	r3, r0
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244c:	481f      	ldr	r0, [pc, #124]	; (80024cc <__NVIC_SetPriority+0xd4>)
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b25b      	sxtb	r3, r3
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	430a      	orrs	r2, r1
 8002458:	33c0      	adds	r3, #192	; 0xc0
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800245e:	e031      	b.n	80024c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <__NVIC_SetPriority+0xd8>)
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	0019      	movs	r1, r3
 8002468:	230f      	movs	r3, #15
 800246a:	400b      	ands	r3, r1
 800246c:	3b08      	subs	r3, #8
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3306      	adds	r3, #6
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	3304      	adds	r3, #4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1dfa      	adds	r2, r7, #7
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	0011      	movs	r1, r2
 8002480:	2203      	movs	r2, #3
 8002482:	400a      	ands	r2, r1
 8002484:	00d2      	lsls	r2, r2, #3
 8002486:	21ff      	movs	r1, #255	; 0xff
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	43d2      	mvns	r2, r2
 800248e:	401a      	ands	r2, r3
 8002490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	401a      	ands	r2, r3
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	2303      	movs	r3, #3
 80024a2:	4003      	ands	r3, r0
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a8:	4809      	ldr	r0, [pc, #36]	; (80024d0 <__NVIC_SetPriority+0xd8>)
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	001c      	movs	r4, r3
 80024b0:	230f      	movs	r3, #15
 80024b2:	4023      	ands	r3, r4
 80024b4:	3b08      	subs	r3, #8
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	430a      	orrs	r2, r1
 80024ba:	3306      	adds	r3, #6
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	18c3      	adds	r3, r0, r3
 80024c0:	3304      	adds	r3, #4
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b003      	add	sp, #12
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	045b      	lsls	r3, r3, #17
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d301      	bcc.n	80024ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e8:	2301      	movs	r3, #1
 80024ea:	e010      	b.n	800250e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <SysTick_Config+0x44>)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	3a01      	subs	r2, #1
 80024f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f4:	2301      	movs	r3, #1
 80024f6:	425b      	negs	r3, r3
 80024f8:	2103      	movs	r1, #3
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff ff7c 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x44>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x44>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	210f      	movs	r1, #15
 8002528:	187b      	adds	r3, r7, r1
 800252a:	1c02      	adds	r2, r0, #0
 800252c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	187b      	adds	r3, r7, r1
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b25b      	sxtb	r3, r3
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff ffbf 	bl	80024d4 <SysTick_Config>
 8002556:	0003      	movs	r3, r0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002576:	e14f      	b.n	8002818 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4091      	lsls	r1, r2
 8002582:	000a      	movs	r2, r1
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d100      	bne.n	8002590 <HAL_GPIO_Init+0x30>
 800258e:	e140      	b.n	8002812 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	2201      	movs	r2, #1
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	4013      	ands	r3, r2
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	43da      	mvns	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	58d3      	ldr	r3, [r2, r3]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2207      	movs	r2, #7
 8002664:	4013      	ands	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2107      	movs	r1, #7
 800267e:	400b      	ands	r3, r1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	6939      	ldr	r1, [r7, #16]
 8002698:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	401a      	ands	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_GPIO_Init+0x17c>
 80026da:	e09a      	b.n	8002812 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_GPIO_Init+0x2d0>)
 80026de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_GPIO_Init+0x2d0>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_GPIO_Init+0x2d4>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	589b      	ldr	r3, [r3, r2]
 80026f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2203      	movs	r2, #3
 80026fa:	4013      	ands	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	43da      	mvns	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	23a0      	movs	r3, #160	; 0xa0
 8002710:	05db      	lsls	r3, r3, #23
 8002712:	429a      	cmp	r2, r3
 8002714:	d019      	beq.n	800274a <HAL_GPIO_Init+0x1ea>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a47      	ldr	r2, [pc, #284]	; (8002838 <HAL_GPIO_Init+0x2d8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x1e6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a46      	ldr	r2, [pc, #280]	; (800283c <HAL_GPIO_Init+0x2dc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00d      	beq.n	8002742 <HAL_GPIO_Init+0x1e2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a45      	ldr	r2, [pc, #276]	; (8002840 <HAL_GPIO_Init+0x2e0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x1de>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a44      	ldr	r2, [pc, #272]	; (8002844 <HAL_GPIO_Init+0x2e4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x1da>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x1ec>
 800273a:	2306      	movs	r3, #6
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x1ec>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x1ec>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x1ec>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x1ec>
 800274a:	2300      	movs	r3, #0
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	2103      	movs	r1, #3
 8002750:	400a      	ands	r2, r1
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x2d4>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276a:	4b37      	ldr	r3, [pc, #220]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	4013      	ands	r3, r2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	035b      	lsls	r3, r3, #13
 80027d6:	4013      	ands	r3, r2
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43da      	mvns	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	039b      	lsls	r3, r3, #14
 8002800:	4013      	ands	r3, r2
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	40da      	lsrs	r2, r3
 8002820:	1e13      	subs	r3, r2, #0
 8002822:	d000      	beq.n	8002826 <HAL_GPIO_Init+0x2c6>
 8002824:	e6a8      	b.n	8002578 <HAL_GPIO_Init+0x18>
  }
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b006      	add	sp, #24
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40010000 	.word	0x40010000
 8002838:	50000400 	.word	0x50000400
 800283c:	50000800 	.word	0x50000800
 8002840:	50000c00 	.word	0x50000c00
 8002844:	50001c00 	.word	0x50001c00
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	0008      	movs	r0, r1
 8002856:	0011      	movs	r1, r2
 8002858:	1cbb      	adds	r3, r7, #2
 800285a:	1c02      	adds	r2, r0, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	1c7b      	adds	r3, r7, #1
 8002860:	1c0a      	adds	r2, r1, #0
 8002862:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002864:	1c7b      	adds	r3, r7, #1
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286c:	1cbb      	adds	r3, r7, #2
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002876:	1cbb      	adds	r3, r7, #2
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f000 fbaf 	bl	8002ffa <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289c:	4bcf      	ldr	r3, [pc, #828]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	220c      	movs	r2, #12
 80028a2:	4013      	ands	r3, r2
 80028a4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a6:	4bcd      	ldr	r3, [pc, #820]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	4013      	ands	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	4013      	ands	r3, r2
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x36>
 80028bc:	e07e      	b.n	80029bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d007      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x68>
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4bc1      	ldr	r3, [pc, #772]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5a>
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_OscConfig+0x132>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d167      	bne.n	80029ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 fb85 	bl	8002ffa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x84>
 80028fc:	4bb7      	ldr	r3, [pc, #732]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4bb6      	ldr	r3, [pc, #728]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0249      	lsls	r1, r1, #9
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e027      	b.n	800295c <HAL_RCC_OscConfig+0xd4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	23a0      	movs	r3, #160	; 0xa0
 8002912:	02db      	lsls	r3, r3, #11
 8002914:	429a      	cmp	r2, r3
 8002916:	d10e      	bne.n	8002936 <HAL_RCC_OscConfig+0xae>
 8002918:	4bb0      	ldr	r3, [pc, #704]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4baf      	ldr	r3, [pc, #700]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	02c9      	lsls	r1, r1, #11
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	4bad      	ldr	r3, [pc, #692]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4bac      	ldr	r3, [pc, #688]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0249      	lsls	r1, r1, #9
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e012      	b.n	800295c <HAL_RCC_OscConfig+0xd4>
 8002936:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4ba8      	ldr	r3, [pc, #672]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 800293c:	49a8      	ldr	r1, [pc, #672]	; (8002be0 <HAL_RCC_OscConfig+0x358>)
 800293e:	400a      	ands	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4ba2      	ldr	r3, [pc, #648]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4ba1      	ldr	r3, [pc, #644]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002956:	49a3      	ldr	r1, [pc, #652]	; (8002be4 <HAL_RCC_OscConfig+0x35c>)
 8002958:	400a      	ands	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff f8cc 	bl	8001b00 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800296c:	e009      	b.n	8002982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296e:	f7ff f8c7 	bl	8001b00 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	; 0x64
 800297a:	d902      	bls.n	8002982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	f000 fb3c 	bl	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002982:	4b96      	ldr	r3, [pc, #600]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	4013      	ands	r3, r2
 800298c:	d0ef      	beq.n	800296e <HAL_RCC_OscConfig+0xe6>
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f8b6 	bl	8001b00 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299a:	f7ff f8b1 	bl	8001b00 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	; 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e326      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ac:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	4013      	ands	r3, r2
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x112>
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_RCC_OscConfig+0x140>
 80029c6:	e08b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d13e      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1d0>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d13b      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_RCC_OscConfig+0x16c>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e302      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x360>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a0a:	4b74      	ldr	r3, [pc, #464]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2209      	movs	r2, #9
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1c:	f000 fc40 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8002a20:	0001      	movs	r1, r0
 8002a22:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	220f      	movs	r2, #15
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	4a6f      	ldr	r2, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x364>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	000a      	movs	r2, r1
 8002a32:	40da      	lsrs	r2, r3
 8002a34:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <HAL_RCC_OscConfig+0x368>)
 8002a36:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002a38:	4b6e      	ldr	r3, [pc, #440]	; (8002bf4 <HAL_RCC_OscConfig+0x36c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2513      	movs	r5, #19
 8002a3e:	197c      	adds	r4, r7, r5
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff f817 	bl	8001a74 <HAL_InitTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a4a:	197b      	adds	r3, r7, r5
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d046      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	e2d0      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d027      	beq.n	8002aae <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a5e:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2209      	movs	r2, #9
 8002a64:	4393      	bics	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f846 	bl	8001b00 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f841 	bl	8001b00 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e2b6      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0f1      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a53      	ldr	r2, [pc, #332]	; (8002be8 <HAL_RCC_OscConfig+0x360>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7ff f821 	bl	8001b00 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f81c 	bl	8001b00 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e291      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	d1f1      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_RCC_OscConfig+0x264>
 8002aea:	e0a1      	b.n	8002c30 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d140      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x282>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e277      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <HAL_RCC_OscConfig+0x370>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	0a19      	lsrs	r1, r3, #8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	061a      	lsls	r2, r3, #24
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	0b5b      	lsrs	r3, r3, #13
 8002b38:	3301      	adds	r3, #1
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	0212      	lsls	r2, r2, #8
 8002b3e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	210f      	movs	r1, #15
 8002b48:	400b      	ands	r3, r1
 8002b4a:	4928      	ldr	r1, [pc, #160]	; (8002bec <HAL_RCC_OscConfig+0x364>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_OscConfig+0x368>)
 8002b52:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x36c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2513      	movs	r5, #19
 8002b5a:	197c      	adds	r4, r7, r5
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7fe ff89 	bl	8001a74 <HAL_InitTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b66:	197b      	adds	r3, r7, r5
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d060      	beq.n	8002c30 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002b6e:	197b      	adds	r3, r7, r5
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	e242      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d03f      	beq.n	8002bfc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	0049      	lsls	r1, r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe ffb9 	bl	8001b00 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b94:	f7fe ffb4 	bl	8001b00 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e229      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <HAL_RCC_OscConfig+0x370>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	0a19      	lsrs	r1, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	061a      	lsls	r2, r3, #24
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <HAL_RCC_OscConfig+0x354>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e029      	b.n	8002c30 <HAL_RCC_OscConfig+0x3a8>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	fffeffff 	.word	0xfffeffff
 8002be4:	fffbffff 	.word	0xfffbffff
 8002be8:	ffffe0ff 	.word	0xffffe0ff
 8002bec:	0800349c 	.word	0x0800349c
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bfc:	4bbd      	ldr	r3, [pc, #756]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4bbc      	ldr	r3, [pc, #752]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c02:	49bd      	ldr	r1, [pc, #756]	; (8002ef8 <HAL_RCC_OscConfig+0x670>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe ff7a 	bl	8001b00 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c12:	f7fe ff75 	bl	8001b00 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1ea      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c24:	4bb3      	ldr	r3, [pc, #716]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2208      	movs	r2, #8
 8002c36:	4013      	ands	r3, r2
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4bac      	ldr	r3, [pc, #688]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c46:	4bab      	ldr	r3, [pc, #684]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff57 	bl	8001b00 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe ff52 	bl	8001b00 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1c7      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c6a:	4ba2      	ldr	r3, [pc, #648]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	d0f1      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3d0>
 8002c74:	e018      	b.n	8002ca8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b9f      	ldr	r3, [pc, #636]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7a:	4b9e      	ldr	r3, [pc, #632]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	438a      	bics	r2, r1
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff3d 	bl	8001b00 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe ff38 	bl	8001b00 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1ad      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c9e:	4b95      	ldr	r3, [pc, #596]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1f1      	bne.n	8002c8c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2204      	movs	r2, #4
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x42c>
 8002cb2:	e0ae      	b.n	8002e12 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb4:	2027      	movs	r0, #39	; 0x27
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbc:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	055b      	lsls	r3, r3, #21
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d109      	bne.n	8002cdc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ccc:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0549      	lsls	r1, r1, #21
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x674>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d11a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x674>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x674>)
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	0049      	lsls	r1, r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe ff03 	bl	8001b00 <HAL_GetTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fe fefe 	bl	8001b00 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e173      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b7a      	ldr	r3, [pc, #488]	; (8002efc <HAL_RCC_OscConfig+0x674>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d2e:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0049      	lsls	r1, r1, #1
 8002d34:	430a      	orrs	r2, r1
 8002d36:	651a      	str	r2, [r3, #80]	; 0x50
 8002d38:	e031      	b.n	8002d9e <HAL_RCC_OscConfig+0x516>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4d4>
 8002d42:	4b6c      	ldr	r3, [pc, #432]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d48:	496b      	ldr	r1, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x670>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d4e:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d54:	496a      	ldr	r1, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x678>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
 8002d5a:	e020      	b.n	8002d9e <HAL_RCC_OscConfig+0x516>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	23a0      	movs	r3, #160	; 0xa0
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4fe>
 8002d68:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	00c9      	lsls	r1, r1, #3
 8002d72:	430a      	orrs	r2, r1
 8002d74:	651a      	str	r2, [r3, #80]	; 0x50
 8002d76:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x516>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d8c:	495a      	ldr	r1, [pc, #360]	; (8002ef8 <HAL_RCC_OscConfig+0x670>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	651a      	str	r2, [r3, #80]	; 0x50
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d96:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002d98:	4959      	ldr	r1, [pc, #356]	; (8002f00 <HAL_RCC_OscConfig+0x678>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe feab 	bl	8001b00 <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dae:	e009      	b.n	8002dc4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fea6 	bl	8001b00 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e11a      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0ef      	beq.n	8002db0 <HAL_RCC_OscConfig+0x528>
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fe95 	bl	8001b00 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fe90 	bl	8001b00 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	4a47      	ldr	r2, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e104      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d1ef      	bne.n	8002ddc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dfc:	2327      	movs	r3, #39	; 0x27
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e0c:	493e      	ldr	r1, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x680>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2220      	movs	r2, #32
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d049      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d026      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x684>)
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_RCC_OscConfig+0x684>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0189      	lsls	r1, r1, #6
 8002e46:	430a      	orrs	r2, r1
 8002e48:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fe59 	bl	8001b00 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e54:	f7fe fe54 	bl	8001b00 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0c9      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d0f1      	beq.n	8002e54 <HAL_RCC_OscConfig+0x5cc>
 8002e70:	e01e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	438a      	bics	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_RCC_OscConfig+0x684>)
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_RCC_OscConfig+0x684>)
 8002e84:	4922      	ldr	r1, [pc, #136]	; (8002f10 <HAL_RCC_OscConfig+0x688>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fe39 	bl	8001b00 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e94:	f7fe fe34 	bl	8001b00 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0a9      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d1f1      	bne.n	8002e94 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d100      	bne.n	8002eba <HAL_RCC_OscConfig+0x632>
 8002eb8:	e09e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x63a>
 8002ec0:	e077      	b.n	8002fb2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d158      	bne.n	8002f7c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x66c>)
 8002ed0:	4910      	ldr	r1, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x68c>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fe13 	bl	8001b00 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fe0e 	bl	8001b00 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d914      	bls.n	8002f18 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e083      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	fffffeff 	.word	0xfffffeff
 8002efc:	40007000 	.word	0x40007000
 8002f00:	fffffbff 	.word	0xfffffbff
 8002f04:	00001388 	.word	0x00001388
 8002f08:	efffffff 	.word	0xefffffff
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	ffffdfff 	.word	0xffffdfff
 8002f14:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	049b      	lsls	r3, r3, #18
 8002f20:	4013      	ands	r3, r2
 8002f22:	d1dd      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f24:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a37      	ldr	r2, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	0449      	lsls	r1, r1, #17
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fe fdd5 	bl	8001b00 <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fdd0 	bl	8001b00 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e045      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	4013      	ands	r3, r2
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x6d4>
 8002f7a:	e03d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002f82:	4922      	ldr	r1, [pc, #136]	; (800300c <HAL_RCC_OscConfig+0x784>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fdba 	bl	8001b00 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fdb5 	bl	8001b00 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e02a      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	049b      	lsls	r3, r3, #18
 8002fac:	4013      	ands	r3, r2
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x70a>
 8002fb0:	e022      	b.n	8002ff8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e01d      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_OscConfig+0x77c>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	025b      	lsls	r3, r3, #9
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	23f0      	movs	r3, #240	; 0xf0
 8002fd8:	039b      	lsls	r3, r3, #14
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	23c0      	movs	r3, #192	; 0xc0
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b00a      	add	sp, #40	; 0x28
 8003000:	bdb0      	pop	{r4, r5, r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	ff02ffff 	.word	0xff02ffff
 800300c:	feffffff 	.word	0xfeffffff

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e128      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b96      	ldr	r3, [pc, #600]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d91e      	bls.n	8003070 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b93      	ldr	r3, [pc, #588]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	4393      	bics	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003044:	f7fe fd5c 	bl	8001b00 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304c:	e009      	b.n	8003062 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7fe fd57 	bl	8001b00 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a8a      	ldr	r2, [pc, #552]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e109      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b87      	ldr	r3, [pc, #540]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d1ee      	bne.n	800304e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	22f0      	movs	r2, #240	; 0xf0
 8003080:	4393      	bics	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 800308a:	430a      	orrs	r2, r1
 800308c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d100      	bne.n	800309a <HAL_RCC_ClockConfig+0x8a>
 8003098:	e089      	b.n	80031ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a2:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	4013      	ands	r3, r2
 80030ac:	d120      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0e1      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030ba:	4b73      	ldr	r3, [pc, #460]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	4013      	ands	r3, r2
 80030c4:	d114      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0d5      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0ca      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030e0:	4b69      	ldr	r3, [pc, #420]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0c2      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2203      	movs	r2, #3
 80030f6:	4393      	bics	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe fcfc 	bl	8001b00 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d111      	bne.n	8003138 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003114:	e009      	b.n	800312a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fe fcf3 	bl	8001b00 <HAL_GetTick>
 800311a:	0002      	movs	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0a5      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800312a:	4b57      	ldr	r3, [pc, #348]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	220c      	movs	r2, #12
 8003130:	4013      	ands	r3, r2
 8003132:	2b08      	cmp	r3, #8
 8003134:	d1ef      	bne.n	8003116 <HAL_RCC_ClockConfig+0x106>
 8003136:	e03a      	b.n	80031ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d111      	bne.n	8003164 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003140:	e009      	b.n	8003156 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003142:	f7fe fcdd 	bl	8001b00 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	4a4d      	ldr	r2, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e08f      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003156:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	220c      	movs	r2, #12
 800315c:	4013      	ands	r3, r2
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d1ef      	bne.n	8003142 <HAL_RCC_ClockConfig+0x132>
 8003162:	e024      	b.n	80031ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11b      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800316c:	e009      	b.n	8003182 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316e:	f7fe fcc7 	bl	8001b00 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e079      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003182:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	220c      	movs	r2, #12
 8003188:	4013      	ands	r3, r2
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1ef      	bne.n	800316e <HAL_RCC_ClockConfig+0x15e>
 800318e:	e00e      	b.n	80031ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe fcb6 	bl	8001b00 <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	4a3a      	ldr	r2, [pc, #232]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e068      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	220c      	movs	r2, #12
 80031aa:	4013      	ands	r3, r2
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d21e      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031ce:	f7fe fc97 	bl	8001b00 <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	e009      	b.n	80031ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe fc92 	bl	8001b00 <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_RCC_ClockConfig+0x274>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e044      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_ClockConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d1ee      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_RCC_ClockConfig+0x27c>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2208      	movs	r2, #8
 800321e:	4013      	ands	r3, r2
 8003220:	d00a      	beq.n	8003238 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_RCC_ClockConfig+0x280>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00da      	lsls	r2, r3, #3
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003238:	f000 f832 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800323c:	0001      	movs	r1, r0
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x278>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	220f      	movs	r2, #15
 8003246:	4013      	ands	r3, r2
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x284>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	000a      	movs	r2, r1
 800324e:	40da      	lsrs	r2, r3
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_ClockConfig+0x288>)
 8003252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_RCC_ClockConfig+0x28c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	250b      	movs	r5, #11
 800325a:	197c      	adds	r4, r7, r5
 800325c:	0018      	movs	r0, r3
 800325e:	f7fe fc09 	bl	8001a74 <HAL_InitTick>
 8003262:	0003      	movs	r3, r0
 8003264:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003266:	197b      	adds	r3, r7, r5
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800326e:	197b      	adds	r3, r7, r5
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40022000 	.word	0x40022000
 8003284:	00001388 	.word	0x00001388
 8003288:	40021000 	.word	0x40021000
 800328c:	fffff8ff 	.word	0xfffff8ff
 8003290:	ffffc7ff 	.word	0xffffc7ff
 8003294:	0800349c 	.word	0x0800349c
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ae:	230c      	movs	r3, #12
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d014      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x40>
 80032b6:	d900      	bls.n	80032ba <HAL_RCC_GetSysClockFreq+0x1a>
 80032b8:	e07b      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x112>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x24>
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x3a>
 80032c2:	e076      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032c4:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2210      	movs	r2, #16
 80032ca:	4013      	ands	r3, r2
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80032d2:	e07c      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032d8:	e079      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032da:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x144>)
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032de:	e076      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	0c9a      	lsrs	r2, r3, #18
 80032e4:	230f      	movs	r3, #15
 80032e6:	401a      	ands	r2, r3
 80032e8:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x148>)
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	0d9a      	lsrs	r2, r3, #22
 80032f2:	2303      	movs	r3, #3
 80032f4:	4013      	ands	r3, r2
 80032f6:	3301      	adds	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	025b      	lsls	r3, r3, #9
 8003302:	4013      	ands	r3, r2
 8003304:	d01a      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003310:	2300      	movs	r3, #0
 8003312:	69b8      	ldr	r0, [r7, #24]
 8003314:	69f9      	ldr	r1, [r7, #28]
 8003316:	f7fc ffa3 	bl	8000260 <__aeabi_lmul>
 800331a:	0002      	movs	r2, r0
 800331c:	000b      	movs	r3, r1
 800331e:	0010      	movs	r0, r2
 8003320:	0019      	movs	r1, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f7fc ff77 	bl	8000220 <__aeabi_uldivmod>
 8003332:	0002      	movs	r2, r0
 8003334:	000b      	movs	r3, r1
 8003336:	0013      	movs	r3, r2
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	e037      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2210      	movs	r2, #16
 8003342:	4013      	ands	r3, r2
 8003344:	d01a      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	4a23      	ldr	r2, [pc, #140]	; (80033dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003350:	2300      	movs	r3, #0
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	f7fc ff83 	bl	8000260 <__aeabi_lmul>
 800335a:	0002      	movs	r2, r0
 800335c:	000b      	movs	r3, r1
 800335e:	0010      	movs	r0, r2
 8003360:	0019      	movs	r1, r3
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f7fc ff57 	bl	8000220 <__aeabi_uldivmod>
 8003372:	0002      	movs	r2, r0
 8003374:	000b      	movs	r3, r1
 8003376:	0013      	movs	r3, r2
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
 800337a:	e017      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	0018      	movs	r0, r3
 8003380:	2300      	movs	r3, #0
 8003382:	0019      	movs	r1, r3
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003386:	2300      	movs	r3, #0
 8003388:	f7fc ff6a 	bl	8000260 <__aeabi_lmul>
 800338c:	0002      	movs	r2, r0
 800338e:	000b      	movs	r3, r1
 8003390:	0010      	movs	r0, r2
 8003392:	0019      	movs	r1, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	001c      	movs	r4, r3
 8003398:	2300      	movs	r3, #0
 800339a:	001d      	movs	r5, r3
 800339c:	0022      	movs	r2, r4
 800339e:	002b      	movs	r3, r5
 80033a0:	f7fc ff3e 	bl	8000220 <__aeabi_uldivmod>
 80033a4:	0002      	movs	r2, r0
 80033a6:	000b      	movs	r3, r1
 80033a8:	0013      	movs	r3, r2
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033b0:	e00d      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0b5b      	lsrs	r3, r3, #13
 80033b8:	2207      	movs	r2, #7
 80033ba:	4013      	ands	r3, r2
 80033bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	3301      	adds	r3, #1
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	0212      	lsls	r2, r2, #8
 80033c6:	409a      	lsls	r2, r3
 80033c8:	0013      	movs	r3, r2
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b00e      	add	sp, #56	; 0x38
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200
 80033e8:	080034ac 	.word	0x080034ac

080033ec <__libc_init_array>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	2600      	movs	r6, #0
 80033f0:	4d0c      	ldr	r5, [pc, #48]	; (8003424 <__libc_init_array+0x38>)
 80033f2:	4c0d      	ldr	r4, [pc, #52]	; (8003428 <__libc_init_array+0x3c>)
 80033f4:	1b64      	subs	r4, r4, r5
 80033f6:	10a4      	asrs	r4, r4, #2
 80033f8:	42a6      	cmp	r6, r4
 80033fa:	d109      	bne.n	8003410 <__libc_init_array+0x24>
 80033fc:	2600      	movs	r6, #0
 80033fe:	f000 f821 	bl	8003444 <_init>
 8003402:	4d0a      	ldr	r5, [pc, #40]	; (800342c <__libc_init_array+0x40>)
 8003404:	4c0a      	ldr	r4, [pc, #40]	; (8003430 <__libc_init_array+0x44>)
 8003406:	1b64      	subs	r4, r4, r5
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	42a6      	cmp	r6, r4
 800340c:	d105      	bne.n	800341a <__libc_init_array+0x2e>
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	00b3      	lsls	r3, r6, #2
 8003412:	58eb      	ldr	r3, [r5, r3]
 8003414:	4798      	blx	r3
 8003416:	3601      	adds	r6, #1
 8003418:	e7ee      	b.n	80033f8 <__libc_init_array+0xc>
 800341a:	00b3      	lsls	r3, r6, #2
 800341c:	58eb      	ldr	r3, [r5, r3]
 800341e:	4798      	blx	r3
 8003420:	3601      	adds	r6, #1
 8003422:	e7f2      	b.n	800340a <__libc_init_array+0x1e>
 8003424:	080034c0 	.word	0x080034c0
 8003428:	080034c0 	.word	0x080034c0
 800342c:	080034c0 	.word	0x080034c0
 8003430:	080034c4 	.word	0x080034c4

08003434 <memset>:
 8003434:	0003      	movs	r3, r0
 8003436:	1882      	adds	r2, r0, r2
 8003438:	4293      	cmp	r3, r2
 800343a:	d100      	bne.n	800343e <memset+0xa>
 800343c:	4770      	bx	lr
 800343e:	7019      	strb	r1, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	e7f9      	b.n	8003438 <memset+0x4>

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
