
Gas_Range_Provide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000278  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f4  20000278  08005e70  00020278  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000036c  08005e70  0002036c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000991e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ade  00000000  00000000  00029bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a28  00000000  00000000  0002b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000950  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00014a49  00000000  00000000  0002ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000af47  00000000  00000000  00041461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007e565  00000000  00000000  0004c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000ca90d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a40  00000000  00000000  000ca960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000278 	.word	0x20000278
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a9c 	.word	0x08005a9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000027c 	.word	0x2000027c
 8000104:	08005a9c 	.word	0x08005a9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f852 	bl	800031c <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_d2uiz>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2200      	movs	r2, #0
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002e6:	0004      	movs	r4, r0
 80002e8:	000d      	movs	r5, r1
 80002ea:	f001 fbcb 	bl	8001a84 <__aeabi_dcmpge>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d104      	bne.n	80002fc <__aeabi_d2uiz+0x1c>
 80002f2:	0020      	movs	r0, r4
 80002f4:	0029      	movs	r1, r5
 80002f6:	f001 fae3 	bl	80018c0 <__aeabi_d2iz>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002fe:	2200      	movs	r2, #0
 8000300:	0020      	movs	r0, r4
 8000302:	0029      	movs	r1, r5
 8000304:	f000 ff4a 	bl	800119c <__aeabi_dsub>
 8000308:	f001 fada 	bl	80018c0 <__aeabi_d2iz>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	061b      	lsls	r3, r3, #24
 8000310:	469c      	mov	ip, r3
 8000312:	4460      	add	r0, ip
 8000314:	e7f1      	b.n	80002fa <__aeabi_d2uiz+0x1a>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	41e00000 	.word	0x41e00000

0800031c <__udivmoddi4>:
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	4657      	mov	r7, sl
 8000320:	464e      	mov	r6, r9
 8000322:	4645      	mov	r5, r8
 8000324:	46de      	mov	lr, fp
 8000326:	b5e0      	push	{r5, r6, r7, lr}
 8000328:	0004      	movs	r4, r0
 800032a:	000d      	movs	r5, r1
 800032c:	4692      	mov	sl, r2
 800032e:	4699      	mov	r9, r3
 8000330:	b083      	sub	sp, #12
 8000332:	428b      	cmp	r3, r1
 8000334:	d830      	bhi.n	8000398 <__udivmoddi4+0x7c>
 8000336:	d02d      	beq.n	8000394 <__udivmoddi4+0x78>
 8000338:	4649      	mov	r1, r9
 800033a:	4650      	mov	r0, sl
 800033c:	f001 fbca 	bl	8001ad4 <__clzdi2>
 8000340:	0029      	movs	r1, r5
 8000342:	0006      	movs	r6, r0
 8000344:	0020      	movs	r0, r4
 8000346:	f001 fbc5 	bl	8001ad4 <__clzdi2>
 800034a:	1a33      	subs	r3, r6, r0
 800034c:	4698      	mov	r8, r3
 800034e:	3b20      	subs	r3, #32
 8000350:	469b      	mov	fp, r3
 8000352:	d433      	bmi.n	80003bc <__udivmoddi4+0xa0>
 8000354:	465a      	mov	r2, fp
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	4642      	mov	r2, r8
 800035c:	001f      	movs	r7, r3
 800035e:	4653      	mov	r3, sl
 8000360:	4093      	lsls	r3, r2
 8000362:	001e      	movs	r6, r3
 8000364:	42af      	cmp	r7, r5
 8000366:	d83a      	bhi.n	80003de <__udivmoddi4+0xc2>
 8000368:	42af      	cmp	r7, r5
 800036a:	d100      	bne.n	800036e <__udivmoddi4+0x52>
 800036c:	e078      	b.n	8000460 <__udivmoddi4+0x144>
 800036e:	465b      	mov	r3, fp
 8000370:	1ba4      	subs	r4, r4, r6
 8000372:	41bd      	sbcs	r5, r7
 8000374:	2b00      	cmp	r3, #0
 8000376:	da00      	bge.n	800037a <__udivmoddi4+0x5e>
 8000378:	e075      	b.n	8000466 <__udivmoddi4+0x14a>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	465a      	mov	r2, fp
 8000386:	4093      	lsls	r3, r2
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	4642      	mov	r2, r8
 800038e:	4093      	lsls	r3, r2
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	e028      	b.n	80003e6 <__udivmoddi4+0xca>
 8000394:	4282      	cmp	r2, r0
 8000396:	d9cf      	bls.n	8000338 <__udivmoddi4+0x1c>
 8000398:	2200      	movs	r2, #0
 800039a:	2300      	movs	r3, #0
 800039c:	9200      	str	r2, [sp, #0]
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <__udivmoddi4+0x8e>
 80003a6:	601c      	str	r4, [r3, #0]
 80003a8:	605d      	str	r5, [r3, #4]
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	9901      	ldr	r1, [sp, #4]
 80003ae:	b003      	add	sp, #12
 80003b0:	bcf0      	pop	{r4, r5, r6, r7}
 80003b2:	46bb      	mov	fp, r7
 80003b4:	46b2      	mov	sl, r6
 80003b6:	46a9      	mov	r9, r5
 80003b8:	46a0      	mov	r8, r4
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	4652      	mov	r2, sl
 80003c4:	40da      	lsrs	r2, r3
 80003c6:	4641      	mov	r1, r8
 80003c8:	0013      	movs	r3, r2
 80003ca:	464a      	mov	r2, r9
 80003cc:	408a      	lsls	r2, r1
 80003ce:	0017      	movs	r7, r2
 80003d0:	4642      	mov	r2, r8
 80003d2:	431f      	orrs	r7, r3
 80003d4:	4653      	mov	r3, sl
 80003d6:	4093      	lsls	r3, r2
 80003d8:	001e      	movs	r6, r3
 80003da:	42af      	cmp	r7, r5
 80003dc:	d9c4      	bls.n	8000368 <__udivmoddi4+0x4c>
 80003de:	2200      	movs	r2, #0
 80003e0:	2300      	movs	r3, #0
 80003e2:	9200      	str	r2, [sp, #0]
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	4643      	mov	r3, r8
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0d9      	beq.n	80003a0 <__udivmoddi4+0x84>
 80003ec:	07fb      	lsls	r3, r7, #31
 80003ee:	0872      	lsrs	r2, r6, #1
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4646      	mov	r6, r8
 80003f4:	087b      	lsrs	r3, r7, #1
 80003f6:	e00e      	b.n	8000416 <__udivmoddi4+0xfa>
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	d101      	bne.n	8000400 <__udivmoddi4+0xe4>
 80003fc:	42a2      	cmp	r2, r4
 80003fe:	d80c      	bhi.n	800041a <__udivmoddi4+0xfe>
 8000400:	1aa4      	subs	r4, r4, r2
 8000402:	419d      	sbcs	r5, r3
 8000404:	2001      	movs	r0, #1
 8000406:	1924      	adds	r4, r4, r4
 8000408:	416d      	adcs	r5, r5
 800040a:	2100      	movs	r1, #0
 800040c:	3e01      	subs	r6, #1
 800040e:	1824      	adds	r4, r4, r0
 8000410:	414d      	adcs	r5, r1
 8000412:	2e00      	cmp	r6, #0
 8000414:	d006      	beq.n	8000424 <__udivmoddi4+0x108>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d9ee      	bls.n	80003f8 <__udivmoddi4+0xdc>
 800041a:	3e01      	subs	r6, #1
 800041c:	1924      	adds	r4, r4, r4
 800041e:	416d      	adcs	r5, r5
 8000420:	2e00      	cmp	r6, #0
 8000422:	d1f8      	bne.n	8000416 <__udivmoddi4+0xfa>
 8000424:	9800      	ldr	r0, [sp, #0]
 8000426:	9901      	ldr	r1, [sp, #4]
 8000428:	465b      	mov	r3, fp
 800042a:	1900      	adds	r0, r0, r4
 800042c:	4169      	adcs	r1, r5
 800042e:	2b00      	cmp	r3, #0
 8000430:	db24      	blt.n	800047c <__udivmoddi4+0x160>
 8000432:	002b      	movs	r3, r5
 8000434:	465a      	mov	r2, fp
 8000436:	4644      	mov	r4, r8
 8000438:	40d3      	lsrs	r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	40e2      	lsrs	r2, r4
 800043e:	001c      	movs	r4, r3
 8000440:	465b      	mov	r3, fp
 8000442:	0015      	movs	r5, r2
 8000444:	2b00      	cmp	r3, #0
 8000446:	db2a      	blt.n	800049e <__udivmoddi4+0x182>
 8000448:	0026      	movs	r6, r4
 800044a:	409e      	lsls	r6, r3
 800044c:	0033      	movs	r3, r6
 800044e:	0026      	movs	r6, r4
 8000450:	4647      	mov	r7, r8
 8000452:	40be      	lsls	r6, r7
 8000454:	0032      	movs	r2, r6
 8000456:	1a80      	subs	r0, r0, r2
 8000458:	4199      	sbcs	r1, r3
 800045a:	9000      	str	r0, [sp, #0]
 800045c:	9101      	str	r1, [sp, #4]
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x84>
 8000460:	42a3      	cmp	r3, r4
 8000462:	d8bc      	bhi.n	80003de <__udivmoddi4+0xc2>
 8000464:	e783      	b.n	800036e <__udivmoddi4+0x52>
 8000466:	4642      	mov	r2, r8
 8000468:	2320      	movs	r3, #32
 800046a:	2100      	movs	r1, #0
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	2200      	movs	r2, #0
 8000470:	9100      	str	r1, [sp, #0]
 8000472:	9201      	str	r2, [sp, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	40da      	lsrs	r2, r3
 8000478:	9201      	str	r2, [sp, #4]
 800047a:	e786      	b.n	800038a <__udivmoddi4+0x6e>
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	002a      	movs	r2, r5
 8000484:	4646      	mov	r6, r8
 8000486:	409a      	lsls	r2, r3
 8000488:	0023      	movs	r3, r4
 800048a:	40f3      	lsrs	r3, r6
 800048c:	4644      	mov	r4, r8
 800048e:	4313      	orrs	r3, r2
 8000490:	002a      	movs	r2, r5
 8000492:	40e2      	lsrs	r2, r4
 8000494:	001c      	movs	r4, r3
 8000496:	465b      	mov	r3, fp
 8000498:	0015      	movs	r5, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	dad4      	bge.n	8000448 <__udivmoddi4+0x12c>
 800049e:	4642      	mov	r2, r8
 80004a0:	002f      	movs	r7, r5
 80004a2:	2320      	movs	r3, #32
 80004a4:	0026      	movs	r6, r4
 80004a6:	4097      	lsls	r7, r2
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	40de      	lsrs	r6, r3
 80004ac:	003b      	movs	r3, r7
 80004ae:	4333      	orrs	r3, r6
 80004b0:	e7cd      	b.n	800044e <__udivmoddi4+0x132>
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_ui2f>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	1e05      	subs	r5, r0, #0
 80004b8:	d00e      	beq.n	80004d8 <__aeabi_ui2f+0x24>
 80004ba:	f001 faed 	bl	8001a98 <__clzsi2>
 80004be:	239e      	movs	r3, #158	; 0x9e
 80004c0:	0004      	movs	r4, r0
 80004c2:	1a1b      	subs	r3, r3, r0
 80004c4:	2b96      	cmp	r3, #150	; 0x96
 80004c6:	dc0c      	bgt.n	80004e2 <__aeabi_ui2f+0x2e>
 80004c8:	2808      	cmp	r0, #8
 80004ca:	dd01      	ble.n	80004d0 <__aeabi_ui2f+0x1c>
 80004cc:	3c08      	subs	r4, #8
 80004ce:	40a5      	lsls	r5, r4
 80004d0:	026d      	lsls	r5, r5, #9
 80004d2:	0a6d      	lsrs	r5, r5, #9
 80004d4:	b2d8      	uxtb	r0, r3
 80004d6:	e001      	b.n	80004dc <__aeabi_ui2f+0x28>
 80004d8:	2000      	movs	r0, #0
 80004da:	2500      	movs	r5, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4328      	orrs	r0, r5
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	2b99      	cmp	r3, #153	; 0x99
 80004e4:	dd09      	ble.n	80004fa <__aeabi_ui2f+0x46>
 80004e6:	0002      	movs	r2, r0
 80004e8:	0029      	movs	r1, r5
 80004ea:	321b      	adds	r2, #27
 80004ec:	4091      	lsls	r1, r2
 80004ee:	1e4a      	subs	r2, r1, #1
 80004f0:	4191      	sbcs	r1, r2
 80004f2:	2205      	movs	r2, #5
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	40d5      	lsrs	r5, r2
 80004f8:	430d      	orrs	r5, r1
 80004fa:	2c05      	cmp	r4, #5
 80004fc:	dc12      	bgt.n	8000524 <__aeabi_ui2f+0x70>
 80004fe:	0029      	movs	r1, r5
 8000500:	4e0c      	ldr	r6, [pc, #48]	; (8000534 <__aeabi_ui2f+0x80>)
 8000502:	4031      	ands	r1, r6
 8000504:	076a      	lsls	r2, r5, #29
 8000506:	d009      	beq.n	800051c <__aeabi_ui2f+0x68>
 8000508:	200f      	movs	r0, #15
 800050a:	4028      	ands	r0, r5
 800050c:	2804      	cmp	r0, #4
 800050e:	d005      	beq.n	800051c <__aeabi_ui2f+0x68>
 8000510:	3104      	adds	r1, #4
 8000512:	014a      	lsls	r2, r1, #5
 8000514:	d502      	bpl.n	800051c <__aeabi_ui2f+0x68>
 8000516:	239f      	movs	r3, #159	; 0x9f
 8000518:	4031      	ands	r1, r6
 800051a:	1b1b      	subs	r3, r3, r4
 800051c:	0189      	lsls	r1, r1, #6
 800051e:	0a4d      	lsrs	r5, r1, #9
 8000520:	b2d8      	uxtb	r0, r3
 8000522:	e7db      	b.n	80004dc <__aeabi_ui2f+0x28>
 8000524:	1f62      	subs	r2, r4, #5
 8000526:	4095      	lsls	r5, r2
 8000528:	0029      	movs	r1, r5
 800052a:	4e02      	ldr	r6, [pc, #8]	; (8000534 <__aeabi_ui2f+0x80>)
 800052c:	4031      	ands	r1, r6
 800052e:	076a      	lsls	r2, r5, #29
 8000530:	d0f4      	beq.n	800051c <__aeabi_ui2f+0x68>
 8000532:	e7e9      	b.n	8000508 <__aeabi_ui2f+0x54>
 8000534:	fbffffff 	.word	0xfbffffff

08000538 <__aeabi_dadd>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	464f      	mov	r7, r9
 800053c:	4646      	mov	r6, r8
 800053e:	46d6      	mov	lr, sl
 8000540:	000d      	movs	r5, r1
 8000542:	0004      	movs	r4, r0
 8000544:	b5c0      	push	{r6, r7, lr}
 8000546:	001f      	movs	r7, r3
 8000548:	0011      	movs	r1, r2
 800054a:	0328      	lsls	r0, r5, #12
 800054c:	0f62      	lsrs	r2, r4, #29
 800054e:	0a40      	lsrs	r0, r0, #9
 8000550:	4310      	orrs	r0, r2
 8000552:	007a      	lsls	r2, r7, #1
 8000554:	0d52      	lsrs	r2, r2, #21
 8000556:	00e3      	lsls	r3, r4, #3
 8000558:	033c      	lsls	r4, r7, #12
 800055a:	4691      	mov	r9, r2
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	0ffa      	lsrs	r2, r7, #31
 8000560:	0f4f      	lsrs	r7, r1, #29
 8000562:	006e      	lsls	r6, r5, #1
 8000564:	4327      	orrs	r7, r4
 8000566:	4692      	mov	sl, r2
 8000568:	46b8      	mov	r8, r7
 800056a:	0d76      	lsrs	r6, r6, #21
 800056c:	0fed      	lsrs	r5, r5, #31
 800056e:	00c9      	lsls	r1, r1, #3
 8000570:	4295      	cmp	r5, r2
 8000572:	d100      	bne.n	8000576 <__aeabi_dadd+0x3e>
 8000574:	e099      	b.n	80006aa <__aeabi_dadd+0x172>
 8000576:	464c      	mov	r4, r9
 8000578:	1b34      	subs	r4, r6, r4
 800057a:	46a4      	mov	ip, r4
 800057c:	2c00      	cmp	r4, #0
 800057e:	dc00      	bgt.n	8000582 <__aeabi_dadd+0x4a>
 8000580:	e07c      	b.n	800067c <__aeabi_dadd+0x144>
 8000582:	464a      	mov	r2, r9
 8000584:	2a00      	cmp	r2, #0
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0x52>
 8000588:	e0b8      	b.n	80006fc <__aeabi_dadd+0x1c4>
 800058a:	4ac5      	ldr	r2, [pc, #788]	; (80008a0 <__aeabi_dadd+0x368>)
 800058c:	4296      	cmp	r6, r2
 800058e:	d100      	bne.n	8000592 <__aeabi_dadd+0x5a>
 8000590:	e11c      	b.n	80007cc <__aeabi_dadd+0x294>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	003c      	movs	r4, r7
 8000596:	0412      	lsls	r2, r2, #16
 8000598:	4314      	orrs	r4, r2
 800059a:	46a0      	mov	r8, r4
 800059c:	4662      	mov	r2, ip
 800059e:	2a38      	cmp	r2, #56	; 0x38
 80005a0:	dd00      	ble.n	80005a4 <__aeabi_dadd+0x6c>
 80005a2:	e161      	b.n	8000868 <__aeabi_dadd+0x330>
 80005a4:	2a1f      	cmp	r2, #31
 80005a6:	dd00      	ble.n	80005aa <__aeabi_dadd+0x72>
 80005a8:	e1cc      	b.n	8000944 <__aeabi_dadd+0x40c>
 80005aa:	4664      	mov	r4, ip
 80005ac:	2220      	movs	r2, #32
 80005ae:	1b12      	subs	r2, r2, r4
 80005b0:	4644      	mov	r4, r8
 80005b2:	4094      	lsls	r4, r2
 80005b4:	000f      	movs	r7, r1
 80005b6:	46a1      	mov	r9, r4
 80005b8:	4664      	mov	r4, ip
 80005ba:	4091      	lsls	r1, r2
 80005bc:	40e7      	lsrs	r7, r4
 80005be:	464c      	mov	r4, r9
 80005c0:	1e4a      	subs	r2, r1, #1
 80005c2:	4191      	sbcs	r1, r2
 80005c4:	433c      	orrs	r4, r7
 80005c6:	4642      	mov	r2, r8
 80005c8:	4321      	orrs	r1, r4
 80005ca:	4664      	mov	r4, ip
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	1a80      	subs	r0, r0, r2
 80005d0:	1a5c      	subs	r4, r3, r1
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	419b      	sbcs	r3, r3
 80005d6:	425f      	negs	r7, r3
 80005d8:	1bc7      	subs	r7, r0, r7
 80005da:	023b      	lsls	r3, r7, #8
 80005dc:	d400      	bmi.n	80005e0 <__aeabi_dadd+0xa8>
 80005de:	e0d0      	b.n	8000782 <__aeabi_dadd+0x24a>
 80005e0:	027f      	lsls	r7, r7, #9
 80005e2:	0a7f      	lsrs	r7, r7, #9
 80005e4:	2f00      	cmp	r7, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_dadd+0xb2>
 80005e8:	e0ff      	b.n	80007ea <__aeabi_dadd+0x2b2>
 80005ea:	0038      	movs	r0, r7
 80005ec:	f001 fa54 	bl	8001a98 <__clzsi2>
 80005f0:	0001      	movs	r1, r0
 80005f2:	3908      	subs	r1, #8
 80005f4:	2320      	movs	r3, #32
 80005f6:	0022      	movs	r2, r4
 80005f8:	1a5b      	subs	r3, r3, r1
 80005fa:	408f      	lsls	r7, r1
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	408c      	lsls	r4, r1
 8000600:	4317      	orrs	r7, r2
 8000602:	42b1      	cmp	r1, r6
 8000604:	da00      	bge.n	8000608 <__aeabi_dadd+0xd0>
 8000606:	e0ff      	b.n	8000808 <__aeabi_dadd+0x2d0>
 8000608:	1b89      	subs	r1, r1, r6
 800060a:	1c4b      	adds	r3, r1, #1
 800060c:	2b1f      	cmp	r3, #31
 800060e:	dd00      	ble.n	8000612 <__aeabi_dadd+0xda>
 8000610:	e0a8      	b.n	8000764 <__aeabi_dadd+0x22c>
 8000612:	2220      	movs	r2, #32
 8000614:	0039      	movs	r1, r7
 8000616:	1ad2      	subs	r2, r2, r3
 8000618:	0020      	movs	r0, r4
 800061a:	4094      	lsls	r4, r2
 800061c:	4091      	lsls	r1, r2
 800061e:	40d8      	lsrs	r0, r3
 8000620:	1e62      	subs	r2, r4, #1
 8000622:	4194      	sbcs	r4, r2
 8000624:	40df      	lsrs	r7, r3
 8000626:	2600      	movs	r6, #0
 8000628:	4301      	orrs	r1, r0
 800062a:	430c      	orrs	r4, r1
 800062c:	0763      	lsls	r3, r4, #29
 800062e:	d009      	beq.n	8000644 <__aeabi_dadd+0x10c>
 8000630:	230f      	movs	r3, #15
 8000632:	4023      	ands	r3, r4
 8000634:	2b04      	cmp	r3, #4
 8000636:	d005      	beq.n	8000644 <__aeabi_dadd+0x10c>
 8000638:	1d23      	adds	r3, r4, #4
 800063a:	42a3      	cmp	r3, r4
 800063c:	41a4      	sbcs	r4, r4
 800063e:	4264      	negs	r4, r4
 8000640:	193f      	adds	r7, r7, r4
 8000642:	001c      	movs	r4, r3
 8000644:	023b      	lsls	r3, r7, #8
 8000646:	d400      	bmi.n	800064a <__aeabi_dadd+0x112>
 8000648:	e09e      	b.n	8000788 <__aeabi_dadd+0x250>
 800064a:	4b95      	ldr	r3, [pc, #596]	; (80008a0 <__aeabi_dadd+0x368>)
 800064c:	3601      	adds	r6, #1
 800064e:	429e      	cmp	r6, r3
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x11c>
 8000652:	e0b7      	b.n	80007c4 <__aeabi_dadd+0x28c>
 8000654:	4a93      	ldr	r2, [pc, #588]	; (80008a4 <__aeabi_dadd+0x36c>)
 8000656:	08e4      	lsrs	r4, r4, #3
 8000658:	4017      	ands	r7, r2
 800065a:	077b      	lsls	r3, r7, #29
 800065c:	0571      	lsls	r1, r6, #21
 800065e:	027f      	lsls	r7, r7, #9
 8000660:	4323      	orrs	r3, r4
 8000662:	0b3f      	lsrs	r7, r7, #12
 8000664:	0d4a      	lsrs	r2, r1, #21
 8000666:	0512      	lsls	r2, r2, #20
 8000668:	433a      	orrs	r2, r7
 800066a:	07ed      	lsls	r5, r5, #31
 800066c:	432a      	orrs	r2, r5
 800066e:	0018      	movs	r0, r3
 8000670:	0011      	movs	r1, r2
 8000672:	bce0      	pop	{r5, r6, r7}
 8000674:	46ba      	mov	sl, r7
 8000676:	46b1      	mov	r9, r6
 8000678:	46a8      	mov	r8, r5
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	2c00      	cmp	r4, #0
 800067e:	d04b      	beq.n	8000718 <__aeabi_dadd+0x1e0>
 8000680:	464c      	mov	r4, r9
 8000682:	1ba4      	subs	r4, r4, r6
 8000684:	46a4      	mov	ip, r4
 8000686:	2e00      	cmp	r6, #0
 8000688:	d000      	beq.n	800068c <__aeabi_dadd+0x154>
 800068a:	e123      	b.n	80008d4 <__aeabi_dadd+0x39c>
 800068c:	0004      	movs	r4, r0
 800068e:	431c      	orrs	r4, r3
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x15c>
 8000692:	e1af      	b.n	80009f4 <__aeabi_dadd+0x4bc>
 8000694:	4662      	mov	r2, ip
 8000696:	1e54      	subs	r4, r2, #1
 8000698:	2a01      	cmp	r2, #1
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x166>
 800069c:	e215      	b.n	8000aca <__aeabi_dadd+0x592>
 800069e:	4d80      	ldr	r5, [pc, #512]	; (80008a0 <__aeabi_dadd+0x368>)
 80006a0:	45ac      	cmp	ip, r5
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x16e>
 80006a4:	e1c8      	b.n	8000a38 <__aeabi_dadd+0x500>
 80006a6:	46a4      	mov	ip, r4
 80006a8:	e11b      	b.n	80008e2 <__aeabi_dadd+0x3aa>
 80006aa:	464a      	mov	r2, r9
 80006ac:	1ab2      	subs	r2, r6, r2
 80006ae:	4694      	mov	ip, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dadd+0x17e>
 80006b4:	e0ac      	b.n	8000810 <__aeabi_dadd+0x2d8>
 80006b6:	464a      	mov	r2, r9
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d043      	beq.n	8000744 <__aeabi_dadd+0x20c>
 80006bc:	4a78      	ldr	r2, [pc, #480]	; (80008a0 <__aeabi_dadd+0x368>)
 80006be:	4296      	cmp	r6, r2
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x18c>
 80006c2:	e1af      	b.n	8000a24 <__aeabi_dadd+0x4ec>
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	003c      	movs	r4, r7
 80006c8:	0412      	lsls	r2, r2, #16
 80006ca:	4314      	orrs	r4, r2
 80006cc:	46a0      	mov	r8, r4
 80006ce:	4662      	mov	r2, ip
 80006d0:	2a38      	cmp	r2, #56	; 0x38
 80006d2:	dc67      	bgt.n	80007a4 <__aeabi_dadd+0x26c>
 80006d4:	2a1f      	cmp	r2, #31
 80006d6:	dc00      	bgt.n	80006da <__aeabi_dadd+0x1a2>
 80006d8:	e15f      	b.n	800099a <__aeabi_dadd+0x462>
 80006da:	4647      	mov	r7, r8
 80006dc:	3a20      	subs	r2, #32
 80006de:	40d7      	lsrs	r7, r2
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a20      	cmp	r2, #32
 80006e4:	d005      	beq.n	80006f2 <__aeabi_dadd+0x1ba>
 80006e6:	4664      	mov	r4, ip
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	1b12      	subs	r2, r2, r4
 80006ec:	4644      	mov	r4, r8
 80006ee:	4094      	lsls	r4, r2
 80006f0:	4321      	orrs	r1, r4
 80006f2:	1e4a      	subs	r2, r1, #1
 80006f4:	4191      	sbcs	r1, r2
 80006f6:	000c      	movs	r4, r1
 80006f8:	433c      	orrs	r4, r7
 80006fa:	e057      	b.n	80007ac <__aeabi_dadd+0x274>
 80006fc:	003a      	movs	r2, r7
 80006fe:	430a      	orrs	r2, r1
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x1cc>
 8000702:	e105      	b.n	8000910 <__aeabi_dadd+0x3d8>
 8000704:	0022      	movs	r2, r4
 8000706:	3a01      	subs	r2, #1
 8000708:	2c01      	cmp	r4, #1
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x1d6>
 800070c:	e182      	b.n	8000a14 <__aeabi_dadd+0x4dc>
 800070e:	4c64      	ldr	r4, [pc, #400]	; (80008a0 <__aeabi_dadd+0x368>)
 8000710:	45a4      	cmp	ip, r4
 8000712:	d05b      	beq.n	80007cc <__aeabi_dadd+0x294>
 8000714:	4694      	mov	ip, r2
 8000716:	e741      	b.n	800059c <__aeabi_dadd+0x64>
 8000718:	4c63      	ldr	r4, [pc, #396]	; (80008a8 <__aeabi_dadd+0x370>)
 800071a:	1c77      	adds	r7, r6, #1
 800071c:	4227      	tst	r7, r4
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x1ea>
 8000720:	e0c4      	b.n	80008ac <__aeabi_dadd+0x374>
 8000722:	0004      	movs	r4, r0
 8000724:	431c      	orrs	r4, r3
 8000726:	2e00      	cmp	r6, #0
 8000728:	d000      	beq.n	800072c <__aeabi_dadd+0x1f4>
 800072a:	e169      	b.n	8000a00 <__aeabi_dadd+0x4c8>
 800072c:	2c00      	cmp	r4, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x1fa>
 8000730:	e1bf      	b.n	8000ab2 <__aeabi_dadd+0x57a>
 8000732:	4644      	mov	r4, r8
 8000734:	430c      	orrs	r4, r1
 8000736:	d000      	beq.n	800073a <__aeabi_dadd+0x202>
 8000738:	e1d0      	b.n	8000adc <__aeabi_dadd+0x5a4>
 800073a:	0742      	lsls	r2, r0, #29
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	4313      	orrs	r3, r2
 8000740:	08c0      	lsrs	r0, r0, #3
 8000742:	e029      	b.n	8000798 <__aeabi_dadd+0x260>
 8000744:	003a      	movs	r2, r7
 8000746:	430a      	orrs	r2, r1
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x214>
 800074a:	e170      	b.n	8000a2e <__aeabi_dadd+0x4f6>
 800074c:	4662      	mov	r2, ip
 800074e:	4664      	mov	r4, ip
 8000750:	3a01      	subs	r2, #1
 8000752:	2c01      	cmp	r4, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x220>
 8000756:	e0e0      	b.n	800091a <__aeabi_dadd+0x3e2>
 8000758:	4c51      	ldr	r4, [pc, #324]	; (80008a0 <__aeabi_dadd+0x368>)
 800075a:	45a4      	cmp	ip, r4
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x228>
 800075e:	e161      	b.n	8000a24 <__aeabi_dadd+0x4ec>
 8000760:	4694      	mov	ip, r2
 8000762:	e7b4      	b.n	80006ce <__aeabi_dadd+0x196>
 8000764:	003a      	movs	r2, r7
 8000766:	391f      	subs	r1, #31
 8000768:	40ca      	lsrs	r2, r1
 800076a:	0011      	movs	r1, r2
 800076c:	2b20      	cmp	r3, #32
 800076e:	d003      	beq.n	8000778 <__aeabi_dadd+0x240>
 8000770:	2240      	movs	r2, #64	; 0x40
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	409f      	lsls	r7, r3
 8000776:	433c      	orrs	r4, r7
 8000778:	1e63      	subs	r3, r4, #1
 800077a:	419c      	sbcs	r4, r3
 800077c:	2700      	movs	r7, #0
 800077e:	2600      	movs	r6, #0
 8000780:	430c      	orrs	r4, r1
 8000782:	0763      	lsls	r3, r4, #29
 8000784:	d000      	beq.n	8000788 <__aeabi_dadd+0x250>
 8000786:	e753      	b.n	8000630 <__aeabi_dadd+0xf8>
 8000788:	46b4      	mov	ip, r6
 800078a:	08e4      	lsrs	r4, r4, #3
 800078c:	077b      	lsls	r3, r7, #29
 800078e:	4323      	orrs	r3, r4
 8000790:	08f8      	lsrs	r0, r7, #3
 8000792:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <__aeabi_dadd+0x368>)
 8000794:	4594      	cmp	ip, r2
 8000796:	d01d      	beq.n	80007d4 <__aeabi_dadd+0x29c>
 8000798:	4662      	mov	r2, ip
 800079a:	0307      	lsls	r7, r0, #12
 800079c:	0552      	lsls	r2, r2, #21
 800079e:	0b3f      	lsrs	r7, r7, #12
 80007a0:	0d52      	lsrs	r2, r2, #21
 80007a2:	e760      	b.n	8000666 <__aeabi_dadd+0x12e>
 80007a4:	4644      	mov	r4, r8
 80007a6:	430c      	orrs	r4, r1
 80007a8:	1e62      	subs	r2, r4, #1
 80007aa:	4194      	sbcs	r4, r2
 80007ac:	18e4      	adds	r4, r4, r3
 80007ae:	429c      	cmp	r4, r3
 80007b0:	419b      	sbcs	r3, r3
 80007b2:	425f      	negs	r7, r3
 80007b4:	183f      	adds	r7, r7, r0
 80007b6:	023b      	lsls	r3, r7, #8
 80007b8:	d5e3      	bpl.n	8000782 <__aeabi_dadd+0x24a>
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <__aeabi_dadd+0x368>)
 80007bc:	3601      	adds	r6, #1
 80007be:	429e      	cmp	r6, r3
 80007c0:	d000      	beq.n	80007c4 <__aeabi_dadd+0x28c>
 80007c2:	e0b5      	b.n	8000930 <__aeabi_dadd+0x3f8>
 80007c4:	0032      	movs	r2, r6
 80007c6:	2700      	movs	r7, #0
 80007c8:	2300      	movs	r3, #0
 80007ca:	e74c      	b.n	8000666 <__aeabi_dadd+0x12e>
 80007cc:	0742      	lsls	r2, r0, #29
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	08c0      	lsrs	r0, r0, #3
 80007d4:	001a      	movs	r2, r3
 80007d6:	4302      	orrs	r2, r0
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x2a4>
 80007da:	e1e1      	b.n	8000ba0 <__aeabi_dadd+0x668>
 80007dc:	2780      	movs	r7, #128	; 0x80
 80007de:	033f      	lsls	r7, r7, #12
 80007e0:	4307      	orrs	r7, r0
 80007e2:	033f      	lsls	r7, r7, #12
 80007e4:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <__aeabi_dadd+0x368>)
 80007e6:	0b3f      	lsrs	r7, r7, #12
 80007e8:	e73d      	b.n	8000666 <__aeabi_dadd+0x12e>
 80007ea:	0020      	movs	r0, r4
 80007ec:	f001 f954 	bl	8001a98 <__clzsi2>
 80007f0:	0001      	movs	r1, r0
 80007f2:	3118      	adds	r1, #24
 80007f4:	291f      	cmp	r1, #31
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x2c2>
 80007f8:	e6fc      	b.n	80005f4 <__aeabi_dadd+0xbc>
 80007fa:	3808      	subs	r0, #8
 80007fc:	4084      	lsls	r4, r0
 80007fe:	0027      	movs	r7, r4
 8000800:	2400      	movs	r4, #0
 8000802:	42b1      	cmp	r1, r6
 8000804:	db00      	blt.n	8000808 <__aeabi_dadd+0x2d0>
 8000806:	e6ff      	b.n	8000608 <__aeabi_dadd+0xd0>
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <__aeabi_dadd+0x36c>)
 800080a:	1a76      	subs	r6, r6, r1
 800080c:	4017      	ands	r7, r2
 800080e:	e70d      	b.n	800062c <__aeabi_dadd+0xf4>
 8000810:	2a00      	cmp	r2, #0
 8000812:	d02f      	beq.n	8000874 <__aeabi_dadd+0x33c>
 8000814:	464a      	mov	r2, r9
 8000816:	1b92      	subs	r2, r2, r6
 8000818:	4694      	mov	ip, r2
 800081a:	2e00      	cmp	r6, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x2e8>
 800081e:	e0ad      	b.n	800097c <__aeabi_dadd+0x444>
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <__aeabi_dadd+0x368>)
 8000822:	4591      	cmp	r9, r2
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x2f0>
 8000826:	e10f      	b.n	8000a48 <__aeabi_dadd+0x510>
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0412      	lsls	r2, r2, #16
 800082c:	4310      	orrs	r0, r2
 800082e:	4662      	mov	r2, ip
 8000830:	2a38      	cmp	r2, #56	; 0x38
 8000832:	dd00      	ble.n	8000836 <__aeabi_dadd+0x2fe>
 8000834:	e10f      	b.n	8000a56 <__aeabi_dadd+0x51e>
 8000836:	2a1f      	cmp	r2, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x304>
 800083a:	e180      	b.n	8000b3e <__aeabi_dadd+0x606>
 800083c:	4664      	mov	r4, ip
 800083e:	2220      	movs	r2, #32
 8000840:	001e      	movs	r6, r3
 8000842:	1b12      	subs	r2, r2, r4
 8000844:	4667      	mov	r7, ip
 8000846:	0004      	movs	r4, r0
 8000848:	4093      	lsls	r3, r2
 800084a:	4094      	lsls	r4, r2
 800084c:	40fe      	lsrs	r6, r7
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	4193      	sbcs	r3, r2
 8000852:	40f8      	lsrs	r0, r7
 8000854:	4334      	orrs	r4, r6
 8000856:	431c      	orrs	r4, r3
 8000858:	4480      	add	r8, r0
 800085a:	1864      	adds	r4, r4, r1
 800085c:	428c      	cmp	r4, r1
 800085e:	41bf      	sbcs	r7, r7
 8000860:	427f      	negs	r7, r7
 8000862:	464e      	mov	r6, r9
 8000864:	4447      	add	r7, r8
 8000866:	e7a6      	b.n	80007b6 <__aeabi_dadd+0x27e>
 8000868:	4642      	mov	r2, r8
 800086a:	430a      	orrs	r2, r1
 800086c:	0011      	movs	r1, r2
 800086e:	1e4a      	subs	r2, r1, #1
 8000870:	4191      	sbcs	r1, r2
 8000872:	e6ad      	b.n	80005d0 <__aeabi_dadd+0x98>
 8000874:	4c0c      	ldr	r4, [pc, #48]	; (80008a8 <__aeabi_dadd+0x370>)
 8000876:	1c72      	adds	r2, r6, #1
 8000878:	4222      	tst	r2, r4
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x346>
 800087c:	e0a1      	b.n	80009c2 <__aeabi_dadd+0x48a>
 800087e:	0002      	movs	r2, r0
 8000880:	431a      	orrs	r2, r3
 8000882:	2e00      	cmp	r6, #0
 8000884:	d000      	beq.n	8000888 <__aeabi_dadd+0x350>
 8000886:	e0fa      	b.n	8000a7e <__aeabi_dadd+0x546>
 8000888:	2a00      	cmp	r2, #0
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x356>
 800088c:	e145      	b.n	8000b1a <__aeabi_dadd+0x5e2>
 800088e:	003a      	movs	r2, r7
 8000890:	430a      	orrs	r2, r1
 8000892:	d000      	beq.n	8000896 <__aeabi_dadd+0x35e>
 8000894:	e146      	b.n	8000b24 <__aeabi_dadd+0x5ec>
 8000896:	0742      	lsls	r2, r0, #29
 8000898:	08db      	lsrs	r3, r3, #3
 800089a:	4313      	orrs	r3, r2
 800089c:	08c0      	lsrs	r0, r0, #3
 800089e:	e77b      	b.n	8000798 <__aeabi_dadd+0x260>
 80008a0:	000007ff 	.word	0x000007ff
 80008a4:	ff7fffff 	.word	0xff7fffff
 80008a8:	000007fe 	.word	0x000007fe
 80008ac:	4647      	mov	r7, r8
 80008ae:	1a5c      	subs	r4, r3, r1
 80008b0:	1bc2      	subs	r2, r0, r7
 80008b2:	42a3      	cmp	r3, r4
 80008b4:	41bf      	sbcs	r7, r7
 80008b6:	427f      	negs	r7, r7
 80008b8:	46b9      	mov	r9, r7
 80008ba:	0017      	movs	r7, r2
 80008bc:	464a      	mov	r2, r9
 80008be:	1abf      	subs	r7, r7, r2
 80008c0:	023a      	lsls	r2, r7, #8
 80008c2:	d500      	bpl.n	80008c6 <__aeabi_dadd+0x38e>
 80008c4:	e08d      	b.n	80009e2 <__aeabi_dadd+0x4aa>
 80008c6:	0023      	movs	r3, r4
 80008c8:	433b      	orrs	r3, r7
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x396>
 80008cc:	e68a      	b.n	80005e4 <__aeabi_dadd+0xac>
 80008ce:	2000      	movs	r0, #0
 80008d0:	2500      	movs	r5, #0
 80008d2:	e761      	b.n	8000798 <__aeabi_dadd+0x260>
 80008d4:	4cb4      	ldr	r4, [pc, #720]	; (8000ba8 <__aeabi_dadd+0x670>)
 80008d6:	45a1      	cmp	r9, r4
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x3a4>
 80008da:	e0ad      	b.n	8000a38 <__aeabi_dadd+0x500>
 80008dc:	2480      	movs	r4, #128	; 0x80
 80008de:	0424      	lsls	r4, r4, #16
 80008e0:	4320      	orrs	r0, r4
 80008e2:	4664      	mov	r4, ip
 80008e4:	2c38      	cmp	r4, #56	; 0x38
 80008e6:	dc3d      	bgt.n	8000964 <__aeabi_dadd+0x42c>
 80008e8:	4662      	mov	r2, ip
 80008ea:	2c1f      	cmp	r4, #31
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_dadd+0x3b8>
 80008ee:	e0b7      	b.n	8000a60 <__aeabi_dadd+0x528>
 80008f0:	2520      	movs	r5, #32
 80008f2:	001e      	movs	r6, r3
 80008f4:	1b2d      	subs	r5, r5, r4
 80008f6:	0004      	movs	r4, r0
 80008f8:	40ab      	lsls	r3, r5
 80008fa:	40ac      	lsls	r4, r5
 80008fc:	40d6      	lsrs	r6, r2
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4642      	mov	r2, r8
 8000902:	1e5d      	subs	r5, r3, #1
 8000904:	41ab      	sbcs	r3, r5
 8000906:	4334      	orrs	r4, r6
 8000908:	1a12      	subs	r2, r2, r0
 800090a:	4690      	mov	r8, r2
 800090c:	4323      	orrs	r3, r4
 800090e:	e02c      	b.n	800096a <__aeabi_dadd+0x432>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	e73b      	b.n	8000792 <__aeabi_dadd+0x25a>
 800091a:	185c      	adds	r4, r3, r1
 800091c:	429c      	cmp	r4, r3
 800091e:	419b      	sbcs	r3, r3
 8000920:	4440      	add	r0, r8
 8000922:	425b      	negs	r3, r3
 8000924:	18c7      	adds	r7, r0, r3
 8000926:	2601      	movs	r6, #1
 8000928:	023b      	lsls	r3, r7, #8
 800092a:	d400      	bmi.n	800092e <__aeabi_dadd+0x3f6>
 800092c:	e729      	b.n	8000782 <__aeabi_dadd+0x24a>
 800092e:	2602      	movs	r6, #2
 8000930:	4a9e      	ldr	r2, [pc, #632]	; (8000bac <__aeabi_dadd+0x674>)
 8000932:	0863      	lsrs	r3, r4, #1
 8000934:	4017      	ands	r7, r2
 8000936:	2201      	movs	r2, #1
 8000938:	4014      	ands	r4, r2
 800093a:	431c      	orrs	r4, r3
 800093c:	07fb      	lsls	r3, r7, #31
 800093e:	431c      	orrs	r4, r3
 8000940:	087f      	lsrs	r7, r7, #1
 8000942:	e673      	b.n	800062c <__aeabi_dadd+0xf4>
 8000944:	4644      	mov	r4, r8
 8000946:	3a20      	subs	r2, #32
 8000948:	40d4      	lsrs	r4, r2
 800094a:	4662      	mov	r2, ip
 800094c:	2a20      	cmp	r2, #32
 800094e:	d005      	beq.n	800095c <__aeabi_dadd+0x424>
 8000950:	4667      	mov	r7, ip
 8000952:	2240      	movs	r2, #64	; 0x40
 8000954:	1bd2      	subs	r2, r2, r7
 8000956:	4647      	mov	r7, r8
 8000958:	4097      	lsls	r7, r2
 800095a:	4339      	orrs	r1, r7
 800095c:	1e4a      	subs	r2, r1, #1
 800095e:	4191      	sbcs	r1, r2
 8000960:	4321      	orrs	r1, r4
 8000962:	e635      	b.n	80005d0 <__aeabi_dadd+0x98>
 8000964:	4303      	orrs	r3, r0
 8000966:	1e58      	subs	r0, r3, #1
 8000968:	4183      	sbcs	r3, r0
 800096a:	1acc      	subs	r4, r1, r3
 800096c:	42a1      	cmp	r1, r4
 800096e:	41bf      	sbcs	r7, r7
 8000970:	4643      	mov	r3, r8
 8000972:	427f      	negs	r7, r7
 8000974:	4655      	mov	r5, sl
 8000976:	464e      	mov	r6, r9
 8000978:	1bdf      	subs	r7, r3, r7
 800097a:	e62e      	b.n	80005da <__aeabi_dadd+0xa2>
 800097c:	0002      	movs	r2, r0
 800097e:	431a      	orrs	r2, r3
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x44c>
 8000982:	e0bd      	b.n	8000b00 <__aeabi_dadd+0x5c8>
 8000984:	4662      	mov	r2, ip
 8000986:	4664      	mov	r4, ip
 8000988:	3a01      	subs	r2, #1
 800098a:	2c01      	cmp	r4, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x458>
 800098e:	e0e5      	b.n	8000b5c <__aeabi_dadd+0x624>
 8000990:	4c85      	ldr	r4, [pc, #532]	; (8000ba8 <__aeabi_dadd+0x670>)
 8000992:	45a4      	cmp	ip, r4
 8000994:	d058      	beq.n	8000a48 <__aeabi_dadd+0x510>
 8000996:	4694      	mov	ip, r2
 8000998:	e749      	b.n	800082e <__aeabi_dadd+0x2f6>
 800099a:	4664      	mov	r4, ip
 800099c:	2220      	movs	r2, #32
 800099e:	1b12      	subs	r2, r2, r4
 80009a0:	4644      	mov	r4, r8
 80009a2:	4094      	lsls	r4, r2
 80009a4:	000f      	movs	r7, r1
 80009a6:	46a1      	mov	r9, r4
 80009a8:	4664      	mov	r4, ip
 80009aa:	4091      	lsls	r1, r2
 80009ac:	40e7      	lsrs	r7, r4
 80009ae:	464c      	mov	r4, r9
 80009b0:	1e4a      	subs	r2, r1, #1
 80009b2:	4191      	sbcs	r1, r2
 80009b4:	433c      	orrs	r4, r7
 80009b6:	4642      	mov	r2, r8
 80009b8:	430c      	orrs	r4, r1
 80009ba:	4661      	mov	r1, ip
 80009bc:	40ca      	lsrs	r2, r1
 80009be:	1880      	adds	r0, r0, r2
 80009c0:	e6f4      	b.n	80007ac <__aeabi_dadd+0x274>
 80009c2:	4c79      	ldr	r4, [pc, #484]	; (8000ba8 <__aeabi_dadd+0x670>)
 80009c4:	42a2      	cmp	r2, r4
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x492>
 80009c8:	e6fd      	b.n	80007c6 <__aeabi_dadd+0x28e>
 80009ca:	1859      	adds	r1, r3, r1
 80009cc:	4299      	cmp	r1, r3
 80009ce:	419b      	sbcs	r3, r3
 80009d0:	4440      	add	r0, r8
 80009d2:	425f      	negs	r7, r3
 80009d4:	19c7      	adds	r7, r0, r7
 80009d6:	07fc      	lsls	r4, r7, #31
 80009d8:	0849      	lsrs	r1, r1, #1
 80009da:	0016      	movs	r6, r2
 80009dc:	430c      	orrs	r4, r1
 80009de:	087f      	lsrs	r7, r7, #1
 80009e0:	e6cf      	b.n	8000782 <__aeabi_dadd+0x24a>
 80009e2:	1acc      	subs	r4, r1, r3
 80009e4:	42a1      	cmp	r1, r4
 80009e6:	41bf      	sbcs	r7, r7
 80009e8:	4643      	mov	r3, r8
 80009ea:	427f      	negs	r7, r7
 80009ec:	1a18      	subs	r0, r3, r0
 80009ee:	4655      	mov	r5, sl
 80009f0:	1bc7      	subs	r7, r0, r7
 80009f2:	e5f7      	b.n	80005e4 <__aeabi_dadd+0xac>
 80009f4:	08c9      	lsrs	r1, r1, #3
 80009f6:	077b      	lsls	r3, r7, #29
 80009f8:	4655      	mov	r5, sl
 80009fa:	430b      	orrs	r3, r1
 80009fc:	08f8      	lsrs	r0, r7, #3
 80009fe:	e6c8      	b.n	8000792 <__aeabi_dadd+0x25a>
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	d000      	beq.n	8000a06 <__aeabi_dadd+0x4ce>
 8000a04:	e081      	b.n	8000b0a <__aeabi_dadd+0x5d2>
 8000a06:	4643      	mov	r3, r8
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	d115      	bne.n	8000a38 <__aeabi_dadd+0x500>
 8000a0c:	2080      	movs	r0, #128	; 0x80
 8000a0e:	2500      	movs	r5, #0
 8000a10:	0300      	lsls	r0, r0, #12
 8000a12:	e6e3      	b.n	80007dc <__aeabi_dadd+0x2a4>
 8000a14:	1a5c      	subs	r4, r3, r1
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	419b      	sbcs	r3, r3
 8000a1a:	1bc7      	subs	r7, r0, r7
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	2601      	movs	r6, #1
 8000a20:	1aff      	subs	r7, r7, r3
 8000a22:	e5da      	b.n	80005da <__aeabi_dadd+0xa2>
 8000a24:	0742      	lsls	r2, r0, #29
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	08c0      	lsrs	r0, r0, #3
 8000a2c:	e6d2      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000a2e:	0742      	lsls	r2, r0, #29
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	4313      	orrs	r3, r2
 8000a34:	08c0      	lsrs	r0, r0, #3
 8000a36:	e6ac      	b.n	8000792 <__aeabi_dadd+0x25a>
 8000a38:	4643      	mov	r3, r8
 8000a3a:	4642      	mov	r2, r8
 8000a3c:	08c9      	lsrs	r1, r1, #3
 8000a3e:	075b      	lsls	r3, r3, #29
 8000a40:	4655      	mov	r5, sl
 8000a42:	430b      	orrs	r3, r1
 8000a44:	08d0      	lsrs	r0, r2, #3
 8000a46:	e6c5      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000a48:	4643      	mov	r3, r8
 8000a4a:	4642      	mov	r2, r8
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	08c9      	lsrs	r1, r1, #3
 8000a50:	430b      	orrs	r3, r1
 8000a52:	08d0      	lsrs	r0, r2, #3
 8000a54:	e6be      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000a56:	4303      	orrs	r3, r0
 8000a58:	001c      	movs	r4, r3
 8000a5a:	1e63      	subs	r3, r4, #1
 8000a5c:	419c      	sbcs	r4, r3
 8000a5e:	e6fc      	b.n	800085a <__aeabi_dadd+0x322>
 8000a60:	0002      	movs	r2, r0
 8000a62:	3c20      	subs	r4, #32
 8000a64:	40e2      	lsrs	r2, r4
 8000a66:	0014      	movs	r4, r2
 8000a68:	4662      	mov	r2, ip
 8000a6a:	2a20      	cmp	r2, #32
 8000a6c:	d003      	beq.n	8000a76 <__aeabi_dadd+0x53e>
 8000a6e:	2540      	movs	r5, #64	; 0x40
 8000a70:	1aad      	subs	r5, r5, r2
 8000a72:	40a8      	lsls	r0, r5
 8000a74:	4303      	orrs	r3, r0
 8000a76:	1e58      	subs	r0, r3, #1
 8000a78:	4183      	sbcs	r3, r0
 8000a7a:	4323      	orrs	r3, r4
 8000a7c:	e775      	b.n	800096a <__aeabi_dadd+0x432>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d0e2      	beq.n	8000a48 <__aeabi_dadd+0x510>
 8000a82:	003a      	movs	r2, r7
 8000a84:	430a      	orrs	r2, r1
 8000a86:	d0cd      	beq.n	8000a24 <__aeabi_dadd+0x4ec>
 8000a88:	0742      	lsls	r2, r0, #29
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	08c0      	lsrs	r0, r0, #3
 8000a92:	0312      	lsls	r2, r2, #12
 8000a94:	4210      	tst	r0, r2
 8000a96:	d006      	beq.n	8000aa6 <__aeabi_dadd+0x56e>
 8000a98:	08fc      	lsrs	r4, r7, #3
 8000a9a:	4214      	tst	r4, r2
 8000a9c:	d103      	bne.n	8000aa6 <__aeabi_dadd+0x56e>
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	08cb      	lsrs	r3, r1, #3
 8000aa2:	077a      	lsls	r2, r7, #29
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	0f5a      	lsrs	r2, r3, #29
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	0752      	lsls	r2, r2, #29
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	e690      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x582>
 8000ab8:	e709      	b.n	80008ce <__aeabi_dadd+0x396>
 8000aba:	4643      	mov	r3, r8
 8000abc:	4642      	mov	r2, r8
 8000abe:	08c9      	lsrs	r1, r1, #3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4655      	mov	r5, sl
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	08d0      	lsrs	r0, r2, #3
 8000ac8:	e666      	b.n	8000798 <__aeabi_dadd+0x260>
 8000aca:	1acc      	subs	r4, r1, r3
 8000acc:	42a1      	cmp	r1, r4
 8000ace:	4189      	sbcs	r1, r1
 8000ad0:	1a3f      	subs	r7, r7, r0
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	4655      	mov	r5, sl
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	1a7f      	subs	r7, r7, r1
 8000ada:	e57e      	b.n	80005da <__aeabi_dadd+0xa2>
 8000adc:	4642      	mov	r2, r8
 8000ade:	1a5c      	subs	r4, r3, r1
 8000ae0:	1a87      	subs	r7, r0, r2
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	4192      	sbcs	r2, r2
 8000ae6:	4252      	negs	r2, r2
 8000ae8:	1abf      	subs	r7, r7, r2
 8000aea:	023a      	lsls	r2, r7, #8
 8000aec:	d53d      	bpl.n	8000b6a <__aeabi_dadd+0x632>
 8000aee:	1acc      	subs	r4, r1, r3
 8000af0:	42a1      	cmp	r1, r4
 8000af2:	4189      	sbcs	r1, r1
 8000af4:	4643      	mov	r3, r8
 8000af6:	4249      	negs	r1, r1
 8000af8:	1a1f      	subs	r7, r3, r0
 8000afa:	4655      	mov	r5, sl
 8000afc:	1a7f      	subs	r7, r7, r1
 8000afe:	e595      	b.n	800062c <__aeabi_dadd+0xf4>
 8000b00:	077b      	lsls	r3, r7, #29
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	430b      	orrs	r3, r1
 8000b06:	08f8      	lsrs	r0, r7, #3
 8000b08:	e643      	b.n	8000792 <__aeabi_dadd+0x25a>
 8000b0a:	4644      	mov	r4, r8
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	430c      	orrs	r4, r1
 8000b10:	d130      	bne.n	8000b74 <__aeabi_dadd+0x63c>
 8000b12:	0742      	lsls	r2, r0, #29
 8000b14:	4313      	orrs	r3, r2
 8000b16:	08c0      	lsrs	r0, r0, #3
 8000b18:	e65c      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000b1a:	077b      	lsls	r3, r7, #29
 8000b1c:	08c9      	lsrs	r1, r1, #3
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	08f8      	lsrs	r0, r7, #3
 8000b22:	e639      	b.n	8000798 <__aeabi_dadd+0x260>
 8000b24:	185c      	adds	r4, r3, r1
 8000b26:	429c      	cmp	r4, r3
 8000b28:	419b      	sbcs	r3, r3
 8000b2a:	4440      	add	r0, r8
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	18c7      	adds	r7, r0, r3
 8000b30:	023b      	lsls	r3, r7, #8
 8000b32:	d400      	bmi.n	8000b36 <__aeabi_dadd+0x5fe>
 8000b34:	e625      	b.n	8000782 <__aeabi_dadd+0x24a>
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <__aeabi_dadd+0x674>)
 8000b38:	2601      	movs	r6, #1
 8000b3a:	401f      	ands	r7, r3
 8000b3c:	e621      	b.n	8000782 <__aeabi_dadd+0x24a>
 8000b3e:	0004      	movs	r4, r0
 8000b40:	3a20      	subs	r2, #32
 8000b42:	40d4      	lsrs	r4, r2
 8000b44:	4662      	mov	r2, ip
 8000b46:	2a20      	cmp	r2, #32
 8000b48:	d004      	beq.n	8000b54 <__aeabi_dadd+0x61c>
 8000b4a:	2240      	movs	r2, #64	; 0x40
 8000b4c:	4666      	mov	r6, ip
 8000b4e:	1b92      	subs	r2, r2, r6
 8000b50:	4090      	lsls	r0, r2
 8000b52:	4303      	orrs	r3, r0
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	4193      	sbcs	r3, r2
 8000b58:	431c      	orrs	r4, r3
 8000b5a:	e67e      	b.n	800085a <__aeabi_dadd+0x322>
 8000b5c:	185c      	adds	r4, r3, r1
 8000b5e:	428c      	cmp	r4, r1
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4440      	add	r0, r8
 8000b64:	4249      	negs	r1, r1
 8000b66:	1847      	adds	r7, r0, r1
 8000b68:	e6dd      	b.n	8000926 <__aeabi_dadd+0x3ee>
 8000b6a:	0023      	movs	r3, r4
 8000b6c:	433b      	orrs	r3, r7
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x63a>
 8000b70:	e6ad      	b.n	80008ce <__aeabi_dadd+0x396>
 8000b72:	e606      	b.n	8000782 <__aeabi_dadd+0x24a>
 8000b74:	0744      	lsls	r4, r0, #29
 8000b76:	4323      	orrs	r3, r4
 8000b78:	2480      	movs	r4, #128	; 0x80
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	0324      	lsls	r4, r4, #12
 8000b7e:	4220      	tst	r0, r4
 8000b80:	d008      	beq.n	8000b94 <__aeabi_dadd+0x65c>
 8000b82:	4642      	mov	r2, r8
 8000b84:	08d6      	lsrs	r6, r2, #3
 8000b86:	4226      	tst	r6, r4
 8000b88:	d104      	bne.n	8000b94 <__aeabi_dadd+0x65c>
 8000b8a:	4655      	mov	r5, sl
 8000b8c:	0030      	movs	r0, r6
 8000b8e:	08cb      	lsrs	r3, r1, #3
 8000b90:	0751      	lsls	r1, r2, #29
 8000b92:	430b      	orrs	r3, r1
 8000b94:	0f5a      	lsrs	r2, r3, #29
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	0752      	lsls	r2, r2, #29
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	e619      	b.n	80007d4 <__aeabi_dadd+0x29c>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4a01      	ldr	r2, [pc, #4]	; (8000ba8 <__aeabi_dadd+0x670>)
 8000ba4:	001f      	movs	r7, r3
 8000ba6:	e55e      	b.n	8000666 <__aeabi_dadd+0x12e>
 8000ba8:	000007ff 	.word	0x000007ff
 8000bac:	ff7fffff 	.word	0xff7fffff

08000bb0 <__aeabi_ddiv>:
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	4657      	mov	r7, sl
 8000bb4:	464e      	mov	r6, r9
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	46de      	mov	lr, fp
 8000bba:	b5e0      	push	{r5, r6, r7, lr}
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	0005      	movs	r5, r0
 8000bc0:	030c      	lsls	r4, r1, #12
 8000bc2:	0048      	lsls	r0, r1, #1
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	001f      	movs	r7, r3
 8000bc8:	b085      	sub	sp, #20
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d40      	lsrs	r0, r0, #21
 8000bce:	0fce      	lsrs	r6, r1, #31
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_ddiv+0x26>
 8000bd4:	e156      	b.n	8000e84 <__aeabi_ddiv+0x2d4>
 8000bd6:	4bd4      	ldr	r3, [pc, #848]	; (8000f28 <__aeabi_ddiv+0x378>)
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0x2e>
 8000bdc:	e172      	b.n	8000ec4 <__aeabi_ddiv+0x314>
 8000bde:	0f6b      	lsrs	r3, r5, #29
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	431c      	orrs	r4, r3
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	4323      	orrs	r3, r4
 8000bea:	4698      	mov	r8, r3
 8000bec:	4bcf      	ldr	r3, [pc, #828]	; (8000f2c <__aeabi_ddiv+0x37c>)
 8000bee:	00ed      	lsls	r5, r5, #3
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	4483      	add	fp, r0
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	033c      	lsls	r4, r7, #12
 8000bfc:	007b      	lsls	r3, r7, #1
 8000bfe:	4650      	mov	r0, sl
 8000c00:	0b24      	lsrs	r4, r4, #12
 8000c02:	0d5b      	lsrs	r3, r3, #21
 8000c04:	0fff      	lsrs	r7, r7, #31
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_ddiv+0x5c>
 8000c0a:	e11f      	b.n	8000e4c <__aeabi_ddiv+0x29c>
 8000c0c:	4ac6      	ldr	r2, [pc, #792]	; (8000f28 <__aeabi_ddiv+0x378>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d100      	bne.n	8000c14 <__aeabi_ddiv+0x64>
 8000c12:	e162      	b.n	8000eda <__aeabi_ddiv+0x32a>
 8000c14:	49c5      	ldr	r1, [pc, #788]	; (8000f2c <__aeabi_ddiv+0x37c>)
 8000c16:	0f42      	lsrs	r2, r0, #29
 8000c18:	468c      	mov	ip, r1
 8000c1a:	00e4      	lsls	r4, r4, #3
 8000c1c:	4659      	mov	r1, fp
 8000c1e:	4314      	orrs	r4, r2
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	4463      	add	r3, ip
 8000c24:	0412      	lsls	r2, r2, #16
 8000c26:	1acb      	subs	r3, r1, r3
 8000c28:	4314      	orrs	r4, r2
 8000c2a:	469b      	mov	fp, r3
 8000c2c:	00c2      	lsls	r2, r0, #3
 8000c2e:	2000      	movs	r0, #0
 8000c30:	0033      	movs	r3, r6
 8000c32:	407b      	eors	r3, r7
 8000c34:	469a      	mov	sl, r3
 8000c36:	464b      	mov	r3, r9
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d827      	bhi.n	8000c8c <__aeabi_ddiv+0xdc>
 8000c3c:	49bc      	ldr	r1, [pc, #752]	; (8000f30 <__aeabi_ddiv+0x380>)
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	58cb      	ldr	r3, [r1, r3]
 8000c42:	469f      	mov	pc, r3
 8000c44:	46b2      	mov	sl, r6
 8000c46:	9b00      	ldr	r3, [sp, #0]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d016      	beq.n	8000c7a <__aeabi_ddiv+0xca>
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_ddiv+0xa2>
 8000c50:	e28e      	b.n	8001170 <__aeabi_ddiv+0x5c0>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d000      	beq.n	8000c58 <__aeabi_ddiv+0xa8>
 8000c56:	e0d9      	b.n	8000e0c <__aeabi_ddiv+0x25c>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4652      	mov	r2, sl
 8000c60:	051b      	lsls	r3, r3, #20
 8000c62:	4323      	orrs	r3, r4
 8000c64:	07d2      	lsls	r2, r2, #31
 8000c66:	4313      	orrs	r3, r2
 8000c68:	0028      	movs	r0, r5
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	b005      	add	sp, #20
 8000c6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c70:	46bb      	mov	fp, r7
 8000c72:	46b2      	mov	sl, r6
 8000c74:	46a9      	mov	r9, r5
 8000c76:	46a0      	mov	r8, r4
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	4baa      	ldr	r3, [pc, #680]	; (8000f28 <__aeabi_ddiv+0x378>)
 8000c80:	e7ed      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000c82:	46ba      	mov	sl, r7
 8000c84:	46a0      	mov	r8, r4
 8000c86:	0015      	movs	r5, r2
 8000c88:	9000      	str	r0, [sp, #0]
 8000c8a:	e7dc      	b.n	8000c46 <__aeabi_ddiv+0x96>
 8000c8c:	4544      	cmp	r4, r8
 8000c8e:	d200      	bcs.n	8000c92 <__aeabi_ddiv+0xe2>
 8000c90:	e1c7      	b.n	8001022 <__aeabi_ddiv+0x472>
 8000c92:	d100      	bne.n	8000c96 <__aeabi_ddiv+0xe6>
 8000c94:	e1c2      	b.n	800101c <__aeabi_ddiv+0x46c>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	002e      	movs	r6, r5
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	44e3      	add	fp, ip
 8000ca4:	0223      	lsls	r3, r4, #8
 8000ca6:	0e14      	lsrs	r4, r2, #24
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	4699      	mov	r9, r3
 8000cae:	0423      	lsls	r3, r4, #16
 8000cb0:	0c1f      	lsrs	r7, r3, #16
 8000cb2:	0212      	lsls	r2, r2, #8
 8000cb4:	4649      	mov	r1, r9
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	9701      	str	r7, [sp, #4]
 8000cba:	f7ff fabd 	bl	8000238 <__aeabi_uidivmod>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	437a      	muls	r2, r7
 8000cc2:	040b      	lsls	r3, r1, #16
 8000cc4:	0c31      	lsrs	r1, r6, #16
 8000cc6:	4680      	mov	r8, r0
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	d907      	bls.n	8000cde <__aeabi_ddiv+0x12e>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	1909      	adds	r1, r1, r4
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	428c      	cmp	r4, r1
 8000cda:	d800      	bhi.n	8000cde <__aeabi_ddiv+0x12e>
 8000cdc:	e207      	b.n	80010ee <__aeabi_ddiv+0x53e>
 8000cde:	1a88      	subs	r0, r1, r2
 8000ce0:	4649      	mov	r1, r9
 8000ce2:	f7ff faa9 	bl	8000238 <__aeabi_uidivmod>
 8000ce6:	0409      	lsls	r1, r1, #16
 8000ce8:	468c      	mov	ip, r1
 8000cea:	0431      	lsls	r1, r6, #16
 8000cec:	4666      	mov	r6, ip
 8000cee:	9a01      	ldr	r2, [sp, #4]
 8000cf0:	0c09      	lsrs	r1, r1, #16
 8000cf2:	4342      	muls	r2, r0
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	4331      	orrs	r1, r6
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	d904      	bls.n	8000d06 <__aeabi_ddiv+0x156>
 8000cfc:	1909      	adds	r1, r1, r4
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	428c      	cmp	r4, r1
 8000d02:	d800      	bhi.n	8000d06 <__aeabi_ddiv+0x156>
 8000d04:	e1ed      	b.n	80010e2 <__aeabi_ddiv+0x532>
 8000d06:	1a88      	subs	r0, r1, r2
 8000d08:	4642      	mov	r2, r8
 8000d0a:	0412      	lsls	r2, r2, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4690      	mov	r8, r2
 8000d10:	4641      	mov	r1, r8
 8000d12:	9b00      	ldr	r3, [sp, #0]
 8000d14:	040e      	lsls	r6, r1, #16
 8000d16:	0c1b      	lsrs	r3, r3, #16
 8000d18:	001f      	movs	r7, r3
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	9b00      	ldr	r3, [sp, #0]
 8000d1e:	0c36      	lsrs	r6, r6, #16
 8000d20:	041b      	lsls	r3, r3, #16
 8000d22:	0c19      	lsrs	r1, r3, #16
 8000d24:	000b      	movs	r3, r1
 8000d26:	4373      	muls	r3, r6
 8000d28:	0c12      	lsrs	r2, r2, #16
 8000d2a:	437e      	muls	r6, r7
 8000d2c:	9103      	str	r1, [sp, #12]
 8000d2e:	4351      	muls	r1, r2
 8000d30:	437a      	muls	r2, r7
 8000d32:	0c1f      	lsrs	r7, r3, #16
 8000d34:	46bc      	mov	ip, r7
 8000d36:	1876      	adds	r6, r6, r1
 8000d38:	4466      	add	r6, ip
 8000d3a:	42b1      	cmp	r1, r6
 8000d3c:	d903      	bls.n	8000d46 <__aeabi_ddiv+0x196>
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	468c      	mov	ip, r1
 8000d44:	4462      	add	r2, ip
 8000d46:	0c31      	lsrs	r1, r6, #16
 8000d48:	188a      	adds	r2, r1, r2
 8000d4a:	0431      	lsls	r1, r6, #16
 8000d4c:	041e      	lsls	r6, r3, #16
 8000d4e:	0c36      	lsrs	r6, r6, #16
 8000d50:	198e      	adds	r6, r1, r6
 8000d52:	4290      	cmp	r0, r2
 8000d54:	d302      	bcc.n	8000d5c <__aeabi_ddiv+0x1ac>
 8000d56:	d112      	bne.n	8000d7e <__aeabi_ddiv+0x1ce>
 8000d58:	42b5      	cmp	r5, r6
 8000d5a:	d210      	bcs.n	8000d7e <__aeabi_ddiv+0x1ce>
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	1e59      	subs	r1, r3, #1
 8000d60:	9b00      	ldr	r3, [sp, #0]
 8000d62:	469c      	mov	ip, r3
 8000d64:	4465      	add	r5, ip
 8000d66:	001f      	movs	r7, r3
 8000d68:	429d      	cmp	r5, r3
 8000d6a:	419b      	sbcs	r3, r3
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	191b      	adds	r3, r3, r4
 8000d70:	18c0      	adds	r0, r0, r3
 8000d72:	4284      	cmp	r4, r0
 8000d74:	d200      	bcs.n	8000d78 <__aeabi_ddiv+0x1c8>
 8000d76:	e1a0      	b.n	80010ba <__aeabi_ddiv+0x50a>
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x1cc>
 8000d7a:	e19b      	b.n	80010b4 <__aeabi_ddiv+0x504>
 8000d7c:	4688      	mov	r8, r1
 8000d7e:	1bae      	subs	r6, r5, r6
 8000d80:	42b5      	cmp	r5, r6
 8000d82:	41ad      	sbcs	r5, r5
 8000d84:	1a80      	subs	r0, r0, r2
 8000d86:	426d      	negs	r5, r5
 8000d88:	1b40      	subs	r0, r0, r5
 8000d8a:	4284      	cmp	r4, r0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x1e0>
 8000d8e:	e1d5      	b.n	800113c <__aeabi_ddiv+0x58c>
 8000d90:	4649      	mov	r1, r9
 8000d92:	f7ff fa51 	bl	8000238 <__aeabi_uidivmod>
 8000d96:	9a01      	ldr	r2, [sp, #4]
 8000d98:	040b      	lsls	r3, r1, #16
 8000d9a:	4342      	muls	r2, r0
 8000d9c:	0c31      	lsrs	r1, r6, #16
 8000d9e:	0005      	movs	r5, r0
 8000da0:	4319      	orrs	r1, r3
 8000da2:	428a      	cmp	r2, r1
 8000da4:	d900      	bls.n	8000da8 <__aeabi_ddiv+0x1f8>
 8000da6:	e16c      	b.n	8001082 <__aeabi_ddiv+0x4d2>
 8000da8:	1a88      	subs	r0, r1, r2
 8000daa:	4649      	mov	r1, r9
 8000dac:	f7ff fa44 	bl	8000238 <__aeabi_uidivmod>
 8000db0:	9a01      	ldr	r2, [sp, #4]
 8000db2:	0436      	lsls	r6, r6, #16
 8000db4:	4342      	muls	r2, r0
 8000db6:	0409      	lsls	r1, r1, #16
 8000db8:	0c36      	lsrs	r6, r6, #16
 8000dba:	0003      	movs	r3, r0
 8000dbc:	430e      	orrs	r6, r1
 8000dbe:	42b2      	cmp	r2, r6
 8000dc0:	d900      	bls.n	8000dc4 <__aeabi_ddiv+0x214>
 8000dc2:	e153      	b.n	800106c <__aeabi_ddiv+0x4bc>
 8000dc4:	9803      	ldr	r0, [sp, #12]
 8000dc6:	1ab6      	subs	r6, r6, r2
 8000dc8:	0002      	movs	r2, r0
 8000dca:	042d      	lsls	r5, r5, #16
 8000dcc:	431d      	orrs	r5, r3
 8000dce:	9f02      	ldr	r7, [sp, #8]
 8000dd0:	042b      	lsls	r3, r5, #16
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	435a      	muls	r2, r3
 8000dd6:	437b      	muls	r3, r7
 8000dd8:	469c      	mov	ip, r3
 8000dda:	0c29      	lsrs	r1, r5, #16
 8000ddc:	4348      	muls	r0, r1
 8000dde:	0c13      	lsrs	r3, r2, #16
 8000de0:	4484      	add	ip, r0
 8000de2:	4463      	add	r3, ip
 8000de4:	4379      	muls	r1, r7
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d903      	bls.n	8000df2 <__aeabi_ddiv+0x242>
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	0240      	lsls	r0, r0, #9
 8000dee:	4684      	mov	ip, r0
 8000df0:	4461      	add	r1, ip
 8000df2:	0c18      	lsrs	r0, r3, #16
 8000df4:	0412      	lsls	r2, r2, #16
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	0c12      	lsrs	r2, r2, #16
 8000dfa:	1841      	adds	r1, r0, r1
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	428e      	cmp	r6, r1
 8000e00:	d200      	bcs.n	8000e04 <__aeabi_ddiv+0x254>
 8000e02:	e0ff      	b.n	8001004 <__aeabi_ddiv+0x454>
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x258>
 8000e06:	e0fa      	b.n	8000ffe <__aeabi_ddiv+0x44e>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	431d      	orrs	r5, r3
 8000e0c:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <__aeabi_ddiv+0x384>)
 8000e0e:	445a      	add	r2, fp
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_ddiv+0x266>
 8000e14:	e0aa      	b.n	8000f6c <__aeabi_ddiv+0x3bc>
 8000e16:	076b      	lsls	r3, r5, #29
 8000e18:	d000      	beq.n	8000e1c <__aeabi_ddiv+0x26c>
 8000e1a:	e13d      	b.n	8001098 <__aeabi_ddiv+0x4e8>
 8000e1c:	08ed      	lsrs	r5, r5, #3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	d506      	bpl.n	8000e32 <__aeabi_ddiv+0x282>
 8000e24:	4642      	mov	r2, r8
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <__aeabi_ddiv+0x388>)
 8000e28:	401a      	ands	r2, r3
 8000e2a:	4690      	mov	r8, r2
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	00d2      	lsls	r2, r2, #3
 8000e30:	445a      	add	r2, fp
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <__aeabi_ddiv+0x38c>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_ddiv+0x28a>
 8000e38:	e71f      	b.n	8000c7a <__aeabi_ddiv+0xca>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	075b      	lsls	r3, r3, #29
 8000e3e:	431d      	orrs	r5, r3
 8000e40:	4643      	mov	r3, r8
 8000e42:	0552      	lsls	r2, r2, #21
 8000e44:	025c      	lsls	r4, r3, #9
 8000e46:	0b24      	lsrs	r4, r4, #12
 8000e48:	0d53      	lsrs	r3, r2, #21
 8000e4a:	e708      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	4322      	orrs	r2, r4
 8000e50:	d100      	bne.n	8000e54 <__aeabi_ddiv+0x2a4>
 8000e52:	e07b      	b.n	8000f4c <__aeabi_ddiv+0x39c>
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_ddiv+0x2aa>
 8000e58:	e0fa      	b.n	8001050 <__aeabi_ddiv+0x4a0>
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	f000 fe1c 	bl	8001a98 <__clzsi2>
 8000e60:	0002      	movs	r2, r0
 8000e62:	3a0b      	subs	r2, #11
 8000e64:	231d      	movs	r3, #29
 8000e66:	0001      	movs	r1, r0
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	3908      	subs	r1, #8
 8000e6e:	40da      	lsrs	r2, r3
 8000e70:	408c      	lsls	r4, r1
 8000e72:	4314      	orrs	r4, r2
 8000e74:	4652      	mov	r2, sl
 8000e76:	408a      	lsls	r2, r1
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <__aeabi_ddiv+0x390>)
 8000e7a:	4458      	add	r0, fp
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	4483      	add	fp, r0
 8000e80:	2000      	movs	r0, #0
 8000e82:	e6d5      	b.n	8000c30 <__aeabi_ddiv+0x80>
 8000e84:	464b      	mov	r3, r9
 8000e86:	4323      	orrs	r3, r4
 8000e88:	4698      	mov	r8, r3
 8000e8a:	d044      	beq.n	8000f16 <__aeabi_ddiv+0x366>
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0x2e2>
 8000e90:	e0ce      	b.n	8001030 <__aeabi_ddiv+0x480>
 8000e92:	0020      	movs	r0, r4
 8000e94:	f000 fe00 	bl	8001a98 <__clzsi2>
 8000e98:	0001      	movs	r1, r0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	390b      	subs	r1, #11
 8000e9e:	231d      	movs	r3, #29
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	40d9      	lsrs	r1, r3
 8000ea8:	3808      	subs	r0, #8
 8000eaa:	4084      	lsls	r4, r0
 8000eac:	000b      	movs	r3, r1
 8000eae:	464d      	mov	r5, r9
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	4085      	lsls	r5, r0
 8000eb6:	4823      	ldr	r0, [pc, #140]	; (8000f44 <__aeabi_ddiv+0x394>)
 8000eb8:	1a83      	subs	r3, r0, r2
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	e69a      	b.n	8000bfa <__aeabi_ddiv+0x4a>
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	4698      	mov	r8, r3
 8000eca:	d11d      	bne.n	8000f08 <__aeabi_ddiv+0x358>
 8000ecc:	2308      	movs	r3, #8
 8000ece:	4699      	mov	r9, r3
 8000ed0:	3b06      	subs	r3, #6
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	4683      	mov	fp, r0
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	e68f      	b.n	8000bfa <__aeabi_ddiv+0x4a>
 8000eda:	4652      	mov	r2, sl
 8000edc:	4322      	orrs	r2, r4
 8000ede:	d109      	bne.n	8000ef4 <__aeabi_ddiv+0x344>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <__aeabi_ddiv+0x398>)
 8000ee8:	4689      	mov	r9, r1
 8000eea:	469c      	mov	ip, r3
 8000eec:	2400      	movs	r4, #0
 8000eee:	2002      	movs	r0, #2
 8000ef0:	44e3      	add	fp, ip
 8000ef2:	e69d      	b.n	8000c30 <__aeabi_ddiv+0x80>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	464a      	mov	r2, r9
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <__aeabi_ddiv+0x398>)
 8000efc:	4691      	mov	r9, r2
 8000efe:	469c      	mov	ip, r3
 8000f00:	4652      	mov	r2, sl
 8000f02:	2003      	movs	r0, #3
 8000f04:	44e3      	add	fp, ip
 8000f06:	e693      	b.n	8000c30 <__aeabi_ddiv+0x80>
 8000f08:	230c      	movs	r3, #12
 8000f0a:	4699      	mov	r9, r3
 8000f0c:	3b09      	subs	r3, #9
 8000f0e:	46a0      	mov	r8, r4
 8000f10:	4683      	mov	fp, r0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	e671      	b.n	8000bfa <__aeabi_ddiv+0x4a>
 8000f16:	2304      	movs	r3, #4
 8000f18:	4699      	mov	r9, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	2500      	movs	r5, #0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	e669      	b.n	8000bfa <__aeabi_ddiv+0x4a>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	000007ff 	.word	0x000007ff
 8000f2c:	fffffc01 	.word	0xfffffc01
 8000f30:	08005b58 	.word	0x08005b58
 8000f34:	000003ff 	.word	0x000003ff
 8000f38:	feffffff 	.word	0xfeffffff
 8000f3c:	000007fe 	.word	0x000007fe
 8000f40:	000003f3 	.word	0x000003f3
 8000f44:	fffffc0d 	.word	0xfffffc0d
 8000f48:	fffff801 	.word	0xfffff801
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4319      	orrs	r1, r3
 8000f52:	4689      	mov	r9, r1
 8000f54:	2400      	movs	r4, #0
 8000f56:	2001      	movs	r0, #1
 8000f58:	e66a      	b.n	8000c30 <__aeabi_ddiv+0x80>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	469a      	mov	sl, r3
 8000f60:	2500      	movs	r5, #0
 8000f62:	4b8a      	ldr	r3, [pc, #552]	; (800118c <__aeabi_ddiv+0x5dc>)
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	e67a      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000f68:	2501      	movs	r5, #1
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	2b38      	cmp	r3, #56	; 0x38
 8000f72:	dd00      	ble.n	8000f76 <__aeabi_ddiv+0x3c6>
 8000f74:	e670      	b.n	8000c58 <__aeabi_ddiv+0xa8>
 8000f76:	2b1f      	cmp	r3, #31
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_ddiv+0x3cc>
 8000f7a:	e0bf      	b.n	80010fc <__aeabi_ddiv+0x54c>
 8000f7c:	211f      	movs	r1, #31
 8000f7e:	4249      	negs	r1, r1
 8000f80:	1a8a      	subs	r2, r1, r2
 8000f82:	4641      	mov	r1, r8
 8000f84:	40d1      	lsrs	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	2b20      	cmp	r3, #32
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_ddiv+0x3e6>
 8000f8c:	4641      	mov	r1, r8
 8000f8e:	4b80      	ldr	r3, [pc, #512]	; (8001190 <__aeabi_ddiv+0x5e0>)
 8000f90:	445b      	add	r3, fp
 8000f92:	4099      	lsls	r1, r3
 8000f94:	430d      	orrs	r5, r1
 8000f96:	1e6b      	subs	r3, r5, #1
 8000f98:	419d      	sbcs	r5, r3
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	432a      	orrs	r2, r5
 8000f9e:	001d      	movs	r5, r3
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	4015      	ands	r5, r2
 8000fa4:	4213      	tst	r3, r2
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x3fa>
 8000fa8:	e0d4      	b.n	8001154 <__aeabi_ddiv+0x5a4>
 8000faa:	210f      	movs	r1, #15
 8000fac:	2300      	movs	r3, #0
 8000fae:	4011      	ands	r1, r2
 8000fb0:	2904      	cmp	r1, #4
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x406>
 8000fb4:	e0cb      	b.n	800114e <__aeabi_ddiv+0x59e>
 8000fb6:	1d11      	adds	r1, r2, #4
 8000fb8:	4291      	cmp	r1, r2
 8000fba:	4192      	sbcs	r2, r2
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	0219      	lsls	r1, r3, #8
 8000fc4:	d400      	bmi.n	8000fc8 <__aeabi_ddiv+0x418>
 8000fc6:	e0c2      	b.n	800114e <__aeabi_ddiv+0x59e>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2500      	movs	r5, #0
 8000fce:	e646      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	031b      	lsls	r3, r3, #12
 8000fd6:	4219      	tst	r1, r3
 8000fd8:	d008      	beq.n	8000fec <__aeabi_ddiv+0x43c>
 8000fda:	421c      	tst	r4, r3
 8000fdc:	d106      	bne.n	8000fec <__aeabi_ddiv+0x43c>
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	46ba      	mov	sl, r7
 8000fe4:	0015      	movs	r5, r2
 8000fe6:	4b69      	ldr	r3, [pc, #420]	; (800118c <__aeabi_ddiv+0x5dc>)
 8000fe8:	0b24      	lsrs	r4, r4, #12
 8000fea:	e638      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000fec:	2480      	movs	r4, #128	; 0x80
 8000fee:	4643      	mov	r3, r8
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	46b2      	mov	sl, r6
 8000ff8:	4b64      	ldr	r3, [pc, #400]	; (800118c <__aeabi_ddiv+0x5dc>)
 8000ffa:	0b24      	lsrs	r4, r4, #12
 8000ffc:	e62f      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_ddiv+0x454>
 8001002:	e703      	b.n	8000e0c <__aeabi_ddiv+0x25c>
 8001004:	19a6      	adds	r6, r4, r6
 8001006:	1e68      	subs	r0, r5, #1
 8001008:	42a6      	cmp	r6, r4
 800100a:	d200      	bcs.n	800100e <__aeabi_ddiv+0x45e>
 800100c:	e08d      	b.n	800112a <__aeabi_ddiv+0x57a>
 800100e:	428e      	cmp	r6, r1
 8001010:	d200      	bcs.n	8001014 <__aeabi_ddiv+0x464>
 8001012:	e0a3      	b.n	800115c <__aeabi_ddiv+0x5ac>
 8001014:	d100      	bne.n	8001018 <__aeabi_ddiv+0x468>
 8001016:	e0b3      	b.n	8001180 <__aeabi_ddiv+0x5d0>
 8001018:	0005      	movs	r5, r0
 800101a:	e6f5      	b.n	8000e08 <__aeabi_ddiv+0x258>
 800101c:	42aa      	cmp	r2, r5
 800101e:	d900      	bls.n	8001022 <__aeabi_ddiv+0x472>
 8001020:	e639      	b.n	8000c96 <__aeabi_ddiv+0xe6>
 8001022:	4643      	mov	r3, r8
 8001024:	07de      	lsls	r6, r3, #31
 8001026:	0858      	lsrs	r0, r3, #1
 8001028:	086b      	lsrs	r3, r5, #1
 800102a:	431e      	orrs	r6, r3
 800102c:	07ed      	lsls	r5, r5, #31
 800102e:	e639      	b.n	8000ca4 <__aeabi_ddiv+0xf4>
 8001030:	4648      	mov	r0, r9
 8001032:	f000 fd31 	bl	8001a98 <__clzsi2>
 8001036:	0001      	movs	r1, r0
 8001038:	0002      	movs	r2, r0
 800103a:	3115      	adds	r1, #21
 800103c:	3220      	adds	r2, #32
 800103e:	291c      	cmp	r1, #28
 8001040:	dc00      	bgt.n	8001044 <__aeabi_ddiv+0x494>
 8001042:	e72c      	b.n	8000e9e <__aeabi_ddiv+0x2ee>
 8001044:	464b      	mov	r3, r9
 8001046:	3808      	subs	r0, #8
 8001048:	4083      	lsls	r3, r0
 800104a:	2500      	movs	r5, #0
 800104c:	4698      	mov	r8, r3
 800104e:	e732      	b.n	8000eb6 <__aeabi_ddiv+0x306>
 8001050:	f000 fd22 	bl	8001a98 <__clzsi2>
 8001054:	0003      	movs	r3, r0
 8001056:	001a      	movs	r2, r3
 8001058:	3215      	adds	r2, #21
 800105a:	3020      	adds	r0, #32
 800105c:	2a1c      	cmp	r2, #28
 800105e:	dc00      	bgt.n	8001062 <__aeabi_ddiv+0x4b2>
 8001060:	e700      	b.n	8000e64 <__aeabi_ddiv+0x2b4>
 8001062:	4654      	mov	r4, sl
 8001064:	3b08      	subs	r3, #8
 8001066:	2200      	movs	r2, #0
 8001068:	409c      	lsls	r4, r3
 800106a:	e705      	b.n	8000e78 <__aeabi_ddiv+0x2c8>
 800106c:	1936      	adds	r6, r6, r4
 800106e:	3b01      	subs	r3, #1
 8001070:	42b4      	cmp	r4, r6
 8001072:	d900      	bls.n	8001076 <__aeabi_ddiv+0x4c6>
 8001074:	e6a6      	b.n	8000dc4 <__aeabi_ddiv+0x214>
 8001076:	42b2      	cmp	r2, r6
 8001078:	d800      	bhi.n	800107c <__aeabi_ddiv+0x4cc>
 800107a:	e6a3      	b.n	8000dc4 <__aeabi_ddiv+0x214>
 800107c:	1e83      	subs	r3, r0, #2
 800107e:	1936      	adds	r6, r6, r4
 8001080:	e6a0      	b.n	8000dc4 <__aeabi_ddiv+0x214>
 8001082:	1909      	adds	r1, r1, r4
 8001084:	3d01      	subs	r5, #1
 8001086:	428c      	cmp	r4, r1
 8001088:	d900      	bls.n	800108c <__aeabi_ddiv+0x4dc>
 800108a:	e68d      	b.n	8000da8 <__aeabi_ddiv+0x1f8>
 800108c:	428a      	cmp	r2, r1
 800108e:	d800      	bhi.n	8001092 <__aeabi_ddiv+0x4e2>
 8001090:	e68a      	b.n	8000da8 <__aeabi_ddiv+0x1f8>
 8001092:	1e85      	subs	r5, r0, #2
 8001094:	1909      	adds	r1, r1, r4
 8001096:	e687      	b.n	8000da8 <__aeabi_ddiv+0x1f8>
 8001098:	230f      	movs	r3, #15
 800109a:	402b      	ands	r3, r5
 800109c:	2b04      	cmp	r3, #4
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x4f2>
 80010a0:	e6bc      	b.n	8000e1c <__aeabi_ddiv+0x26c>
 80010a2:	2305      	movs	r3, #5
 80010a4:	425b      	negs	r3, r3
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	419b      	sbcs	r3, r3
 80010aa:	3504      	adds	r5, #4
 80010ac:	425b      	negs	r3, r3
 80010ae:	08ed      	lsrs	r5, r5, #3
 80010b0:	4498      	add	r8, r3
 80010b2:	e6b4      	b.n	8000e1e <__aeabi_ddiv+0x26e>
 80010b4:	42af      	cmp	r7, r5
 80010b6:	d900      	bls.n	80010ba <__aeabi_ddiv+0x50a>
 80010b8:	e660      	b.n	8000d7c <__aeabi_ddiv+0x1cc>
 80010ba:	4282      	cmp	r2, r0
 80010bc:	d804      	bhi.n	80010c8 <__aeabi_ddiv+0x518>
 80010be:	d000      	beq.n	80010c2 <__aeabi_ddiv+0x512>
 80010c0:	e65c      	b.n	8000d7c <__aeabi_ddiv+0x1cc>
 80010c2:	42ae      	cmp	r6, r5
 80010c4:	d800      	bhi.n	80010c8 <__aeabi_ddiv+0x518>
 80010c6:	e659      	b.n	8000d7c <__aeabi_ddiv+0x1cc>
 80010c8:	2302      	movs	r3, #2
 80010ca:	425b      	negs	r3, r3
 80010cc:	469c      	mov	ip, r3
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	44e0      	add	r8, ip
 80010d2:	469c      	mov	ip, r3
 80010d4:	4465      	add	r5, ip
 80010d6:	429d      	cmp	r5, r3
 80010d8:	419b      	sbcs	r3, r3
 80010da:	425b      	negs	r3, r3
 80010dc:	191b      	adds	r3, r3, r4
 80010de:	18c0      	adds	r0, r0, r3
 80010e0:	e64d      	b.n	8000d7e <__aeabi_ddiv+0x1ce>
 80010e2:	428a      	cmp	r2, r1
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x538>
 80010e6:	e60e      	b.n	8000d06 <__aeabi_ddiv+0x156>
 80010e8:	1e83      	subs	r3, r0, #2
 80010ea:	1909      	adds	r1, r1, r4
 80010ec:	e60b      	b.n	8000d06 <__aeabi_ddiv+0x156>
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d800      	bhi.n	80010f4 <__aeabi_ddiv+0x544>
 80010f2:	e5f4      	b.n	8000cde <__aeabi_ddiv+0x12e>
 80010f4:	1e83      	subs	r3, r0, #2
 80010f6:	4698      	mov	r8, r3
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	e5f0      	b.n	8000cde <__aeabi_ddiv+0x12e>
 80010fc:	4925      	ldr	r1, [pc, #148]	; (8001194 <__aeabi_ddiv+0x5e4>)
 80010fe:	0028      	movs	r0, r5
 8001100:	4459      	add	r1, fp
 8001102:	408d      	lsls	r5, r1
 8001104:	4642      	mov	r2, r8
 8001106:	408a      	lsls	r2, r1
 8001108:	1e69      	subs	r1, r5, #1
 800110a:	418d      	sbcs	r5, r1
 800110c:	4641      	mov	r1, r8
 800110e:	40d8      	lsrs	r0, r3
 8001110:	40d9      	lsrs	r1, r3
 8001112:	4302      	orrs	r2, r0
 8001114:	432a      	orrs	r2, r5
 8001116:	000b      	movs	r3, r1
 8001118:	0751      	lsls	r1, r2, #29
 800111a:	d100      	bne.n	800111e <__aeabi_ddiv+0x56e>
 800111c:	e751      	b.n	8000fc2 <__aeabi_ddiv+0x412>
 800111e:	210f      	movs	r1, #15
 8001120:	4011      	ands	r1, r2
 8001122:	2904      	cmp	r1, #4
 8001124:	d000      	beq.n	8001128 <__aeabi_ddiv+0x578>
 8001126:	e746      	b.n	8000fb6 <__aeabi_ddiv+0x406>
 8001128:	e74b      	b.n	8000fc2 <__aeabi_ddiv+0x412>
 800112a:	0005      	movs	r5, r0
 800112c:	428e      	cmp	r6, r1
 800112e:	d000      	beq.n	8001132 <__aeabi_ddiv+0x582>
 8001130:	e66a      	b.n	8000e08 <__aeabi_ddiv+0x258>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	4293      	cmp	r3, r2
 8001136:	d000      	beq.n	800113a <__aeabi_ddiv+0x58a>
 8001138:	e666      	b.n	8000e08 <__aeabi_ddiv+0x258>
 800113a:	e667      	b.n	8000e0c <__aeabi_ddiv+0x25c>
 800113c:	4a16      	ldr	r2, [pc, #88]	; (8001198 <__aeabi_ddiv+0x5e8>)
 800113e:	445a      	add	r2, fp
 8001140:	2a00      	cmp	r2, #0
 8001142:	dc00      	bgt.n	8001146 <__aeabi_ddiv+0x596>
 8001144:	e710      	b.n	8000f68 <__aeabi_ddiv+0x3b8>
 8001146:	2301      	movs	r3, #1
 8001148:	2500      	movs	r5, #0
 800114a:	4498      	add	r8, r3
 800114c:	e667      	b.n	8000e1e <__aeabi_ddiv+0x26e>
 800114e:	075d      	lsls	r5, r3, #29
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	0b1c      	lsrs	r4, r3, #12
 8001154:	08d2      	lsrs	r2, r2, #3
 8001156:	2300      	movs	r3, #0
 8001158:	4315      	orrs	r5, r2
 800115a:	e580      	b.n	8000c5e <__aeabi_ddiv+0xae>
 800115c:	9800      	ldr	r0, [sp, #0]
 800115e:	3d02      	subs	r5, #2
 8001160:	0042      	lsls	r2, r0, #1
 8001162:	4282      	cmp	r2, r0
 8001164:	41bf      	sbcs	r7, r7
 8001166:	427f      	negs	r7, r7
 8001168:	193c      	adds	r4, r7, r4
 800116a:	1936      	adds	r6, r6, r4
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	e7dd      	b.n	800112c <__aeabi_ddiv+0x57c>
 8001170:	2480      	movs	r4, #128	; 0x80
 8001172:	4643      	mov	r3, r8
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <__aeabi_ddiv+0x5dc>)
 800117c:	0b24      	lsrs	r4, r4, #12
 800117e:	e56e      	b.n	8000c5e <__aeabi_ddiv+0xae>
 8001180:	9a00      	ldr	r2, [sp, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3ea      	bcc.n	800115c <__aeabi_ddiv+0x5ac>
 8001186:	0005      	movs	r5, r0
 8001188:	e7d3      	b.n	8001132 <__aeabi_ddiv+0x582>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	0000043e 	.word	0x0000043e
 8001194:	0000041e 	.word	0x0000041e
 8001198:	000003ff 	.word	0x000003ff

0800119c <__aeabi_dsub>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	4657      	mov	r7, sl
 80011a0:	464e      	mov	r6, r9
 80011a2:	4645      	mov	r5, r8
 80011a4:	46de      	mov	lr, fp
 80011a6:	b5e0      	push	{r5, r6, r7, lr}
 80011a8:	001e      	movs	r6, r3
 80011aa:	0017      	movs	r7, r2
 80011ac:	004a      	lsls	r2, r1, #1
 80011ae:	030b      	lsls	r3, r1, #12
 80011b0:	0d52      	lsrs	r2, r2, #21
 80011b2:	0a5b      	lsrs	r3, r3, #9
 80011b4:	4690      	mov	r8, r2
 80011b6:	0f42      	lsrs	r2, r0, #29
 80011b8:	431a      	orrs	r2, r3
 80011ba:	0fcd      	lsrs	r5, r1, #31
 80011bc:	4ccd      	ldr	r4, [pc, #820]	; (80014f4 <__aeabi_dsub+0x358>)
 80011be:	0331      	lsls	r1, r6, #12
 80011c0:	00c3      	lsls	r3, r0, #3
 80011c2:	4694      	mov	ip, r2
 80011c4:	0070      	lsls	r0, r6, #1
 80011c6:	0f7a      	lsrs	r2, r7, #29
 80011c8:	0a49      	lsrs	r1, r1, #9
 80011ca:	00ff      	lsls	r7, r7, #3
 80011cc:	469a      	mov	sl, r3
 80011ce:	46b9      	mov	r9, r7
 80011d0:	0d40      	lsrs	r0, r0, #21
 80011d2:	0ff6      	lsrs	r6, r6, #31
 80011d4:	4311      	orrs	r1, r2
 80011d6:	42a0      	cmp	r0, r4
 80011d8:	d100      	bne.n	80011dc <__aeabi_dsub+0x40>
 80011da:	e0b1      	b.n	8001340 <__aeabi_dsub+0x1a4>
 80011dc:	2201      	movs	r2, #1
 80011de:	4056      	eors	r6, r2
 80011e0:	46b3      	mov	fp, r6
 80011e2:	42b5      	cmp	r5, r6
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dsub+0x4c>
 80011e6:	e088      	b.n	80012fa <__aeabi_dsub+0x15e>
 80011e8:	4642      	mov	r2, r8
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dsub+0x56>
 80011f0:	e0ae      	b.n	8001350 <__aeabi_dsub+0x1b4>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dsub+0x5c>
 80011f6:	e0c1      	b.n	800137c <__aeabi_dsub+0x1e0>
 80011f8:	48be      	ldr	r0, [pc, #760]	; (80014f4 <__aeabi_dsub+0x358>)
 80011fa:	4580      	cmp	r8, r0
 80011fc:	d100      	bne.n	8001200 <__aeabi_dsub+0x64>
 80011fe:	e151      	b.n	80014a4 <__aeabi_dsub+0x308>
 8001200:	2080      	movs	r0, #128	; 0x80
 8001202:	0400      	lsls	r0, r0, #16
 8001204:	4301      	orrs	r1, r0
 8001206:	2a38      	cmp	r2, #56	; 0x38
 8001208:	dd00      	ble.n	800120c <__aeabi_dsub+0x70>
 800120a:	e17b      	b.n	8001504 <__aeabi_dsub+0x368>
 800120c:	2a1f      	cmp	r2, #31
 800120e:	dd00      	ble.n	8001212 <__aeabi_dsub+0x76>
 8001210:	e1ee      	b.n	80015f0 <__aeabi_dsub+0x454>
 8001212:	2020      	movs	r0, #32
 8001214:	003e      	movs	r6, r7
 8001216:	1a80      	subs	r0, r0, r2
 8001218:	000c      	movs	r4, r1
 800121a:	40d6      	lsrs	r6, r2
 800121c:	40d1      	lsrs	r1, r2
 800121e:	4087      	lsls	r7, r0
 8001220:	4662      	mov	r2, ip
 8001222:	4084      	lsls	r4, r0
 8001224:	1a52      	subs	r2, r2, r1
 8001226:	1e78      	subs	r0, r7, #1
 8001228:	4187      	sbcs	r7, r0
 800122a:	4694      	mov	ip, r2
 800122c:	4334      	orrs	r4, r6
 800122e:	4327      	orrs	r7, r4
 8001230:	1bdc      	subs	r4, r3, r7
 8001232:	42a3      	cmp	r3, r4
 8001234:	419b      	sbcs	r3, r3
 8001236:	4662      	mov	r2, ip
 8001238:	425b      	negs	r3, r3
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4699      	mov	r9, r3
 800123e:	464b      	mov	r3, r9
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	d400      	bmi.n	8001246 <__aeabi_dsub+0xaa>
 8001244:	e118      	b.n	8001478 <__aeabi_dsub+0x2dc>
 8001246:	464b      	mov	r3, r9
 8001248:	0258      	lsls	r0, r3, #9
 800124a:	0a43      	lsrs	r3, r0, #9
 800124c:	4699      	mov	r9, r3
 800124e:	464b      	mov	r3, r9
 8001250:	2b00      	cmp	r3, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_dsub+0xba>
 8001254:	e137      	b.n	80014c6 <__aeabi_dsub+0x32a>
 8001256:	4648      	mov	r0, r9
 8001258:	f000 fc1e 	bl	8001a98 <__clzsi2>
 800125c:	0001      	movs	r1, r0
 800125e:	3908      	subs	r1, #8
 8001260:	2320      	movs	r3, #32
 8001262:	0022      	movs	r2, r4
 8001264:	4648      	mov	r0, r9
 8001266:	1a5b      	subs	r3, r3, r1
 8001268:	40da      	lsrs	r2, r3
 800126a:	4088      	lsls	r0, r1
 800126c:	408c      	lsls	r4, r1
 800126e:	4643      	mov	r3, r8
 8001270:	4310      	orrs	r0, r2
 8001272:	4588      	cmp	r8, r1
 8001274:	dd00      	ble.n	8001278 <__aeabi_dsub+0xdc>
 8001276:	e136      	b.n	80014e6 <__aeabi_dsub+0x34a>
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	1c4b      	adds	r3, r1, #1
 800127c:	2b1f      	cmp	r3, #31
 800127e:	dd00      	ble.n	8001282 <__aeabi_dsub+0xe6>
 8001280:	e0ea      	b.n	8001458 <__aeabi_dsub+0x2bc>
 8001282:	2220      	movs	r2, #32
 8001284:	0026      	movs	r6, r4
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	0001      	movs	r1, r0
 800128a:	4094      	lsls	r4, r2
 800128c:	40de      	lsrs	r6, r3
 800128e:	40d8      	lsrs	r0, r3
 8001290:	2300      	movs	r3, #0
 8001292:	4091      	lsls	r1, r2
 8001294:	1e62      	subs	r2, r4, #1
 8001296:	4194      	sbcs	r4, r2
 8001298:	4681      	mov	r9, r0
 800129a:	4698      	mov	r8, r3
 800129c:	4331      	orrs	r1, r6
 800129e:	430c      	orrs	r4, r1
 80012a0:	0763      	lsls	r3, r4, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_dsub+0x11c>
 80012a4:	230f      	movs	r3, #15
 80012a6:	4023      	ands	r3, r4
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_dsub+0x11c>
 80012ac:	1d23      	adds	r3, r4, #4
 80012ae:	42a3      	cmp	r3, r4
 80012b0:	41a4      	sbcs	r4, r4
 80012b2:	4264      	negs	r4, r4
 80012b4:	44a1      	add	r9, r4
 80012b6:	001c      	movs	r4, r3
 80012b8:	464b      	mov	r3, r9
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	d400      	bmi.n	80012c0 <__aeabi_dsub+0x124>
 80012be:	e0de      	b.n	800147e <__aeabi_dsub+0x2e2>
 80012c0:	4641      	mov	r1, r8
 80012c2:	4b8c      	ldr	r3, [pc, #560]	; (80014f4 <__aeabi_dsub+0x358>)
 80012c4:	3101      	adds	r1, #1
 80012c6:	4299      	cmp	r1, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_dsub+0x130>
 80012ca:	e0e7      	b.n	800149c <__aeabi_dsub+0x300>
 80012cc:	464b      	mov	r3, r9
 80012ce:	488a      	ldr	r0, [pc, #552]	; (80014f8 <__aeabi_dsub+0x35c>)
 80012d0:	08e4      	lsrs	r4, r4, #3
 80012d2:	4003      	ands	r3, r0
 80012d4:	0018      	movs	r0, r3
 80012d6:	0549      	lsls	r1, r1, #21
 80012d8:	075b      	lsls	r3, r3, #29
 80012da:	0240      	lsls	r0, r0, #9
 80012dc:	4323      	orrs	r3, r4
 80012de:	0d4a      	lsrs	r2, r1, #21
 80012e0:	0b04      	lsrs	r4, r0, #12
 80012e2:	0512      	lsls	r2, r2, #20
 80012e4:	07ed      	lsls	r5, r5, #31
 80012e6:	4322      	orrs	r2, r4
 80012e8:	432a      	orrs	r2, r5
 80012ea:	0018      	movs	r0, r3
 80012ec:	0011      	movs	r1, r2
 80012ee:	bcf0      	pop	{r4, r5, r6, r7}
 80012f0:	46bb      	mov	fp, r7
 80012f2:	46b2      	mov	sl, r6
 80012f4:	46a9      	mov	r9, r5
 80012f6:	46a0      	mov	r8, r4
 80012f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fa:	4642      	mov	r2, r8
 80012fc:	1a12      	subs	r2, r2, r0
 80012fe:	2a00      	cmp	r2, #0
 8001300:	dd52      	ble.n	80013a8 <__aeabi_dsub+0x20c>
 8001302:	2800      	cmp	r0, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_dsub+0x16c>
 8001306:	e09c      	b.n	8001442 <__aeabi_dsub+0x2a6>
 8001308:	45a0      	cmp	r8, r4
 800130a:	d100      	bne.n	800130e <__aeabi_dsub+0x172>
 800130c:	e0ca      	b.n	80014a4 <__aeabi_dsub+0x308>
 800130e:	2080      	movs	r0, #128	; 0x80
 8001310:	0400      	lsls	r0, r0, #16
 8001312:	4301      	orrs	r1, r0
 8001314:	2a38      	cmp	r2, #56	; 0x38
 8001316:	dd00      	ble.n	800131a <__aeabi_dsub+0x17e>
 8001318:	e149      	b.n	80015ae <__aeabi_dsub+0x412>
 800131a:	2a1f      	cmp	r2, #31
 800131c:	dc00      	bgt.n	8001320 <__aeabi_dsub+0x184>
 800131e:	e197      	b.n	8001650 <__aeabi_dsub+0x4b4>
 8001320:	0010      	movs	r0, r2
 8001322:	000e      	movs	r6, r1
 8001324:	3820      	subs	r0, #32
 8001326:	40c6      	lsrs	r6, r0
 8001328:	2a20      	cmp	r2, #32
 800132a:	d004      	beq.n	8001336 <__aeabi_dsub+0x19a>
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	1a82      	subs	r2, r0, r2
 8001330:	4091      	lsls	r1, r2
 8001332:	430f      	orrs	r7, r1
 8001334:	46b9      	mov	r9, r7
 8001336:	464c      	mov	r4, r9
 8001338:	1e62      	subs	r2, r4, #1
 800133a:	4194      	sbcs	r4, r2
 800133c:	4334      	orrs	r4, r6
 800133e:	e13a      	b.n	80015b6 <__aeabi_dsub+0x41a>
 8001340:	000a      	movs	r2, r1
 8001342:	433a      	orrs	r2, r7
 8001344:	d028      	beq.n	8001398 <__aeabi_dsub+0x1fc>
 8001346:	46b3      	mov	fp, r6
 8001348:	42b5      	cmp	r5, r6
 800134a:	d02b      	beq.n	80013a4 <__aeabi_dsub+0x208>
 800134c:	4a6b      	ldr	r2, [pc, #428]	; (80014fc <__aeabi_dsub+0x360>)
 800134e:	4442      	add	r2, r8
 8001350:	2a00      	cmp	r2, #0
 8001352:	d05d      	beq.n	8001410 <__aeabi_dsub+0x274>
 8001354:	4642      	mov	r2, r8
 8001356:	4644      	mov	r4, r8
 8001358:	1a82      	subs	r2, r0, r2
 800135a:	2c00      	cmp	r4, #0
 800135c:	d000      	beq.n	8001360 <__aeabi_dsub+0x1c4>
 800135e:	e0f5      	b.n	800154c <__aeabi_dsub+0x3b0>
 8001360:	4665      	mov	r5, ip
 8001362:	431d      	orrs	r5, r3
 8001364:	d100      	bne.n	8001368 <__aeabi_dsub+0x1cc>
 8001366:	e19c      	b.n	80016a2 <__aeabi_dsub+0x506>
 8001368:	1e55      	subs	r5, r2, #1
 800136a:	2a01      	cmp	r2, #1
 800136c:	d100      	bne.n	8001370 <__aeabi_dsub+0x1d4>
 800136e:	e1fb      	b.n	8001768 <__aeabi_dsub+0x5cc>
 8001370:	4c60      	ldr	r4, [pc, #384]	; (80014f4 <__aeabi_dsub+0x358>)
 8001372:	42a2      	cmp	r2, r4
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x1dc>
 8001376:	e1bd      	b.n	80016f4 <__aeabi_dsub+0x558>
 8001378:	002a      	movs	r2, r5
 800137a:	e0f0      	b.n	800155e <__aeabi_dsub+0x3c2>
 800137c:	0008      	movs	r0, r1
 800137e:	4338      	orrs	r0, r7
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x1e8>
 8001382:	e0c3      	b.n	800150c <__aeabi_dsub+0x370>
 8001384:	1e50      	subs	r0, r2, #1
 8001386:	2a01      	cmp	r2, #1
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x1f0>
 800138a:	e1a8      	b.n	80016de <__aeabi_dsub+0x542>
 800138c:	4c59      	ldr	r4, [pc, #356]	; (80014f4 <__aeabi_dsub+0x358>)
 800138e:	42a2      	cmp	r2, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x1f8>
 8001392:	e087      	b.n	80014a4 <__aeabi_dsub+0x308>
 8001394:	0002      	movs	r2, r0
 8001396:	e736      	b.n	8001206 <__aeabi_dsub+0x6a>
 8001398:	2201      	movs	r2, #1
 800139a:	4056      	eors	r6, r2
 800139c:	46b3      	mov	fp, r6
 800139e:	42b5      	cmp	r5, r6
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dsub+0x208>
 80013a2:	e721      	b.n	80011e8 <__aeabi_dsub+0x4c>
 80013a4:	4a55      	ldr	r2, [pc, #340]	; (80014fc <__aeabi_dsub+0x360>)
 80013a6:	4442      	add	r2, r8
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d100      	bne.n	80013ae <__aeabi_dsub+0x212>
 80013ac:	e0b5      	b.n	800151a <__aeabi_dsub+0x37e>
 80013ae:	4642      	mov	r2, r8
 80013b0:	4644      	mov	r4, r8
 80013b2:	1a82      	subs	r2, r0, r2
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dsub+0x21e>
 80013b8:	e138      	b.n	800162c <__aeabi_dsub+0x490>
 80013ba:	4e4e      	ldr	r6, [pc, #312]	; (80014f4 <__aeabi_dsub+0x358>)
 80013bc:	42b0      	cmp	r0, r6
 80013be:	d100      	bne.n	80013c2 <__aeabi_dsub+0x226>
 80013c0:	e1de      	b.n	8001780 <__aeabi_dsub+0x5e4>
 80013c2:	2680      	movs	r6, #128	; 0x80
 80013c4:	4664      	mov	r4, ip
 80013c6:	0436      	lsls	r6, r6, #16
 80013c8:	4334      	orrs	r4, r6
 80013ca:	46a4      	mov	ip, r4
 80013cc:	2a38      	cmp	r2, #56	; 0x38
 80013ce:	dd00      	ble.n	80013d2 <__aeabi_dsub+0x236>
 80013d0:	e196      	b.n	8001700 <__aeabi_dsub+0x564>
 80013d2:	2a1f      	cmp	r2, #31
 80013d4:	dd00      	ble.n	80013d8 <__aeabi_dsub+0x23c>
 80013d6:	e224      	b.n	8001822 <__aeabi_dsub+0x686>
 80013d8:	2620      	movs	r6, #32
 80013da:	1ab4      	subs	r4, r6, r2
 80013dc:	46a2      	mov	sl, r4
 80013de:	4664      	mov	r4, ip
 80013e0:	4656      	mov	r6, sl
 80013e2:	40b4      	lsls	r4, r6
 80013e4:	46a1      	mov	r9, r4
 80013e6:	001c      	movs	r4, r3
 80013e8:	464e      	mov	r6, r9
 80013ea:	40d4      	lsrs	r4, r2
 80013ec:	4326      	orrs	r6, r4
 80013ee:	0034      	movs	r4, r6
 80013f0:	4656      	mov	r6, sl
 80013f2:	40b3      	lsls	r3, r6
 80013f4:	1e5e      	subs	r6, r3, #1
 80013f6:	41b3      	sbcs	r3, r6
 80013f8:	431c      	orrs	r4, r3
 80013fa:	4663      	mov	r3, ip
 80013fc:	40d3      	lsrs	r3, r2
 80013fe:	18c9      	adds	r1, r1, r3
 8001400:	19e4      	adds	r4, r4, r7
 8001402:	42bc      	cmp	r4, r7
 8001404:	41bf      	sbcs	r7, r7
 8001406:	427f      	negs	r7, r7
 8001408:	46b9      	mov	r9, r7
 800140a:	4680      	mov	r8, r0
 800140c:	4489      	add	r9, r1
 800140e:	e0d8      	b.n	80015c2 <__aeabi_dsub+0x426>
 8001410:	4640      	mov	r0, r8
 8001412:	4c3b      	ldr	r4, [pc, #236]	; (8001500 <__aeabi_dsub+0x364>)
 8001414:	3001      	adds	r0, #1
 8001416:	4220      	tst	r0, r4
 8001418:	d000      	beq.n	800141c <__aeabi_dsub+0x280>
 800141a:	e0b4      	b.n	8001586 <__aeabi_dsub+0x3ea>
 800141c:	4640      	mov	r0, r8
 800141e:	2800      	cmp	r0, #0
 8001420:	d000      	beq.n	8001424 <__aeabi_dsub+0x288>
 8001422:	e144      	b.n	80016ae <__aeabi_dsub+0x512>
 8001424:	4660      	mov	r0, ip
 8001426:	4318      	orrs	r0, r3
 8001428:	d100      	bne.n	800142c <__aeabi_dsub+0x290>
 800142a:	e190      	b.n	800174e <__aeabi_dsub+0x5b2>
 800142c:	0008      	movs	r0, r1
 800142e:	4338      	orrs	r0, r7
 8001430:	d000      	beq.n	8001434 <__aeabi_dsub+0x298>
 8001432:	e1aa      	b.n	800178a <__aeabi_dsub+0x5ee>
 8001434:	4661      	mov	r1, ip
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	0749      	lsls	r1, r1, #29
 800143a:	430b      	orrs	r3, r1
 800143c:	4661      	mov	r1, ip
 800143e:	08cc      	lsrs	r4, r1, #3
 8001440:	e027      	b.n	8001492 <__aeabi_dsub+0x2f6>
 8001442:	0008      	movs	r0, r1
 8001444:	4338      	orrs	r0, r7
 8001446:	d061      	beq.n	800150c <__aeabi_dsub+0x370>
 8001448:	1e50      	subs	r0, r2, #1
 800144a:	2a01      	cmp	r2, #1
 800144c:	d100      	bne.n	8001450 <__aeabi_dsub+0x2b4>
 800144e:	e139      	b.n	80016c4 <__aeabi_dsub+0x528>
 8001450:	42a2      	cmp	r2, r4
 8001452:	d027      	beq.n	80014a4 <__aeabi_dsub+0x308>
 8001454:	0002      	movs	r2, r0
 8001456:	e75d      	b.n	8001314 <__aeabi_dsub+0x178>
 8001458:	0002      	movs	r2, r0
 800145a:	391f      	subs	r1, #31
 800145c:	40ca      	lsrs	r2, r1
 800145e:	0011      	movs	r1, r2
 8001460:	2b20      	cmp	r3, #32
 8001462:	d003      	beq.n	800146c <__aeabi_dsub+0x2d0>
 8001464:	2240      	movs	r2, #64	; 0x40
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4098      	lsls	r0, r3
 800146a:	4304      	orrs	r4, r0
 800146c:	1e63      	subs	r3, r4, #1
 800146e:	419c      	sbcs	r4, r3
 8001470:	2300      	movs	r3, #0
 8001472:	4699      	mov	r9, r3
 8001474:	4698      	mov	r8, r3
 8001476:	430c      	orrs	r4, r1
 8001478:	0763      	lsls	r3, r4, #29
 800147a:	d000      	beq.n	800147e <__aeabi_dsub+0x2e2>
 800147c:	e712      	b.n	80012a4 <__aeabi_dsub+0x108>
 800147e:	464b      	mov	r3, r9
 8001480:	464a      	mov	r2, r9
 8001482:	08e4      	lsrs	r4, r4, #3
 8001484:	075b      	lsls	r3, r3, #29
 8001486:	4323      	orrs	r3, r4
 8001488:	08d4      	lsrs	r4, r2, #3
 800148a:	4642      	mov	r2, r8
 800148c:	4919      	ldr	r1, [pc, #100]	; (80014f4 <__aeabi_dsub+0x358>)
 800148e:	428a      	cmp	r2, r1
 8001490:	d00e      	beq.n	80014b0 <__aeabi_dsub+0x314>
 8001492:	0324      	lsls	r4, r4, #12
 8001494:	0552      	lsls	r2, r2, #21
 8001496:	0b24      	lsrs	r4, r4, #12
 8001498:	0d52      	lsrs	r2, r2, #21
 800149a:	e722      	b.n	80012e2 <__aeabi_dsub+0x146>
 800149c:	000a      	movs	r2, r1
 800149e:	2400      	movs	r4, #0
 80014a0:	2300      	movs	r3, #0
 80014a2:	e71e      	b.n	80012e2 <__aeabi_dsub+0x146>
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	4662      	mov	r2, ip
 80014a8:	0752      	lsls	r2, r2, #29
 80014aa:	4313      	orrs	r3, r2
 80014ac:	4662      	mov	r2, ip
 80014ae:	08d4      	lsrs	r4, r2, #3
 80014b0:	001a      	movs	r2, r3
 80014b2:	4322      	orrs	r2, r4
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dsub+0x31c>
 80014b6:	e1fc      	b.n	80018b2 <__aeabi_dsub+0x716>
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	0312      	lsls	r2, r2, #12
 80014bc:	4314      	orrs	r4, r2
 80014be:	0324      	lsls	r4, r4, #12
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <__aeabi_dsub+0x358>)
 80014c2:	0b24      	lsrs	r4, r4, #12
 80014c4:	e70d      	b.n	80012e2 <__aeabi_dsub+0x146>
 80014c6:	0020      	movs	r0, r4
 80014c8:	f000 fae6 	bl	8001a98 <__clzsi2>
 80014cc:	0001      	movs	r1, r0
 80014ce:	3118      	adds	r1, #24
 80014d0:	291f      	cmp	r1, #31
 80014d2:	dc00      	bgt.n	80014d6 <__aeabi_dsub+0x33a>
 80014d4:	e6c4      	b.n	8001260 <__aeabi_dsub+0xc4>
 80014d6:	3808      	subs	r0, #8
 80014d8:	4084      	lsls	r4, r0
 80014da:	4643      	mov	r3, r8
 80014dc:	0020      	movs	r0, r4
 80014de:	2400      	movs	r4, #0
 80014e0:	4588      	cmp	r8, r1
 80014e2:	dc00      	bgt.n	80014e6 <__aeabi_dsub+0x34a>
 80014e4:	e6c8      	b.n	8001278 <__aeabi_dsub+0xdc>
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__aeabi_dsub+0x35c>)
 80014e8:	1a5b      	subs	r3, r3, r1
 80014ea:	4010      	ands	r0, r2
 80014ec:	4698      	mov	r8, r3
 80014ee:	4681      	mov	r9, r0
 80014f0:	e6d6      	b.n	80012a0 <__aeabi_dsub+0x104>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	000007ff 	.word	0x000007ff
 80014f8:	ff7fffff 	.word	0xff7fffff
 80014fc:	fffff801 	.word	0xfffff801
 8001500:	000007fe 	.word	0x000007fe
 8001504:	430f      	orrs	r7, r1
 8001506:	1e7a      	subs	r2, r7, #1
 8001508:	4197      	sbcs	r7, r2
 800150a:	e691      	b.n	8001230 <__aeabi_dsub+0x94>
 800150c:	4661      	mov	r1, ip
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	0749      	lsls	r1, r1, #29
 8001512:	430b      	orrs	r3, r1
 8001514:	4661      	mov	r1, ip
 8001516:	08cc      	lsrs	r4, r1, #3
 8001518:	e7b8      	b.n	800148c <__aeabi_dsub+0x2f0>
 800151a:	4640      	mov	r0, r8
 800151c:	4cd3      	ldr	r4, [pc, #844]	; (800186c <__aeabi_dsub+0x6d0>)
 800151e:	3001      	adds	r0, #1
 8001520:	4220      	tst	r0, r4
 8001522:	d000      	beq.n	8001526 <__aeabi_dsub+0x38a>
 8001524:	e0a2      	b.n	800166c <__aeabi_dsub+0x4d0>
 8001526:	4640      	mov	r0, r8
 8001528:	2800      	cmp	r0, #0
 800152a:	d000      	beq.n	800152e <__aeabi_dsub+0x392>
 800152c:	e101      	b.n	8001732 <__aeabi_dsub+0x596>
 800152e:	4660      	mov	r0, ip
 8001530:	4318      	orrs	r0, r3
 8001532:	d100      	bne.n	8001536 <__aeabi_dsub+0x39a>
 8001534:	e15e      	b.n	80017f4 <__aeabi_dsub+0x658>
 8001536:	0008      	movs	r0, r1
 8001538:	4338      	orrs	r0, r7
 800153a:	d000      	beq.n	800153e <__aeabi_dsub+0x3a2>
 800153c:	e15f      	b.n	80017fe <__aeabi_dsub+0x662>
 800153e:	4661      	mov	r1, ip
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	0749      	lsls	r1, r1, #29
 8001544:	430b      	orrs	r3, r1
 8001546:	4661      	mov	r1, ip
 8001548:	08cc      	lsrs	r4, r1, #3
 800154a:	e7a2      	b.n	8001492 <__aeabi_dsub+0x2f6>
 800154c:	4dc8      	ldr	r5, [pc, #800]	; (8001870 <__aeabi_dsub+0x6d4>)
 800154e:	42a8      	cmp	r0, r5
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x3b8>
 8001552:	e0cf      	b.n	80016f4 <__aeabi_dsub+0x558>
 8001554:	2580      	movs	r5, #128	; 0x80
 8001556:	4664      	mov	r4, ip
 8001558:	042d      	lsls	r5, r5, #16
 800155a:	432c      	orrs	r4, r5
 800155c:	46a4      	mov	ip, r4
 800155e:	2a38      	cmp	r2, #56	; 0x38
 8001560:	dc56      	bgt.n	8001610 <__aeabi_dsub+0x474>
 8001562:	2a1f      	cmp	r2, #31
 8001564:	dd00      	ble.n	8001568 <__aeabi_dsub+0x3cc>
 8001566:	e0d1      	b.n	800170c <__aeabi_dsub+0x570>
 8001568:	2520      	movs	r5, #32
 800156a:	001e      	movs	r6, r3
 800156c:	1aad      	subs	r5, r5, r2
 800156e:	4664      	mov	r4, ip
 8001570:	40ab      	lsls	r3, r5
 8001572:	40ac      	lsls	r4, r5
 8001574:	40d6      	lsrs	r6, r2
 8001576:	1e5d      	subs	r5, r3, #1
 8001578:	41ab      	sbcs	r3, r5
 800157a:	4334      	orrs	r4, r6
 800157c:	4323      	orrs	r3, r4
 800157e:	4664      	mov	r4, ip
 8001580:	40d4      	lsrs	r4, r2
 8001582:	1b09      	subs	r1, r1, r4
 8001584:	e049      	b.n	800161a <__aeabi_dsub+0x47e>
 8001586:	4660      	mov	r0, ip
 8001588:	1bdc      	subs	r4, r3, r7
 800158a:	1a46      	subs	r6, r0, r1
 800158c:	42a3      	cmp	r3, r4
 800158e:	4180      	sbcs	r0, r0
 8001590:	4240      	negs	r0, r0
 8001592:	4681      	mov	r9, r0
 8001594:	0030      	movs	r0, r6
 8001596:	464e      	mov	r6, r9
 8001598:	1b80      	subs	r0, r0, r6
 800159a:	4681      	mov	r9, r0
 800159c:	0200      	lsls	r0, r0, #8
 800159e:	d476      	bmi.n	800168e <__aeabi_dsub+0x4f2>
 80015a0:	464b      	mov	r3, r9
 80015a2:	4323      	orrs	r3, r4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dsub+0x40c>
 80015a6:	e652      	b.n	800124e <__aeabi_dsub+0xb2>
 80015a8:	2400      	movs	r4, #0
 80015aa:	2500      	movs	r5, #0
 80015ac:	e771      	b.n	8001492 <__aeabi_dsub+0x2f6>
 80015ae:	4339      	orrs	r1, r7
 80015b0:	000c      	movs	r4, r1
 80015b2:	1e62      	subs	r2, r4, #1
 80015b4:	4194      	sbcs	r4, r2
 80015b6:	18e4      	adds	r4, r4, r3
 80015b8:	429c      	cmp	r4, r3
 80015ba:	419b      	sbcs	r3, r3
 80015bc:	425b      	negs	r3, r3
 80015be:	4463      	add	r3, ip
 80015c0:	4699      	mov	r9, r3
 80015c2:	464b      	mov	r3, r9
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dsub+0x42e>
 80015c8:	e756      	b.n	8001478 <__aeabi_dsub+0x2dc>
 80015ca:	2301      	movs	r3, #1
 80015cc:	469c      	mov	ip, r3
 80015ce:	4ba8      	ldr	r3, [pc, #672]	; (8001870 <__aeabi_dsub+0x6d4>)
 80015d0:	44e0      	add	r8, ip
 80015d2:	4598      	cmp	r8, r3
 80015d4:	d038      	beq.n	8001648 <__aeabi_dsub+0x4ac>
 80015d6:	464b      	mov	r3, r9
 80015d8:	48a6      	ldr	r0, [pc, #664]	; (8001874 <__aeabi_dsub+0x6d8>)
 80015da:	2201      	movs	r2, #1
 80015dc:	4003      	ands	r3, r0
 80015de:	0018      	movs	r0, r3
 80015e0:	0863      	lsrs	r3, r4, #1
 80015e2:	4014      	ands	r4, r2
 80015e4:	431c      	orrs	r4, r3
 80015e6:	07c3      	lsls	r3, r0, #31
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0843      	lsrs	r3, r0, #1
 80015ec:	4699      	mov	r9, r3
 80015ee:	e657      	b.n	80012a0 <__aeabi_dsub+0x104>
 80015f0:	0010      	movs	r0, r2
 80015f2:	000e      	movs	r6, r1
 80015f4:	3820      	subs	r0, #32
 80015f6:	40c6      	lsrs	r6, r0
 80015f8:	2a20      	cmp	r2, #32
 80015fa:	d004      	beq.n	8001606 <__aeabi_dsub+0x46a>
 80015fc:	2040      	movs	r0, #64	; 0x40
 80015fe:	1a82      	subs	r2, r0, r2
 8001600:	4091      	lsls	r1, r2
 8001602:	430f      	orrs	r7, r1
 8001604:	46b9      	mov	r9, r7
 8001606:	464f      	mov	r7, r9
 8001608:	1e7a      	subs	r2, r7, #1
 800160a:	4197      	sbcs	r7, r2
 800160c:	4337      	orrs	r7, r6
 800160e:	e60f      	b.n	8001230 <__aeabi_dsub+0x94>
 8001610:	4662      	mov	r2, ip
 8001612:	431a      	orrs	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	1e5a      	subs	r2, r3, #1
 8001618:	4193      	sbcs	r3, r2
 800161a:	1afc      	subs	r4, r7, r3
 800161c:	42a7      	cmp	r7, r4
 800161e:	41bf      	sbcs	r7, r7
 8001620:	427f      	negs	r7, r7
 8001622:	1bcb      	subs	r3, r1, r7
 8001624:	4699      	mov	r9, r3
 8001626:	465d      	mov	r5, fp
 8001628:	4680      	mov	r8, r0
 800162a:	e608      	b.n	800123e <__aeabi_dsub+0xa2>
 800162c:	4666      	mov	r6, ip
 800162e:	431e      	orrs	r6, r3
 8001630:	d100      	bne.n	8001634 <__aeabi_dsub+0x498>
 8001632:	e0be      	b.n	80017b2 <__aeabi_dsub+0x616>
 8001634:	1e56      	subs	r6, r2, #1
 8001636:	2a01      	cmp	r2, #1
 8001638:	d100      	bne.n	800163c <__aeabi_dsub+0x4a0>
 800163a:	e109      	b.n	8001850 <__aeabi_dsub+0x6b4>
 800163c:	4c8c      	ldr	r4, [pc, #560]	; (8001870 <__aeabi_dsub+0x6d4>)
 800163e:	42a2      	cmp	r2, r4
 8001640:	d100      	bne.n	8001644 <__aeabi_dsub+0x4a8>
 8001642:	e119      	b.n	8001878 <__aeabi_dsub+0x6dc>
 8001644:	0032      	movs	r2, r6
 8001646:	e6c1      	b.n	80013cc <__aeabi_dsub+0x230>
 8001648:	4642      	mov	r2, r8
 800164a:	2400      	movs	r4, #0
 800164c:	2300      	movs	r3, #0
 800164e:	e648      	b.n	80012e2 <__aeabi_dsub+0x146>
 8001650:	2020      	movs	r0, #32
 8001652:	000c      	movs	r4, r1
 8001654:	1a80      	subs	r0, r0, r2
 8001656:	003e      	movs	r6, r7
 8001658:	4087      	lsls	r7, r0
 800165a:	4084      	lsls	r4, r0
 800165c:	40d6      	lsrs	r6, r2
 800165e:	1e78      	subs	r0, r7, #1
 8001660:	4187      	sbcs	r7, r0
 8001662:	40d1      	lsrs	r1, r2
 8001664:	4334      	orrs	r4, r6
 8001666:	433c      	orrs	r4, r7
 8001668:	448c      	add	ip, r1
 800166a:	e7a4      	b.n	80015b6 <__aeabi_dsub+0x41a>
 800166c:	4a80      	ldr	r2, [pc, #512]	; (8001870 <__aeabi_dsub+0x6d4>)
 800166e:	4290      	cmp	r0, r2
 8001670:	d100      	bne.n	8001674 <__aeabi_dsub+0x4d8>
 8001672:	e0e9      	b.n	8001848 <__aeabi_dsub+0x6ac>
 8001674:	19df      	adds	r7, r3, r7
 8001676:	429f      	cmp	r7, r3
 8001678:	419b      	sbcs	r3, r3
 800167a:	4461      	add	r1, ip
 800167c:	425b      	negs	r3, r3
 800167e:	18c9      	adds	r1, r1, r3
 8001680:	07cc      	lsls	r4, r1, #31
 8001682:	087f      	lsrs	r7, r7, #1
 8001684:	084b      	lsrs	r3, r1, #1
 8001686:	4699      	mov	r9, r3
 8001688:	4680      	mov	r8, r0
 800168a:	433c      	orrs	r4, r7
 800168c:	e6f4      	b.n	8001478 <__aeabi_dsub+0x2dc>
 800168e:	1afc      	subs	r4, r7, r3
 8001690:	42a7      	cmp	r7, r4
 8001692:	41bf      	sbcs	r7, r7
 8001694:	4663      	mov	r3, ip
 8001696:	427f      	negs	r7, r7
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	1bcb      	subs	r3, r1, r7
 800169c:	4699      	mov	r9, r3
 800169e:	465d      	mov	r5, fp
 80016a0:	e5d5      	b.n	800124e <__aeabi_dsub+0xb2>
 80016a2:	08ff      	lsrs	r7, r7, #3
 80016a4:	074b      	lsls	r3, r1, #29
 80016a6:	465d      	mov	r5, fp
 80016a8:	433b      	orrs	r3, r7
 80016aa:	08cc      	lsrs	r4, r1, #3
 80016ac:	e6ee      	b.n	800148c <__aeabi_dsub+0x2f0>
 80016ae:	4662      	mov	r2, ip
 80016b0:	431a      	orrs	r2, r3
 80016b2:	d000      	beq.n	80016b6 <__aeabi_dsub+0x51a>
 80016b4:	e082      	b.n	80017bc <__aeabi_dsub+0x620>
 80016b6:	000b      	movs	r3, r1
 80016b8:	433b      	orrs	r3, r7
 80016ba:	d11b      	bne.n	80016f4 <__aeabi_dsub+0x558>
 80016bc:	2480      	movs	r4, #128	; 0x80
 80016be:	2500      	movs	r5, #0
 80016c0:	0324      	lsls	r4, r4, #12
 80016c2:	e6f9      	b.n	80014b8 <__aeabi_dsub+0x31c>
 80016c4:	19dc      	adds	r4, r3, r7
 80016c6:	429c      	cmp	r4, r3
 80016c8:	419b      	sbcs	r3, r3
 80016ca:	4461      	add	r1, ip
 80016cc:	4689      	mov	r9, r1
 80016ce:	425b      	negs	r3, r3
 80016d0:	4499      	add	r9, r3
 80016d2:	464b      	mov	r3, r9
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	d444      	bmi.n	8001762 <__aeabi_dsub+0x5c6>
 80016d8:	2301      	movs	r3, #1
 80016da:	4698      	mov	r8, r3
 80016dc:	e6cc      	b.n	8001478 <__aeabi_dsub+0x2dc>
 80016de:	1bdc      	subs	r4, r3, r7
 80016e0:	4662      	mov	r2, ip
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	419b      	sbcs	r3, r3
 80016e6:	1a51      	subs	r1, r2, r1
 80016e8:	425b      	negs	r3, r3
 80016ea:	1acb      	subs	r3, r1, r3
 80016ec:	4699      	mov	r9, r3
 80016ee:	2301      	movs	r3, #1
 80016f0:	4698      	mov	r8, r3
 80016f2:	e5a4      	b.n	800123e <__aeabi_dsub+0xa2>
 80016f4:	08ff      	lsrs	r7, r7, #3
 80016f6:	074b      	lsls	r3, r1, #29
 80016f8:	465d      	mov	r5, fp
 80016fa:	433b      	orrs	r3, r7
 80016fc:	08cc      	lsrs	r4, r1, #3
 80016fe:	e6d7      	b.n	80014b0 <__aeabi_dsub+0x314>
 8001700:	4662      	mov	r2, ip
 8001702:	431a      	orrs	r2, r3
 8001704:	0014      	movs	r4, r2
 8001706:	1e63      	subs	r3, r4, #1
 8001708:	419c      	sbcs	r4, r3
 800170a:	e679      	b.n	8001400 <__aeabi_dsub+0x264>
 800170c:	0015      	movs	r5, r2
 800170e:	4664      	mov	r4, ip
 8001710:	3d20      	subs	r5, #32
 8001712:	40ec      	lsrs	r4, r5
 8001714:	46a0      	mov	r8, r4
 8001716:	2a20      	cmp	r2, #32
 8001718:	d005      	beq.n	8001726 <__aeabi_dsub+0x58a>
 800171a:	2540      	movs	r5, #64	; 0x40
 800171c:	4664      	mov	r4, ip
 800171e:	1aaa      	subs	r2, r5, r2
 8001720:	4094      	lsls	r4, r2
 8001722:	4323      	orrs	r3, r4
 8001724:	469a      	mov	sl, r3
 8001726:	4654      	mov	r4, sl
 8001728:	1e63      	subs	r3, r4, #1
 800172a:	419c      	sbcs	r4, r3
 800172c:	4643      	mov	r3, r8
 800172e:	4323      	orrs	r3, r4
 8001730:	e773      	b.n	800161a <__aeabi_dsub+0x47e>
 8001732:	4662      	mov	r2, ip
 8001734:	431a      	orrs	r2, r3
 8001736:	d023      	beq.n	8001780 <__aeabi_dsub+0x5e4>
 8001738:	000a      	movs	r2, r1
 800173a:	433a      	orrs	r2, r7
 800173c:	d000      	beq.n	8001740 <__aeabi_dsub+0x5a4>
 800173e:	e0a0      	b.n	8001882 <__aeabi_dsub+0x6e6>
 8001740:	4662      	mov	r2, ip
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	0752      	lsls	r2, r2, #29
 8001746:	4313      	orrs	r3, r2
 8001748:	4662      	mov	r2, ip
 800174a:	08d4      	lsrs	r4, r2, #3
 800174c:	e6b0      	b.n	80014b0 <__aeabi_dsub+0x314>
 800174e:	000b      	movs	r3, r1
 8001750:	433b      	orrs	r3, r7
 8001752:	d100      	bne.n	8001756 <__aeabi_dsub+0x5ba>
 8001754:	e728      	b.n	80015a8 <__aeabi_dsub+0x40c>
 8001756:	08ff      	lsrs	r7, r7, #3
 8001758:	074b      	lsls	r3, r1, #29
 800175a:	465d      	mov	r5, fp
 800175c:	433b      	orrs	r3, r7
 800175e:	08cc      	lsrs	r4, r1, #3
 8001760:	e697      	b.n	8001492 <__aeabi_dsub+0x2f6>
 8001762:	2302      	movs	r3, #2
 8001764:	4698      	mov	r8, r3
 8001766:	e736      	b.n	80015d6 <__aeabi_dsub+0x43a>
 8001768:	1afc      	subs	r4, r7, r3
 800176a:	42a7      	cmp	r7, r4
 800176c:	41bf      	sbcs	r7, r7
 800176e:	4663      	mov	r3, ip
 8001770:	427f      	negs	r7, r7
 8001772:	1ac9      	subs	r1, r1, r3
 8001774:	1bcb      	subs	r3, r1, r7
 8001776:	4699      	mov	r9, r3
 8001778:	2301      	movs	r3, #1
 800177a:	465d      	mov	r5, fp
 800177c:	4698      	mov	r8, r3
 800177e:	e55e      	b.n	800123e <__aeabi_dsub+0xa2>
 8001780:	074b      	lsls	r3, r1, #29
 8001782:	08ff      	lsrs	r7, r7, #3
 8001784:	433b      	orrs	r3, r7
 8001786:	08cc      	lsrs	r4, r1, #3
 8001788:	e692      	b.n	80014b0 <__aeabi_dsub+0x314>
 800178a:	1bdc      	subs	r4, r3, r7
 800178c:	4660      	mov	r0, ip
 800178e:	42a3      	cmp	r3, r4
 8001790:	41b6      	sbcs	r6, r6
 8001792:	1a40      	subs	r0, r0, r1
 8001794:	4276      	negs	r6, r6
 8001796:	1b80      	subs	r0, r0, r6
 8001798:	4681      	mov	r9, r0
 800179a:	0200      	lsls	r0, r0, #8
 800179c:	d560      	bpl.n	8001860 <__aeabi_dsub+0x6c4>
 800179e:	1afc      	subs	r4, r7, r3
 80017a0:	42a7      	cmp	r7, r4
 80017a2:	41bf      	sbcs	r7, r7
 80017a4:	4663      	mov	r3, ip
 80017a6:	427f      	negs	r7, r7
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	1bcb      	subs	r3, r1, r7
 80017ac:	4699      	mov	r9, r3
 80017ae:	465d      	mov	r5, fp
 80017b0:	e576      	b.n	80012a0 <__aeabi_dsub+0x104>
 80017b2:	08ff      	lsrs	r7, r7, #3
 80017b4:	074b      	lsls	r3, r1, #29
 80017b6:	433b      	orrs	r3, r7
 80017b8:	08cc      	lsrs	r4, r1, #3
 80017ba:	e667      	b.n	800148c <__aeabi_dsub+0x2f0>
 80017bc:	000a      	movs	r2, r1
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	433a      	orrs	r2, r7
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dsub+0x62a>
 80017c4:	e66f      	b.n	80014a6 <__aeabi_dsub+0x30a>
 80017c6:	4662      	mov	r2, ip
 80017c8:	0752      	lsls	r2, r2, #29
 80017ca:	4313      	orrs	r3, r2
 80017cc:	4662      	mov	r2, ip
 80017ce:	08d4      	lsrs	r4, r2, #3
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	0312      	lsls	r2, r2, #12
 80017d4:	4214      	tst	r4, r2
 80017d6:	d007      	beq.n	80017e8 <__aeabi_dsub+0x64c>
 80017d8:	08c8      	lsrs	r0, r1, #3
 80017da:	4210      	tst	r0, r2
 80017dc:	d104      	bne.n	80017e8 <__aeabi_dsub+0x64c>
 80017de:	465d      	mov	r5, fp
 80017e0:	0004      	movs	r4, r0
 80017e2:	08fb      	lsrs	r3, r7, #3
 80017e4:	0749      	lsls	r1, r1, #29
 80017e6:	430b      	orrs	r3, r1
 80017e8:	0f5a      	lsrs	r2, r3, #29
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	4313      	orrs	r3, r2
 80017f2:	e65d      	b.n	80014b0 <__aeabi_dsub+0x314>
 80017f4:	074b      	lsls	r3, r1, #29
 80017f6:	08ff      	lsrs	r7, r7, #3
 80017f8:	433b      	orrs	r3, r7
 80017fa:	08cc      	lsrs	r4, r1, #3
 80017fc:	e649      	b.n	8001492 <__aeabi_dsub+0x2f6>
 80017fe:	19dc      	adds	r4, r3, r7
 8001800:	429c      	cmp	r4, r3
 8001802:	419b      	sbcs	r3, r3
 8001804:	4461      	add	r1, ip
 8001806:	4689      	mov	r9, r1
 8001808:	425b      	negs	r3, r3
 800180a:	4499      	add	r9, r3
 800180c:	464b      	mov	r3, r9
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	d400      	bmi.n	8001814 <__aeabi_dsub+0x678>
 8001812:	e631      	b.n	8001478 <__aeabi_dsub+0x2dc>
 8001814:	464a      	mov	r2, r9
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <__aeabi_dsub+0x6d8>)
 8001818:	401a      	ands	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	4691      	mov	r9, r2
 800181e:	4698      	mov	r8, r3
 8001820:	e62a      	b.n	8001478 <__aeabi_dsub+0x2dc>
 8001822:	0016      	movs	r6, r2
 8001824:	4664      	mov	r4, ip
 8001826:	3e20      	subs	r6, #32
 8001828:	40f4      	lsrs	r4, r6
 800182a:	46a0      	mov	r8, r4
 800182c:	2a20      	cmp	r2, #32
 800182e:	d005      	beq.n	800183c <__aeabi_dsub+0x6a0>
 8001830:	2640      	movs	r6, #64	; 0x40
 8001832:	4664      	mov	r4, ip
 8001834:	1ab2      	subs	r2, r6, r2
 8001836:	4094      	lsls	r4, r2
 8001838:	4323      	orrs	r3, r4
 800183a:	469a      	mov	sl, r3
 800183c:	4654      	mov	r4, sl
 800183e:	1e63      	subs	r3, r4, #1
 8001840:	419c      	sbcs	r4, r3
 8001842:	4643      	mov	r3, r8
 8001844:	431c      	orrs	r4, r3
 8001846:	e5db      	b.n	8001400 <__aeabi_dsub+0x264>
 8001848:	0002      	movs	r2, r0
 800184a:	2400      	movs	r4, #0
 800184c:	2300      	movs	r3, #0
 800184e:	e548      	b.n	80012e2 <__aeabi_dsub+0x146>
 8001850:	19dc      	adds	r4, r3, r7
 8001852:	42bc      	cmp	r4, r7
 8001854:	41bf      	sbcs	r7, r7
 8001856:	4461      	add	r1, ip
 8001858:	4689      	mov	r9, r1
 800185a:	427f      	negs	r7, r7
 800185c:	44b9      	add	r9, r7
 800185e:	e738      	b.n	80016d2 <__aeabi_dsub+0x536>
 8001860:	464b      	mov	r3, r9
 8001862:	4323      	orrs	r3, r4
 8001864:	d100      	bne.n	8001868 <__aeabi_dsub+0x6cc>
 8001866:	e69f      	b.n	80015a8 <__aeabi_dsub+0x40c>
 8001868:	e606      	b.n	8001478 <__aeabi_dsub+0x2dc>
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	000007fe 	.word	0x000007fe
 8001870:	000007ff 	.word	0x000007ff
 8001874:	ff7fffff 	.word	0xff7fffff
 8001878:	08ff      	lsrs	r7, r7, #3
 800187a:	074b      	lsls	r3, r1, #29
 800187c:	433b      	orrs	r3, r7
 800187e:	08cc      	lsrs	r4, r1, #3
 8001880:	e616      	b.n	80014b0 <__aeabi_dsub+0x314>
 8001882:	4662      	mov	r2, ip
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	0752      	lsls	r2, r2, #29
 8001888:	4313      	orrs	r3, r2
 800188a:	4662      	mov	r2, ip
 800188c:	08d4      	lsrs	r4, r2, #3
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0312      	lsls	r2, r2, #12
 8001892:	4214      	tst	r4, r2
 8001894:	d007      	beq.n	80018a6 <__aeabi_dsub+0x70a>
 8001896:	08c8      	lsrs	r0, r1, #3
 8001898:	4210      	tst	r0, r2
 800189a:	d104      	bne.n	80018a6 <__aeabi_dsub+0x70a>
 800189c:	465d      	mov	r5, fp
 800189e:	0004      	movs	r4, r0
 80018a0:	08fb      	lsrs	r3, r7, #3
 80018a2:	0749      	lsls	r1, r1, #29
 80018a4:	430b      	orrs	r3, r1
 80018a6:	0f5a      	lsrs	r2, r3, #29
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	0752      	lsls	r2, r2, #29
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	e5fe      	b.n	80014b0 <__aeabi_dsub+0x314>
 80018b2:	2300      	movs	r3, #0
 80018b4:	4a01      	ldr	r2, [pc, #4]	; (80018bc <__aeabi_dsub+0x720>)
 80018b6:	001c      	movs	r4, r3
 80018b8:	e513      	b.n	80012e2 <__aeabi_dsub+0x146>
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	000007ff 	.word	0x000007ff

080018c0 <__aeabi_d2iz>:
 80018c0:	000a      	movs	r2, r1
 80018c2:	b530      	push	{r4, r5, lr}
 80018c4:	4c13      	ldr	r4, [pc, #76]	; (8001914 <__aeabi_d2iz+0x54>)
 80018c6:	0053      	lsls	r3, r2, #1
 80018c8:	0309      	lsls	r1, r1, #12
 80018ca:	0005      	movs	r5, r0
 80018cc:	0b09      	lsrs	r1, r1, #12
 80018ce:	2000      	movs	r0, #0
 80018d0:	0d5b      	lsrs	r3, r3, #21
 80018d2:	0fd2      	lsrs	r2, r2, #31
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	dd04      	ble.n	80018e2 <__aeabi_d2iz+0x22>
 80018d8:	480f      	ldr	r0, [pc, #60]	; (8001918 <__aeabi_d2iz+0x58>)
 80018da:	4283      	cmp	r3, r0
 80018dc:	dd02      	ble.n	80018e4 <__aeabi_d2iz+0x24>
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <__aeabi_d2iz+0x5c>)
 80018e0:	18d0      	adds	r0, r2, r3
 80018e2:	bd30      	pop	{r4, r5, pc}
 80018e4:	2080      	movs	r0, #128	; 0x80
 80018e6:	0340      	lsls	r0, r0, #13
 80018e8:	4301      	orrs	r1, r0
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <__aeabi_d2iz+0x60>)
 80018ec:	1ac0      	subs	r0, r0, r3
 80018ee:	281f      	cmp	r0, #31
 80018f0:	dd08      	ble.n	8001904 <__aeabi_d2iz+0x44>
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <__aeabi_d2iz+0x64>)
 80018f4:	1ac3      	subs	r3, r0, r3
 80018f6:	40d9      	lsrs	r1, r3
 80018f8:	000b      	movs	r3, r1
 80018fa:	4258      	negs	r0, r3
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d1f0      	bne.n	80018e2 <__aeabi_d2iz+0x22>
 8001900:	0018      	movs	r0, r3
 8001902:	e7ee      	b.n	80018e2 <__aeabi_d2iz+0x22>
 8001904:	4c08      	ldr	r4, [pc, #32]	; (8001928 <__aeabi_d2iz+0x68>)
 8001906:	40c5      	lsrs	r5, r0
 8001908:	46a4      	mov	ip, r4
 800190a:	4463      	add	r3, ip
 800190c:	4099      	lsls	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	432b      	orrs	r3, r5
 8001912:	e7f2      	b.n	80018fa <__aeabi_d2iz+0x3a>
 8001914:	000003fe 	.word	0x000003fe
 8001918:	0000041d 	.word	0x0000041d
 800191c:	7fffffff 	.word	0x7fffffff
 8001920:	00000433 	.word	0x00000433
 8001924:	00000413 	.word	0x00000413
 8001928:	fffffbed 	.word	0xfffffbed

0800192c <__aeabi_i2d>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	2800      	cmp	r0, #0
 8001930:	d016      	beq.n	8001960 <__aeabi_i2d+0x34>
 8001932:	17c3      	asrs	r3, r0, #31
 8001934:	18c5      	adds	r5, r0, r3
 8001936:	405d      	eors	r5, r3
 8001938:	0fc4      	lsrs	r4, r0, #31
 800193a:	0028      	movs	r0, r5
 800193c:	f000 f8ac 	bl	8001a98 <__clzsi2>
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <__aeabi_i2d+0x5c>)
 8001942:	1a12      	subs	r2, r2, r0
 8001944:	280a      	cmp	r0, #10
 8001946:	dc16      	bgt.n	8001976 <__aeabi_i2d+0x4a>
 8001948:	0003      	movs	r3, r0
 800194a:	002e      	movs	r6, r5
 800194c:	3315      	adds	r3, #21
 800194e:	409e      	lsls	r6, r3
 8001950:	230b      	movs	r3, #11
 8001952:	1a18      	subs	r0, r3, r0
 8001954:	40c5      	lsrs	r5, r0
 8001956:	0552      	lsls	r2, r2, #21
 8001958:	032d      	lsls	r5, r5, #12
 800195a:	0b2d      	lsrs	r5, r5, #12
 800195c:	0d53      	lsrs	r3, r2, #21
 800195e:	e003      	b.n	8001968 <__aeabi_i2d+0x3c>
 8001960:	2400      	movs	r4, #0
 8001962:	2300      	movs	r3, #0
 8001964:	2500      	movs	r5, #0
 8001966:	2600      	movs	r6, #0
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	432b      	orrs	r3, r5
 800196c:	07e4      	lsls	r4, r4, #31
 800196e:	4323      	orrs	r3, r4
 8001970:	0030      	movs	r0, r6
 8001972:	0019      	movs	r1, r3
 8001974:	bd70      	pop	{r4, r5, r6, pc}
 8001976:	380b      	subs	r0, #11
 8001978:	4085      	lsls	r5, r0
 800197a:	0552      	lsls	r2, r2, #21
 800197c:	032d      	lsls	r5, r5, #12
 800197e:	2600      	movs	r6, #0
 8001980:	0b2d      	lsrs	r5, r5, #12
 8001982:	0d53      	lsrs	r3, r2, #21
 8001984:	e7f0      	b.n	8001968 <__aeabi_i2d+0x3c>
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	0000041e 	.word	0x0000041e

0800198c <__aeabi_f2d>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	0043      	lsls	r3, r0, #1
 8001990:	0246      	lsls	r6, r0, #9
 8001992:	0fc4      	lsrs	r4, r0, #31
 8001994:	20fe      	movs	r0, #254	; 0xfe
 8001996:	0e1b      	lsrs	r3, r3, #24
 8001998:	1c59      	adds	r1, r3, #1
 800199a:	0a75      	lsrs	r5, r6, #9
 800199c:	4208      	tst	r0, r1
 800199e:	d00c      	beq.n	80019ba <__aeabi_f2d+0x2e>
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4694      	mov	ip, r2
 80019a6:	076d      	lsls	r5, r5, #29
 80019a8:	0b36      	lsrs	r6, r6, #12
 80019aa:	4463      	add	r3, ip
 80019ac:	051b      	lsls	r3, r3, #20
 80019ae:	4333      	orrs	r3, r6
 80019b0:	07e4      	lsls	r4, r4, #31
 80019b2:	4323      	orrs	r3, r4
 80019b4:	0028      	movs	r0, r5
 80019b6:	0019      	movs	r1, r3
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d114      	bne.n	80019e8 <__aeabi_f2d+0x5c>
 80019be:	2d00      	cmp	r5, #0
 80019c0:	d01b      	beq.n	80019fa <__aeabi_f2d+0x6e>
 80019c2:	0028      	movs	r0, r5
 80019c4:	f000 f868 	bl	8001a98 <__clzsi2>
 80019c8:	280a      	cmp	r0, #10
 80019ca:	dc1c      	bgt.n	8001a06 <__aeabi_f2d+0x7a>
 80019cc:	230b      	movs	r3, #11
 80019ce:	002e      	movs	r6, r5
 80019d0:	1a1b      	subs	r3, r3, r0
 80019d2:	40de      	lsrs	r6, r3
 80019d4:	0003      	movs	r3, r0
 80019d6:	3315      	adds	r3, #21
 80019d8:	409d      	lsls	r5, r3
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <__aeabi_f2d+0x88>)
 80019dc:	0336      	lsls	r6, r6, #12
 80019de:	1a12      	subs	r2, r2, r0
 80019e0:	0552      	lsls	r2, r2, #21
 80019e2:	0b36      	lsrs	r6, r6, #12
 80019e4:	0d53      	lsrs	r3, r2, #21
 80019e6:	e7e1      	b.n	80019ac <__aeabi_f2d+0x20>
 80019e8:	2d00      	cmp	r5, #0
 80019ea:	d009      	beq.n	8001a00 <__aeabi_f2d+0x74>
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	0b36      	lsrs	r6, r6, #12
 80019f0:	0312      	lsls	r2, r2, #12
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <__aeabi_f2d+0x8c>)
 80019f4:	076d      	lsls	r5, r5, #29
 80019f6:	4316      	orrs	r6, r2
 80019f8:	e7d8      	b.n	80019ac <__aeabi_f2d+0x20>
 80019fa:	2300      	movs	r3, #0
 80019fc:	2600      	movs	r6, #0
 80019fe:	e7d5      	b.n	80019ac <__aeabi_f2d+0x20>
 8001a00:	2600      	movs	r6, #0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <__aeabi_f2d+0x8c>)
 8001a04:	e7d2      	b.n	80019ac <__aeabi_f2d+0x20>
 8001a06:	0003      	movs	r3, r0
 8001a08:	3b0b      	subs	r3, #11
 8001a0a:	409d      	lsls	r5, r3
 8001a0c:	002e      	movs	r6, r5
 8001a0e:	2500      	movs	r5, #0
 8001a10:	e7e3      	b.n	80019da <__aeabi_f2d+0x4e>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	00000389 	.word	0x00000389
 8001a18:	000007ff 	.word	0x000007ff

08001a1c <__aeabi_cdrcmple>:
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	0010      	movs	r0, r2
 8001a20:	4662      	mov	r2, ip
 8001a22:	468c      	mov	ip, r1
 8001a24:	0019      	movs	r1, r3
 8001a26:	4663      	mov	r3, ip
 8001a28:	e000      	b.n	8001a2c <__aeabi_cdcmpeq>
 8001a2a:	46c0      	nop			; (mov r8, r8)

08001a2c <__aeabi_cdcmpeq>:
 8001a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a2e:	f000 f905 	bl	8001c3c <__ledf2>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d401      	bmi.n	8001a3a <__aeabi_cdcmpeq+0xe>
 8001a36:	2100      	movs	r1, #0
 8001a38:	42c8      	cmn	r0, r1
 8001a3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a3c <__aeabi_dcmpeq>:
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	f000 f855 	bl	8001aec <__eqdf2>
 8001a42:	4240      	negs	r0, r0
 8001a44:	3001      	adds	r0, #1
 8001a46:	bd10      	pop	{r4, pc}

08001a48 <__aeabi_dcmplt>:
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	f000 f8f7 	bl	8001c3c <__ledf2>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	db01      	blt.n	8001a56 <__aeabi_dcmplt+0xe>
 8001a52:	2000      	movs	r0, #0
 8001a54:	bd10      	pop	{r4, pc}
 8001a56:	2001      	movs	r0, #1
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)

08001a5c <__aeabi_dcmple>:
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	f000 f8ed 	bl	8001c3c <__ledf2>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	dd01      	ble.n	8001a6a <__aeabi_dcmple+0xe>
 8001a66:	2000      	movs	r0, #0
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)

08001a70 <__aeabi_dcmpgt>:
 8001a70:	b510      	push	{r4, lr}
 8001a72:	f000 f87d 	bl	8001b70 <__gedf2>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	dc01      	bgt.n	8001a7e <__aeabi_dcmpgt+0xe>
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	bd10      	pop	{r4, pc}
 8001a7e:	2001      	movs	r0, #1
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)

08001a84 <__aeabi_dcmpge>:
 8001a84:	b510      	push	{r4, lr}
 8001a86:	f000 f873 	bl	8001b70 <__gedf2>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	da01      	bge.n	8001a92 <__aeabi_dcmpge+0xe>
 8001a8e:	2000      	movs	r0, #0
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	2001      	movs	r0, #1
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)

08001a98 <__clzsi2>:
 8001a98:	211c      	movs	r1, #28
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	4298      	cmp	r0, r3
 8001aa0:	d301      	bcc.n	8001aa6 <__clzsi2+0xe>
 8001aa2:	0c00      	lsrs	r0, r0, #16
 8001aa4:	3910      	subs	r1, #16
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	4298      	cmp	r0, r3
 8001aaa:	d301      	bcc.n	8001ab0 <__clzsi2+0x18>
 8001aac:	0a00      	lsrs	r0, r0, #8
 8001aae:	3908      	subs	r1, #8
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d301      	bcc.n	8001aba <__clzsi2+0x22>
 8001ab6:	0900      	lsrs	r0, r0, #4
 8001ab8:	3904      	subs	r1, #4
 8001aba:	a202      	add	r2, pc, #8	; (adr r2, 8001ac4 <__clzsi2+0x2c>)
 8001abc:	5c10      	ldrb	r0, [r2, r0]
 8001abe:	1840      	adds	r0, r0, r1
 8001ac0:	4770      	bx	lr
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	02020304 	.word	0x02020304
 8001ac8:	01010101 	.word	0x01010101
	...

08001ad4 <__clzdi2>:
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	2900      	cmp	r1, #0
 8001ad8:	d103      	bne.n	8001ae2 <__clzdi2+0xe>
 8001ada:	f7ff ffdd 	bl	8001a98 <__clzsi2>
 8001ade:	3020      	adds	r0, #32
 8001ae0:	e002      	b.n	8001ae8 <__clzdi2+0x14>
 8001ae2:	0008      	movs	r0, r1
 8001ae4:	f7ff ffd8 	bl	8001a98 <__clzsi2>
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)

08001aec <__eqdf2>:
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	464e      	mov	r6, r9
 8001af0:	4645      	mov	r5, r8
 8001af2:	46de      	mov	lr, fp
 8001af4:	4657      	mov	r7, sl
 8001af6:	4690      	mov	r8, r2
 8001af8:	b5e0      	push	{r5, r6, r7, lr}
 8001afa:	0017      	movs	r7, r2
 8001afc:	031a      	lsls	r2, r3, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	0005      	movs	r5, r0
 8001b02:	4684      	mov	ip, r0
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <__eqdf2+0x80>)
 8001b06:	030e      	lsls	r6, r1, #12
 8001b08:	004c      	lsls	r4, r1, #1
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	0fdb      	lsrs	r3, r3, #31
 8001b10:	469b      	mov	fp, r3
 8001b12:	0b36      	lsrs	r6, r6, #12
 8001b14:	0d64      	lsrs	r4, r4, #21
 8001b16:	0fc9      	lsrs	r1, r1, #31
 8001b18:	0d52      	lsrs	r2, r2, #21
 8001b1a:	4284      	cmp	r4, r0
 8001b1c:	d019      	beq.n	8001b52 <__eqdf2+0x66>
 8001b1e:	4282      	cmp	r2, r0
 8001b20:	d010      	beq.n	8001b44 <__eqdf2+0x58>
 8001b22:	2001      	movs	r0, #1
 8001b24:	4294      	cmp	r4, r2
 8001b26:	d10e      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b28:	454e      	cmp	r6, r9
 8001b2a:	d10c      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	45c4      	cmp	ip, r8
 8001b30:	d109      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b32:	4559      	cmp	r1, fp
 8001b34:	d017      	beq.n	8001b66 <__eqdf2+0x7a>
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d105      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b3a:	0030      	movs	r0, r6
 8001b3c:	4328      	orrs	r0, r5
 8001b3e:	1e43      	subs	r3, r0, #1
 8001b40:	4198      	sbcs	r0, r3
 8001b42:	e000      	b.n	8001b46 <__eqdf2+0x5a>
 8001b44:	2001      	movs	r0, #1
 8001b46:	bcf0      	pop	{r4, r5, r6, r7}
 8001b48:	46bb      	mov	fp, r7
 8001b4a:	46b2      	mov	sl, r6
 8001b4c:	46a9      	mov	r9, r5
 8001b4e:	46a0      	mov	r8, r4
 8001b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b52:	0033      	movs	r3, r6
 8001b54:	2001      	movs	r0, #1
 8001b56:	432b      	orrs	r3, r5
 8001b58:	d1f5      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b5a:	42a2      	cmp	r2, r4
 8001b5c:	d1f3      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b5e:	464b      	mov	r3, r9
 8001b60:	433b      	orrs	r3, r7
 8001b62:	d1f0      	bne.n	8001b46 <__eqdf2+0x5a>
 8001b64:	e7e2      	b.n	8001b2c <__eqdf2+0x40>
 8001b66:	2000      	movs	r0, #0
 8001b68:	e7ed      	b.n	8001b46 <__eqdf2+0x5a>
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	000007ff 	.word	0x000007ff

08001b70 <__gedf2>:
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	4647      	mov	r7, r8
 8001b74:	46ce      	mov	lr, r9
 8001b76:	0004      	movs	r4, r0
 8001b78:	0018      	movs	r0, r3
 8001b7a:	0016      	movs	r6, r2
 8001b7c:	031b      	lsls	r3, r3, #12
 8001b7e:	0b1b      	lsrs	r3, r3, #12
 8001b80:	4d2d      	ldr	r5, [pc, #180]	; (8001c38 <__gedf2+0xc8>)
 8001b82:	004a      	lsls	r2, r1, #1
 8001b84:	4699      	mov	r9, r3
 8001b86:	b580      	push	{r7, lr}
 8001b88:	0043      	lsls	r3, r0, #1
 8001b8a:	030f      	lsls	r7, r1, #12
 8001b8c:	46a4      	mov	ip, r4
 8001b8e:	46b0      	mov	r8, r6
 8001b90:	0b3f      	lsrs	r7, r7, #12
 8001b92:	0d52      	lsrs	r2, r2, #21
 8001b94:	0fc9      	lsrs	r1, r1, #31
 8001b96:	0d5b      	lsrs	r3, r3, #21
 8001b98:	0fc0      	lsrs	r0, r0, #31
 8001b9a:	42aa      	cmp	r2, r5
 8001b9c:	d021      	beq.n	8001be2 <__gedf2+0x72>
 8001b9e:	42ab      	cmp	r3, r5
 8001ba0:	d013      	beq.n	8001bca <__gedf2+0x5a>
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d122      	bne.n	8001bec <__gedf2+0x7c>
 8001ba6:	433c      	orrs	r4, r7
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <__gedf2+0x42>
 8001bac:	464d      	mov	r5, r9
 8001bae:	432e      	orrs	r6, r5
 8001bb0:	d022      	beq.n	8001bf8 <__gedf2+0x88>
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	d010      	beq.n	8001bd8 <__gedf2+0x68>
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	d022      	beq.n	8001c00 <__gedf2+0x90>
 8001bba:	2002      	movs	r0, #2
 8001bbc:	3901      	subs	r1, #1
 8001bbe:	4008      	ands	r0, r1
 8001bc0:	3801      	subs	r0, #1
 8001bc2:	bcc0      	pop	{r6, r7}
 8001bc4:	46b9      	mov	r9, r7
 8001bc6:	46b0      	mov	r8, r6
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bca:	464d      	mov	r5, r9
 8001bcc:	432e      	orrs	r6, r5
 8001bce:	d129      	bne.n	8001c24 <__gedf2+0xb4>
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <__gedf2+0x46>
 8001bd4:	433c      	orrs	r4, r7
 8001bd6:	d1ee      	bne.n	8001bb6 <__gedf2+0x46>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1f2      	bne.n	8001bc2 <__gedf2+0x52>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4240      	negs	r0, r0
 8001be0:	e7ef      	b.n	8001bc2 <__gedf2+0x52>
 8001be2:	003d      	movs	r5, r7
 8001be4:	4325      	orrs	r5, r4
 8001be6:	d11d      	bne.n	8001c24 <__gedf2+0xb4>
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d0ee      	beq.n	8001bca <__gedf2+0x5a>
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e2      	bne.n	8001bb6 <__gedf2+0x46>
 8001bf0:	464c      	mov	r4, r9
 8001bf2:	4326      	orrs	r6, r4
 8001bf4:	d1df      	bne.n	8001bb6 <__gedf2+0x46>
 8001bf6:	e7e0      	b.n	8001bba <__gedf2+0x4a>
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	2c00      	cmp	r4, #0
 8001bfc:	d0e1      	beq.n	8001bc2 <__gedf2+0x52>
 8001bfe:	e7dc      	b.n	8001bba <__gedf2+0x4a>
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dc0a      	bgt.n	8001c1a <__gedf2+0xaa>
 8001c04:	dbe8      	blt.n	8001bd8 <__gedf2+0x68>
 8001c06:	454f      	cmp	r7, r9
 8001c08:	d8d7      	bhi.n	8001bba <__gedf2+0x4a>
 8001c0a:	d00e      	beq.n	8001c2a <__gedf2+0xba>
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	454f      	cmp	r7, r9
 8001c10:	d2d7      	bcs.n	8001bc2 <__gedf2+0x52>
 8001c12:	2900      	cmp	r1, #0
 8001c14:	d0e2      	beq.n	8001bdc <__gedf2+0x6c>
 8001c16:	0008      	movs	r0, r1
 8001c18:	e7d3      	b.n	8001bc2 <__gedf2+0x52>
 8001c1a:	4243      	negs	r3, r0
 8001c1c:	4158      	adcs	r0, r3
 8001c1e:	0040      	lsls	r0, r0, #1
 8001c20:	3801      	subs	r0, #1
 8001c22:	e7ce      	b.n	8001bc2 <__gedf2+0x52>
 8001c24:	2002      	movs	r0, #2
 8001c26:	4240      	negs	r0, r0
 8001c28:	e7cb      	b.n	8001bc2 <__gedf2+0x52>
 8001c2a:	45c4      	cmp	ip, r8
 8001c2c:	d8c5      	bhi.n	8001bba <__gedf2+0x4a>
 8001c2e:	2000      	movs	r0, #0
 8001c30:	45c4      	cmp	ip, r8
 8001c32:	d2c6      	bcs.n	8001bc2 <__gedf2+0x52>
 8001c34:	e7ed      	b.n	8001c12 <__gedf2+0xa2>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	000007ff 	.word	0x000007ff

08001c3c <__ledf2>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	4647      	mov	r7, r8
 8001c40:	46ce      	mov	lr, r9
 8001c42:	0004      	movs	r4, r0
 8001c44:	0018      	movs	r0, r3
 8001c46:	0016      	movs	r6, r2
 8001c48:	031b      	lsls	r3, r3, #12
 8001c4a:	0b1b      	lsrs	r3, r3, #12
 8001c4c:	4d2c      	ldr	r5, [pc, #176]	; (8001d00 <__ledf2+0xc4>)
 8001c4e:	004a      	lsls	r2, r1, #1
 8001c50:	4699      	mov	r9, r3
 8001c52:	b580      	push	{r7, lr}
 8001c54:	0043      	lsls	r3, r0, #1
 8001c56:	030f      	lsls	r7, r1, #12
 8001c58:	46a4      	mov	ip, r4
 8001c5a:	46b0      	mov	r8, r6
 8001c5c:	0b3f      	lsrs	r7, r7, #12
 8001c5e:	0d52      	lsrs	r2, r2, #21
 8001c60:	0fc9      	lsrs	r1, r1, #31
 8001c62:	0d5b      	lsrs	r3, r3, #21
 8001c64:	0fc0      	lsrs	r0, r0, #31
 8001c66:	42aa      	cmp	r2, r5
 8001c68:	d00d      	beq.n	8001c86 <__ledf2+0x4a>
 8001c6a:	42ab      	cmp	r3, r5
 8001c6c:	d010      	beq.n	8001c90 <__ledf2+0x54>
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d127      	bne.n	8001cc2 <__ledf2+0x86>
 8001c72:	433c      	orrs	r4, r7
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d111      	bne.n	8001c9c <__ledf2+0x60>
 8001c78:	464d      	mov	r5, r9
 8001c7a:	432e      	orrs	r6, r5
 8001c7c:	d10e      	bne.n	8001c9c <__ledf2+0x60>
 8001c7e:	2000      	movs	r0, #0
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d015      	beq.n	8001cb0 <__ledf2+0x74>
 8001c84:	e00e      	b.n	8001ca4 <__ledf2+0x68>
 8001c86:	003d      	movs	r5, r7
 8001c88:	4325      	orrs	r5, r4
 8001c8a:	d110      	bne.n	8001cae <__ledf2+0x72>
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d118      	bne.n	8001cc2 <__ledf2+0x86>
 8001c90:	464d      	mov	r5, r9
 8001c92:	432e      	orrs	r6, r5
 8001c94:	d10b      	bne.n	8001cae <__ledf2+0x72>
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	d102      	bne.n	8001ca0 <__ledf2+0x64>
 8001c9a:	433c      	orrs	r4, r7
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d00b      	beq.n	8001cb8 <__ledf2+0x7c>
 8001ca0:	4281      	cmp	r1, r0
 8001ca2:	d014      	beq.n	8001cce <__ledf2+0x92>
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	3901      	subs	r1, #1
 8001ca8:	4008      	ands	r0, r1
 8001caa:	3801      	subs	r0, #1
 8001cac:	e000      	b.n	8001cb0 <__ledf2+0x74>
 8001cae:	2002      	movs	r0, #2
 8001cb0:	bcc0      	pop	{r6, r7}
 8001cb2:	46b9      	mov	r9, r7
 8001cb4:	46b0      	mov	r8, r6
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d1f9      	bne.n	8001cb0 <__ledf2+0x74>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4240      	negs	r0, r0
 8001cc0:	e7f6      	b.n	8001cb0 <__ledf2+0x74>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ec      	bne.n	8001ca0 <__ledf2+0x64>
 8001cc6:	464c      	mov	r4, r9
 8001cc8:	4326      	orrs	r6, r4
 8001cca:	d1e9      	bne.n	8001ca0 <__ledf2+0x64>
 8001ccc:	e7ea      	b.n	8001ca4 <__ledf2+0x68>
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dd04      	ble.n	8001cdc <__ledf2+0xa0>
 8001cd2:	4243      	negs	r3, r0
 8001cd4:	4158      	adcs	r0, r3
 8001cd6:	0040      	lsls	r0, r0, #1
 8001cd8:	3801      	subs	r0, #1
 8001cda:	e7e9      	b.n	8001cb0 <__ledf2+0x74>
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbeb      	blt.n	8001cb8 <__ledf2+0x7c>
 8001ce0:	454f      	cmp	r7, r9
 8001ce2:	d8df      	bhi.n	8001ca4 <__ledf2+0x68>
 8001ce4:	d006      	beq.n	8001cf4 <__ledf2+0xb8>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	454f      	cmp	r7, r9
 8001cea:	d2e1      	bcs.n	8001cb0 <__ledf2+0x74>
 8001cec:	2900      	cmp	r1, #0
 8001cee:	d0e5      	beq.n	8001cbc <__ledf2+0x80>
 8001cf0:	0008      	movs	r0, r1
 8001cf2:	e7dd      	b.n	8001cb0 <__ledf2+0x74>
 8001cf4:	45c4      	cmp	ip, r8
 8001cf6:	d8d5      	bhi.n	8001ca4 <__ledf2+0x68>
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	45c4      	cmp	ip, r8
 8001cfc:	d2d8      	bcs.n	8001cb0 <__ledf2+0x74>
 8001cfe:	e7f5      	b.n	8001cec <__ledf2+0xb0>
 8001d00:	000007ff 	.word	0x000007ff

08001d04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x3c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Init+0x3c>)
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 f811 	bl	8001d44 <HAL_InitTick>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e001      	b.n	8001d32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d2e:	f003 f8f7 	bl	8004f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d32:	1dfb      	adds	r3, r7, #7
 8001d34:	781b      	ldrb	r3, [r3, #0]
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	40022000 	.word	0x40022000

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_InitTick+0x5c>)
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_InitTick+0x60>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	0019      	movs	r1, r3
 8001d56:	23fa      	movs	r3, #250	; 0xfa
 8001d58:	0098      	lsls	r0, r3, #2
 8001d5a:	f7fe f9e7 	bl	800012c <__udivsi3>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	0019      	movs	r1, r3
 8001d62:	0020      	movs	r0, r4
 8001d64:	f7fe f9e2 	bl	800012c <__udivsi3>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 fda1 	bl	80028b2 <HAL_SYSTICK_Config>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e00f      	b.n	8001d98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d80b      	bhi.n	8001d96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	2301      	movs	r3, #1
 8001d82:	425b      	negs	r3, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 fd6e 	bl	8002868 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_InitTick+0x64>)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b003      	add	sp, #12
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	20000210 	.word	0x20000210
 8001da4:	20000004 	.word	0x20000004
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x1c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	001a      	movs	r2, r3
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_IncTick+0x20>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	18d2      	adds	r2, r2, r3
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_IncTick+0x20>)
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	20000294 	.word	0x20000294

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <HAL_GetTick+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	20000294 	.word	0x20000294

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	001a      	movs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	f7ff ffe0 	bl	8001dd0 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b004      	add	sp, #16
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e159      	b.n	80020f2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10a      	bne.n	8001e5c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2250      	movs	r2, #80	; 0x50
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f003 f876 	bl	8004f48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	2210      	movs	r2, #16
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d005      	beq.n	8001e74 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001e72:	d00b      	beq.n	8001e8c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	2210      	movs	r2, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2250      	movs	r2, #80	; 0x50
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e132      	b.n	80020f2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	4a9a      	ldr	r2, [pc, #616]	; (80020fc <HAL_ADC_Init+0x2d0>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	2202      	movs	r2, #2
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_ADC_Init+0x90>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_Init+0x90>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0x92>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d149      	bne.n	8001f56 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_ADC_Init+0xba>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d005      	beq.n	8001ee6 <HAL_ADC_Init+0xba>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_Init+0xde>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	0892      	lsrs	r2, r2, #2
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	e014      	b.n	8001f34 <HAL_ADC_Init+0x108>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	0892      	lsrs	r2, r2, #2
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	4b79      	ldr	r3, [pc, #484]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f20:	4978      	ldr	r1, [pc, #480]	; (8002104 <HAL_ADC_Init+0x2d8>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b74      	ldr	r3, [pc, #464]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2118      	movs	r1, #24
 8001f40:	438a      	bics	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b69      	ldr	r3, [pc, #420]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f5c:	496a      	ldr	r1, [pc, #424]	; (8002108 <HAL_ADC_Init+0x2dc>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	065a      	lsls	r2, r3, #25
 8001f6c:	4b64      	ldr	r3, [pc, #400]	; (8002100 <HAL_ADC_Init+0x2d4>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0549      	lsls	r1, r1, #21
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	495b      	ldr	r1, [pc, #364]	; (800210c <HAL_ADC_Init+0x2e0>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_Init+0x18c>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Init+0x18e>
 8001fb8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001fba:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2020      	movs	r0, #32
 8001fc0:	5c1b      	ldrb	r3, [r3, r0]
 8001fc2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001fc4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	202c      	movs	r0, #44	; 0x2c
 8001fca:	5c1b      	ldrb	r3, [r3, r0]
 8001fcc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fce:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001fd4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001fdc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001fe4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff2:	23c2      	movs	r3, #194	; 0xc2
 8001ff4:	33ff      	adds	r3, #255	; 0xff
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d00b      	beq.n	8002012 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68d9      	ldr	r1, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2221      	movs	r2, #33	; 0x21
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d11a      	bne.n	8002052 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	5c9b      	ldrb	r3, [r3, r2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0249      	lsls	r1, r1, #9
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	e00b      	b.n	8002052 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	2220      	movs	r2, #32
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	2201      	movs	r2, #1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d11f      	bne.n	800209a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	492a      	ldr	r1, [pc, #168]	; (8002110 <HAL_ADC_Init+0x2e4>)
 8002066:	400a      	ands	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002078:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800207e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	e00e      	b.n	80020b8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2107      	movs	r1, #7
 80020c4:	438a      	bics	r2, r1
 80020c6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2203      	movs	r2, #3
 80020e6:	4393      	bics	r3, r2
 80020e8:	2201      	movs	r2, #1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	fffffefd 	.word	0xfffffefd
 8002100:	40012708 	.word	0x40012708
 8002104:	ffc3ffff 	.word	0xffc3ffff
 8002108:	fdffffff 	.word	0xfdffffff
 800210c:	fffe0219 	.word	0xfffe0219
 8002110:	fffffc03 	.word	0xfffffc03

08002114 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	230f      	movs	r3, #15
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d138      	bne.n	80021a2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2250      	movs	r2, #80	; 0x50
 8002134:	5c9b      	ldrb	r3, [r3, r2]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_Start+0x2a>
 800213a:	2302      	movs	r3, #2
 800213c:	e038      	b.n	80021b0 <HAL_ADC_Start+0x9c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2250      	movs	r2, #80	; 0x50
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800214e:	230f      	movs	r3, #15
 8002150:	18fc      	adds	r4, r7, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f99f 	bl	8002498 <ADC_Enable>
 800215a:	0003      	movs	r3, r0
 800215c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800215e:	230f      	movs	r3, #15
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d120      	bne.n	80021aa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_ADC_Start+0xa4>)
 800216e:	4013      	ands	r3, r2
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2250      	movs	r2, #80	; 0x50
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	221c      	movs	r2, #28
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2104      	movs	r1, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e003      	b.n	80021aa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a2:	230f      	movs	r3, #15
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2202      	movs	r2, #2
 80021a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021aa:	230f      	movs	r3, #15
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b005      	add	sp, #20
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	fffff0fe 	.word	0xfffff0fe

080021bc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c4:	230f      	movs	r3, #15
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2250      	movs	r2, #80	; 0x50
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Stop+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e029      	b.n	800222e <HAL_ADC_Stop+0x72>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2250      	movs	r2, #80	; 0x50
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80021e2:	250f      	movs	r5, #15
 80021e4:	197c      	adds	r4, r7, r5
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fa24 	bl	8002636 <ADC_ConversionStop>
 80021ee:	0003      	movs	r3, r0
 80021f0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d112      	bne.n	8002220 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80021fa:	197c      	adds	r4, r7, r5
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f9b2 	bl	8002568 <ADC_Disable>
 8002204:	0003      	movs	r3, r0
 8002206:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002208:	197b      	adds	r3, r7, r5
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_ADC_Stop+0x7c>)
 8002216:	4013      	ands	r3, r2
 8002218:	2201      	movs	r2, #1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2250      	movs	r2, #80	; 0x50
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002228:	230f      	movs	r3, #15
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	781b      	ldrb	r3, [r3, #0]
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	fffffefe 	.word	0xfffffefe

0800223c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d102      	bne.n	800225c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002256:	2308      	movs	r3, #8
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e014      	b.n	8002286 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10b      	bne.n	8002282 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2220      	movs	r2, #32
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2250      	movs	r2, #80	; 0x50
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e072      	b.n	8002368 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002282:	230c      	movs	r3, #12
 8002284:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002286:	f7ff fda3 	bl	8001dd0 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800228e:	e01f      	b.n	80022d0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	d01c      	beq.n	80022d0 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_ADC_PollForConversion+0x70>
 800229c:	f7ff fd98 	bl	8001dd0 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d211      	bcs.n	80022d0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	d10b      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	2204      	movs	r2, #4
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2250      	movs	r2, #80	; 0x50
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e04b      	b.n	8002368 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	d0d9      	beq.n	8002290 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d12e      	bne.n	8002356 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d129      	bne.n	8002356 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	4013      	ands	r3, r2
 800230c:	2b08      	cmp	r3, #8
 800230e:	d122      	bne.n	8002356 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2204      	movs	r2, #4
 8002318:	4013      	ands	r3, r2
 800231a:	d110      	bne.n	800233e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	210c      	movs	r1, #12
 8002328:	438a      	bics	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_ADC_PollForConversion+0x134>)
 8002332:	4013      	ands	r3, r2
 8002334:	2201      	movs	r2, #1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
 800233c:	e00b      	b.n	8002356 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	2220      	movs	r2, #32
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	2201      	movs	r2, #1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}
 8002370:	fffffefe 	.word	0xfffffefe

08002374 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2250      	movs	r2, #80	; 0x50
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x18>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e06c      	b.n	800247e <HAL_ADC_ConfigChannel+0xf2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2250      	movs	r2, #80	; 0x50
 80023a8:	2101      	movs	r1, #1
 80023aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	2220      	movs	r2, #32
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2250      	movs	r2, #80	; 0x50
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e056      	b.n	800247e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <HAL_ADC_ConfigChannel+0xfc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d028      	beq.n	800242c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	035b      	lsls	r3, r3, #13
 80023e6:	0b5a      	lsrs	r2, r3, #13
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	02db      	lsls	r3, r3, #11
 80023f8:	4013      	ands	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0409      	lsls	r1, r1, #16
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800240a:	200a      	movs	r0, #10
 800240c:	f000 f960 	bl	80026d0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	4013      	ands	r3, r2
 800241a:	d02b      	beq.n	8002474 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	03c9      	lsls	r1, r1, #15
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e023      	b.n	8002474 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	035b      	lsls	r3, r3, #13
 8002438:	0b5b      	lsrs	r3, r3, #13
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	02db      	lsls	r3, r3, #11
 800244c:	4013      	ands	r3, r2
 800244e:	d005      	beq.n	800245c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_ADC_ConfigChannel+0x104>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	4013      	ands	r3, r2
 8002466:	d005      	beq.n	8002474 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_ADC_ConfigChannel+0x100>)
 800246e:	4909      	ldr	r1, [pc, #36]	; (8002494 <HAL_ADC_ConfigChannel+0x108>)
 8002470:	400a      	ands	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2250      	movs	r2, #80	; 0x50
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	00001001 	.word	0x00001001
 800248c:	40012708 	.word	0x40012708
 8002490:	ff7fffff 	.word	0xff7fffff
 8002494:	ffbfffff 	.word	0xffbfffff

08002498 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <ADC_Enable+0x2c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <ADC_Enable+0x2c>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <ADC_Enable+0x2e>
 80024c4:	2300      	movs	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d146      	bne.n	8002558 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <ADC_Enable+0xcc>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	2210      	movs	r2, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	2201      	movs	r2, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e033      	b.n	800255a <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002502:	2001      	movs	r0, #1
 8002504:	f000 f8e4 	bl	80026d0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002508:	f7ff fc62 	bl	8001dd0 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002510:	e01b      	b.n	800254a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002512:	f7ff fc5d 	bl	8001dd0 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b0a      	cmp	r3, #10
 800251e:	d914      	bls.n	800254a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	2b01      	cmp	r3, #1
 800252c:	d00d      	beq.n	800254a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2210      	movs	r2, #16
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	2201      	movs	r2, #1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	2b01      	cmp	r3, #1
 8002556:	d1dc      	bne.n	8002512 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	80000017 	.word	0x80000017

08002568 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2203      	movs	r2, #3
 800257c:	4013      	ands	r3, r2
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <ADC_Disable+0x2c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <ADC_Disable+0x2c>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <ADC_Disable+0x2e>
 8002594:	2300      	movs	r3, #0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d048      	beq.n	800262c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2205      	movs	r2, #5
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d110      	bne.n	80025ca <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2102      	movs	r1, #2
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2203      	movs	r2, #3
 80025be:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025c0:	f7ff fc06 	bl	8001dd0 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025c8:	e029      	b.n	800261e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	2210      	movs	r2, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	2201      	movs	r2, #1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e023      	b.n	800262e <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025e6:	f7ff fbf3 	bl	8001dd0 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b0a      	cmp	r3, #10
 80025f2:	d914      	bls.n	800261e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10d      	bne.n	800261e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	2210      	movs	r2, #16
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	2201      	movs	r2, #1
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e007      	b.n	800262e <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	2b01      	cmp	r3, #1
 800262a:	d0dc      	beq.n	80025e6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}

08002636 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2204      	movs	r2, #4
 800264a:	4013      	ands	r3, r2
 800264c:	d03a      	beq.n	80026c4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2204      	movs	r2, #4
 8002656:	4013      	ands	r3, r2
 8002658:	2b04      	cmp	r3, #4
 800265a:	d10d      	bne.n	8002678 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002666:	d107      	bne.n	8002678 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2110      	movs	r1, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002678:	f7ff fbaa 	bl	8001dd0 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002680:	e01a      	b.n	80026b8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002682:	f7ff fba5 	bl	8001dd0 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b0a      	cmp	r3, #10
 800268e:	d913      	bls.n	80026b8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2204      	movs	r2, #4
 8002698:	4013      	ands	r3, r2
 800269a:	d00d      	beq.n	80026b8 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	2210      	movs	r2, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	2201      	movs	r2, #1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e006      	b.n	80026c6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d1de      	bne.n	8002682 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <ADC_DelayMicroSecond+0x38>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	490b      	ldr	r1, [pc, #44]	; (800270c <ADC_DelayMicroSecond+0x3c>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f7fd fd24 	bl	800012c <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	001a      	movs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4353      	muls	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80026ee:	e002      	b.n	80026f6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000210 	.word	0x20000210
 800270c:	000f4240 	.word	0x000f4240

08002710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b7f      	cmp	r3, #127	; 0x7f
 8002722:	d809      	bhi.n	8002738 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	001a      	movs	r2, r3
 800272a:	231f      	movs	r3, #31
 800272c:	401a      	ands	r2, r3
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_EnableIRQ+0x30>)
 8002730:	2101      	movs	r1, #1
 8002732:	4091      	lsls	r1, r2
 8002734:	000a      	movs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
  }
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b7f      	cmp	r3, #127	; 0x7f
 8002758:	d828      	bhi.n	80027ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800275a:	4a2f      	ldr	r2, [pc, #188]	; (8002818 <__NVIC_SetPriority+0xd4>)
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	33c0      	adds	r3, #192	; 0xc0
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	589b      	ldr	r3, [r3, r2]
 800276a:	1dfa      	adds	r2, r7, #7
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	0011      	movs	r1, r2
 8002770:	2203      	movs	r2, #3
 8002772:	400a      	ands	r2, r1
 8002774:	00d2      	lsls	r2, r2, #3
 8002776:	21ff      	movs	r1, #255	; 0xff
 8002778:	4091      	lsls	r1, r2
 800277a:	000a      	movs	r2, r1
 800277c:	43d2      	mvns	r2, r2
 800277e:	401a      	ands	r2, r3
 8002780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	401a      	ands	r2, r3
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	0018      	movs	r0, r3
 8002790:	2303      	movs	r3, #3
 8002792:	4003      	ands	r3, r0
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002798:	481f      	ldr	r0, [pc, #124]	; (8002818 <__NVIC_SetPriority+0xd4>)
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	430a      	orrs	r2, r1
 80027a4:	33c0      	adds	r3, #192	; 0xc0
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027aa:	e031      	b.n	8002810 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <__NVIC_SetPriority+0xd8>)
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	0019      	movs	r1, r3
 80027b4:	230f      	movs	r3, #15
 80027b6:	400b      	ands	r3, r1
 80027b8:	3b08      	subs	r3, #8
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3306      	adds	r3, #6
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	3304      	adds	r3, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1dfa      	adds	r2, r7, #7
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	0011      	movs	r1, r2
 80027cc:	2203      	movs	r2, #3
 80027ce:	400a      	ands	r2, r1
 80027d0:	00d2      	lsls	r2, r2, #3
 80027d2:	21ff      	movs	r1, #255	; 0xff
 80027d4:	4091      	lsls	r1, r2
 80027d6:	000a      	movs	r2, r1
 80027d8:	43d2      	mvns	r2, r2
 80027da:	401a      	ands	r2, r3
 80027dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	401a      	ands	r2, r3
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	0018      	movs	r0, r3
 80027ec:	2303      	movs	r3, #3
 80027ee:	4003      	ands	r3, r0
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f4:	4809      	ldr	r0, [pc, #36]	; (800281c <__NVIC_SetPriority+0xd8>)
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	001c      	movs	r4, r3
 80027fc:	230f      	movs	r3, #15
 80027fe:	4023      	ands	r3, r4
 8002800:	3b08      	subs	r3, #8
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	430a      	orrs	r2, r1
 8002806:	3306      	adds	r3, #6
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	18c3      	adds	r3, r0, r3
 800280c:	3304      	adds	r3, #4
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b003      	add	sp, #12
 8002816:	bd90      	pop	{r4, r7, pc}
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	045b      	lsls	r3, r3, #17
 8002830:	429a      	cmp	r2, r3
 8002832:	d301      	bcc.n	8002838 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002834:	2301      	movs	r3, #1
 8002836:	e010      	b.n	800285a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <SysTick_Config+0x44>)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	3a01      	subs	r2, #1
 800283e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002840:	2301      	movs	r3, #1
 8002842:	425b      	negs	r3, r3
 8002844:	2103      	movs	r1, #3
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ff7c 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x44>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x44>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	210f      	movs	r1, #15
 8002874:	187b      	adds	r3, r7, r1
 8002876:	1c02      	adds	r2, r0, #0
 8002878:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	187b      	adds	r3, r7, r1
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b25b      	sxtb	r3, r3
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	0002      	movs	r2, r0
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff ff33 	bl	8002710 <__NVIC_EnableIRQ>
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7ff ffaf 	bl	8002820 <SysTick_Config>
 80028c2:	0003      	movs	r3, r0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028e2:	e14f      	b.n	8002b84 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4091      	lsls	r1, r2
 80028ee:	000a      	movs	r2, r1
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d100      	bne.n	80028fc <HAL_GPIO_Init+0x30>
 80028fa:	e140      	b.n	8002b7e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2203      	movs	r2, #3
 8002902:	4013      	ands	r3, r2
 8002904:	2b01      	cmp	r3, #1
 8002906:	d005      	beq.n	8002914 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2203      	movs	r2, #3
 800290e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d130      	bne.n	8002976 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	409a      	lsls	r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	43da      	mvns	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	409a      	lsls	r2, r3
 8002936:	0013      	movs	r3, r2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	43da      	mvns	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	2201      	movs	r2, #1
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
 8002968:	0013      	movs	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	4013      	ands	r3, r2
 800297e:	2b03      	cmp	r3, #3
 8002980:	d017      	beq.n	80029b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	409a      	lsls	r2, r3
 8002990:	0013      	movs	r3, r2
 8002992:	43da      	mvns	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2203      	movs	r2, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d123      	bne.n	8002a06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	58d3      	ldr	r3, [r2, r3]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	43da      	mvns	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2107      	movs	r1, #7
 80029ea:	400b      	ands	r3, r1
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	6939      	ldr	r1, [r7, #16]
 8002a04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	43da      	mvns	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	401a      	ands	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	23c0      	movs	r3, #192	; 0xc0
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_GPIO_Init+0x17c>
 8002a46:	e09a      	b.n	8002b7e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a48:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	589b      	ldr	r3, [r3, r2]
 8002a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2203      	movs	r2, #3
 8002a66:	4013      	ands	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	23a0      	movs	r3, #160	; 0xa0
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d019      	beq.n	8002ab6 <HAL_GPIO_Init+0x1ea>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x1e6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a46      	ldr	r2, [pc, #280]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a45      	ldr	r2, [pc, #276]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <HAL_GPIO_Init+0x1de>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_GPIO_Init+0x1da>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	2103      	movs	r1, #3
 8002abc:	400a      	ands	r2, r1
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	4013      	ands	r3, r2
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	035b      	lsls	r3, r3, #13
 8002b42:	4013      	ands	r3, r2
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	039b      	lsls	r3, r3, #14
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	40da      	lsrs	r2, r3
 8002b8c:	1e13      	subs	r3, r2, #0
 8002b8e:	d000      	beq.n	8002b92 <HAL_GPIO_Init+0x2c6>
 8002b90:	e6a8      	b.n	80028e4 <HAL_GPIO_Init+0x18>
  }
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	50000400 	.word	0x50000400
 8002ba8:	50000800 	.word	0x50000800
 8002bac:	50000c00 	.word	0x50000c00
 8002bb0:	50001c00 	.word	0x50001c00
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	1cbb      	adds	r3, r7, #2
 8002bc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	1cba      	adds	r2, r7, #2
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e003      	b.n	8002be4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	0008      	movs	r0, r1
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	1c02      	adds	r2, r0, #0
 8002c02:	801a      	strh	r2, [r3, #0]
 8002c04:	1c7b      	adds	r3, r7, #1
 8002c06:	1c0a      	adds	r2, r1, #0
 8002c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c0a:	1c7b      	adds	r3, r7, #1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c12:	1cbb      	adds	r3, r7, #2
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c1a:	e003      	b.n	8002c24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c1c:	1cbb      	adds	r3, r7, #2
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b5b0      	push	{r4, r5, r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f000 fbaf 	bl	800339e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c40:	4bcf      	ldr	r3, [pc, #828]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	220c      	movs	r2, #12
 8002c46:	4013      	ands	r3, r2
 8002c48:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4a:	4bcd      	ldr	r3, [pc, #820]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	025b      	lsls	r3, r3, #9
 8002c52:	4013      	ands	r3, r2
 8002c54:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d100      	bne.n	8002c62 <HAL_RCC_OscConfig+0x36>
 8002c60:	e07e      	b.n	8002d60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d007      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d112      	bne.n	8002c94 <HAL_RCC_OscConfig+0x68>
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	4bc1      	ldr	r3, [pc, #772]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5a>
 8002c84:	e06b      	b.n	8002d5e <HAL_RCC_OscConfig+0x132>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d167      	bne.n	8002d5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f000 fb85 	bl	800339e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	025b      	lsls	r3, r3, #9
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x84>
 8002ca0:	4bb7      	ldr	r3, [pc, #732]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4bb6      	ldr	r3, [pc, #728]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	0249      	lsls	r1, r1, #9
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	23a0      	movs	r3, #160	; 0xa0
 8002cb6:	02db      	lsls	r3, r3, #11
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10e      	bne.n	8002cda <HAL_RCC_OscConfig+0xae>
 8002cbc:	4bb0      	ldr	r3, [pc, #704]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4baf      	ldr	r3, [pc, #700]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	02c9      	lsls	r1, r1, #11
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4bad      	ldr	r3, [pc, #692]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4bac      	ldr	r3, [pc, #688]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0249      	lsls	r1, r1, #9
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e012      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002cda:	4ba9      	ldr	r3, [pc, #676]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4ba8      	ldr	r3, [pc, #672]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ce0:	49a8      	ldr	r1, [pc, #672]	; (8002f84 <HAL_RCC_OscConfig+0x358>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4ba6      	ldr	r3, [pc, #664]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4ba2      	ldr	r3, [pc, #648]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4ba1      	ldr	r3, [pc, #644]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002cfa:	49a3      	ldr	r1, [pc, #652]	; (8002f88 <HAL_RCC_OscConfig+0x35c>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7ff f862 	bl	8001dd0 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d12:	f7ff f85d 	bl	8001dd0 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d902      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	f000 fb3c 	bl	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d26:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	029b      	lsls	r3, r3, #10
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d0ef      	beq.n	8002d12 <HAL_RCC_OscConfig+0xe6>
 8002d32:	e015      	b.n	8002d60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff f84c 	bl	8001dd0 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3e:	f7ff f847 	bl	8001dd0 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e326      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d50:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x112>
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d100      	bne.n	8002d6c <HAL_RCC_OscConfig+0x140>
 8002d6a:	e08b      	b.n	8002e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d13e      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1d0>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d13b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d84:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_RCC_OscConfig+0x16c>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e302      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <HAL_RCC_OscConfig+0x360>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	021a      	lsls	r2, r3, #8
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dae:	4b74      	ldr	r3, [pc, #464]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2209      	movs	r2, #9
 8002db4:	4393      	bics	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	4b71      	ldr	r3, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc0:	f000 fc40 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8002dc4:	0001      	movs	r1, r0
 8002dc6:	4b6e      	ldr	r3, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	220f      	movs	r2, #15
 8002dce:	4013      	ands	r3, r2
 8002dd0:	4a6f      	ldr	r2, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x364>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	40da      	lsrs	r2, r3
 8002dd8:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_RCC_OscConfig+0x368>)
 8002dda:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ddc:	4b6e      	ldr	r3, [pc, #440]	; (8002f98 <HAL_RCC_OscConfig+0x36c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2513      	movs	r5, #19
 8002de2:	197c      	adds	r4, r7, r5
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fe ffad 	bl	8001d44 <HAL_InitTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002dee:	197b      	adds	r3, r7, r5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d046      	beq.n	8002e84 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002df6:	197b      	adds	r3, r7, r5
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	e2d0      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d027      	beq.n	8002e52 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2209      	movs	r2, #9
 8002e08:	4393      	bics	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe ffdc 	bl	8001dd0 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe ffd7 	bl	8001dd0 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e2b6      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4013      	ands	r3, r2
 8002e38:	d0f1      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a53      	ldr	r2, [pc, #332]	; (8002f8c <HAL_RCC_OscConfig+0x360>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e018      	b.n	8002e84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ffb7 	bl	8001dd0 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe ffb2 	bl	8001dd0 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e291      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	d1f1      	bne.n	8002e68 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <HAL_RCC_OscConfig+0x264>
 8002e8e:	e0a1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d140      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x282>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e277      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_RCC_OscConfig+0x370>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebc:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	0a19      	lsrs	r1, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	061a      	lsls	r2, r3, #24
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	3301      	adds	r3, #1
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0212      	lsls	r2, r2, #8
 8002ee2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	210f      	movs	r1, #15
 8002eec:	400b      	ands	r3, r1
 8002eee:	4928      	ldr	r1, [pc, #160]	; (8002f90 <HAL_RCC_OscConfig+0x364>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x368>)
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_OscConfig+0x36c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2513      	movs	r5, #19
 8002efe:	197c      	adds	r4, r7, r5
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fe ff1f 	bl	8001d44 <HAL_InitTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f0a:	197b      	adds	r3, r7, r5
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d060      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002f12:	197b      	adds	r3, r7, r5
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	e242      	b.n	800339e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03f      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	0049      	lsls	r1, r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe ff4f 	bl	8001dd0 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f38:	f7fe ff4a 	bl	8001dd0 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e229      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x370>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	0a19      	lsrs	r1, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	061a      	lsls	r2, r3, #24
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <HAL_RCC_OscConfig+0x354>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e029      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3a8>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	fffeffff 	.word	0xfffeffff
 8002f88:	fffbffff 	.word	0xfffbffff
 8002f8c:	ffffe0ff 	.word	0xffffe0ff
 8002f90:	08005b9c 	.word	0x08005b9c
 8002f94:	20000210 	.word	0x20000210
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fa0:	4bbd      	ldr	r3, [pc, #756]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4bbc      	ldr	r3, [pc, #752]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8002fa6:	49bd      	ldr	r1, [pc, #756]	; (800329c <HAL_RCC_OscConfig+0x670>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe ff10 	bl	8001dd0 <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb6:	f7fe ff0b 	bl	8001dd0 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1ea      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fc8:	4bb3      	ldr	r3, [pc, #716]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4bac      	ldr	r3, [pc, #688]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8002fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fea:	4bab      	ldr	r3, [pc, #684]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe feed 	bl	8001dd0 <HAL_GetTick>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7fe fee8 	bl	8001dd0 <HAL_GetTick>
 8003000:	0002      	movs	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1c7      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800300e:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d0f1      	beq.n	8002ffc <HAL_RCC_OscConfig+0x3d0>
 8003018:	e018      	b.n	800304c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b9f      	ldr	r3, [pc, #636]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800301c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301e:	4b9e      	ldr	r3, [pc, #632]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003020:	2101      	movs	r1, #1
 8003022:	438a      	bics	r2, r1
 8003024:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe fed3 	bl	8001dd0 <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe fece 	bl	8001dd0 <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1ad      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003042:	4b95      	ldr	r3, [pc, #596]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	d1f1      	bne.n	8003030 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	d100      	bne.n	8003058 <HAL_RCC_OscConfig+0x42c>
 8003056:	e0ae      	b.n	80031b6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2027      	movs	r0, #39	; 0x27
 800305a:	183b      	adds	r3, r7, r0
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003060:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	055b      	lsls	r3, r3, #21
 8003068:	4013      	ands	r3, r2
 800306a:	d109      	bne.n	8003080 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306c:	4b8a      	ldr	r3, [pc, #552]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003070:	4b89      	ldr	r3, [pc, #548]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	0549      	lsls	r1, r1, #21
 8003076:	430a      	orrs	r2, r1
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800307a:	183b      	adds	r3, r7, r0
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x674>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4013      	ands	r3, r2
 800308a:	d11a      	bne.n	80030c2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308c:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCC_OscConfig+0x674>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x674>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	0049      	lsls	r1, r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe fe99 	bl	8001dd0 <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fe fe94 	bl	8001dd0 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e173      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x674>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_OscConfig+0x4b2>
 80030ce:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d2:	4b71      	ldr	r3, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	0049      	lsls	r1, r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	651a      	str	r2, [r3, #80]	; 0x50
 80030dc:	e031      	b.n	8003142 <HAL_RCC_OscConfig+0x516>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x4d4>
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ea:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030ec:	496b      	ldr	r1, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x670>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
 80030f2:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f6:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80030f8:	496a      	ldr	r1, [pc, #424]	; (80032a4 <HAL_RCC_OscConfig+0x678>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50
 80030fe:	e020      	b.n	8003142 <HAL_RCC_OscConfig+0x516>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	23a0      	movs	r3, #160	; 0xa0
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	429a      	cmp	r2, r3
 800310a:	d10e      	bne.n	800312a <HAL_RCC_OscConfig+0x4fe>
 800310c:	4b62      	ldr	r3, [pc, #392]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	00c9      	lsls	r1, r1, #3
 8003116:	430a      	orrs	r2, r1
 8003118:	651a      	str	r2, [r3, #80]	; 0x50
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800311c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311e:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	0049      	lsls	r1, r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	651a      	str	r2, [r3, #80]	; 0x50
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x516>
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800312c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312e:	4b5a      	ldr	r3, [pc, #360]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003130:	495a      	ldr	r1, [pc, #360]	; (800329c <HAL_RCC_OscConfig+0x670>)
 8003132:	400a      	ands	r2, r1
 8003134:	651a      	str	r2, [r3, #80]	; 0x50
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800313a:	4b57      	ldr	r3, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800313c:	4959      	ldr	r1, [pc, #356]	; (80032a4 <HAL_RCC_OscConfig+0x678>)
 800313e:	400a      	ands	r2, r1
 8003140:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fe41 	bl	8001dd0 <HAL_GetTick>
 800314e:	0003      	movs	r3, r0
 8003150:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003152:	e009      	b.n	8003168 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fe3c 	bl	8001dd0 <HAL_GetTick>
 8003158:	0002      	movs	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_OscConfig+0x67c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e11a      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800316a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x528>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fe2b 	bl	8001dd0 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe fe26 	bl	8001dd0 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_RCC_OscConfig+0x67c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e104      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4013      	ands	r3, r2
 800319e:	d1ef      	bne.n	8003180 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a0:	2327      	movs	r3, #39	; 0x27
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031b0:	493e      	ldr	r1, [pc, #248]	; (80032ac <HAL_RCC_OscConfig+0x680>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d049      	beq.n	8003254 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d026      	beq.n	8003216 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 80031da:	2101      	movs	r1, #1
 80031dc:	430a      	orrs	r2, r1
 80031de:	635a      	str	r2, [r3, #52]	; 0x34
 80031e0:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <HAL_RCC_OscConfig+0x684>)
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_RCC_OscConfig+0x684>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0189      	lsls	r1, r1, #6
 80031ea:	430a      	orrs	r2, r1
 80031ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fdef 	bl	8001dd0 <HAL_GetTick>
 80031f2:	0003      	movs	r3, r0
 80031f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f8:	f7fe fdea 	bl	8001dd0 <HAL_GetTick>
 80031fc:	0002      	movs	r2, r0
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0c9      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d0f1      	beq.n	80031f8 <HAL_RCC_OscConfig+0x5cc>
 8003214:	e01e      	b.n	8003254 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800321c:	2101      	movs	r1, #1
 800321e:	438a      	bics	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_RCC_OscConfig+0x684>)
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_OscConfig+0x684>)
 8003228:	4922      	ldr	r1, [pc, #136]	; (80032b4 <HAL_RCC_OscConfig+0x688>)
 800322a:	400a      	ands	r2, r1
 800322c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fe fdcf 	bl	8001dd0 <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003238:	f7fe fdca 	bl	8001dd0 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0a9      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d1f1      	bne.n	8003238 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d100      	bne.n	800325e <HAL_RCC_OscConfig+0x632>
 800325c:	e09e      	b.n	800339c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d100      	bne.n	8003266 <HAL_RCC_OscConfig+0x63a>
 8003264:	e077      	b.n	8003356 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	2b02      	cmp	r3, #2
 800326c:	d158      	bne.n	8003320 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x66c>)
 8003274:	4910      	ldr	r1, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x68c>)
 8003276:	400a      	ands	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fda9 	bl	8001dd0 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003282:	e01b      	b.n	80032bc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fda4 	bl	8001dd0 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d914      	bls.n	80032bc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e083      	b.n	800339e <HAL_RCC_OscConfig+0x772>
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	fffffeff 	.word	0xfffffeff
 80032a0:	40007000 	.word	0x40007000
 80032a4:	fffffbff 	.word	0xfffffbff
 80032a8:	00001388 	.word	0x00001388
 80032ac:	efffffff 	.word	0xefffffff
 80032b0:	40010000 	.word	0x40010000
 80032b4:	ffffdfff 	.word	0xffffdfff
 80032b8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	049b      	lsls	r3, r3, #18
 80032c4:	4013      	ands	r3, r2
 80032c6:	d1dd      	bne.n	8003284 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c8:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a37      	ldr	r2, [pc, #220]	; (80033ac <HAL_RCC_OscConfig+0x780>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	431a      	orrs	r2, r3
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	0449      	lsls	r1, r1, #17
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fd6b 	bl	8001dd0 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fd66 	bl	8001dd0 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e045      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	049b      	lsls	r3, r3, #18
 800331a:	4013      	ands	r3, r2
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x6d4>
 800331e:	e03d      	b.n	800339c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 8003326:	4922      	ldr	r1, [pc, #136]	; (80033b0 <HAL_RCC_OscConfig+0x784>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fd50 	bl	8001dd0 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fd4b 	bl	8001dd0 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e02a      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	049b      	lsls	r3, r3, #18
 8003350:	4013      	ands	r3, r2
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x70a>
 8003354:	e022      	b.n	800339c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e01d      	b.n	800339e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x77c>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	429a      	cmp	r2, r3
 8003376:	d10f      	bne.n	8003398 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	23f0      	movs	r3, #240	; 0xf0
 800337c:	039b      	lsls	r3, r3, #14
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b00a      	add	sp, #40	; 0x28
 80033a4:	bdb0      	pop	{r4, r5, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40021000 	.word	0x40021000
 80033ac:	ff02ffff 	.word	0xff02ffff
 80033b0:	feffffff 	.word	0xfeffffff

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e128      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b96      	ldr	r3, [pc, #600]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d91e      	bls.n	8003414 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b93      	ldr	r3, [pc, #588]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4393      	bics	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	4b90      	ldr	r3, [pc, #576]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e8:	f7fe fcf2 	bl	8001dd0 <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe fced 	bl	8001dd0 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	4a8a      	ldr	r2, [pc, #552]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e109      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b87      	ldr	r3, [pc, #540]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4013      	ands	r3, r2
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	4013      	ands	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341e:	4b83      	ldr	r3, [pc, #524]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	22f0      	movs	r2, #240	; 0xf0
 8003424:	4393      	bics	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 800342e:	430a      	orrs	r2, r1
 8003430:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	4013      	ands	r3, r2
 800343a:	d100      	bne.n	800343e <HAL_RCC_ClockConfig+0x8a>
 800343c:	e089      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003446:	4b79      	ldr	r3, [pc, #484]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	029b      	lsls	r3, r3, #10
 800344e:	4013      	ands	r3, r2
 8003450:	d120      	bne.n	8003494 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0e1      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800345e:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	049b      	lsls	r3, r3, #18
 8003466:	4013      	ands	r3, r2
 8003468:	d114      	bne.n	8003494 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0d5      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d106      	bne.n	8003484 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003476:	4b6d      	ldr	r3, [pc, #436]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2204      	movs	r2, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d109      	bne.n	8003494 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0ca      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003484:	4b69      	ldr	r3, [pc, #420]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0c2      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003494:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2203      	movs	r2, #3
 800349a:	4393      	bics	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fc92 	bl	8001dd0 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d111      	bne.n	80034dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b8:	e009      	b.n	80034ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ba:	f7fe fc89 	bl	8001dd0 <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0a5      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ce:	4b57      	ldr	r3, [pc, #348]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	220c      	movs	r2, #12
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d1ef      	bne.n	80034ba <HAL_RCC_ClockConfig+0x106>
 80034da:	e03a      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d111      	bne.n	8003508 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	e009      	b.n	80034fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e6:	f7fe fc73 	bl	8001dd0 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	4a4d      	ldr	r2, [pc, #308]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e08f      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034fa:	4b4c      	ldr	r3, [pc, #304]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	220c      	movs	r2, #12
 8003500:	4013      	ands	r3, r2
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d1ef      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x132>
 8003506:	e024      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d11b      	bne.n	8003548 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003510:	e009      	b.n	8003526 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003512:	f7fe fc5d 	bl	8001dd0 <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	4a42      	ldr	r2, [pc, #264]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e079      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	220c      	movs	r2, #12
 800352c:	4013      	ands	r3, r2
 800352e:	2b04      	cmp	r3, #4
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_ClockConfig+0x15e>
 8003532:	e00e      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fe fc4c 	bl	8001dd0 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e068      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003548:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	220c      	movs	r2, #12
 800354e:	4013      	ands	r3, r2
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	4013      	ands	r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d21e      	bcs.n	800359e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003560:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003572:	f7fe fc2d 	bl	8001dd0 <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	e009      	b.n	8003590 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe fc28 	bl	8001dd0 <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e044      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4013      	ands	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a20      	ldr	r2, [pc, #128]	; (8003630 <HAL_RCC_ClockConfig+0x27c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00a      	beq.n	80035dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_RCC_ClockConfig+0x280>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00da      	lsls	r2, r3, #3
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035dc:	f000 f832 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x278>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	220f      	movs	r2, #15
 80035ea:	4013      	ands	r3, r2
 80035ec:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x284>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	000a      	movs	r2, r1
 80035f2:	40da      	lsrs	r2, r3
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_ClockConfig+0x288>)
 80035f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_ClockConfig+0x28c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	250b      	movs	r5, #11
 80035fe:	197c      	adds	r4, r7, r5
 8003600:	0018      	movs	r0, r3
 8003602:	f7fe fb9f 	bl	8001d44 <HAL_InitTick>
 8003606:	0003      	movs	r3, r0
 8003608:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800360a:	197b      	adds	r3, r7, r5
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003612:	197b      	adds	r3, r7, r5
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	e000      	b.n	800361a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bdb0      	pop	{r4, r5, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	40022000 	.word	0x40022000
 8003628:	00001388 	.word	0x00001388
 800362c:	40021000 	.word	0x40021000
 8003630:	fffff8ff 	.word	0xfffff8ff
 8003634:	ffffc7ff 	.word	0xffffc7ff
 8003638:	08005b9c 	.word	0x08005b9c
 800363c:	20000210 	.word	0x20000210
 8003640:	20000000 	.word	0x20000000

08003644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b08e      	sub	sp, #56	; 0x38
 8003648:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800364a:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCC_GetSysClockFreq+0x138>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003652:	230c      	movs	r3, #12
 8003654:	4013      	ands	r3, r2
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d014      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x40>
 800365a:	d900      	bls.n	800365e <HAL_RCC_GetSysClockFreq+0x1a>
 800365c:	e07b      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x112>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x24>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d00b      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x3a>
 8003666:	e076      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003668:	4b44      	ldr	r3, [pc, #272]	; (800377c <HAL_RCC_GetSysClockFreq+0x138>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2210      	movs	r2, #16
 800366e:	4013      	ands	r3, r2
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003672:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003676:	e07c      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003678:	4b42      	ldr	r3, [pc, #264]	; (8003784 <HAL_RCC_GetSysClockFreq+0x140>)
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800367c:	e079      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800367e:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_RCC_GetSysClockFreq+0x144>)
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003682:	e076      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	0c9a      	lsrs	r2, r3, #18
 8003688:	230f      	movs	r3, #15
 800368a:	401a      	ands	r2, r3
 800368c:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_GetSysClockFreq+0x148>)
 800368e:	5c9b      	ldrb	r3, [r3, r2]
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	0d9a      	lsrs	r2, r3, #22
 8003696:	2303      	movs	r3, #3
 8003698:	4013      	ands	r3, r2
 800369a:	3301      	adds	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_GetSysClockFreq+0x138>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	025b      	lsls	r3, r3, #9
 80036a6:	4013      	ands	r3, r2
 80036a8:	d01a      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	4a35      	ldr	r2, [pc, #212]	; (8003788 <HAL_RCC_GetSysClockFreq+0x144>)
 80036b4:	2300      	movs	r3, #0
 80036b6:	69b8      	ldr	r0, [r7, #24]
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	f7fc fde3 	bl	8000284 <__aeabi_lmul>
 80036be:	0002      	movs	r2, r0
 80036c0:	000b      	movs	r3, r1
 80036c2:	0010      	movs	r0, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f7fc fdb7 	bl	8000244 <__aeabi_uldivmod>
 80036d6:	0002      	movs	r2, r0
 80036d8:	000b      	movs	r3, r1
 80036da:	0013      	movs	r3, r2
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	e037      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036e0:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_RCC_GetSysClockFreq+0x138>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	4013      	ands	r3, r2
 80036e8:	d01a      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036f4:	2300      	movs	r3, #0
 80036f6:	68b8      	ldr	r0, [r7, #8]
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	f7fc fdc3 	bl	8000284 <__aeabi_lmul>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
 8003702:	0010      	movs	r0, r2
 8003704:	0019      	movs	r1, r3
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f7fc fd97 	bl	8000244 <__aeabi_uldivmod>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	0013      	movs	r3, r2
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	e017      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	0018      	movs	r0, r3
 8003724:	2300      	movs	r3, #0
 8003726:	0019      	movs	r1, r3
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_RCC_GetSysClockFreq+0x140>)
 800372a:	2300      	movs	r3, #0
 800372c:	f7fc fdaa 	bl	8000284 <__aeabi_lmul>
 8003730:	0002      	movs	r2, r0
 8003732:	000b      	movs	r3, r1
 8003734:	0010      	movs	r0, r2
 8003736:	0019      	movs	r1, r3
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	001c      	movs	r4, r3
 800373c:	2300      	movs	r3, #0
 800373e:	001d      	movs	r5, r3
 8003740:	0022      	movs	r2, r4
 8003742:	002b      	movs	r3, r5
 8003744:	f7fc fd7e 	bl	8000244 <__aeabi_uldivmod>
 8003748:	0002      	movs	r2, r0
 800374a:	000b      	movs	r3, r1
 800374c:	0013      	movs	r3, r2
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003754:	e00d      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_GetSysClockFreq+0x138>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	2207      	movs	r2, #7
 800375e:	4013      	ands	r3, r2
 8003760:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	3301      	adds	r3, #1
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	0212      	lsls	r2, r2, #8
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003770:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b00e      	add	sp, #56	; 0x38
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	003d0900 	.word	0x003d0900
 8003784:	00f42400 	.word	0x00f42400
 8003788:	007a1200 	.word	0x007a1200
 800378c:	08005bac 	.word	0x08005bac

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e032      	b.n	8003808 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2239      	movs	r2, #57	; 0x39
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2238      	movs	r2, #56	; 0x38
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f001 fc01 	bl	8004fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2239      	movs	r2, #57	; 0x39
 80037c2:	2102      	movs	r1, #2
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	0019      	movs	r1, r3
 80037d0:	0010      	movs	r0, r2
 80037d2:	f000 f971 	bl	8003ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223e      	movs	r2, #62	; 0x3e
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223a      	movs	r2, #58	; 0x3a
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	223b      	movs	r2, #59	; 0x3b
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223c      	movs	r2, #60	; 0x3c
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223d      	movs	r2, #61	; 0x3d
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2239      	movs	r2, #57	; 0x39
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2239      	movs	r2, #57	; 0x39
 800381c:	5c9b      	ldrb	r3, [r3, r2]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e036      	b.n	8003896 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2239      	movs	r2, #57	; 0x39
 800382c:	2102      	movs	r1, #2
 800382e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	05db      	lsls	r3, r3, #23
 8003848:	429a      	cmp	r2, r3
 800384a:	d009      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x50>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_TIM_Base_Start_IT+0x90>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x50>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_TIM_Base_Start_IT+0x94>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2207      	movs	r2, #7
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d010      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2101      	movs	r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e007      	b.n	8003894 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	40010800 	.word	0x40010800
 80038a4:	40011400 	.word	0x40011400

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d124      	bne.n	8003908 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11d      	bne.n	8003908 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2203      	movs	r2, #3
 80038d2:	4252      	negs	r2, r2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2203      	movs	r2, #3
 80038e4:	4013      	ands	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f8cc 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e007      	b.n	8003902 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f8bf 	bl	8003a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f8cb 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	2b04      	cmp	r3, #4
 8003914:	d125      	bne.n	8003962 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	2b04      	cmp	r3, #4
 8003922:	d11e      	bne.n	8003962 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2205      	movs	r2, #5
 800392a:	4252      	negs	r2, r2
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	23c0      	movs	r3, #192	; 0xc0
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4013      	ands	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f89f 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 800394a:	e007      	b.n	800395c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f892 	bl	8003a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f89e 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2208      	movs	r2, #8
 800396a:	4013      	ands	r3, r2
 800396c:	2b08      	cmp	r3, #8
 800396e:	d124      	bne.n	80039ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2208      	movs	r2, #8
 8003978:	4013      	ands	r3, r2
 800397a:	2b08      	cmp	r3, #8
 800397c:	d11d      	bne.n	80039ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2209      	movs	r2, #9
 8003984:	4252      	negs	r2, r2
 8003986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2203      	movs	r2, #3
 8003996:	4013      	ands	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 f873 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 80039a2:	e007      	b.n	80039b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 f866 	bl	8003a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f872 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2210      	movs	r2, #16
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d125      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2210      	movs	r2, #16
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d11e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2211      	movs	r2, #17
 80039dc:	4252      	negs	r2, r2
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2208      	movs	r2, #8
 80039e4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	23c0      	movs	r3, #192	; 0xc0
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4013      	ands	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f846 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e007      	b.n	8003a0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f839 	bl	8003a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f845 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10f      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2202      	movs	r2, #2
 8003a36:	4252      	negs	r2, r2
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 fc8b 	bl	8004358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d10f      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d108      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2241      	movs	r2, #65	; 0x41
 8003a64:	4252      	negs	r2, r2
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 f81c 	bl	8003aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	05db      	lsls	r3, r3, #23
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d007      	beq.n	8003ae2 <TIM_Base_SetConfig+0x2a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <TIM_Base_SetConfig+0x9c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0x2a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <TIM_Base_SetConfig+0xa0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d108      	bne.n	8003af4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2270      	movs	r2, #112	; 0x70
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d007      	beq.n	8003b0e <TIM_Base_SetConfig+0x56>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_Base_SetConfig+0x9c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_Base_SetConfig+0x56>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <TIM_Base_SetConfig+0xa0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <TIM_Base_SetConfig+0xa4>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	4393      	bics	r3, r2
 8003b26:	001a      	movs	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	615a      	str	r2, [r3, #20]
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b004      	add	sp, #16
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40010800 	.word	0x40010800
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	fffffcff 	.word	0xfffffcff

08003b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2238      	movs	r2, #56	; 0x38
 8003b6e:	5c9b      	ldrb	r3, [r3, r2]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e042      	b.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2238      	movs	r2, #56	; 0x38
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2239      	movs	r2, #57	; 0x39
 8003b84:	2102      	movs	r1, #2
 8003b86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2270      	movs	r2, #112	; 0x70
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	05db      	lsls	r3, r3, #23
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d009      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10c      	bne.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2239      	movs	r2, #57	; 0x39
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2238      	movs	r2, #56	; 0x38
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b004      	add	sp, #16
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	40010800 	.word	0x40010800
 8003c0c:	40011400 	.word	0x40011400

08003c10 <led_ring_bit>:
 */

#include "main.h"
#include "control_hardware.h"

void led_ring_bit(uint8_t x) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	0002      	movs	r2, r0
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	701a      	strb	r2, [r3, #0]
	if (x) {
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <led_ring_bit+0x40>
		LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 8003c24:	23a0      	movs	r3, #160	; 0xa0
 8003c26:	05db      	lsls	r3, r3, #23
 8003c28:	2220      	movs	r2, #32
 8003c2a:	619a      	str	r2, [r3, #24]
		NS800;
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46c0      	nop			; (mov r8, r8)
		LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 8003c46:	23a0      	movs	r3, #160	; 0xa0
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
		NS400;
	} else {
		LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
		NS400;
		LED_RING_GPIO_Port->BRR = LED_RING_Pin;
		NS800;
 8003c4e:	e00c      	b.n	8003c6a <led_ring_bit+0x5a>
	} else {
 8003c50:	23a0      	movs	r3, #160	; 0xa0
 8003c52:	05db      	lsls	r3, r3, #23
 8003c54:	2220      	movs	r2, #32
 8003c56:	619a      	str	r2, [r3, #24]
		LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46c0      	nop			; (mov r8, r8)
		NS400;
 8003c62:	23a0      	movs	r3, #160	; 0xa0
 8003c64:	05db      	lsls	r3, r3, #23
 8003c66:	2220      	movs	r2, #32
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
		NS800;
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <led_ring_update>:
	}
}
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b0cc      	sub	sp, #304	; 0x130
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

void led_ring_update(uint32_t *data_24bit) {
	uint16_t i;
	uint8_t data_bit[288];
 8003c7c:	2397      	movs	r3, #151	; 0x97
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e02b      	b.n	8003ce0 <led_ring_update+0x6c>

 8003c88:	2597      	movs	r5, #151	; 0x97
 8003c8a:	006d      	lsls	r5, r5, #1
 8003c8c:	197b      	adds	r3, r7, r5
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	2118      	movs	r1, #24
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7fc fa4a 	bl	800012c <__udivsi3>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	197b      	adds	r3, r7, r5
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	2118      	movs	r1, #24
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fc fac4 	bl	8000238 <__aeabi_uidivmod>
 8003cb0:	000b      	movs	r3, r1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	2317      	movs	r3, #23
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	40dc      	lsrs	r4, r3
 8003cbc:	0023      	movs	r3, r4
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	197b      	adds	r3, r7, r5
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	b2d1      	uxtb	r1, r2
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <led_ring_update+0xc4>)
 8003ccc:	2098      	movs	r0, #152	; 0x98
 8003cce:	0040      	lsls	r0, r0, #1
 8003cd0:	1812      	adds	r2, r2, r0
 8003cd2:	19d2      	adds	r2, r2, r7
 8003cd4:	54d1      	strb	r1, [r2, r3]
	uint8_t data_bit[288];
 8003cd6:	197b      	adds	r3, r7, r5
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	197b      	adds	r3, r7, r5
 8003cdc:	3201      	adds	r2, #1
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	2197      	movs	r1, #151	; 0x97
 8003ce2:	0049      	lsls	r1, r1, #1
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	2390      	movs	r3, #144	; 0x90
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3cb      	bcc.n	8003c88 <led_ring_update+0x14>
	for (i = 0; i < 288; i++) {
		data_bit[i] = data_24bit[i / 24] >> (23 - (i % 24)) & 1;
	}
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	e011      	b.n	8003d1c <led_ring_update+0xa8>

 8003cf8:	2497      	movs	r4, #151	; 0x97
 8003cfa:	0064      	lsls	r4, r4, #1
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <led_ring_update+0xc4>)
 8003d02:	2198      	movs	r1, #152	; 0x98
 8003d04:	0049      	lsls	r1, r1, #1
 8003d06:	1852      	adds	r2, r2, r1
 8003d08:	19d2      	adds	r2, r2, r7
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff ff7f 	bl	8003c10 <led_ring_bit>
	}
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	193b      	adds	r3, r7, r4
 8003d18:	3201      	adds	r2, #1
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	2397      	movs	r3, #151	; 0x97
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	2390      	movs	r3, #144	; 0x90
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3e5      	bcc.n	8003cf8 <led_ring_update+0x84>
	for (i = 0; i < 288; i++) {
		led_ring_bit(data_bit[i]);
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b04c      	add	sp, #304	; 0x130
 8003d34:	bdb0      	pop	{r4, r5, r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	fffffedc 	.word	0xfffffedc

08003d3c <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8003d42:	003b      	movs	r3, r7
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d48:	003b      	movs	r3, r7
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	003b      	movs	r3, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8003d54:	003b      	movs	r3, r7
 8003d56:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <LcdReadByte+0xa4>)
 8003d58:	0019      	movs	r1, r3
 8003d5a:	0010      	movs	r0, r2
 8003d5c:	f7fe fdb6 	bl	80028cc <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <LcdReadByte+0xa4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	2102      	movs	r1, #2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7fe ff43 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <LcdReadByte+0xa4>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2108      	movs	r1, #8
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fe ff3d 	bl	8002bf2 <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 8003d78:	2517      	movs	r5, #23
 8003d7a:	197c      	adds	r4, r7, r5
 8003d7c:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <LcdReadByte+0xa4>)
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fe ff19 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8003d86:	0003      	movs	r3, r0
 8003d88:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <LcdReadByte+0xa4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2108      	movs	r1, #8
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe ff2e 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <LcdReadByte+0xa4>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2108      	movs	r1, #8
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fe ff28 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <LcdReadByte+0xa4>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	2108      	movs	r1, #8
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fe ff22 	bl	8002bf2 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8003dae:	003b      	movs	r3, r7
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db4:	003b      	movs	r3, r7
 8003db6:	2201      	movs	r2, #1
 8003db8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	003b      	movs	r3, r7
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	003b      	movs	r3, r7
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <LcdReadByte+0xa4>)
 8003dca:	0019      	movs	r1, r3
 8003dcc:	0010      	movs	r0, r2
 8003dce:	f7fe fd7d 	bl	80028cc <HAL_GPIO_Init>
  
  return lcdBusy;
 8003dd2:	197b      	adds	r3, r7, r5
 8003dd4:	781b      	ldrb	r3, [r3, #0]
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	50000400 	.word	0x50000400

08003de4 <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	0002      	movs	r2, r0
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	481c      	ldr	r0, [pc, #112]	; (8003e6c <LcdSendNibble+0x88>)
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	2110      	movs	r1, #16
 8003e00:	f7fe fef7 	bl	8002bf2 <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4816      	ldr	r0, [pc, #88]	; (8003e6c <LcdSendNibble+0x88>)
 8003e14:	001a      	movs	r2, r3
 8003e16:	2120      	movs	r1, #32
 8003e18:	f7fe feeb 	bl	8002bf2 <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4810      	ldr	r0, [pc, #64]	; (8003e6c <LcdSendNibble+0x88>)
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	2140      	movs	r1, #64	; 0x40
 8003e30:	f7fe fedf 	bl	8002bf2 <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	480a      	ldr	r0, [pc, #40]	; (8003e6c <LcdSendNibble+0x88>)
 8003e44:	001a      	movs	r2, r3
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	f7fe fed3 	bl	8002bf2 <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <LcdSendNibble+0x88>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	2108      	movs	r1, #8
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fe fecd 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <LcdSendNibble+0x88>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2108      	movs	r1, #8
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7fe fec7 	bl	8002bf2 <HAL_GPIO_WritePin>
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	50000400 	.word	0x50000400

08003e70 <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	0002      	movs	r2, r0
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	1dbb      	adds	r3, r7, #6
 8003e7e:	1c0a      	adds	r2, r1, #0
 8003e80:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <LcdSendByte+0x74>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	2101      	movs	r1, #1
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fe feb2 	bl	8002bf2 <HAL_GPIO_WritePin>
  while(LcdReadByte());
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	f7ff ff54 	bl	8003d3c <LcdReadByte>
 8003e94:	1e03      	subs	r3, r0, #0
 8003e96:	d1fb      	bne.n	8003e90 <LcdSendByte+0x20>
  LCD_RS(address);
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4811      	ldr	r0, [pc, #68]	; (8003ee4 <LcdSendByte+0x74>)
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	f7fe fea6 	bl	8002bf2 <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <LcdSendByte+0x74>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2102      	movs	r1, #2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fe fea0 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <LcdSendByte+0x74>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2108      	movs	r1, #8
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fe fe9a 	bl	8002bf2 <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff ff8c 	bl	8003de4 <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 8003ecc:	1dbb      	adds	r3, r7, #6
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff ff84 	bl	8003de4 <LcdSendNibble>
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	50000400 	.word	0x50000400

08003ee8 <LcdInit>:

void LcdInit() {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 8003eee:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <LcdInit+0x90>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fe fe7c 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003efa:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <LcdInit+0x90>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	2102      	movs	r1, #2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fe fe76 	bl	8002bf2 <HAL_GPIO_WritePin>
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <LcdInit+0x90>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7fe fe70 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8003f12:	200f      	movs	r0, #15
 8003f14:	f7fd ff66 	bl	8001de4 <HAL_Delay>
  for(i=0; i<3; i++) {
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e00a      	b.n	8003f36 <LcdInit+0x4e>
    LcdSendNibble(3);
 8003f20:	2003      	movs	r0, #3
 8003f22:	f7ff ff5f 	bl	8003de4 <LcdSendNibble>
    HAL_Delay(5);
 8003f26:	2005      	movs	r0, #5
 8003f28:	f7fd ff5c 	bl	8001de4 <HAL_Delay>
  for(i=0; i<3; i++) {
 8003f2c:	1dfb      	adds	r3, r7, #7
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	1dfb      	adds	r3, r7, #7
 8003f32:	3201      	adds	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d9f0      	bls.n	8003f20 <LcdInit+0x38>
  }
  LcdSendNibble(2);
 8003f3e:	2002      	movs	r0, #2
 8003f40:	f7ff ff50 	bl	8003de4 <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e00c      	b.n	8003f66 <LcdInit+0x7e>
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <LcdInit+0x94>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	0019      	movs	r1, r3
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7ff ff8a 	bl	8003e70 <LcdSendByte>
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	3201      	adds	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d9ee      	bls.n	8003f4c <LcdInit+0x64>
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	50000400 	.word	0x50000400
 8003f7c:	08005b98 	.word	0x08005b98

08003f80 <lcd_gotoxy>:

void lcd_gotoxy(uint8_t x, uint8_t y) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	0002      	movs	r2, r0
 8003f88:	1dfb      	adds	r3, r7, #7
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	1c0a      	adds	r2, r1, #0
 8003f90:	701a      	strb	r2, [r3, #0]
  uint8_t address;
  if(y != 1) address = 0x40;
 8003f92:	1dbb      	adds	r3, r7, #6
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d004      	beq.n	8003fa4 <lcd_gotoxy+0x24>
 8003f9a:	230f      	movs	r3, #15
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e003      	b.n	8003fac <lcd_gotoxy+0x2c>
  else address = 0;
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  address += x-1;
 8003fac:	1dfa      	adds	r2, r7, #7
 8003fae:	210f      	movs	r1, #15
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	18d3      	adds	r3, r2, r3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
  LcdSendByte(0, 0x80 | address);
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7ff ff4e 	bl	8003e70 <LcdSendByte>
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <lcd_putc>:

void lcd_putc(uint8_t c) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	701a      	strb	r2, [r3, #0]
  if(c == '\f') {
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d107      	bne.n	8004000 <lcd_putc+0x24>
    LcdSendByte(0, 1);
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7ff ff3c 	bl	8003e70 <LcdSendByte>
    HAL_Delay(2);
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f7fd fef3 	bl	8001de4 <HAL_Delay>
  }
  else if(c == '\n') lcd_gotoxy(1, 2);
  else if(c == '\b') LcdSendByte(0, 0x10);
  else LcdSendByte(1, c);
}
 8003ffe:	e017      	b.n	8004030 <lcd_putc+0x54>
  else if(c == '\n') lcd_gotoxy(1, 2);
 8004000:	1dfb      	adds	r3, r7, #7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b0a      	cmp	r3, #10
 8004006:	d104      	bne.n	8004012 <lcd_putc+0x36>
 8004008:	2102      	movs	r1, #2
 800400a:	2001      	movs	r0, #1
 800400c:	f7ff ffb8 	bl	8003f80 <lcd_gotoxy>
}
 8004010:	e00e      	b.n	8004030 <lcd_putc+0x54>
  else if(c == '\b') LcdSendByte(0, 0x10);
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b08      	cmp	r3, #8
 8004018:	d104      	bne.n	8004024 <lcd_putc+0x48>
 800401a:	2110      	movs	r1, #16
 800401c:	2000      	movs	r0, #0
 800401e:	f7ff ff27 	bl	8003e70 <LcdSendByte>
}
 8004022:	e005      	b.n	8004030 <lcd_putc+0x54>
  else LcdSendByte(1, c);
 8004024:	1dfb      	adds	r3, r7, #7
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	0019      	movs	r1, r3
 800402a:	2001      	movs	r0, #1
 800402c:	f7ff ff20 	bl	8003e70 <LcdSendByte>
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}

08004038 <lcd_puts>:

void lcd_puts(const char* str) {
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<strlen(str); i++) {
 8004040:	230f      	movs	r3, #15
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e00d      	b.n	8004066 <lcd_puts+0x2e>
    lcd_putc(str[i]);
 800404a:	240f      	movs	r4, #15
 800404c:	193b      	adds	r3, r7, r4
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	18d3      	adds	r3, r2, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff ffc0 	bl	8003fdc <lcd_putc>
  for(i=0; i<strlen(str); i++) {
 800405c:	193b      	adds	r3, r7, r4
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	193b      	adds	r3, r7, r4
 8004062:	3201      	adds	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	230f      	movs	r3, #15
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781c      	ldrb	r4, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f7fc f84a 	bl	8000108 <strlen>
 8004074:	0003      	movs	r3, r0
 8004076:	429c      	cmp	r4, r3
 8004078:	d3e7      	bcc.n	800404a <lcd_puts+0x12>
  }
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b005      	add	sp, #20
 8004082:	bd90      	pop	{r4, r7, pc}

08004084 <lcd_cgram>:

void lcd_cgram(uint8_t room, uint8_t n) {
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	0002      	movs	r2, r0
 800408c:	1dfb      	adds	r3, r7, #7
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	1c0a      	adds	r2, r1, #0
 8004094:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  const uint8_t data[2][8]={{0x04, 0x04, 0x0E, 0x0F, 0x1B, 0x19, 0x11, 0x0A}, // FIRE SYMBOL
 8004096:	230c      	movs	r3, #12
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <lcd_cgram+0x80>)
 800409c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800409e:	c313      	stmia	r3!, {r0, r1, r4}
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	601a      	str	r2, [r3, #0]
                            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}; //
  
  for(i=0; i<8; i++) {
 80040a4:	231f      	movs	r3, #31
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e020      	b.n	80040f0 <lcd_cgram+0x6c>
    LcdSendByte(0, 0x40+i+(room*8));
 80040ae:	1dfb      	adds	r3, r7, #7
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	241f      	movs	r4, #31
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3340      	adds	r3, #64	; 0x40
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	0019      	movs	r1, r3
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff fed2 	bl	8003e70 <LcdSendByte>
    LcdSendByte(1, data[n][i]);
 80040cc:	1dbb      	adds	r3, r7, #6
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	193b      	adds	r3, r7, r4
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	210c      	movs	r1, #12
 80040d6:	1879      	adds	r1, r7, r1
 80040d8:	00d2      	lsls	r2, r2, #3
 80040da:	188a      	adds	r2, r1, r2
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	0019      	movs	r1, r3
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7ff fec5 	bl	8003e70 <LcdSendByte>
  for(i=0; i<8; i++) {
 80040e6:	193b      	adds	r3, r7, r4
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	3201      	adds	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	231f      	movs	r3, #31
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d9d9      	bls.n	80040ae <lcd_cgram+0x2a>
  }
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b009      	add	sp, #36	; 0x24
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	08005ab4 	.word	0x08005ab4

08004108 <read_adc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_adc(uint16_t *cds, uint16_t *vr) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start(&hadc);
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <read_adc+0x60>)
 8004114:	0018      	movs	r0, r3
 8004116:	f7fd fffd 	bl	8002114 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 800411a:	23fa      	movs	r3, #250	; 0xfa
 800411c:	009a      	lsls	r2, r3, #2
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <read_adc+0x60>)
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f7fe f88a 	bl	800223c <HAL_ADC_PollForConversion>
	*cds = HAL_ADC_GetValue(&hadc);
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <read_adc+0x60>)
 800412a:	0018      	movs	r0, r3
 800412c:	f7fe f922 	bl	8002374 <HAL_ADC_GetValue>
 8004130:	0003      	movs	r3, r0
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc, 1000);
 8004138:	23fa      	movs	r3, #250	; 0xfa
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <read_adc+0x60>)
 800413e:	0011      	movs	r1, r2
 8004140:	0018      	movs	r0, r3
 8004142:	f7fe f87b 	bl	800223c <HAL_ADC_PollForConversion>
	*vr = HAL_ADC_GetValue(&hadc);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <read_adc+0x60>)
 8004148:	0018      	movs	r0, r3
 800414a:	f7fe f913 	bl	8002374 <HAL_ADC_GetValue>
 800414e:	0003      	movs	r3, r0
 8004150:	b29a      	uxth	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <read_adc+0x60>)
 8004158:	0018      	movs	r0, r3
 800415a:	f7fe f82f 	bl	80021bc <HAL_ADC_Stop>
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000298 	.word	0x20000298

0800416c <lcd_print>:

void lcd_print() {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af02      	add	r7, sp, #8
	if (stat.over)
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <lcd_print+0xbc>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <lcd_print+0x16>
		gasstat = OVER;
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <lcd_print+0xc0>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e026      	b.n	80041d0 <lcd_print+0x64>
	else if (stat.safe)
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <lcd_print+0xbc>)
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <lcd_print+0x26>
		gasstat = SAFE;
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <lcd_print+0xc0>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e01e      	b.n	80041d0 <lcd_print+0x64>
	else if (stat.off)
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <lcd_print+0xbc>)
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <lcd_print+0x36>
		gasstat = OFF;
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <lcd_print+0xc0>)
 800419c:	2202      	movs	r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e016      	b.n	80041d0 <lcd_print+0x64>
	else if (stat.onn)
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <lcd_print+0xbc>)
 80041a4:	78db      	ldrb	r3, [r3, #3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <lcd_print+0x46>
		gasstat = ONN;
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <lcd_print+0xc0>)
 80041ac:	2203      	movs	r2, #3
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e00e      	b.n	80041d0 <lcd_print+0x64>
	else if (stat.au)
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <lcd_print+0xbc>)
 80041b4:	791b      	ldrb	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <lcd_print+0x56>
		gasstat = AUTO;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <lcd_print+0xc0>)
 80041bc:	2204      	movs	r2, #4
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e006      	b.n	80041d0 <lcd_print+0x64>
	else if (stat.on)
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <lcd_print+0xbc>)
 80041c4:	795b      	ldrb	r3, [r3, #5]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <lcd_print+0x64>
		gasstat = ON;
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <lcd_print+0xc0>)
 80041cc:	2205      	movs	r2, #5
 80041ce:	701a      	strb	r2, [r3, #0]
	sprintf(bf, "TEMP:%03d%cC  %c:%d ", temp, 0xDF, 1, fireset);
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <lcd_print+0xc4>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <lcd_print+0xc8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4917      	ldr	r1, [pc, #92]	; (8004238 <lcd_print+0xcc>)
 80041da:	4818      	ldr	r0, [pc, #96]	; (800423c <lcd_print+0xd0>)
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2301      	movs	r3, #1
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	23df      	movs	r3, #223	; 0xdf
 80041e4:	f000 fff0 	bl	80051c8 <siprintf>
	lcd_gotoxy(0, 1);
 80041e8:	2101      	movs	r1, #1
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7ff fec8 	bl	8003f80 <lcd_gotoxy>
	lcd_puts(bf);
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <lcd_print+0xd0>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7ff ff20 	bl	8004038 <lcd_puts>
	sprintf(bf, "[%.9s][%03d]", statfont[gasstat], altemp);
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <lcd_print+0xc0>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	001a      	movs	r2, r3
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <lcd_print+0xd4>)
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	58d2      	ldr	r2, [r2, r3]
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <lcd_print+0xd8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	490f      	ldr	r1, [pc, #60]	; (8004248 <lcd_print+0xdc>)
 800420a:	480c      	ldr	r0, [pc, #48]	; (800423c <lcd_print+0xd0>)
 800420c:	f000 ffdc 	bl	80051c8 <siprintf>
	lcd_gotoxy(0, 0);
 8004210:	2100      	movs	r1, #0
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff feb4 	bl	8003f80 <lcd_gotoxy>
	lcd_puts(bf);
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <lcd_print+0xd0>)
 800421a:	0018      	movs	r0, r3
 800421c:	f7ff ff0c 	bl	8004038 <lcd_puts>
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000350 	.word	0x20000350
 800422c:	2000002c 	.word	0x2000002c
 8004230:	20000008 	.word	0x20000008
 8004234:	20000338 	.word	0x20000338
 8004238:	08005b0c 	.word	0x08005b0c
 800423c:	2000033c 	.word	0x2000033c
 8004240:	20000014 	.word	0x20000014
 8004244:	2000000c 	.word	0x2000000c
 8004248:	08005b24 	.word	0x08005b24

0800424c <led>:

void led(uint16_t vr) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	0002      	movs	r2, r0
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	801a      	strh	r2, [r3, #0]
	vr = ((uint8_t) ((float) vr / 1023.75) + 1);
 8004258:	1dbb      	adds	r3, r7, #6
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	0018      	movs	r0, r3
 800425e:	f7fc f929 	bl	80004b4 <__aeabi_ui2f>
 8004262:	1c03      	adds	r3, r0, #0
 8004264:	1c18      	adds	r0, r3, #0
 8004266:	f7fd fb91 	bl	800198c <__aeabi_f2d>
 800426a:	2200      	movs	r2, #0
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <led+0x104>)
 800426e:	f7fc fc9f 	bl	8000bb0 <__aeabi_ddiv>
 8004272:	0002      	movs	r2, r0
 8004274:	000b      	movs	r3, r1
 8004276:	0010      	movs	r0, r2
 8004278:	0019      	movs	r1, r3
 800427a:	f7fc f831 	bl	80002e0 <__aeabi_d2uiz>
 800427e:	0003      	movs	r3, r0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	b29a      	uxth	r2, r3
 8004284:	1dbb      	adds	r3, r7, #6
 8004286:	3201      	adds	r2, #1
 8004288:	801a      	strh	r2, [r3, #0]
	LED(1, (vr == 1));
 800428a:	1dbb      	adds	r3, r7, #6
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	3b01      	subs	r3, #1
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	4193      	sbcs	r3, r2
 8004294:	b2db      	uxtb	r3, r3
 8004296:	001a      	movs	r2, r3
 8004298:	23a0      	movs	r3, #160	; 0xa0
 800429a:	05db      	lsls	r3, r3, #23
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fe fca7 	bl	8002bf2 <HAL_GPIO_WritePin>
	LED(2, (vr == 2));
 80042a4:	1dbb      	adds	r3, r7, #6
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	3b02      	subs	r3, #2
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4193      	sbcs	r3, r2
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	001a      	movs	r2, r3
 80042b2:	23a0      	movs	r3, #160	; 0xa0
 80042b4:	05db      	lsls	r3, r3, #23
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fe fc9a 	bl	8002bf2 <HAL_GPIO_WritePin>
	LED(3, (vr == 3));
 80042be:	1dbb      	adds	r3, r7, #6
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	3b03      	subs	r3, #3
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	4193      	sbcs	r3, r2
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	001a      	movs	r2, r3
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	0059      	lsls	r1, r3, #1
 80042d0:	23a0      	movs	r3, #160	; 0xa0
 80042d2:	05db      	lsls	r3, r3, #23
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7fe fc8c 	bl	8002bf2 <HAL_GPIO_WritePin>
	LED(4, (vr == 4));
 80042da:	1dbb      	adds	r3, r7, #6
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	3b04      	subs	r3, #4
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	4193      	sbcs	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	001a      	movs	r2, r3
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	0099      	lsls	r1, r3, #2
 80042ec:	23a0      	movs	r3, #160	; 0xa0
 80042ee:	05db      	lsls	r3, r3, #23
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7fe fc7e 	bl	8002bf2 <HAL_GPIO_WritePin>
	LED(5, (vr == 5));
 80042f6:	1dbb      	adds	r3, r7, #6
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	3b05      	subs	r3, #5
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	4193      	sbcs	r3, r2
 8004300:	b2db      	uxtb	r3, r3
 8004302:	001a      	movs	r2, r3
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	00d9      	lsls	r1, r3, #3
 8004308:	23a0      	movs	r3, #160	; 0xa0
 800430a:	05db      	lsls	r3, r3, #23
 800430c:	0018      	movs	r0, r3
 800430e:	f7fe fc70 	bl	8002bf2 <HAL_GPIO_WritePin>
	autemp = (vr == 2 ? 100 : vr == 3 ? 140 : vr == 4 ? 180 : vr == 5 ? 220 : 80);
 8004312:	1dbb      	adds	r3, r7, #6
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d013      	beq.n	8004342 <led+0xf6>
 800431a:	1dbb      	adds	r3, r7, #6
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d00d      	beq.n	800433e <led+0xf2>
 8004322:	1dbb      	adds	r3, r7, #6
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d007      	beq.n	800433a <led+0xee>
 800432a:	1dbb      	adds	r3, r7, #6
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2b05      	cmp	r3, #5
 8004330:	d101      	bne.n	8004336 <led+0xea>
 8004332:	23dc      	movs	r3, #220	; 0xdc
 8004334:	e006      	b.n	8004344 <led+0xf8>
 8004336:	2350      	movs	r3, #80	; 0x50
 8004338:	e004      	b.n	8004344 <led+0xf8>
 800433a:	23b4      	movs	r3, #180	; 0xb4
 800433c:	e002      	b.n	8004344 <led+0xf8>
 800433e:	238c      	movs	r3, #140	; 0x8c
 8004340:	e000      	b.n	8004344 <led+0xf8>
 8004342:	2364      	movs	r3, #100	; 0x64
 8004344:	4a03      	ldr	r2, [pc, #12]	; (8004354 <led+0x108>)
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}
 8004350:	408ffe00 	.word	0x408ffe00
 8004354:	20000010 	.word	0x20000010

08004358 <HAL_TIM_PeriodElapsedCallback>:
	void (*Led)(uint16_t);
	void (*Read_ADC)(uint16_t*, uint16_t*);

}IOcon;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance && ledRingFlag) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d111      	bne.n	8004390 <HAL_TIM_PeriodElapsedCallback+0x38>
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_TIM_PeriodElapsedCallback+0x38>
		ledRingFlag = false;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
		led_ring_update(led_ring_data[fire]);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	0013      	movs	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	189b      	adds	r3, r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004388:	189b      	adds	r3, r3, r2
 800438a:	0018      	movs	r0, r3
 800438c:	f7ff fc72 	bl	8003c74 <led_ring_update>
	}
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	200002f4 	.word	0x200002f4
 800439c:	2000034d 	.word	0x2000034d
 80043a0:	20000334 	.word	0x20000334
 80043a4:	20000030 	.word	0x20000030

080043a8 <setUp>:

void setUp(IOcon *io){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	io->Lcd_Print = lcd_print;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <setUp+0x24>)
 80043b4:	601a      	str	r2, [r3, #0]
	io->Led = led;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <setUp+0x28>)
 80043ba:	605a      	str	r2, [r3, #4]
	io->Read_ADC = read_adc;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <setUp+0x2c>)
 80043c0:	609a      	str	r2, [r3, #8]
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b002      	add	sp, #8
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	0800416d 	.word	0x0800416d
 80043d0:	0800424d 	.word	0x0800424d
 80043d4:	08004109 	.word	0x08004109

080043d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	IOcon io;
	boolean swFlag = false, buzflag = false, alflag = false;
 80043de:	2327      	movs	r3, #39	; 0x27
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	2326      	movs	r3, #38	; 0x26
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	2325      	movs	r3, #37	; 0x25
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
	uint16_t cds, vr;
	uint32_t last = NOW;
 80043f6:	f7fd fceb 	bl	8001dd0 <HAL_GetTick>
 80043fa:	0003      	movs	r3, r0
 80043fc:	623b      	str	r3, [r7, #32]
	uint32_t flast = NOW;
 80043fe:	f7fd fce7 	bl	8001dd0 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	61fb      	str	r3, [r7, #28]
	uint32_t tuplast = NOW;
 8004406:	f7fd fce3 	bl	8001dd0 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	61bb      	str	r3, [r7, #24]
	uint32_t tdownlast = NOW;
 800440e:	f7fd fcdf 	bl	8001dd0 <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	617b      	str	r3, [r7, #20]
	uint32_t buzlast = NOW;
 8004416:	f7fd fcdb 	bl	8001dd0 <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800441e:	f7fd fc71 	bl	8001d04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004422:	f000 fbb3 	bl	8004b8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004426:	f000 fcc9 	bl	8004dbc <MX_GPIO_Init>
	MX_ADC_Init();
 800442a:	f000 fc19 	bl	8004c60 <MX_ADC_Init>
	MX_TIM6_Init();
 800442e:	f000 fc89 	bl	8004d44 <MX_TIM6_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8004432:	f000 fc07 	bl	8004c44 <MX_NVIC_Init>
	setUp(&io);
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff ffb5 	bl	80043a8 <setUp>
	/* USER CODE BEGIN 2 */
	LcdInit();
 800443e:	f7ff fd53 	bl	8003ee8 <LcdInit>
	lcd_cgram(1, 0);
 8004442:	2100      	movs	r1, #0
 8004444:	2001      	movs	r0, #1
 8004446:	f7ff fe1d 	bl	8004084 <lcd_cgram>
	lcd_puts("\fSmart Gas Range\n             001");
 800444a:	4bc6      	ldr	r3, [pc, #792]	; (8004764 <main+0x38c>)
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fdf3 	bl	8004038 <lcd_puts>
	HAL_Delay(2000);
 8004452:	23fa      	movs	r3, #250	; 0xfa
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	0018      	movs	r0, r3
 8004458:	f7fd fcc4 	bl	8001de4 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 800445c:	4bc2      	ldr	r3, [pc, #776]	; (8004768 <main+0x390>)
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff f9d6 	bl	8003810 <HAL_TIM_Base_Start_IT>
	ledRingFlag = true;
 8004464:	4bc1      	ldr	r3, [pc, #772]	; (800476c <main+0x394>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
	io.Lcd_Print();
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4798      	blx	r3
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		io.Read_ADC(&cds, &vr);
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	0039      	movs	r1, r7
 8004476:	1cba      	adds	r2, r7, #2
 8004478:	0010      	movs	r0, r2
 800447a:	4798      	blx	r3
		if (!SW2)
 800447c:	23a0      	movs	r3, #160	; 0xa0
 800447e:	05db      	lsls	r3, r3, #23
 8004480:	2110      	movs	r1, #16
 8004482:	0018      	movs	r0, r3
 8004484:	f7fe fb98 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d103      	bne.n	8004494 <main+0xbc>
			stat.safe = true;
 800448c:	4bb8      	ldr	r3, [pc, #736]	; (8004770 <main+0x398>)
 800448e:	2201      	movs	r2, #1
 8004490:	705a      	strb	r2, [r3, #1]
 8004492:	e034      	b.n	80044fe <main+0x126>
		else {
			if (!SW1) {
 8004494:	23a0      	movs	r3, #160	; 0xa0
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	2104      	movs	r1, #4
 800449a:	0018      	movs	r0, r3
 800449c:	f7fe fb8c 	bl	8002bb8 <HAL_GPIO_ReadPin>
 80044a0:	1e03      	subs	r3, r0, #0
 80044a2:	d115      	bne.n	80044d0 <main+0xf8>
				if (cds > 3000) {
 80044a4:	1cbb      	adds	r3, r7, #2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	4ab2      	ldr	r2, [pc, #712]	; (8004774 <main+0x39c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d906      	bls.n	80044bc <main+0xe4>
					stat.on = true;
 80044ae:	4bb0      	ldr	r3, [pc, #704]	; (8004770 <main+0x398>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	715a      	strb	r2, [r3, #5]
					stat.onn = false;
 80044b4:	4bae      	ldr	r3, [pc, #696]	; (8004770 <main+0x398>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	70da      	strb	r2, [r3, #3]
 80044ba:	e005      	b.n	80044c8 <main+0xf0>
				} else {
					stat.onn = true;
 80044bc:	4bac      	ldr	r3, [pc, #688]	; (8004770 <main+0x398>)
 80044be:	2201      	movs	r2, #1
 80044c0:	70da      	strb	r2, [r3, #3]
					stat.on = false;
 80044c2:	4bab      	ldr	r3, [pc, #684]	; (8004770 <main+0x398>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	715a      	strb	r2, [r3, #5]
				}
				stat.off = false;
 80044c8:	4ba9      	ldr	r3, [pc, #676]	; (8004770 <main+0x398>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	709a      	strb	r2, [r3, #2]
 80044ce:	e016      	b.n	80044fe <main+0x126>
			} else {
				if (temp < 150) {
 80044d0:	4ba9      	ldr	r3, [pc, #676]	; (8004778 <main+0x3a0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b95      	cmp	r3, #149	; 0x95
 80044d6:	dc06      	bgt.n	80044e6 <main+0x10e>
					stat.over = false;
 80044d8:	4ba5      	ldr	r3, [pc, #660]	; (8004770 <main+0x398>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
					buzflag = false;
 80044de:	2326      	movs	r3, #38	; 0x26
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
				}
				stat.safe = false;
 80044e6:	4ba2      	ldr	r3, [pc, #648]	; (8004770 <main+0x398>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	705a      	strb	r2, [r3, #1]
				stat.onn = false;
 80044ec:	4ba0      	ldr	r3, [pc, #640]	; (8004770 <main+0x398>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	70da      	strb	r2, [r3, #3]
				stat.on = false;
 80044f2:	4b9f      	ldr	r3, [pc, #636]	; (8004770 <main+0x398>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	715a      	strb	r2, [r3, #5]
				stat.off = true;
 80044f8:	4b9d      	ldr	r3, [pc, #628]	; (8004770 <main+0x398>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	709a      	strb	r2, [r3, #2]
			}
		}
		if (stat.off || stat.over || stat.safe) {
 80044fe:	4b9c      	ldr	r3, [pc, #624]	; (8004770 <main+0x398>)
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <main+0x13e>
 8004506:	4b9a      	ldr	r3, [pc, #616]	; (8004770 <main+0x398>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <main+0x13e>
 800450e:	4b98      	ldr	r3, [pc, #608]	; (8004770 <main+0x398>)
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d029      	beq.n	800456a <main+0x192>
			fireset = 0;
 8004516:	4b99      	ldr	r3, [pc, #612]	; (800477c <main+0x3a4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
			LEDCLEAR
 800451c:	23a0      	movs	r3, #160	; 0xa0
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	2201      	movs	r2, #1
 8004522:	2140      	movs	r1, #64	; 0x40
 8004524:	0018      	movs	r0, r3
 8004526:	f7fe fb64 	bl	8002bf2 <HAL_GPIO_WritePin>
 800452a:	23a0      	movs	r3, #160	; 0xa0
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	2201      	movs	r2, #1
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	0018      	movs	r0, r3
 8004534:	f7fe fb5d 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	0059      	lsls	r1, r3, #1
 800453c:	23a0      	movs	r3, #160	; 0xa0
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	2201      	movs	r2, #1
 8004542:	0018      	movs	r0, r3
 8004544:	f7fe fb55 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	0099      	lsls	r1, r3, #2
 800454c:	23a0      	movs	r3, #160	; 0xa0
 800454e:	05db      	lsls	r3, r3, #23
 8004550:	2201      	movs	r2, #1
 8004552:	0018      	movs	r0, r3
 8004554:	f7fe fb4d 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	00d9      	lsls	r1, r3, #3
 800455c:	23a0      	movs	r3, #160	; 0xa0
 800455e:	05db      	lsls	r3, r3, #23
 8004560:	2201      	movs	r2, #1
 8004562:	0018      	movs	r0, r3
 8004564:	f7fe fb45 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004568:	e099      	b.n	800469e <main+0x2c6>
		} else if (stat.onn) {
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <main+0x398>)
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d029      	beq.n	80045c6 <main+0x1ee>
			LEDCLEAR
 8004572:	23a0      	movs	r3, #160	; 0xa0
 8004574:	05db      	lsls	r3, r3, #23
 8004576:	2201      	movs	r2, #1
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	0018      	movs	r0, r3
 800457c:	f7fe fb39 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004580:	23a0      	movs	r3, #160	; 0xa0
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	2201      	movs	r2, #1
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	0018      	movs	r0, r3
 800458a:	f7fe fb32 	bl	8002bf2 <HAL_GPIO_WritePin>
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	0059      	lsls	r1, r3, #1
 8004592:	23a0      	movs	r3, #160	; 0xa0
 8004594:	05db      	lsls	r3, r3, #23
 8004596:	2201      	movs	r2, #1
 8004598:	0018      	movs	r0, r3
 800459a:	f7fe fb2a 	bl	8002bf2 <HAL_GPIO_WritePin>
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	0099      	lsls	r1, r3, #2
 80045a2:	23a0      	movs	r3, #160	; 0xa0
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	2201      	movs	r2, #1
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fe fb22 	bl	8002bf2 <HAL_GPIO_WritePin>
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	00d9      	lsls	r1, r3, #3
 80045b2:	23a0      	movs	r3, #160	; 0xa0
 80045b4:	05db      	lsls	r3, r3, #23
 80045b6:	2201      	movs	r2, #1
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe fb1a 	bl	8002bf2 <HAL_GPIO_WritePin>
			fireset = 1;
 80045be:	4b6f      	ldr	r3, [pc, #444]	; (800477c <main+0x3a4>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e06b      	b.n	800469e <main+0x2c6>
		} else if (stat.au && !stat.onn && cds > 3000) {
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <main+0x398>)
 80045c8:	791b      	ldrb	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d023      	beq.n	8004616 <main+0x23e>
 80045ce:	4b68      	ldr	r3, [pc, #416]	; (8004770 <main+0x398>)
 80045d0:	78db      	ldrb	r3, [r3, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11f      	bne.n	8004616 <main+0x23e>
 80045d6:	1cbb      	adds	r3, r7, #2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	4a66      	ldr	r2, [pc, #408]	; (8004774 <main+0x39c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d91a      	bls.n	8004616 <main+0x23e>
			io.Led(vr);
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	003a      	movs	r2, r7
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	0010      	movs	r0, r2
 80045ea:	4798      	blx	r3
			if (1 < autemp - temp)
 80045ec:	4b64      	ldr	r3, [pc, #400]	; (8004780 <main+0x3a8>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <main+0x3a0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	dd02      	ble.n	8004600 <main+0x228>
				fireset = 9;
 80045fa:	4b60      	ldr	r3, [pc, #384]	; (800477c <main+0x3a4>)
 80045fc:	2209      	movs	r2, #9
 80045fe:	601a      	str	r2, [r3, #0]
			if (autemp - temp < -1)
 8004600:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <main+0x3a8>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <main+0x3a0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	3301      	adds	r3, #1
 800460c:	da47      	bge.n	800469e <main+0x2c6>
				fireset = 1;
 800460e:	4b5b      	ldr	r3, [pc, #364]	; (800477c <main+0x3a4>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			if (autemp - temp < -1)
 8004614:	e043      	b.n	800469e <main+0x2c6>
		} else if (stat.on) {
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <main+0x398>)
 8004618:	795b      	ldrb	r3, [r3, #5]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03f      	beq.n	800469e <main+0x2c6>
			LEDCLEAR
 800461e:	23a0      	movs	r3, #160	; 0xa0
 8004620:	05db      	lsls	r3, r3, #23
 8004622:	2201      	movs	r2, #1
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	0018      	movs	r0, r3
 8004628:	f7fe fae3 	bl	8002bf2 <HAL_GPIO_WritePin>
 800462c:	23a0      	movs	r3, #160	; 0xa0
 800462e:	05db      	lsls	r3, r3, #23
 8004630:	2201      	movs	r2, #1
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	0018      	movs	r0, r3
 8004636:	f7fe fadc 	bl	8002bf2 <HAL_GPIO_WritePin>
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	0059      	lsls	r1, r3, #1
 800463e:	23a0      	movs	r3, #160	; 0xa0
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	2201      	movs	r2, #1
 8004644:	0018      	movs	r0, r3
 8004646:	f7fe fad4 	bl	8002bf2 <HAL_GPIO_WritePin>
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	0099      	lsls	r1, r3, #2
 800464e:	23a0      	movs	r3, #160	; 0xa0
 8004650:	05db      	lsls	r3, r3, #23
 8004652:	2201      	movs	r2, #1
 8004654:	0018      	movs	r0, r3
 8004656:	f7fe facc 	bl	8002bf2 <HAL_GPIO_WritePin>
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	00d9      	lsls	r1, r3, #3
 800465e:	23a0      	movs	r3, #160	; 0xa0
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	2201      	movs	r2, #1
 8004664:	0018      	movs	r0, r3
 8004666:	f7fe fac4 	bl	8002bf2 <HAL_GPIO_WritePin>
			fireset = vr / 511.875 + 1;
 800466a:	003b      	movs	r3, r7
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	0018      	movs	r0, r3
 8004670:	f7fd f95c 	bl	800192c <__aeabi_i2d>
 8004674:	2200      	movs	r2, #0
 8004676:	4b43      	ldr	r3, [pc, #268]	; (8004784 <main+0x3ac>)
 8004678:	f7fc fa9a 	bl	8000bb0 <__aeabi_ddiv>
 800467c:	0002      	movs	r2, r0
 800467e:	000b      	movs	r3, r1
 8004680:	0010      	movs	r0, r2
 8004682:	0019      	movs	r1, r3
 8004684:	2200      	movs	r2, #0
 8004686:	4b40      	ldr	r3, [pc, #256]	; (8004788 <main+0x3b0>)
 8004688:	f7fb ff56 	bl	8000538 <__aeabi_dadd>
 800468c:	0002      	movs	r2, r0
 800468e:	000b      	movs	r3, r1
 8004690:	0010      	movs	r0, r2
 8004692:	0019      	movs	r1, r3
 8004694:	f7fd f914 	bl	80018c0 <__aeabi_d2iz>
 8004698:	0002      	movs	r2, r0
 800469a:	4b38      	ldr	r3, [pc, #224]	; (800477c <main+0x3a4>)
 800469c:	601a      	str	r2, [r3, #0]
		}
		if (!SW3 || !SW4 || !SW5) {
 800469e:	23a0      	movs	r3, #160	; 0xa0
 80046a0:	05db      	lsls	r3, r3, #23
 80046a2:	2108      	movs	r1, #8
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fe fa87 	bl	8002bb8 <HAL_GPIO_ReadPin>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d011      	beq.n	80046d2 <main+0x2fa>
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	4a36      	ldr	r2, [pc, #216]	; (800478c <main+0x3b4>)
 80046b4:	0019      	movs	r1, r3
 80046b6:	0010      	movs	r0, r2
 80046b8:	f7fe fa7e 	bl	8002bb8 <HAL_GPIO_ReadPin>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d008      	beq.n	80046d2 <main+0x2fa>
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	4a31      	ldr	r2, [pc, #196]	; (800478c <main+0x3b4>)
 80046c6:	0019      	movs	r1, r3
 80046c8:	0010      	movs	r0, r2
 80046ca:	f7fe fa75 	bl	8002bb8 <HAL_GPIO_ReadPin>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d160      	bne.n	8004794 <main+0x3bc>
			if (!swFlag) {
 80046d2:	2327      	movs	r3, #39	; 0x27
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d13e      	bne.n	800475a <main+0x382>
				if (!SW3)
 80046dc:	23a0      	movs	r3, #160	; 0xa0
 80046de:	05db      	lsls	r3, r3, #23
 80046e0:	2108      	movs	r1, #8
 80046e2:	0018      	movs	r0, r3
 80046e4:	f7fe fa68 	bl	8002bb8 <HAL_GPIO_ReadPin>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d107      	bne.n	80046fc <main+0x324>
					stat.au = (!stat.au ? true : false);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <main+0x398>)
 80046ee:	791b      	ldrb	r3, [r3, #4]
 80046f0:	425a      	negs	r2, r3
 80046f2:	4153      	adcs	r3, r2
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <main+0x398>)
 80046fa:	711a      	strb	r2, [r3, #4]
				if (!SW4)
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	01db      	lsls	r3, r3, #7
 8004700:	4a22      	ldr	r2, [pc, #136]	; (800478c <main+0x3b4>)
 8004702:	0019      	movs	r1, r3
 8004704:	0010      	movs	r0, r2
 8004706:	f7fe fa57 	bl	8002bb8 <HAL_GPIO_ReadPin>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d105      	bne.n	800471a <main+0x342>
					altemp -= 20;
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <main+0x3b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3b14      	subs	r3, #20
 8004714:	001a      	movs	r2, r3
 8004716:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <main+0x3b8>)
 8004718:	601a      	str	r2, [r3, #0]
				if (!SW5)
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	4a1b      	ldr	r2, [pc, #108]	; (800478c <main+0x3b4>)
 8004720:	0019      	movs	r1, r3
 8004722:	0010      	movs	r0, r2
 8004724:	f7fe fa48 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d105      	bne.n	8004738 <main+0x360>
					altemp += 20;
 800472c:	4b18      	ldr	r3, [pc, #96]	; (8004790 <main+0x3b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	001a      	movs	r2, r3
 8004734:	4b16      	ldr	r3, [pc, #88]	; (8004790 <main+0x3b8>)
 8004736:	601a      	str	r2, [r3, #0]
				if (altemp > 280)
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <main+0x3b8>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	238c      	movs	r3, #140	; 0x8c
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	429a      	cmp	r2, r3
 8004742:	dd03      	ble.n	800474c <main+0x374>
					altemp = 280;
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <main+0x3b8>)
 8004746:	228c      	movs	r2, #140	; 0x8c
 8004748:	0052      	lsls	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
				if (altemp < 20)
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <main+0x3b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b13      	cmp	r3, #19
 8004752:	dc02      	bgt.n	800475a <main+0x382>
					altemp = 20;
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <main+0x3b8>)
 8004756:	2214      	movs	r2, #20
 8004758:	601a      	str	r2, [r3, #0]
			}
			swFlag = true;
 800475a:	2327      	movs	r3, #39	; 0x27
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e01b      	b.n	800479c <main+0x3c4>
 8004764:	08005b34 	.word	0x08005b34
 8004768:	200002f4 	.word	0x200002f4
 800476c:	2000034d 	.word	0x2000034d
 8004770:	20000350 	.word	0x20000350
 8004774:	00000bb8 	.word	0x00000bb8
 8004778:	20000008 	.word	0x20000008
 800477c:	20000338 	.word	0x20000338
 8004780:	20000010 	.word	0x20000010
 8004784:	407ffe00 	.word	0x407ffe00
 8004788:	3ff00000 	.word	0x3ff00000
 800478c:	50000800 	.word	0x50000800
 8004790:	2000000c 	.word	0x2000000c
		} else {
			swFlag = false;
 8004794:	2327      	movs	r3, #39	; 0x27
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
		}
		if (NOW - last >= 10) {
 800479c:	f7fd fb18 	bl	8001dd0 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	d930      	bls.n	800480c <main+0x434>
			if (NOW - flast >= 100) {
 80047aa:	f7fd fb11 	bl	8001dd0 <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b63      	cmp	r3, #99	; 0x63
 80047b6:	d925      	bls.n	8004804 <main+0x42c>
				if (fire < fireset) {
 80047b8:	4ba0      	ldr	r3, [pc, #640]	; (8004a3c <main+0x664>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4ba0      	ldr	r3, [pc, #640]	; (8004a40 <main+0x668>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	da0a      	bge.n	80047da <main+0x402>
					fire++;
 80047c4:	4b9d      	ldr	r3, [pc, #628]	; (8004a3c <main+0x664>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	4b9c      	ldr	r3, [pc, #624]	; (8004a3c <main+0x664>)
 80047cc:	601a      	str	r2, [r3, #0]
					io.Lcd_Print();
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4798      	blx	r3
					ledRingFlag = true;
 80047d4:	4b9b      	ldr	r3, [pc, #620]	; (8004a44 <main+0x66c>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
				}
				if (fire > fireset) {
 80047da:	4b98      	ldr	r3, [pc, #608]	; (8004a3c <main+0x664>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b98      	ldr	r3, [pc, #608]	; (8004a40 <main+0x668>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dd0a      	ble.n	80047fc <main+0x424>
					fire--;
 80047e6:	4b95      	ldr	r3, [pc, #596]	; (8004a3c <main+0x664>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	4b93      	ldr	r3, [pc, #588]	; (8004a3c <main+0x664>)
 80047ee:	601a      	str	r2, [r3, #0]
					io.Lcd_Print();
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4798      	blx	r3
					ledRingFlag = true;
 80047f6:	4b93      	ldr	r3, [pc, #588]	; (8004a44 <main+0x66c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
				}
				flast = NOW;
 80047fc:	f7fd fae8 	bl	8001dd0 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	61fb      	str	r3, [r7, #28]
			}
			last = NOW;
 8004804:	f7fd fae4 	bl	8001dd0 <HAL_GetTick>
 8004808:	0003      	movs	r3, r0
 800480a:	623b      	str	r3, [r7, #32]
		}
		if (NOW - tuplast >= TEMPUP(fire) && TEMPUP(fire) != 0) {
 800480c:	f7fd fae0 	bl	8001dd0 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad2      	subs	r2, r2, r3
 8004816:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <main+0x664>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d037      	beq.n	800488e <main+0x4b6>
 800481e:	4b87      	ldr	r3, [pc, #540]	; (8004a3c <main+0x664>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d030      	beq.n	8004888 <main+0x4b0>
 8004826:	4b85      	ldr	r3, [pc, #532]	; (8004a3c <main+0x664>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d029      	beq.n	8004882 <main+0x4aa>
 800482e:	4b83      	ldr	r3, [pc, #524]	; (8004a3c <main+0x664>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d022      	beq.n	800487c <main+0x4a4>
 8004836:	4b81      	ldr	r3, [pc, #516]	; (8004a3c <main+0x664>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b05      	cmp	r3, #5
 800483c:	d01b      	beq.n	8004876 <main+0x49e>
 800483e:	4b7f      	ldr	r3, [pc, #508]	; (8004a3c <main+0x664>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d014      	beq.n	8004870 <main+0x498>
 8004846:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <main+0x664>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d00d      	beq.n	800486a <main+0x492>
 800484e:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <main+0x664>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d007      	beq.n	8004866 <main+0x48e>
 8004856:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <main+0x664>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b09      	cmp	r3, #9
 800485c:	d101      	bne.n	8004862 <main+0x48a>
 800485e:	2364      	movs	r3, #100	; 0x64
 8004860:	e017      	b.n	8004892 <main+0x4ba>
 8004862:	2300      	movs	r3, #0
 8004864:	e015      	b.n	8004892 <main+0x4ba>
 8004866:	23c8      	movs	r3, #200	; 0xc8
 8004868:	e013      	b.n	8004892 <main+0x4ba>
 800486a:	2396      	movs	r3, #150	; 0x96
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	e010      	b.n	8004892 <main+0x4ba>
 8004870:	23c8      	movs	r3, #200	; 0xc8
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	e00d      	b.n	8004892 <main+0x4ba>
 8004876:	23fa      	movs	r3, #250	; 0xfa
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	e00a      	b.n	8004892 <main+0x4ba>
 800487c:	2396      	movs	r3, #150	; 0x96
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	e007      	b.n	8004892 <main+0x4ba>
 8004882:	23af      	movs	r3, #175	; 0xaf
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	e004      	b.n	8004892 <main+0x4ba>
 8004888:	23c8      	movs	r3, #200	; 0xc8
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	e001      	b.n	8004892 <main+0x4ba>
 800488e:	23e1      	movs	r3, #225	; 0xe1
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4293      	cmp	r3, r2
 8004894:	d838      	bhi.n	8004908 <main+0x530>
 8004896:	4b69      	ldr	r3, [pc, #420]	; (8004a3c <main+0x664>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d01f      	beq.n	80048de <main+0x506>
 800489e:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <main+0x664>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d01b      	beq.n	80048de <main+0x506>
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <main+0x664>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d017      	beq.n	80048de <main+0x506>
 80048ae:	4b63      	ldr	r3, [pc, #396]	; (8004a3c <main+0x664>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d013      	beq.n	80048de <main+0x506>
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <main+0x664>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d00f      	beq.n	80048de <main+0x506>
 80048be:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <main+0x664>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d00b      	beq.n	80048de <main+0x506>
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <main+0x664>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	d007      	beq.n	80048de <main+0x506>
 80048ce:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <main+0x664>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d003      	beq.n	80048de <main+0x506>
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <main+0x664>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b09      	cmp	r3, #9
 80048dc:	d114      	bne.n	8004908 <main+0x530>
			temp++;
 80048de:	4b5a      	ldr	r3, [pc, #360]	; (8004a48 <main+0x670>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <main+0x670>)
 80048e6:	601a      	str	r2, [r3, #0]
			tuplast = NOW;
 80048e8:	f7fd fa72 	bl	8001dd0 <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	61bb      	str	r3, [r7, #24]
			if (temp > 300)
 80048f0:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <main+0x670>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2396      	movs	r3, #150	; 0x96
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	429a      	cmp	r2, r3
 80048fa:	dd02      	ble.n	8004902 <main+0x52a>
				stat.over = true;
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <main+0x674>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
			io.Lcd_Print();
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4798      	blx	r3
		}
		if (NOW - tdownlast >= TEMPDOWN(temp - 20)
 8004908:	f7fd fa62 	bl	8001dd0 <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <main+0x670>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b1d      	cmp	r3, #29
 8004918:	dd30      	ble.n	800497c <main+0x5a4>
 800491a:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <main+0x670>)
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	23a0      	movs	r3, #160	; 0xa0
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4299      	cmp	r1, r3
 8004924:	da28      	bge.n	8004978 <main+0x5a0>
 8004926:	4b48      	ldr	r3, [pc, #288]	; (8004a48 <main+0x670>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2bdb      	cmp	r3, #219	; 0xdb
 800492c:	dc22      	bgt.n	8004974 <main+0x59c>
 800492e:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <main+0x670>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b77      	cmp	r3, #119	; 0x77
 8004934:	dc1b      	bgt.n	800496e <main+0x596>
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <main+0x670>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b3b      	cmp	r3, #59	; 0x3b
 800493c:	dc14      	bgt.n	8004968 <main+0x590>
 800493e:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <main+0x670>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b27      	cmp	r3, #39	; 0x27
 8004944:	dc0e      	bgt.n	8004964 <main+0x58c>
 8004946:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <main+0x670>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b22      	cmp	r3, #34	; 0x22
 800494c:	dc07      	bgt.n	800495e <main+0x586>
 800494e:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <main+0x670>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b1d      	cmp	r3, #29
 8004954:	dd01      	ble.n	800495a <main+0x582>
 8004956:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <main+0x678>)
 8004958:	e011      	b.n	800497e <main+0x5a6>
 800495a:	2300      	movs	r3, #0
 800495c:	e00f      	b.n	800497e <main+0x5a6>
 800495e:	23c8      	movs	r3, #200	; 0xc8
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	e00c      	b.n	800497e <main+0x5a6>
 8004964:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <main+0x67c>)
 8004966:	e00a      	b.n	800497e <main+0x5a6>
 8004968:	23af      	movs	r3, #175	; 0xaf
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	e007      	b.n	800497e <main+0x5a6>
 800496e:	23c8      	movs	r3, #200	; 0xc8
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	e004      	b.n	800497e <main+0x5a6>
 8004974:	23c8      	movs	r3, #200	; 0xc8
 8004976:	e002      	b.n	800497e <main+0x5a6>
 8004978:	2364      	movs	r3, #100	; 0x64
 800497a:	e000      	b.n	800497e <main+0x5a6>
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <main+0x680>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d834      	bhi.n	80049ec <main+0x614>
				&& TEMPDOWN(temp - 20) != 0) {
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <main+0x670>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b1d      	cmp	r3, #29
 8004988:	dd1d      	ble.n	80049c6 <main+0x5ee>
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <main+0x670>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	23a0      	movs	r3, #160	; 0xa0
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	429a      	cmp	r2, r3
 8004994:	da17      	bge.n	80049c6 <main+0x5ee>
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <main+0x670>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2bdb      	cmp	r3, #219	; 0xdb
 800499c:	dc13      	bgt.n	80049c6 <main+0x5ee>
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <main+0x670>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b77      	cmp	r3, #119	; 0x77
 80049a4:	dc0f      	bgt.n	80049c6 <main+0x5ee>
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <main+0x670>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b3b      	cmp	r3, #59	; 0x3b
 80049ac:	dc0b      	bgt.n	80049c6 <main+0x5ee>
 80049ae:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <main+0x670>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b27      	cmp	r3, #39	; 0x27
 80049b4:	dc07      	bgt.n	80049c6 <main+0x5ee>
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <main+0x670>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b22      	cmp	r3, #34	; 0x22
 80049bc:	dc03      	bgt.n	80049c6 <main+0x5ee>
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <main+0x670>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b1d      	cmp	r3, #29
 80049c4:	dd12      	ble.n	80049ec <main+0x614>
			temp--;
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <main+0x670>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <main+0x670>)
 80049ce:	601a      	str	r2, [r3, #0]
			if (temp < 20)
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <main+0x670>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b13      	cmp	r3, #19
 80049d6:	dc02      	bgt.n	80049de <main+0x606>
				temp = 20;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <main+0x670>)
 80049da:	2214      	movs	r2, #20
 80049dc:	601a      	str	r2, [r3, #0]
			tdownlast = NOW;
 80049de:	f7fd f9f7 	bl	8001dd0 <HAL_GetTick>
 80049e2:	0003      	movs	r3, r0
 80049e4:	617b      	str	r3, [r7, #20]
			io.Lcd_Print();
 80049e6:	1d3b      	adds	r3, r7, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4798      	blx	r3
		}
		if (!buzflag && stat.over) {
 80049ec:	2426      	movs	r4, #38	; 0x26
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <main+0x634>
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <main+0x674>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <main+0x634>
			buzlast = NOW;
 80049fe:	f7fd f9e7 	bl	8001dd0 <HAL_GetTick>
 8004a02:	0003      	movs	r3, r0
 8004a04:	613b      	str	r3, [r7, #16]
			buzflag = true;
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
		}
		if (altemp < temp && altemp > 20) {
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <main+0x684>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <main+0x670>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	da23      	bge.n	8004a60 <main+0x688>
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <main+0x684>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b14      	cmp	r3, #20
 8004a1e:	dd1f      	ble.n	8004a60 <main+0x688>
			if (!alflag) {
 8004a20:	2425      	movs	r4, #37	; 0x25
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d126      	bne.n	8004a78 <main+0x6a0>
				buzlast = NOW;
 8004a2a:	f7fd f9d1 	bl	8001dd0 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	613b      	str	r3, [r7, #16]
				alflag = true;
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
			if (!alflag) {
 8004a38:	e01e      	b.n	8004a78 <main+0x6a0>
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20000334 	.word	0x20000334
 8004a40:	20000338 	.word	0x20000338
 8004a44:	2000034d 	.word	0x2000034d
 8004a48:	20000008 	.word	0x20000008
 8004a4c:	20000350 	.word	0x20000350
 8004a50:	00000898 	.word	0x00000898
 8004a54:	0000044c 	.word	0x0000044c
 8004a58:	00000b54 	.word	0x00000b54
 8004a5c:	2000000c 	.word	0x2000000c
			}
		} else {
			BUZZER(false);
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	0219      	lsls	r1, r3, #8
 8004a64:	23a0      	movs	r3, #160	; 0xa0
 8004a66:	05db      	lsls	r3, r3, #23
 8004a68:	2200      	movs	r2, #0
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fe f8c1 	bl	8002bf2 <HAL_GPIO_WritePin>
			alflag = false;
 8004a70:	2325      	movs	r3, #37	; 0x25
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
		}
		if (buzflag) {
 8004a78:	2326      	movs	r3, #38	; 0x26
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d043      	beq.n	8004b0a <main+0x732>
			if ((NOW - buzlast >= 100 && NOW - buzlast <= 200)
 8004a82:	f7fd f9a5 	bl	8001dd0 <HAL_GetTick>
 8004a86:	0002      	movs	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b63      	cmp	r3, #99	; 0x63
 8004a8e:	d906      	bls.n	8004a9e <main+0x6c6>
 8004a90:	f7fd f99e 	bl	8001dd0 <HAL_GetTick>
 8004a94:	0002      	movs	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2bc8      	cmp	r3, #200	; 0xc8
 8004a9c:	d923      	bls.n	8004ae6 <main+0x70e>
					|| (NOW - buzlast >= 300 && NOW - buzlast <= 400)
 8004a9e:	f7fd f997 	bl	8001dd0 <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	2396      	movs	r3, #150	; 0x96
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d308      	bcc.n	8004ac2 <main+0x6ea>
 8004ab0:	f7fd f98e 	bl	8001dd0 <HAL_GetTick>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad2      	subs	r2, r2, r3
 8004aba:	23c8      	movs	r3, #200	; 0xc8
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d911      	bls.n	8004ae6 <main+0x70e>
					|| (NOW - buzlast >= 500 && NOW - buzlast <= 600))
 8004ac2:	f7fd f985 	bl	8001dd0 <HAL_GetTick>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	23fa      	movs	r3, #250	; 0xfa
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d311      	bcc.n	8004af8 <main+0x720>
 8004ad4:	f7fd f97c 	bl	8001dd0 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	2396      	movs	r3, #150	; 0x96
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d808      	bhi.n	8004af8 <main+0x720>
				BUZZER(true);
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	0219      	lsls	r1, r3, #8
 8004aea:	23a0      	movs	r3, #160	; 0xa0
 8004aec:	05db      	lsls	r3, r3, #23
 8004aee:	2201      	movs	r2, #1
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fe f87e 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004af6:	e044      	b.n	8004b82 <main+0x7aa>
			else
				BUZZER(false);
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	0219      	lsls	r1, r3, #8
 8004afc:	23a0      	movs	r3, #160	; 0xa0
 8004afe:	05db      	lsls	r3, r3, #23
 8004b00:	2200      	movs	r2, #0
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7fe f875 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004b08:	e03b      	b.n	8004b82 <main+0x7aa>
		} else if (alflag) {
 8004b0a:	2325      	movs	r3, #37	; 0x25
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d036      	beq.n	8004b82 <main+0x7aa>
			if ((NOW - buzlast >= 0 && NOW - buzlast <= 100)
 8004b14:	f7fd f95c 	bl	8001dd0 <HAL_GetTick>
 8004b18:	f7fd f95a 	bl	8001dd0 <HAL_GetTick>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d90f      	bls.n	8004b46 <main+0x76e>
					|| (NOW - buzlast >= 200 && NOW - buzlast <= 300))
 8004b26:	f7fd f953 	bl	8001dd0 <HAL_GetTick>
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2bc7      	cmp	r3, #199	; 0xc7
 8004b32:	d911      	bls.n	8004b58 <main+0x780>
 8004b34:	f7fd f94c 	bl	8001dd0 <HAL_GetTick>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad2      	subs	r2, r2, r3
 8004b3e:	2396      	movs	r3, #150	; 0x96
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d808      	bhi.n	8004b58 <main+0x780>
				BUZZER(true);
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	0219      	lsls	r1, r3, #8
 8004b4a:	23a0      	movs	r3, #160	; 0xa0
 8004b4c:	05db      	lsls	r3, r3, #23
 8004b4e:	2201      	movs	r2, #1
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fe f84e 	bl	8002bf2 <HAL_GPIO_WritePin>
 8004b56:	e007      	b.n	8004b68 <main+0x790>
			else
				BUZZER(false);
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	0219      	lsls	r1, r3, #8
 8004b5c:	23a0      	movs	r3, #160	; 0xa0
 8004b5e:	05db      	lsls	r3, r3, #23
 8004b60:	2200      	movs	r2, #0
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fe f845 	bl	8002bf2 <HAL_GPIO_WritePin>
			if (NOW - buzlast >= 1000)
 8004b68:	f7fd f932 	bl	8001dd0 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad2      	subs	r2, r2, r3
 8004b72:	23fa      	movs	r3, #250	; 0xfa
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d303      	bcc.n	8004b82 <main+0x7aa>
				buzlast = NOW;
 8004b7a:	f7fd f929 	bl	8001dd0 <HAL_GetTick>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	613b      	str	r3, [r7, #16]
		}
		io.Lcd_Print();
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4798      	blx	r3
		io.Read_ADC(&cds, &vr);
 8004b88:	e472      	b.n	8004470 <main+0x98>
 8004b8a:	46c0      	nop			; (mov r8, r8)

08004b8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b095      	sub	sp, #84	; 0x54
 8004b90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b92:	2418      	movs	r4, #24
 8004b94:	193b      	adds	r3, r7, r4
 8004b96:	0018      	movs	r0, r3
 8004b98:	2338      	movs	r3, #56	; 0x38
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	f000 fb0b 	bl	80051b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	2314      	movs	r3, #20
 8004ba8:	001a      	movs	r2, r3
 8004baa:	2100      	movs	r1, #0
 8004bac:	f000 fb04 	bl	80051b8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb0:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <SystemClock_Config+0xb0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <SystemClock_Config+0xb4>)
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <SystemClock_Config+0xb0>)
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	0109      	lsls	r1, r1, #4
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bc2:	0021      	movs	r1, r4
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bca:	187b      	adds	r3, r7, r1
 8004bcc:	2201      	movs	r2, #1
 8004bce:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	2202      	movs	r2, #2
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	2200      	movs	r2, #0
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	02d2      	lsls	r2, r2, #11
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	2280      	movs	r2, #128	; 0x80
 8004bee:	03d2      	lsls	r2, r2, #15
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004bf2:	187b      	adds	r3, r7, r1
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7fe f819 	bl	8002c2c <HAL_RCC_OscConfig>
 8004bfa:	1e03      	subs	r3, r0, #0
 8004bfc:	d001      	beq.n	8004c02 <SystemClock_Config+0x76>
		Error_Handler();
 8004bfe:	f000 f989 	bl	8004f14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	220f      	movs	r2, #15
 8004c06:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c14:	1d3b      	adds	r3, r7, #4
 8004c16:	2200      	movs	r2, #0
 8004c18:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	2101      	movs	r1, #1
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fe fbc5 	bl	80033b4 <HAL_RCC_ClockConfig>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d001      	beq.n	8004c32 <SystemClock_Config+0xa6>
		Error_Handler();
 8004c2e:	f000 f971 	bl	8004f14 <Error_Handler>
	}
}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b015      	add	sp, #84	; 0x54
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	ffffe7ff 	.word	0xffffe7ff

08004c44 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2011      	movs	r0, #17
 8004c4e:	f7fd fe0b 	bl	8002868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c52:	2011      	movs	r0, #17
 8004c54:	f7fd fe1d 	bl	8002892 <HAL_NVIC_EnableIRQ>
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c66:	003b      	movs	r3, r7
 8004c68:	0018      	movs	r0, r3
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f000 faa2 	bl	80051b8 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c76:	4a31      	ldr	r2, [pc, #196]	; (8004d3c <MX_ADC_Init+0xdc>)
 8004c78:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	05d2      	lsls	r2, r2, #23
 8004c86:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8004c8e:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004caa:	2221      	movs	r2, #33	; 0x21
 8004cac:	2100      	movs	r1, #0
 8004cae:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cb8:	22c2      	movs	r2, #194	; 0xc2
 8004cba:	32ff      	adds	r2, #255	; 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cc0:	222c      	movs	r2, #44	; 0x2c
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cc8:	2204      	movs	r2, #4
 8004cca:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004ce4:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7fd f8a0 	bl	8001e2c <HAL_ADC_Init>
 8004cec:	1e03      	subs	r3, r0, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_ADC_Init+0x94>
		Error_Handler();
 8004cf0:	f000 f910 	bl	8004f14 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8004cf4:	003b      	movs	r3, r7
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004cfa:	003b      	movs	r3, r7
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	0152      	lsls	r2, r2, #5
 8004d00:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004d02:	003a      	movs	r2, r7
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fd fb3f 	bl	800238c <HAL_ADC_ConfigChannel>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC_Init+0xb6>
		Error_Handler();
 8004d12:	f000 f8ff 	bl	8004f14 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8004d16:	003b      	movs	r3, r7
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <MX_ADC_Init+0xe0>)
 8004d1a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004d1c:	003a      	movs	r2, r7
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <MX_ADC_Init+0xd8>)
 8004d20:	0011      	movs	r1, r2
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fd fb32 	bl	800238c <HAL_ADC_ConfigChannel>
 8004d28:	1e03      	subs	r3, r0, #0
 8004d2a:	d001      	beq.n	8004d30 <MX_ADC_Init+0xd0>
		Error_Handler();
 8004d2c:	f000 f8f2 	bl	8004f14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000298 	.word	0x20000298
 8004d3c:	40012400 	.word	0x40012400
 8004d40:	04000002 	.word	0x04000002

08004d44 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d4a:	003b      	movs	r3, r7
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	2308      	movs	r3, #8
 8004d50:	001a      	movs	r2, r3
 8004d52:	2100      	movs	r1, #0
 8004d54:	f000 fa30 	bl	80051b8 <memset>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d5a:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <MX_TIM6_Init+0x70>)
 8004d5c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d60:	221f      	movs	r2, #31
 8004d62:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 9999;
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d6c:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <MX_TIM6_Init+0x74>)
 8004d6e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d76:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fe fd09 	bl	8003790 <HAL_TIM_Base_Init>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM6_Init+0x42>
		Error_Handler();
 8004d82:	f000 f8c7 	bl	8004f14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d86:	003b      	movs	r3, r7
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d8c:	003b      	movs	r3, r7
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8004d92:	003a      	movs	r2, r7
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <MX_TIM6_Init+0x6c>)
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fe fee1 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM6_Init+0x62>
			!= HAL_OK) {
		Error_Handler();
 8004da2:	f000 f8b7 	bl	8004f14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b002      	add	sp, #8
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	200002f4 	.word	0x200002f4
 8004db4:	40001000 	.word	0x40001000
 8004db8:	0000270f 	.word	0x0000270f

08004dbc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b089      	sub	sp, #36	; 0x24
 8004dc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004dc2:	240c      	movs	r4, #12
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	2314      	movs	r3, #20
 8004dca:	001a      	movs	r2, r3
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f000 f9f3 	bl	80051b8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd2:	4b4b      	ldr	r3, [pc, #300]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004dd8:	2104      	movs	r1, #4
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dde:	4b48      	ldr	r3, [pc, #288]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2204      	movs	r2, #4
 8004de4:	4013      	ands	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004dea:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004df0:	2101      	movs	r1, #1
 8004df2:	430a      	orrs	r2, r1
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004df6:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004e08:	2102      	movs	r1, #2
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e0e:	4b3c      	ldr	r3, [pc, #240]	; (8004f00 <MX_GPIO_Init+0x144>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_RING_Pin | BUZZ_Pin, GPIO_PIN_RESET);
 8004e1a:	493a      	ldr	r1, [pc, #232]	; (8004f04 <MX_GPIO_Init+0x148>)
 8004e1c:	23a0      	movs	r3, #160	; 0xa0
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	2200      	movs	r2, #0
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fd fee5 	bl	8002bf2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8004e28:	23f8      	movs	r3, #248	; 0xf8
 8004e2a:	00d9      	lsls	r1, r3, #3
 8004e2c:	23a0      	movs	r3, #160	; 0xa0
 8004e2e:	05db      	lsls	r3, r3, #23
 8004e30:	2201      	movs	r2, #1
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fd fedd 	bl	8002bf2 <HAL_GPIO_WritePin>
			LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <MX_GPIO_Init+0x14c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	21fb      	movs	r1, #251	; 0xfb
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7fd fed7 	bl	8002bf2 <HAL_GPIO_WritePin>
			LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin
					| LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SW_A_Pin SW_B_Pin */
	GPIO_InitStruct.Pin = SW_A_Pin | SW_B_Pin;
 8004e44:	193b      	adds	r3, r7, r4
 8004e46:	22c0      	movs	r2, #192	; 0xc0
 8004e48:	0212      	lsls	r2, r2, #8
 8004e4a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	2200      	movs	r2, #0
 8004e50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	2201      	movs	r2, #1
 8004e56:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <MX_GPIO_Init+0x150>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	0010      	movs	r0, r2
 8004e60:	f7fd fd34 	bl	80028cc <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
	GPIO_InitStruct.Pin = SW_ON_Pin | SW_AUTO_Pin | SW_LOCK_Pin;
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	221c      	movs	r2, #28
 8004e68:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	2201      	movs	r2, #1
 8004e74:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e76:	193a      	adds	r2, r7, r4
 8004e78:	23a0      	movs	r3, #160	; 0xa0
 8004e7a:	05db      	lsls	r3, r3, #23
 8004e7c:	0011      	movs	r1, r2
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fd fd24 	bl	80028cc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RING_Pin */
	GPIO_InitStruct.Pin = LED_RING_Pin;
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	2220      	movs	r2, #32
 8004e88:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	2211      	movs	r2, #17
 8004e8e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e96:	193b      	adds	r3, r7, r4
 8004e98:	2203      	movs	r2, #3
 8004e9a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_RING_GPIO_Port, &GPIO_InitStruct);
 8004e9c:	193a      	adds	r2, r7, r4
 8004e9e:	23a0      	movs	r3, #160	; 0xa0
 8004ea0:	05db      	lsls	r3, r3, #23
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7fd fd11 	bl	80028cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
	 LED5_Pin BUZZ_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin
 8004eaa:	193b      	adds	r3, r7, r4
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <MX_GPIO_Init+0x154>)
 8004eae:	601a      	str	r2, [r3, #0]
			| BUZZ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb0:	193b      	adds	r3, r7, r4
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebc:	193b      	adds	r3, r7, r4
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec2:	193a      	adds	r2, r7, r4
 8004ec4:	23a0      	movs	r3, #160	; 0xa0
 8004ec6:	05db      	lsls	r3, r3, #23
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7fd fcfe 	bl	80028cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin
	 LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin
 8004ed0:	0021      	movs	r1, r4
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	22fb      	movs	r2, #251	; 0xfb
 8004ed6:	601a      	str	r2, [r3, #0]
			| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	2201      	movs	r2, #1
 8004edc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <MX_GPIO_Init+0x14c>)
 8004eee:	0019      	movs	r1, r3
 8004ef0:	0010      	movs	r0, r2
 8004ef2:	f7fd fceb 	bl	80028cc <HAL_GPIO_Init>

}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b009      	add	sp, #36	; 0x24
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	40021000 	.word	0x40021000
 8004f04:	00008020 	.word	0x00008020
 8004f08:	50000400 	.word	0x50000400
 8004f0c:	50000800 	.word	0x50000800
 8004f10:	000087c0 	.word	0x000087c0

08004f14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_MspInit+0x24>)
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_MspInit+0x24>)
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_MspInit+0x24>)
 8004f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_MspInit+0x24>)
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	0549      	lsls	r1, r1, #21
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f50:	240c      	movs	r4, #12
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	0018      	movs	r0, r3
 8004f56:	2314      	movs	r3, #20
 8004f58:	001a      	movs	r2, r3
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f000 f92c 	bl	80051b8 <memset>
  if(hadc->Instance==ADC1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <HAL_ADC_MspInit+0x70>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d122      	bne.n	8004fb0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_ADC_MspInit+0x74>)
 8004f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <HAL_ADC_MspInit+0x74>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	0089      	lsls	r1, r1, #2
 8004f74:	430a      	orrs	r2, r1
 8004f76:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f78:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <HAL_ADC_MspInit+0x74>)
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <HAL_ADC_MspInit+0x74>)
 8004f7e:	2101      	movs	r1, #1
 8004f80:	430a      	orrs	r2, r1
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_ADC_MspInit+0x74>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	2203      	movs	r2, #3
 8004f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f96:	193b      	adds	r3, r7, r4
 8004f98:	2203      	movs	r2, #3
 8004f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	193b      	adds	r3, r7, r4
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa2:	193a      	adds	r2, r7, r4
 8004fa4:	23a0      	movs	r3, #160	; 0xa0
 8004fa6:	05db      	lsls	r3, r3, #23
 8004fa8:	0011      	movs	r1, r2
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fd fc8e 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b009      	add	sp, #36	; 0x24
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	40012400 	.word	0x40012400
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a06      	ldr	r2, [pc, #24]	; (8004fe8 <HAL_TIM_Base_MspInit+0x28>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d105      	bne.n	8004fde <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_TIM_Base_MspInit+0x2c>)
 8004fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_TIM_Base_MspInit+0x2c>)
 8004fd8:	2110      	movs	r1, #16
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40001000 	.word	0x40001000
 8004fec:	40021000 	.word	0x40021000

08004ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ffe:	e7fe      	b.n	8004ffe <HardFault_Handler+0x4>

08005000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005018:	f7fc fec8 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <TIM6_DAC_IRQHandler+0x14>)
 800502a:	0018      	movs	r0, r3
 800502c:	f7fe fc3c 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	200002f4 	.word	0x200002f4

0800503c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <_sbrk+0x50>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <_sbrk+0x16>
		heap_end = &end;
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <_sbrk+0x50>)
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <_sbrk+0x54>)
 8005050:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <_sbrk+0x50>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <_sbrk+0x50>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	18d2      	adds	r2, r2, r3
 8005060:	466b      	mov	r3, sp
 8005062:	429a      	cmp	r2, r3
 8005064:	d907      	bls.n	8005076 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005066:	f000 f87d 	bl	8005164 <__errno>
 800506a:	0003      	movs	r3, r0
 800506c:	220c      	movs	r2, #12
 800506e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005070:	2301      	movs	r3, #1
 8005072:	425b      	negs	r3, r3
 8005074:	e006      	b.n	8005084 <_sbrk+0x48>
	}

	heap_end += incr;
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <_sbrk+0x50>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	18d2      	adds	r2, r2, r3
 800507e:	4b03      	ldr	r3, [pc, #12]	; (800508c <_sbrk+0x50>)
 8005080:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005082:	68fb      	ldr	r3, [r7, #12]
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000358 	.word	0x20000358
 8005090:	2000036c 	.word	0x2000036c

08005094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <SystemInit+0x64>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <SystemInit+0x64>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	0049      	lsls	r1, r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <SystemInit+0x64>)
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <SystemInit+0x64>)
 80050ac:	4913      	ldr	r1, [pc, #76]	; (80050fc <SystemInit+0x68>)
 80050ae:	400a      	ands	r2, r1
 80050b0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <SystemInit+0x64>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <SystemInit+0x64>)
 80050b8:	4911      	ldr	r1, [pc, #68]	; (8005100 <SystemInit+0x6c>)
 80050ba:	400a      	ands	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80050be:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <SystemInit+0x64>)
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <SystemInit+0x64>)
 80050c4:	2101      	movs	r1, #1
 80050c6:	438a      	bics	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <SystemInit+0x64>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <SystemInit+0x64>)
 80050d0:	490c      	ldr	r1, [pc, #48]	; (8005104 <SystemInit+0x70>)
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <SystemInit+0x64>)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <SystemInit+0x64>)
 80050dc:	490a      	ldr	r1, [pc, #40]	; (8005108 <SystemInit+0x74>)
 80050de:	400a      	ands	r2, r1
 80050e0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <SystemInit+0x64>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <SystemInit+0x78>)
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	0512      	lsls	r2, r2, #20
 80050ee:	609a      	str	r2, [r3, #8]
#endif
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	40021000 	.word	0x40021000
 80050fc:	88ff400c 	.word	0x88ff400c
 8005100:	fef6fff6 	.word	0xfef6fff6
 8005104:	fffbffff 	.word	0xfffbffff
 8005108:	ff02ffff 	.word	0xff02ffff
 800510c:	e000ed00 	.word	0xe000ed00

08005110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005110:	480d      	ldr	r0, [pc, #52]	; (8005148 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005116:	e003      	b.n	8005120 <LoopCopyDataInit>

08005118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800511a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800511c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800511e:	3104      	adds	r1, #4

08005120 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005120:	480b      	ldr	r0, [pc, #44]	; (8005150 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005128:	d3f6      	bcc.n	8005118 <CopyDataInit>
  ldr  r2, =_sbss
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <LoopForever+0x12>)
  b  LoopFillZerobss
 800512c:	e002      	b.n	8005134 <LoopFillZerobss>

0800512e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800512e:	2300      	movs	r3, #0
  str  r3, [r2]
 8005130:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005132:	3204      	adds	r2, #4

08005134 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <LoopForever+0x16>)
  cmp  r2, r3
 8005136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005138:	d3f9      	bcc.n	800512e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800513a:	f7ff ffab 	bl	8005094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800513e:	f000 f817 	bl	8005170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005142:	f7ff f949 	bl	80043d8 <main>

08005146 <LoopForever>:

LoopForever:
    b LoopForever
 8005146:	e7fe      	b.n	8005146 <LoopForever>
   ldr   r0, =_estack
 8005148:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800514c:	08005bf8 	.word	0x08005bf8
  ldr  r0, =_sdata
 8005150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005154:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 8005158:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 800515c:	2000036c 	.word	0x2000036c

08005160 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005160:	e7fe      	b.n	8005160 <ADC1_COMP_IRQHandler>
	...

08005164 <__errno>:
 8005164:	4b01      	ldr	r3, [pc, #4]	; (800516c <__errno+0x8>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	4770      	bx	lr
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	20000214 	.word	0x20000214

08005170 <__libc_init_array>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	2600      	movs	r6, #0
 8005174:	4d0c      	ldr	r5, [pc, #48]	; (80051a8 <__libc_init_array+0x38>)
 8005176:	4c0d      	ldr	r4, [pc, #52]	; (80051ac <__libc_init_array+0x3c>)
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	42a6      	cmp	r6, r4
 800517e:	d109      	bne.n	8005194 <__libc_init_array+0x24>
 8005180:	2600      	movs	r6, #0
 8005182:	f000 fc8b 	bl	8005a9c <_init>
 8005186:	4d0a      	ldr	r5, [pc, #40]	; (80051b0 <__libc_init_array+0x40>)
 8005188:	4c0a      	ldr	r4, [pc, #40]	; (80051b4 <__libc_init_array+0x44>)
 800518a:	1b64      	subs	r4, r4, r5
 800518c:	10a4      	asrs	r4, r4, #2
 800518e:	42a6      	cmp	r6, r4
 8005190:	d105      	bne.n	800519e <__libc_init_array+0x2e>
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	00b3      	lsls	r3, r6, #2
 8005196:	58eb      	ldr	r3, [r5, r3]
 8005198:	4798      	blx	r3
 800519a:	3601      	adds	r6, #1
 800519c:	e7ee      	b.n	800517c <__libc_init_array+0xc>
 800519e:	00b3      	lsls	r3, r6, #2
 80051a0:	58eb      	ldr	r3, [r5, r3]
 80051a2:	4798      	blx	r3
 80051a4:	3601      	adds	r6, #1
 80051a6:	e7f2      	b.n	800518e <__libc_init_array+0x1e>
 80051a8:	08005bf0 	.word	0x08005bf0
 80051ac:	08005bf0 	.word	0x08005bf0
 80051b0:	08005bf0 	.word	0x08005bf0
 80051b4:	08005bf4 	.word	0x08005bf4

080051b8 <memset>:
 80051b8:	0003      	movs	r3, r0
 80051ba:	1882      	adds	r2, r0, r2
 80051bc:	4293      	cmp	r3, r2
 80051be:	d100      	bne.n	80051c2 <memset+0xa>
 80051c0:	4770      	bx	lr
 80051c2:	7019      	strb	r1, [r3, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	e7f9      	b.n	80051bc <memset+0x4>

080051c8 <siprintf>:
 80051c8:	b40e      	push	{r1, r2, r3}
 80051ca:	b500      	push	{lr}
 80051cc:	490b      	ldr	r1, [pc, #44]	; (80051fc <siprintf+0x34>)
 80051ce:	b09c      	sub	sp, #112	; 0x70
 80051d0:	ab1d      	add	r3, sp, #116	; 0x74
 80051d2:	9002      	str	r0, [sp, #8]
 80051d4:	9006      	str	r0, [sp, #24]
 80051d6:	9107      	str	r1, [sp, #28]
 80051d8:	9104      	str	r1, [sp, #16]
 80051da:	4809      	ldr	r0, [pc, #36]	; (8005200 <siprintf+0x38>)
 80051dc:	4909      	ldr	r1, [pc, #36]	; (8005204 <siprintf+0x3c>)
 80051de:	cb04      	ldmia	r3!, {r2}
 80051e0:	9105      	str	r1, [sp, #20]
 80051e2:	6800      	ldr	r0, [r0, #0]
 80051e4:	a902      	add	r1, sp, #8
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	f000 f870 	bl	80052cc <_svfiprintf_r>
 80051ec:	2300      	movs	r3, #0
 80051ee:	9a02      	ldr	r2, [sp, #8]
 80051f0:	7013      	strb	r3, [r2, #0]
 80051f2:	b01c      	add	sp, #112	; 0x70
 80051f4:	bc08      	pop	{r3}
 80051f6:	b003      	add	sp, #12
 80051f8:	4718      	bx	r3
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	7fffffff 	.word	0x7fffffff
 8005200:	20000214 	.word	0x20000214
 8005204:	ffff0208 	.word	0xffff0208

08005208 <__ssputs_r>:
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520a:	688e      	ldr	r6, [r1, #8]
 800520c:	b085      	sub	sp, #20
 800520e:	0007      	movs	r7, r0
 8005210:	000c      	movs	r4, r1
 8005212:	9203      	str	r2, [sp, #12]
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	429e      	cmp	r6, r3
 8005218:	d83c      	bhi.n	8005294 <__ssputs_r+0x8c>
 800521a:	2390      	movs	r3, #144	; 0x90
 800521c:	898a      	ldrh	r2, [r1, #12]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	421a      	tst	r2, r3
 8005222:	d034      	beq.n	800528e <__ssputs_r+0x86>
 8005224:	6909      	ldr	r1, [r1, #16]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6960      	ldr	r0, [r4, #20]
 800522a:	1a5b      	subs	r3, r3, r1
 800522c:	9302      	str	r3, [sp, #8]
 800522e:	2303      	movs	r3, #3
 8005230:	4343      	muls	r3, r0
 8005232:	0fdd      	lsrs	r5, r3, #31
 8005234:	18ed      	adds	r5, r5, r3
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	9802      	ldr	r0, [sp, #8]
 800523a:	3301      	adds	r3, #1
 800523c:	181b      	adds	r3, r3, r0
 800523e:	106d      	asrs	r5, r5, #1
 8005240:	42ab      	cmp	r3, r5
 8005242:	d900      	bls.n	8005246 <__ssputs_r+0x3e>
 8005244:	001d      	movs	r5, r3
 8005246:	0553      	lsls	r3, r2, #21
 8005248:	d532      	bpl.n	80052b0 <__ssputs_r+0xa8>
 800524a:	0029      	movs	r1, r5
 800524c:	0038      	movs	r0, r7
 800524e:	f000 fb53 	bl	80058f8 <_malloc_r>
 8005252:	1e06      	subs	r6, r0, #0
 8005254:	d109      	bne.n	800526a <__ssputs_r+0x62>
 8005256:	230c      	movs	r3, #12
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	2340      	movs	r3, #64	; 0x40
 800525c:	2001      	movs	r0, #1
 800525e:	89a2      	ldrh	r2, [r4, #12]
 8005260:	4240      	negs	r0, r0
 8005262:	4313      	orrs	r3, r2
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	b005      	add	sp, #20
 8005268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800526a:	9a02      	ldr	r2, [sp, #8]
 800526c:	6921      	ldr	r1, [r4, #16]
 800526e:	f000 faba 	bl	80057e6 <memcpy>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <__ssputs_r+0xc0>)
 8005276:	401a      	ands	r2, r3
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	4313      	orrs	r3, r2
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	6126      	str	r6, [r4, #16]
 8005282:	18f6      	adds	r6, r6, r3
 8005284:	6026      	str	r6, [r4, #0]
 8005286:	6165      	str	r5, [r4, #20]
 8005288:	9e01      	ldr	r6, [sp, #4]
 800528a:	1aed      	subs	r5, r5, r3
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	429e      	cmp	r6, r3
 8005292:	d900      	bls.n	8005296 <__ssputs_r+0x8e>
 8005294:	9e01      	ldr	r6, [sp, #4]
 8005296:	0032      	movs	r2, r6
 8005298:	9903      	ldr	r1, [sp, #12]
 800529a:	6820      	ldr	r0, [r4, #0]
 800529c:	f000 faac 	bl	80057f8 <memmove>
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	2000      	movs	r0, #0
 80052a4:	1b9b      	subs	r3, r3, r6
 80052a6:	60a3      	str	r3, [r4, #8]
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	199e      	adds	r6, r3, r6
 80052ac:	6026      	str	r6, [r4, #0]
 80052ae:	e7da      	b.n	8005266 <__ssputs_r+0x5e>
 80052b0:	002a      	movs	r2, r5
 80052b2:	0038      	movs	r0, r7
 80052b4:	f000 fb96 	bl	80059e4 <_realloc_r>
 80052b8:	1e06      	subs	r6, r0, #0
 80052ba:	d1e0      	bne.n	800527e <__ssputs_r+0x76>
 80052bc:	0038      	movs	r0, r7
 80052be:	6921      	ldr	r1, [r4, #16]
 80052c0:	f000 faae 	bl	8005820 <_free_r>
 80052c4:	e7c7      	b.n	8005256 <__ssputs_r+0x4e>
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	fffffb7f 	.word	0xfffffb7f

080052cc <_svfiprintf_r>:
 80052cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ce:	b0a1      	sub	sp, #132	; 0x84
 80052d0:	9003      	str	r0, [sp, #12]
 80052d2:	001d      	movs	r5, r3
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	000f      	movs	r7, r1
 80052d8:	0016      	movs	r6, r2
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	d511      	bpl.n	8005302 <_svfiprintf_r+0x36>
 80052de:	690b      	ldr	r3, [r1, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <_svfiprintf_r+0x36>
 80052e4:	2140      	movs	r1, #64	; 0x40
 80052e6:	f000 fb07 	bl	80058f8 <_malloc_r>
 80052ea:	6038      	str	r0, [r7, #0]
 80052ec:	6138      	str	r0, [r7, #16]
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d105      	bne.n	80052fe <_svfiprintf_r+0x32>
 80052f2:	230c      	movs	r3, #12
 80052f4:	9a03      	ldr	r2, [sp, #12]
 80052f6:	3801      	subs	r0, #1
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	b021      	add	sp, #132	; 0x84
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fe:	2340      	movs	r3, #64	; 0x40
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	2300      	movs	r3, #0
 8005304:	ac08      	add	r4, sp, #32
 8005306:	6163      	str	r3, [r4, #20]
 8005308:	3320      	adds	r3, #32
 800530a:	7663      	strb	r3, [r4, #25]
 800530c:	3310      	adds	r3, #16
 800530e:	76a3      	strb	r3, [r4, #26]
 8005310:	9507      	str	r5, [sp, #28]
 8005312:	0035      	movs	r5, r6
 8005314:	782b      	ldrb	r3, [r5, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <_svfiprintf_r+0x52>
 800531a:	2b25      	cmp	r3, #37	; 0x25
 800531c:	d147      	bne.n	80053ae <_svfiprintf_r+0xe2>
 800531e:	1bab      	subs	r3, r5, r6
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	42b5      	cmp	r5, r6
 8005324:	d00c      	beq.n	8005340 <_svfiprintf_r+0x74>
 8005326:	0032      	movs	r2, r6
 8005328:	0039      	movs	r1, r7
 800532a:	9803      	ldr	r0, [sp, #12]
 800532c:	f7ff ff6c 	bl	8005208 <__ssputs_r>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d100      	bne.n	8005336 <_svfiprintf_r+0x6a>
 8005334:	e0ae      	b.n	8005494 <_svfiprintf_r+0x1c8>
 8005336:	6962      	ldr	r2, [r4, #20]
 8005338:	9b05      	ldr	r3, [sp, #20]
 800533a:	4694      	mov	ip, r2
 800533c:	4463      	add	r3, ip
 800533e:	6163      	str	r3, [r4, #20]
 8005340:	782b      	ldrb	r3, [r5, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d100      	bne.n	8005348 <_svfiprintf_r+0x7c>
 8005346:	e0a5      	b.n	8005494 <_svfiprintf_r+0x1c8>
 8005348:	2201      	movs	r2, #1
 800534a:	2300      	movs	r3, #0
 800534c:	4252      	negs	r2, r2
 800534e:	6062      	str	r2, [r4, #4]
 8005350:	a904      	add	r1, sp, #16
 8005352:	3254      	adds	r2, #84	; 0x54
 8005354:	1852      	adds	r2, r2, r1
 8005356:	1c6e      	adds	r6, r5, #1
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	60e3      	str	r3, [r4, #12]
 800535c:	60a3      	str	r3, [r4, #8]
 800535e:	7013      	strb	r3, [r2, #0]
 8005360:	65a3      	str	r3, [r4, #88]	; 0x58
 8005362:	2205      	movs	r2, #5
 8005364:	7831      	ldrb	r1, [r6, #0]
 8005366:	4854      	ldr	r0, [pc, #336]	; (80054b8 <_svfiprintf_r+0x1ec>)
 8005368:	f000 fa32 	bl	80057d0 <memchr>
 800536c:	1c75      	adds	r5, r6, #1
 800536e:	2800      	cmp	r0, #0
 8005370:	d11f      	bne.n	80053b2 <_svfiprintf_r+0xe6>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	06d3      	lsls	r3, r2, #27
 8005376:	d504      	bpl.n	8005382 <_svfiprintf_r+0xb6>
 8005378:	2353      	movs	r3, #83	; 0x53
 800537a:	a904      	add	r1, sp, #16
 800537c:	185b      	adds	r3, r3, r1
 800537e:	2120      	movs	r1, #32
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	0713      	lsls	r3, r2, #28
 8005384:	d504      	bpl.n	8005390 <_svfiprintf_r+0xc4>
 8005386:	2353      	movs	r3, #83	; 0x53
 8005388:	a904      	add	r1, sp, #16
 800538a:	185b      	adds	r3, r3, r1
 800538c:	212b      	movs	r1, #43	; 0x2b
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	7833      	ldrb	r3, [r6, #0]
 8005392:	2b2a      	cmp	r3, #42	; 0x2a
 8005394:	d016      	beq.n	80053c4 <_svfiprintf_r+0xf8>
 8005396:	0035      	movs	r5, r6
 8005398:	2100      	movs	r1, #0
 800539a:	200a      	movs	r0, #10
 800539c:	68e3      	ldr	r3, [r4, #12]
 800539e:	782a      	ldrb	r2, [r5, #0]
 80053a0:	1c6e      	adds	r6, r5, #1
 80053a2:	3a30      	subs	r2, #48	; 0x30
 80053a4:	2a09      	cmp	r2, #9
 80053a6:	d94e      	bls.n	8005446 <_svfiprintf_r+0x17a>
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d111      	bne.n	80053d0 <_svfiprintf_r+0x104>
 80053ac:	e017      	b.n	80053de <_svfiprintf_r+0x112>
 80053ae:	3501      	adds	r5, #1
 80053b0:	e7b0      	b.n	8005314 <_svfiprintf_r+0x48>
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <_svfiprintf_r+0x1ec>)
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	1ac0      	subs	r0, r0, r3
 80053b8:	2301      	movs	r3, #1
 80053ba:	4083      	lsls	r3, r0
 80053bc:	4313      	orrs	r3, r2
 80053be:	002e      	movs	r6, r5
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	e7ce      	b.n	8005362 <_svfiprintf_r+0x96>
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	1d19      	adds	r1, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	9107      	str	r1, [sp, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db01      	blt.n	80053d4 <_svfiprintf_r+0x108>
 80053d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d2:	e004      	b.n	80053de <_svfiprintf_r+0x112>
 80053d4:	425b      	negs	r3, r3
 80053d6:	60e3      	str	r3, [r4, #12]
 80053d8:	2302      	movs	r3, #2
 80053da:	4313      	orrs	r3, r2
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	782b      	ldrb	r3, [r5, #0]
 80053e0:	2b2e      	cmp	r3, #46	; 0x2e
 80053e2:	d10a      	bne.n	80053fa <_svfiprintf_r+0x12e>
 80053e4:	786b      	ldrb	r3, [r5, #1]
 80053e6:	2b2a      	cmp	r3, #42	; 0x2a
 80053e8:	d135      	bne.n	8005456 <_svfiprintf_r+0x18a>
 80053ea:	9b07      	ldr	r3, [sp, #28]
 80053ec:	3502      	adds	r5, #2
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	9207      	str	r2, [sp, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	db2b      	blt.n	8005450 <_svfiprintf_r+0x184>
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	4e30      	ldr	r6, [pc, #192]	; (80054bc <_svfiprintf_r+0x1f0>)
 80053fc:	2203      	movs	r2, #3
 80053fe:	0030      	movs	r0, r6
 8005400:	7829      	ldrb	r1, [r5, #0]
 8005402:	f000 f9e5 	bl	80057d0 <memchr>
 8005406:	2800      	cmp	r0, #0
 8005408:	d006      	beq.n	8005418 <_svfiprintf_r+0x14c>
 800540a:	2340      	movs	r3, #64	; 0x40
 800540c:	1b80      	subs	r0, r0, r6
 800540e:	4083      	lsls	r3, r0
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	3501      	adds	r5, #1
 8005414:	4313      	orrs	r3, r2
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	7829      	ldrb	r1, [r5, #0]
 800541a:	2206      	movs	r2, #6
 800541c:	4828      	ldr	r0, [pc, #160]	; (80054c0 <_svfiprintf_r+0x1f4>)
 800541e:	1c6e      	adds	r6, r5, #1
 8005420:	7621      	strb	r1, [r4, #24]
 8005422:	f000 f9d5 	bl	80057d0 <memchr>
 8005426:	2800      	cmp	r0, #0
 8005428:	d03c      	beq.n	80054a4 <_svfiprintf_r+0x1d8>
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <_svfiprintf_r+0x1f8>)
 800542c:	2b00      	cmp	r3, #0
 800542e:	d125      	bne.n	800547c <_svfiprintf_r+0x1b0>
 8005430:	2207      	movs	r2, #7
 8005432:	9b07      	ldr	r3, [sp, #28]
 8005434:	3307      	adds	r3, #7
 8005436:	4393      	bics	r3, r2
 8005438:	3308      	adds	r3, #8
 800543a:	9307      	str	r3, [sp, #28]
 800543c:	6963      	ldr	r3, [r4, #20]
 800543e:	9a04      	ldr	r2, [sp, #16]
 8005440:	189b      	adds	r3, r3, r2
 8005442:	6163      	str	r3, [r4, #20]
 8005444:	e765      	b.n	8005312 <_svfiprintf_r+0x46>
 8005446:	4343      	muls	r3, r0
 8005448:	0035      	movs	r5, r6
 800544a:	2101      	movs	r1, #1
 800544c:	189b      	adds	r3, r3, r2
 800544e:	e7a6      	b.n	800539e <_svfiprintf_r+0xd2>
 8005450:	2301      	movs	r3, #1
 8005452:	425b      	negs	r3, r3
 8005454:	e7d0      	b.n	80053f8 <_svfiprintf_r+0x12c>
 8005456:	2300      	movs	r3, #0
 8005458:	200a      	movs	r0, #10
 800545a:	001a      	movs	r2, r3
 800545c:	3501      	adds	r5, #1
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	7829      	ldrb	r1, [r5, #0]
 8005462:	1c6e      	adds	r6, r5, #1
 8005464:	3930      	subs	r1, #48	; 0x30
 8005466:	2909      	cmp	r1, #9
 8005468:	d903      	bls.n	8005472 <_svfiprintf_r+0x1a6>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0c5      	beq.n	80053fa <_svfiprintf_r+0x12e>
 800546e:	9209      	str	r2, [sp, #36]	; 0x24
 8005470:	e7c3      	b.n	80053fa <_svfiprintf_r+0x12e>
 8005472:	4342      	muls	r2, r0
 8005474:	0035      	movs	r5, r6
 8005476:	2301      	movs	r3, #1
 8005478:	1852      	adds	r2, r2, r1
 800547a:	e7f1      	b.n	8005460 <_svfiprintf_r+0x194>
 800547c:	ab07      	add	r3, sp, #28
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	003a      	movs	r2, r7
 8005482:	0021      	movs	r1, r4
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <_svfiprintf_r+0x1fc>)
 8005486:	9803      	ldr	r0, [sp, #12]
 8005488:	e000      	b.n	800548c <_svfiprintf_r+0x1c0>
 800548a:	bf00      	nop
 800548c:	9004      	str	r0, [sp, #16]
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	3301      	adds	r3, #1
 8005492:	d1d3      	bne.n	800543c <_svfiprintf_r+0x170>
 8005494:	89bb      	ldrh	r3, [r7, #12]
 8005496:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005498:	065b      	lsls	r3, r3, #25
 800549a:	d400      	bmi.n	800549e <_svfiprintf_r+0x1d2>
 800549c:	e72d      	b.n	80052fa <_svfiprintf_r+0x2e>
 800549e:	2001      	movs	r0, #1
 80054a0:	4240      	negs	r0, r0
 80054a2:	e72a      	b.n	80052fa <_svfiprintf_r+0x2e>
 80054a4:	ab07      	add	r3, sp, #28
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	003a      	movs	r2, r7
 80054aa:	0021      	movs	r1, r4
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <_svfiprintf_r+0x1fc>)
 80054ae:	9803      	ldr	r0, [sp, #12]
 80054b0:	f000 f87c 	bl	80055ac <_printf_i>
 80054b4:	e7ea      	b.n	800548c <_svfiprintf_r+0x1c0>
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	08005bb5 	.word	0x08005bb5
 80054bc:	08005bbb 	.word	0x08005bbb
 80054c0:	08005bbf 	.word	0x08005bbf
 80054c4:	00000000 	.word	0x00000000
 80054c8:	08005209 	.word	0x08005209

080054cc <_printf_common>:
 80054cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ce:	0015      	movs	r5, r2
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	688a      	ldr	r2, [r1, #8]
 80054d4:	690b      	ldr	r3, [r1, #16]
 80054d6:	000c      	movs	r4, r1
 80054d8:	9000      	str	r0, [sp, #0]
 80054da:	4293      	cmp	r3, r2
 80054dc:	da00      	bge.n	80054e0 <_printf_common+0x14>
 80054de:	0013      	movs	r3, r2
 80054e0:	0022      	movs	r2, r4
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	3243      	adds	r2, #67	; 0x43
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	2a00      	cmp	r2, #0
 80054ea:	d001      	beq.n	80054f0 <_printf_common+0x24>
 80054ec:	3301      	adds	r3, #1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	069b      	lsls	r3, r3, #26
 80054f4:	d502      	bpl.n	80054fc <_printf_common+0x30>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	3302      	adds	r3, #2
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	2306      	movs	r3, #6
 8005500:	0017      	movs	r7, r2
 8005502:	401f      	ands	r7, r3
 8005504:	421a      	tst	r2, r3
 8005506:	d027      	beq.n	8005558 <_printf_common+0x8c>
 8005508:	0023      	movs	r3, r4
 800550a:	3343      	adds	r3, #67	; 0x43
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	4193      	sbcs	r3, r2
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	0692      	lsls	r2, r2, #26
 8005516:	d430      	bmi.n	800557a <_printf_common+0xae>
 8005518:	0022      	movs	r2, r4
 800551a:	9901      	ldr	r1, [sp, #4]
 800551c:	9800      	ldr	r0, [sp, #0]
 800551e:	9e08      	ldr	r6, [sp, #32]
 8005520:	3243      	adds	r2, #67	; 0x43
 8005522:	47b0      	blx	r6
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d025      	beq.n	8005574 <_printf_common+0xa8>
 8005528:	2306      	movs	r3, #6
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	682a      	ldr	r2, [r5, #0]
 800552e:	68e1      	ldr	r1, [r4, #12]
 8005530:	2500      	movs	r5, #0
 8005532:	4003      	ands	r3, r0
 8005534:	2b04      	cmp	r3, #4
 8005536:	d103      	bne.n	8005540 <_printf_common+0x74>
 8005538:	1a8d      	subs	r5, r1, r2
 800553a:	43eb      	mvns	r3, r5
 800553c:	17db      	asrs	r3, r3, #31
 800553e:	401d      	ands	r5, r3
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	6922      	ldr	r2, [r4, #16]
 8005544:	4293      	cmp	r3, r2
 8005546:	dd01      	ble.n	800554c <_printf_common+0x80>
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	18ed      	adds	r5, r5, r3
 800554c:	2700      	movs	r7, #0
 800554e:	42bd      	cmp	r5, r7
 8005550:	d120      	bne.n	8005594 <_printf_common+0xc8>
 8005552:	2000      	movs	r0, #0
 8005554:	e010      	b.n	8005578 <_printf_common+0xac>
 8005556:	3701      	adds	r7, #1
 8005558:	68e3      	ldr	r3, [r4, #12]
 800555a:	682a      	ldr	r2, [r5, #0]
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	42bb      	cmp	r3, r7
 8005560:	ddd2      	ble.n	8005508 <_printf_common+0x3c>
 8005562:	0022      	movs	r2, r4
 8005564:	2301      	movs	r3, #1
 8005566:	9901      	ldr	r1, [sp, #4]
 8005568:	9800      	ldr	r0, [sp, #0]
 800556a:	9e08      	ldr	r6, [sp, #32]
 800556c:	3219      	adds	r2, #25
 800556e:	47b0      	blx	r6
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d1f0      	bne.n	8005556 <_printf_common+0x8a>
 8005574:	2001      	movs	r0, #1
 8005576:	4240      	negs	r0, r0
 8005578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800557a:	2030      	movs	r0, #48	; 0x30
 800557c:	18e1      	adds	r1, r4, r3
 800557e:	3143      	adds	r1, #67	; 0x43
 8005580:	7008      	strb	r0, [r1, #0]
 8005582:	0021      	movs	r1, r4
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	3145      	adds	r1, #69	; 0x45
 8005588:	7809      	ldrb	r1, [r1, #0]
 800558a:	18a2      	adds	r2, r4, r2
 800558c:	3243      	adds	r2, #67	; 0x43
 800558e:	3302      	adds	r3, #2
 8005590:	7011      	strb	r1, [r2, #0]
 8005592:	e7c1      	b.n	8005518 <_printf_common+0x4c>
 8005594:	0022      	movs	r2, r4
 8005596:	2301      	movs	r3, #1
 8005598:	9901      	ldr	r1, [sp, #4]
 800559a:	9800      	ldr	r0, [sp, #0]
 800559c:	9e08      	ldr	r6, [sp, #32]
 800559e:	321a      	adds	r2, #26
 80055a0:	47b0      	blx	r6
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d0e6      	beq.n	8005574 <_printf_common+0xa8>
 80055a6:	3701      	adds	r7, #1
 80055a8:	e7d1      	b.n	800554e <_printf_common+0x82>
	...

080055ac <_printf_i>:
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	b08b      	sub	sp, #44	; 0x2c
 80055b0:	9206      	str	r2, [sp, #24]
 80055b2:	000a      	movs	r2, r1
 80055b4:	3243      	adds	r2, #67	; 0x43
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	9005      	str	r0, [sp, #20]
 80055ba:	9204      	str	r2, [sp, #16]
 80055bc:	7e0a      	ldrb	r2, [r1, #24]
 80055be:	000c      	movs	r4, r1
 80055c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055c2:	2a78      	cmp	r2, #120	; 0x78
 80055c4:	d807      	bhi.n	80055d6 <_printf_i+0x2a>
 80055c6:	2a62      	cmp	r2, #98	; 0x62
 80055c8:	d809      	bhi.n	80055de <_printf_i+0x32>
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	d100      	bne.n	80055d0 <_printf_i+0x24>
 80055ce:	e0c1      	b.n	8005754 <_printf_i+0x1a8>
 80055d0:	2a58      	cmp	r2, #88	; 0x58
 80055d2:	d100      	bne.n	80055d6 <_printf_i+0x2a>
 80055d4:	e08c      	b.n	80056f0 <_printf_i+0x144>
 80055d6:	0026      	movs	r6, r4
 80055d8:	3642      	adds	r6, #66	; 0x42
 80055da:	7032      	strb	r2, [r6, #0]
 80055dc:	e022      	b.n	8005624 <_printf_i+0x78>
 80055de:	0010      	movs	r0, r2
 80055e0:	3863      	subs	r0, #99	; 0x63
 80055e2:	2815      	cmp	r0, #21
 80055e4:	d8f7      	bhi.n	80055d6 <_printf_i+0x2a>
 80055e6:	f7fa fd97 	bl	8000118 <__gnu_thumb1_case_shi>
 80055ea:	0016      	.short	0x0016
 80055ec:	fff6001f 	.word	0xfff6001f
 80055f0:	fff6fff6 	.word	0xfff6fff6
 80055f4:	001ffff6 	.word	0x001ffff6
 80055f8:	fff6fff6 	.word	0xfff6fff6
 80055fc:	fff6fff6 	.word	0xfff6fff6
 8005600:	003600a8 	.word	0x003600a8
 8005604:	fff6009a 	.word	0xfff6009a
 8005608:	00b9fff6 	.word	0x00b9fff6
 800560c:	0036fff6 	.word	0x0036fff6
 8005610:	fff6fff6 	.word	0xfff6fff6
 8005614:	009e      	.short	0x009e
 8005616:	0026      	movs	r6, r4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	3642      	adds	r6, #66	; 0x42
 800561c:	1d11      	adds	r1, r2, #4
 800561e:	6019      	str	r1, [r3, #0]
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	7033      	strb	r3, [r6, #0]
 8005624:	2301      	movs	r3, #1
 8005626:	e0a7      	b.n	8005778 <_printf_i+0x1cc>
 8005628:	6808      	ldr	r0, [r1, #0]
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	1d0a      	adds	r2, r1, #4
 800562e:	0605      	lsls	r5, r0, #24
 8005630:	d50b      	bpl.n	800564a <_printf_i+0x9e>
 8005632:	680d      	ldr	r5, [r1, #0]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	2d00      	cmp	r5, #0
 8005638:	da03      	bge.n	8005642 <_printf_i+0x96>
 800563a:	232d      	movs	r3, #45	; 0x2d
 800563c:	9a04      	ldr	r2, [sp, #16]
 800563e:	426d      	negs	r5, r5
 8005640:	7013      	strb	r3, [r2, #0]
 8005642:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <_printf_i+0x21c>)
 8005644:	270a      	movs	r7, #10
 8005646:	9303      	str	r3, [sp, #12]
 8005648:	e01b      	b.n	8005682 <_printf_i+0xd6>
 800564a:	680d      	ldr	r5, [r1, #0]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	0641      	lsls	r1, r0, #25
 8005650:	d5f1      	bpl.n	8005636 <_printf_i+0x8a>
 8005652:	b22d      	sxth	r5, r5
 8005654:	e7ef      	b.n	8005636 <_printf_i+0x8a>
 8005656:	680d      	ldr	r5, [r1, #0]
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	1d08      	adds	r0, r1, #4
 800565c:	6018      	str	r0, [r3, #0]
 800565e:	062e      	lsls	r6, r5, #24
 8005660:	d501      	bpl.n	8005666 <_printf_i+0xba>
 8005662:	680d      	ldr	r5, [r1, #0]
 8005664:	e003      	b.n	800566e <_printf_i+0xc2>
 8005666:	066d      	lsls	r5, r5, #25
 8005668:	d5fb      	bpl.n	8005662 <_printf_i+0xb6>
 800566a:	680d      	ldr	r5, [r1, #0]
 800566c:	b2ad      	uxth	r5, r5
 800566e:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <_printf_i+0x21c>)
 8005670:	2708      	movs	r7, #8
 8005672:	9303      	str	r3, [sp, #12]
 8005674:	2a6f      	cmp	r2, #111	; 0x6f
 8005676:	d000      	beq.n	800567a <_printf_i+0xce>
 8005678:	3702      	adds	r7, #2
 800567a:	0023      	movs	r3, r4
 800567c:	2200      	movs	r2, #0
 800567e:	3343      	adds	r3, #67	; 0x43
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	60a3      	str	r3, [r4, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	db03      	blt.n	8005692 <_printf_i+0xe6>
 800568a:	2204      	movs	r2, #4
 800568c:	6821      	ldr	r1, [r4, #0]
 800568e:	4391      	bics	r1, r2
 8005690:	6021      	str	r1, [r4, #0]
 8005692:	2d00      	cmp	r5, #0
 8005694:	d102      	bne.n	800569c <_printf_i+0xf0>
 8005696:	9e04      	ldr	r6, [sp, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <_printf_i+0x10a>
 800569c:	9e04      	ldr	r6, [sp, #16]
 800569e:	0028      	movs	r0, r5
 80056a0:	0039      	movs	r1, r7
 80056a2:	f7fa fdc9 	bl	8000238 <__aeabi_uidivmod>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	3e01      	subs	r6, #1
 80056aa:	5c5b      	ldrb	r3, [r3, r1]
 80056ac:	7033      	strb	r3, [r6, #0]
 80056ae:	002b      	movs	r3, r5
 80056b0:	0005      	movs	r5, r0
 80056b2:	429f      	cmp	r7, r3
 80056b4:	d9f3      	bls.n	800569e <_printf_i+0xf2>
 80056b6:	2f08      	cmp	r7, #8
 80056b8:	d109      	bne.n	80056ce <_printf_i+0x122>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	07db      	lsls	r3, r3, #31
 80056be:	d506      	bpl.n	80056ce <_printf_i+0x122>
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	6922      	ldr	r2, [r4, #16]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	dc02      	bgt.n	80056ce <_printf_i+0x122>
 80056c8:	2330      	movs	r3, #48	; 0x30
 80056ca:	3e01      	subs	r6, #1
 80056cc:	7033      	strb	r3, [r6, #0]
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	1b9b      	subs	r3, r3, r6
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	0021      	movs	r1, r4
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	9805      	ldr	r0, [sp, #20]
 80056dc:	9b06      	ldr	r3, [sp, #24]
 80056de:	aa09      	add	r2, sp, #36	; 0x24
 80056e0:	f7ff fef4 	bl	80054cc <_printf_common>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d14c      	bne.n	8005782 <_printf_i+0x1d6>
 80056e8:	2001      	movs	r0, #1
 80056ea:	4240      	negs	r0, r0
 80056ec:	b00b      	add	sp, #44	; 0x2c
 80056ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f0:	3145      	adds	r1, #69	; 0x45
 80056f2:	700a      	strb	r2, [r1, #0]
 80056f4:	4a34      	ldr	r2, [pc, #208]	; (80057c8 <_printf_i+0x21c>)
 80056f6:	9203      	str	r2, [sp, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	6821      	ldr	r1, [r4, #0]
 80056fc:	ca20      	ldmia	r2!, {r5}
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	0608      	lsls	r0, r1, #24
 8005702:	d516      	bpl.n	8005732 <_printf_i+0x186>
 8005704:	07cb      	lsls	r3, r1, #31
 8005706:	d502      	bpl.n	800570e <_printf_i+0x162>
 8005708:	2320      	movs	r3, #32
 800570a:	4319      	orrs	r1, r3
 800570c:	6021      	str	r1, [r4, #0]
 800570e:	2710      	movs	r7, #16
 8005710:	2d00      	cmp	r5, #0
 8005712:	d1b2      	bne.n	800567a <_printf_i+0xce>
 8005714:	2320      	movs	r3, #32
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	439a      	bics	r2, r3
 800571a:	6022      	str	r2, [r4, #0]
 800571c:	e7ad      	b.n	800567a <_printf_i+0xce>
 800571e:	2220      	movs	r2, #32
 8005720:	6809      	ldr	r1, [r1, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	0022      	movs	r2, r4
 8005728:	2178      	movs	r1, #120	; 0x78
 800572a:	3245      	adds	r2, #69	; 0x45
 800572c:	7011      	strb	r1, [r2, #0]
 800572e:	4a27      	ldr	r2, [pc, #156]	; (80057cc <_printf_i+0x220>)
 8005730:	e7e1      	b.n	80056f6 <_printf_i+0x14a>
 8005732:	0648      	lsls	r0, r1, #25
 8005734:	d5e6      	bpl.n	8005704 <_printf_i+0x158>
 8005736:	b2ad      	uxth	r5, r5
 8005738:	e7e4      	b.n	8005704 <_printf_i+0x158>
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	680d      	ldr	r5, [r1, #0]
 800573e:	1d10      	adds	r0, r2, #4
 8005740:	6949      	ldr	r1, [r1, #20]
 8005742:	6018      	str	r0, [r3, #0]
 8005744:	6813      	ldr	r3, [r2, #0]
 8005746:	062e      	lsls	r6, r5, #24
 8005748:	d501      	bpl.n	800574e <_printf_i+0x1a2>
 800574a:	6019      	str	r1, [r3, #0]
 800574c:	e002      	b.n	8005754 <_printf_i+0x1a8>
 800574e:	066d      	lsls	r5, r5, #25
 8005750:	d5fb      	bpl.n	800574a <_printf_i+0x19e>
 8005752:	8019      	strh	r1, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	9e04      	ldr	r6, [sp, #16]
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	e7bb      	b.n	80056d4 <_printf_i+0x128>
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	1d11      	adds	r1, r2, #4
 8005760:	6019      	str	r1, [r3, #0]
 8005762:	6816      	ldr	r6, [r2, #0]
 8005764:	2100      	movs	r1, #0
 8005766:	0030      	movs	r0, r6
 8005768:	6862      	ldr	r2, [r4, #4]
 800576a:	f000 f831 	bl	80057d0 <memchr>
 800576e:	2800      	cmp	r0, #0
 8005770:	d001      	beq.n	8005776 <_printf_i+0x1ca>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	9a04      	ldr	r2, [sp, #16]
 800577e:	7013      	strb	r3, [r2, #0]
 8005780:	e7a8      	b.n	80056d4 <_printf_i+0x128>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	0032      	movs	r2, r6
 8005786:	9906      	ldr	r1, [sp, #24]
 8005788:	9805      	ldr	r0, [sp, #20]
 800578a:	9d07      	ldr	r5, [sp, #28]
 800578c:	47a8      	blx	r5
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d0aa      	beq.n	80056e8 <_printf_i+0x13c>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	079b      	lsls	r3, r3, #30
 8005796:	d415      	bmi.n	80057c4 <_printf_i+0x218>
 8005798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	4298      	cmp	r0, r3
 800579e:	daa5      	bge.n	80056ec <_printf_i+0x140>
 80057a0:	0018      	movs	r0, r3
 80057a2:	e7a3      	b.n	80056ec <_printf_i+0x140>
 80057a4:	0022      	movs	r2, r4
 80057a6:	2301      	movs	r3, #1
 80057a8:	9906      	ldr	r1, [sp, #24]
 80057aa:	9805      	ldr	r0, [sp, #20]
 80057ac:	9e07      	ldr	r6, [sp, #28]
 80057ae:	3219      	adds	r2, #25
 80057b0:	47b0      	blx	r6
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d098      	beq.n	80056e8 <_printf_i+0x13c>
 80057b6:	3501      	adds	r5, #1
 80057b8:	68e3      	ldr	r3, [r4, #12]
 80057ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	42ab      	cmp	r3, r5
 80057c0:	dcf0      	bgt.n	80057a4 <_printf_i+0x1f8>
 80057c2:	e7e9      	b.n	8005798 <_printf_i+0x1ec>
 80057c4:	2500      	movs	r5, #0
 80057c6:	e7f7      	b.n	80057b8 <_printf_i+0x20c>
 80057c8:	08005bc6 	.word	0x08005bc6
 80057cc:	08005bd7 	.word	0x08005bd7

080057d0 <memchr>:
 80057d0:	b2c9      	uxtb	r1, r1
 80057d2:	1882      	adds	r2, r0, r2
 80057d4:	4290      	cmp	r0, r2
 80057d6:	d101      	bne.n	80057dc <memchr+0xc>
 80057d8:	2000      	movs	r0, #0
 80057da:	4770      	bx	lr
 80057dc:	7803      	ldrb	r3, [r0, #0]
 80057de:	428b      	cmp	r3, r1
 80057e0:	d0fb      	beq.n	80057da <memchr+0xa>
 80057e2:	3001      	adds	r0, #1
 80057e4:	e7f6      	b.n	80057d4 <memchr+0x4>

080057e6 <memcpy>:
 80057e6:	2300      	movs	r3, #0
 80057e8:	b510      	push	{r4, lr}
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xa>
 80057ee:	bd10      	pop	{r4, pc}
 80057f0:	5ccc      	ldrb	r4, [r1, r3]
 80057f2:	54c4      	strb	r4, [r0, r3]
 80057f4:	3301      	adds	r3, #1
 80057f6:	e7f8      	b.n	80057ea <memcpy+0x4>

080057f8 <memmove>:
 80057f8:	b510      	push	{r4, lr}
 80057fa:	4288      	cmp	r0, r1
 80057fc:	d902      	bls.n	8005804 <memmove+0xc>
 80057fe:	188b      	adds	r3, r1, r2
 8005800:	4298      	cmp	r0, r3
 8005802:	d303      	bcc.n	800580c <memmove+0x14>
 8005804:	2300      	movs	r3, #0
 8005806:	e007      	b.n	8005818 <memmove+0x20>
 8005808:	5c8b      	ldrb	r3, [r1, r2]
 800580a:	5483      	strb	r3, [r0, r2]
 800580c:	3a01      	subs	r2, #1
 800580e:	d2fb      	bcs.n	8005808 <memmove+0x10>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	5ccc      	ldrb	r4, [r1, r3]
 8005814:	54c4      	strb	r4, [r0, r3]
 8005816:	3301      	adds	r3, #1
 8005818:	429a      	cmp	r2, r3
 800581a:	d1fa      	bne.n	8005812 <memmove+0x1a>
 800581c:	e7f8      	b.n	8005810 <memmove+0x18>
	...

08005820 <_free_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	0005      	movs	r5, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	d010      	beq.n	800584a <_free_r+0x2a>
 8005828:	1f0c      	subs	r4, r1, #4
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da00      	bge.n	8005832 <_free_r+0x12>
 8005830:	18e4      	adds	r4, r4, r3
 8005832:	0028      	movs	r0, r5
 8005834:	f000 f918 	bl	8005a68 <__malloc_lock>
 8005838:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <_free_r+0x90>)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <_free_r+0x2c>
 8005840:	6063      	str	r3, [r4, #4]
 8005842:	6014      	str	r4, [r2, #0]
 8005844:	0028      	movs	r0, r5
 8005846:	f000 f917 	bl	8005a78 <__malloc_unlock>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	42a3      	cmp	r3, r4
 800584e:	d908      	bls.n	8005862 <_free_r+0x42>
 8005850:	6821      	ldr	r1, [r4, #0]
 8005852:	1860      	adds	r0, r4, r1
 8005854:	4283      	cmp	r3, r0
 8005856:	d1f3      	bne.n	8005840 <_free_r+0x20>
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	1841      	adds	r1, r0, r1
 800585e:	6021      	str	r1, [r4, #0]
 8005860:	e7ee      	b.n	8005840 <_free_r+0x20>
 8005862:	001a      	movs	r2, r3
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <_free_r+0x4e>
 800586a:	42a3      	cmp	r3, r4
 800586c:	d9f9      	bls.n	8005862 <_free_r+0x42>
 800586e:	6811      	ldr	r1, [r2, #0]
 8005870:	1850      	adds	r0, r2, r1
 8005872:	42a0      	cmp	r0, r4
 8005874:	d10b      	bne.n	800588e <_free_r+0x6e>
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	1809      	adds	r1, r1, r0
 800587a:	1850      	adds	r0, r2, r1
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	4283      	cmp	r3, r0
 8005880:	d1e0      	bne.n	8005844 <_free_r+0x24>
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	1841      	adds	r1, r0, r1
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	6053      	str	r3, [r2, #4]
 800588c:	e7da      	b.n	8005844 <_free_r+0x24>
 800588e:	42a0      	cmp	r0, r4
 8005890:	d902      	bls.n	8005898 <_free_r+0x78>
 8005892:	230c      	movs	r3, #12
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	e7d5      	b.n	8005844 <_free_r+0x24>
 8005898:	6821      	ldr	r1, [r4, #0]
 800589a:	1860      	adds	r0, r4, r1
 800589c:	4283      	cmp	r3, r0
 800589e:	d103      	bne.n	80058a8 <_free_r+0x88>
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	1841      	adds	r1, r0, r1
 80058a6:	6021      	str	r1, [r4, #0]
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	6054      	str	r4, [r2, #4]
 80058ac:	e7ca      	b.n	8005844 <_free_r+0x24>
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	2000035c 	.word	0x2000035c

080058b4 <sbrk_aligned>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4e0f      	ldr	r6, [pc, #60]	; (80058f4 <sbrk_aligned+0x40>)
 80058b8:	000d      	movs	r5, r1
 80058ba:	6831      	ldr	r1, [r6, #0]
 80058bc:	0004      	movs	r4, r0
 80058be:	2900      	cmp	r1, #0
 80058c0:	d102      	bne.n	80058c8 <sbrk_aligned+0x14>
 80058c2:	f000 f8bf 	bl	8005a44 <_sbrk_r>
 80058c6:	6030      	str	r0, [r6, #0]
 80058c8:	0029      	movs	r1, r5
 80058ca:	0020      	movs	r0, r4
 80058cc:	f000 f8ba 	bl	8005a44 <_sbrk_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d00a      	beq.n	80058ea <sbrk_aligned+0x36>
 80058d4:	2303      	movs	r3, #3
 80058d6:	1cc5      	adds	r5, r0, #3
 80058d8:	439d      	bics	r5, r3
 80058da:	42a8      	cmp	r0, r5
 80058dc:	d007      	beq.n	80058ee <sbrk_aligned+0x3a>
 80058de:	1a29      	subs	r1, r5, r0
 80058e0:	0020      	movs	r0, r4
 80058e2:	f000 f8af 	bl	8005a44 <_sbrk_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	d101      	bne.n	80058ee <sbrk_aligned+0x3a>
 80058ea:	2501      	movs	r5, #1
 80058ec:	426d      	negs	r5, r5
 80058ee:	0028      	movs	r0, r5
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	20000360 	.word	0x20000360

080058f8 <_malloc_r>:
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	2203      	movs	r2, #3
 80058fc:	1ccb      	adds	r3, r1, #3
 80058fe:	4393      	bics	r3, r2
 8005900:	3308      	adds	r3, #8
 8005902:	0006      	movs	r6, r0
 8005904:	001f      	movs	r7, r3
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d232      	bcs.n	8005970 <_malloc_r+0x78>
 800590a:	270c      	movs	r7, #12
 800590c:	42b9      	cmp	r1, r7
 800590e:	d831      	bhi.n	8005974 <_malloc_r+0x7c>
 8005910:	0030      	movs	r0, r6
 8005912:	f000 f8a9 	bl	8005a68 <__malloc_lock>
 8005916:	4d32      	ldr	r5, [pc, #200]	; (80059e0 <_malloc_r+0xe8>)
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	001c      	movs	r4, r3
 800591c:	2c00      	cmp	r4, #0
 800591e:	d12e      	bne.n	800597e <_malloc_r+0x86>
 8005920:	0039      	movs	r1, r7
 8005922:	0030      	movs	r0, r6
 8005924:	f7ff ffc6 	bl	80058b4 <sbrk_aligned>
 8005928:	0004      	movs	r4, r0
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d11e      	bne.n	800596c <_malloc_r+0x74>
 800592e:	682c      	ldr	r4, [r5, #0]
 8005930:	0025      	movs	r5, r4
 8005932:	2d00      	cmp	r5, #0
 8005934:	d14a      	bne.n	80059cc <_malloc_r+0xd4>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	0029      	movs	r1, r5
 800593a:	18e3      	adds	r3, r4, r3
 800593c:	0030      	movs	r0, r6
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f000 f880 	bl	8005a44 <_sbrk_r>
 8005944:	9b01      	ldr	r3, [sp, #4]
 8005946:	4283      	cmp	r3, r0
 8005948:	d143      	bne.n	80059d2 <_malloc_r+0xda>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	3703      	adds	r7, #3
 800594e:	1aff      	subs	r7, r7, r3
 8005950:	2303      	movs	r3, #3
 8005952:	439f      	bics	r7, r3
 8005954:	3708      	adds	r7, #8
 8005956:	2f0c      	cmp	r7, #12
 8005958:	d200      	bcs.n	800595c <_malloc_r+0x64>
 800595a:	270c      	movs	r7, #12
 800595c:	0039      	movs	r1, r7
 800595e:	0030      	movs	r0, r6
 8005960:	f7ff ffa8 	bl	80058b4 <sbrk_aligned>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d034      	beq.n	80059d2 <_malloc_r+0xda>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	19df      	adds	r7, r3, r7
 800596c:	6027      	str	r7, [r4, #0]
 800596e:	e013      	b.n	8005998 <_malloc_r+0xa0>
 8005970:	2b00      	cmp	r3, #0
 8005972:	dacb      	bge.n	800590c <_malloc_r+0x14>
 8005974:	230c      	movs	r3, #12
 8005976:	2500      	movs	r5, #0
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	0028      	movs	r0, r5
 800597c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	1bd1      	subs	r1, r2, r7
 8005982:	d420      	bmi.n	80059c6 <_malloc_r+0xce>
 8005984:	290b      	cmp	r1, #11
 8005986:	d917      	bls.n	80059b8 <_malloc_r+0xc0>
 8005988:	19e2      	adds	r2, r4, r7
 800598a:	6027      	str	r7, [r4, #0]
 800598c:	42a3      	cmp	r3, r4
 800598e:	d111      	bne.n	80059b4 <_malloc_r+0xbc>
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	6053      	str	r3, [r2, #4]
 8005998:	0030      	movs	r0, r6
 800599a:	0025      	movs	r5, r4
 800599c:	f000 f86c 	bl	8005a78 <__malloc_unlock>
 80059a0:	2207      	movs	r2, #7
 80059a2:	350b      	adds	r5, #11
 80059a4:	1d23      	adds	r3, r4, #4
 80059a6:	4395      	bics	r5, r2
 80059a8:	1aea      	subs	r2, r5, r3
 80059aa:	429d      	cmp	r5, r3
 80059ac:	d0e5      	beq.n	800597a <_malloc_r+0x82>
 80059ae:	1b5b      	subs	r3, r3, r5
 80059b0:	50a3      	str	r3, [r4, r2]
 80059b2:	e7e2      	b.n	800597a <_malloc_r+0x82>
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	e7ec      	b.n	8005992 <_malloc_r+0x9a>
 80059b8:	6862      	ldr	r2, [r4, #4]
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	d101      	bne.n	80059c2 <_malloc_r+0xca>
 80059be:	602a      	str	r2, [r5, #0]
 80059c0:	e7ea      	b.n	8005998 <_malloc_r+0xa0>
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	e7e8      	b.n	8005998 <_malloc_r+0xa0>
 80059c6:	0023      	movs	r3, r4
 80059c8:	6864      	ldr	r4, [r4, #4]
 80059ca:	e7a7      	b.n	800591c <_malloc_r+0x24>
 80059cc:	002c      	movs	r4, r5
 80059ce:	686d      	ldr	r5, [r5, #4]
 80059d0:	e7af      	b.n	8005932 <_malloc_r+0x3a>
 80059d2:	230c      	movs	r3, #12
 80059d4:	0030      	movs	r0, r6
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	f000 f84e 	bl	8005a78 <__malloc_unlock>
 80059dc:	e7cd      	b.n	800597a <_malloc_r+0x82>
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	2000035c 	.word	0x2000035c

080059e4 <_realloc_r>:
 80059e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e6:	0007      	movs	r7, r0
 80059e8:	000e      	movs	r6, r1
 80059ea:	0014      	movs	r4, r2
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d105      	bne.n	80059fc <_realloc_r+0x18>
 80059f0:	0011      	movs	r1, r2
 80059f2:	f7ff ff81 	bl	80058f8 <_malloc_r>
 80059f6:	0005      	movs	r5, r0
 80059f8:	0028      	movs	r0, r5
 80059fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	d103      	bne.n	8005a08 <_realloc_r+0x24>
 8005a00:	f7ff ff0e 	bl	8005820 <_free_r>
 8005a04:	0025      	movs	r5, r4
 8005a06:	e7f7      	b.n	80059f8 <_realloc_r+0x14>
 8005a08:	f000 f83e 	bl	8005a88 <_malloc_usable_size_r>
 8005a0c:	9001      	str	r0, [sp, #4]
 8005a0e:	4284      	cmp	r4, r0
 8005a10:	d803      	bhi.n	8005a1a <_realloc_r+0x36>
 8005a12:	0035      	movs	r5, r6
 8005a14:	0843      	lsrs	r3, r0, #1
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	d3ee      	bcc.n	80059f8 <_realloc_r+0x14>
 8005a1a:	0021      	movs	r1, r4
 8005a1c:	0038      	movs	r0, r7
 8005a1e:	f7ff ff6b 	bl	80058f8 <_malloc_r>
 8005a22:	1e05      	subs	r5, r0, #0
 8005a24:	d0e8      	beq.n	80059f8 <_realloc_r+0x14>
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	0022      	movs	r2, r4
 8005a2a:	429c      	cmp	r4, r3
 8005a2c:	d900      	bls.n	8005a30 <_realloc_r+0x4c>
 8005a2e:	001a      	movs	r2, r3
 8005a30:	0031      	movs	r1, r6
 8005a32:	0028      	movs	r0, r5
 8005a34:	f7ff fed7 	bl	80057e6 <memcpy>
 8005a38:	0031      	movs	r1, r6
 8005a3a:	0038      	movs	r0, r7
 8005a3c:	f7ff fef0 	bl	8005820 <_free_r>
 8005a40:	e7da      	b.n	80059f8 <_realloc_r+0x14>
	...

08005a44 <_sbrk_r>:
 8005a44:	2300      	movs	r3, #0
 8005a46:	b570      	push	{r4, r5, r6, lr}
 8005a48:	4d06      	ldr	r5, [pc, #24]	; (8005a64 <_sbrk_r+0x20>)
 8005a4a:	0004      	movs	r4, r0
 8005a4c:	0008      	movs	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7ff faf4 	bl	800503c <_sbrk>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d103      	bne.n	8005a60 <_sbrk_r+0x1c>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d000      	beq.n	8005a60 <_sbrk_r+0x1c>
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	20000364 	.word	0x20000364

08005a68 <__malloc_lock>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4802      	ldr	r0, [pc, #8]	; (8005a74 <__malloc_lock+0xc>)
 8005a6c:	f000 f814 	bl	8005a98 <__retarget_lock_acquire_recursive>
 8005a70:	bd10      	pop	{r4, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	20000368 	.word	0x20000368

08005a78 <__malloc_unlock>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4802      	ldr	r0, [pc, #8]	; (8005a84 <__malloc_unlock+0xc>)
 8005a7c:	f000 f80d 	bl	8005a9a <__retarget_lock_release_recursive>
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	20000368 	.word	0x20000368

08005a88 <_malloc_usable_size_r>:
 8005a88:	1f0b      	subs	r3, r1, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	1f18      	subs	r0, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da01      	bge.n	8005a96 <_malloc_usable_size_r+0xe>
 8005a92:	580b      	ldr	r3, [r1, r0]
 8005a94:	18c0      	adds	r0, r0, r3
 8005a96:	4770      	bx	lr

08005a98 <__retarget_lock_acquire_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <__retarget_lock_release_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
