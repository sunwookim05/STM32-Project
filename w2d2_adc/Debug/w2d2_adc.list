
w2d2_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005380  08005380  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005388  08005388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  08005400  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005400  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e8f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272f  00000000  00000000  00030f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a52  00000000  00000000  000352e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c9d  00000000  00000000  0004ad32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841c2  00000000  00000000  0005c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0b91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000e0be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050c8 	.word	0x080050c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080050c8 	.word	0x080050c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <appSetup>:
extern RTC_HandleTypeDef hrtc;

RTC_DateTypeDef sDate;
RTC_TimeTypeDef sTime;

void appSetup() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

	lcd_init(&hi2c1);
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <appSetup+0x28>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f8cc 	bl	8000654 <lcd_init>
	OLED_ShowString(1, 1, "Starting...", 0);
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <appSetup+0x2c>)
 80004be:	2300      	movs	r3, #0
 80004c0:	2101      	movs	r1, #1
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 f9ae 	bl	8000824 <OLED_ShowString>
	HAL_Delay(4000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 ffdf 	bl	8001490 <HAL_Delay>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000b4 	.word	0x200000b4
 80004dc:	080050e0 	.word	0x080050e0

080004e0 <appLoop>:
void appLoop() {
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b091      	sub	sp, #68	; 0x44
 80004e4:	af04      	add	r7, sp, #16

	static uint32_t last;
	uint32_t now = HAL_GetTick();
 80004e6:	f000 ffc9 	bl	800147c <HAL_GetTick>
 80004ea:	0003      	movs	r3, r0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (now - last > 1000) {
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <appLoop+0x94>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004f4:	1ad2      	subs	r2, r2, r3
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d935      	bls.n	800056a <appLoop+0x8a>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2108      	movs	r1, #8
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fe6c 	bl	80021e2 <HAL_GPIO_TogglePin>

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800050a:	491b      	ldr	r1, [pc, #108]	; (8000578 <appLoop+0x98>)
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <appLoop+0x9c>)
 800050e:	2200      	movs	r2, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f003 fb27 	bl	8003b64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000516:	491a      	ldr	r1, [pc, #104]	; (8000580 <appLoop+0xa0>)
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <appLoop+0x9c>)
 800051a:	2200      	movs	r2, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f003 fc2b 	bl	8003d78 <HAL_RTC_GetDate>
		char strBuf[40];
		sprintf(strBuf, "%02d-%02d-%02d %02d:%02d:%02d", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <appLoop+0xa0>)
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	001e      	movs	r6, r3
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <appLoop+0xa0>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	469c      	mov	ip, r3
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <appLoop+0xa0>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	001a      	movs	r2, r3
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <appLoop+0x98>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001c      	movs	r4, r3
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <appLoop+0x98>)
 800053c:	785b      	ldrb	r3, [r3, #1]
 800053e:	001d      	movs	r5, r3
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <appLoop+0x98>)
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	490f      	ldr	r1, [pc, #60]	; (8000584 <appLoop+0xa4>)
 8000546:	1d38      	adds	r0, r7, #4
 8000548:	9303      	str	r3, [sp, #12]
 800054a:	9502      	str	r5, [sp, #8]
 800054c:	9401      	str	r4, [sp, #4]
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	4663      	mov	r3, ip
 8000552:	0032      	movs	r2, r6
 8000554:	f004 f992 	bl	800487c <siprintf>
		//OLED_Clear();
		OLED_ShowString(1, 1, strBuf, 1);
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	2301      	movs	r3, #1
 800055c:	2101      	movs	r1, #1
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f960 	bl	8000824 <OLED_ShowString>

		last = now;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <appLoop+0x94>)
 8000566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000568:	601a      	str	r2, [r3, #0]
	}

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b00d      	add	sp, #52	; 0x34
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	2000008c 	.word	0x2000008c
 8000578:	2000009c 	.word	0x2000009c
 800057c:	20000140 	.word	0x20000140
 8000580:	200000b0 	.word	0x200000b0
 8000584:	080050ec 	.word	0x080050ec

08000588 <IIC_Writecmd>:
//**************************************************************************************************
//  Send comman to LCD display
//**************************************************************************************************
//
void IIC_Writecmd(uint8_t com)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af04      	add	r7, sp, #16
 800058e:	0002      	movs	r2, r0
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x00,1,&com,1,100);
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <IIC_Writecmd+0x2c>)
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	2200      	movs	r2, #0
 80005a6:	2178      	movs	r1, #120	; 0x78
 80005a8:	f001 fecc 	bl	8002344 <HAL_I2C_Mem_Write>
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <IIC_Writedata>:

void IIC_Writedata(uint8_t data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af04      	add	r7, sp, #16
 80005be:	0002      	movs	r2, r0
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x40,1,&data,1,100);
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <IIC_Writedata+0x2c>)
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	2178      	movs	r1, #120	; 0x78
 80005d8:	f001 feb4 	bl	8002344 <HAL_I2C_Mem_Write>
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000b4 	.word	0x200000b4

080005e8 <OLED_Clear>:

void OLED_Clear(void)  
{  
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e022      	b.n	800063c <OLED_Clear+0x54>
	{
		IIC_Writecmd(0xb0+i);
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3b50      	subs	r3, #80	; 0x50
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ffc2 	bl	8000588 <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ffbf 	bl	8000588 <IIC_Writecmd>
		IIC_Writecmd(0x10);
 800060a:	2010      	movs	r0, #16
 800060c:	f7ff ffbc 	bl	8000588 <IIC_Writecmd>
		for(n=0;n<128;n++)IIC_Writedata(0); 
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	e007      	b.n	8000628 <OLED_Clear+0x40>
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffcd 	bl	80005b8 <IIC_Writedata>
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	3201      	adds	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b25b      	sxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	daf2      	bge.n	8000618 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	3201      	adds	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b07      	cmp	r3, #7
 8000642:	d9d8      	bls.n	80005f6 <OLED_Clear+0xe>
	}
	OLED_Set_Pos(0,0);
 8000644:	2100      	movs	r1, #0
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f865 	bl	8000716 <OLED_Set_Pos>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}

08000654 <lcd_init>:
//**************************************************************************************************
//	LCD display initialization
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *h)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	IIC_Writecmd(0xAE);//--turn off oled panel
 800065c:	20ae      	movs	r0, #174	; 0xae
 800065e:	f7ff ff93 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x00);//---set low column address
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ff90 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x10);//---set high column address
 8000668:	2010      	movs	r0, #16
 800066a:	f7ff ff8d 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800066e:	2040      	movs	r0, #64	; 0x40
 8000670:	f7ff ff8a 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x81);//--set contrast control register
 8000674:	2081      	movs	r0, #129	; 0x81
 8000676:	f7ff ff87 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xCF); // Set SEG Output Current Brightness
 800067a:	20cf      	movs	r0, #207	; 0xcf
 800067c:	f7ff ff84 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA1);//--Set SEG/Column Mapping
 8000680:	20a1      	movs	r0, #161	; 0xa1
 8000682:	f7ff ff81 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xC8);//Set COM/Row Scan Direction
 8000686:	20c8      	movs	r0, #200	; 0xc8
 8000688:	f7ff ff7e 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA6);//--set normal display
 800068c:	20a6      	movs	r0, #166	; 0xa6
 800068e:	f7ff ff7b 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA8);//--set multiplex ratio(1 to 64)
 8000692:	20a8      	movs	r0, #168	; 0xa8
 8000694:	f7ff ff78 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x3f);//--1/64 duty
 8000698:	203f      	movs	r0, #63	; 0x3f
 800069a:	f7ff ff75 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800069e:	20d3      	movs	r0, #211	; 0xd3
 80006a0:	f7ff ff72 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x00);//-not offset
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff6f 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xd5);//--set display clock divide ratio/oscillator frequency
 80006aa:	20d5      	movs	r0, #213	; 0xd5
 80006ac:	f7ff ff6c 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 80006b0:	2080      	movs	r0, #128	; 0x80
 80006b2:	f7ff ff69 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xD9);//--set pre-charge period
 80006b6:	20d9      	movs	r0, #217	; 0xd9
 80006b8:	f7ff ff66 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80006bc:	20f1      	movs	r0, #241	; 0xf1
 80006be:	f7ff ff63 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xDA);//--set com pins hardware configuration
 80006c2:	20da      	movs	r0, #218	; 0xda
 80006c4:	f7ff ff60 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x12);
 80006c8:	2012      	movs	r0, #18
 80006ca:	f7ff ff5d 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xDB);//--set vcomh
 80006ce:	20db      	movs	r0, #219	; 0xdb
 80006d0:	f7ff ff5a 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x40);//Set VCOM Deselect Level
 80006d4:	2040      	movs	r0, #64	; 0x40
 80006d6:	f7ff ff57 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80006da:	2020      	movs	r0, #32
 80006dc:	f7ff ff54 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x02);//
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff51 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x8D);//--set Charge Pump enable/disable
 80006e6:	208d      	movs	r0, #141	; 0x8d
 80006e8:	f7ff ff4e 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0x14);//--set(0x10) disable
 80006ec:	2014      	movs	r0, #20
 80006ee:	f7ff ff4b 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA4);// Disable Entire Display On (0xa4/0xa5)
 80006f2:	20a4      	movs	r0, #164	; 0xa4
 80006f4:	f7ff ff48 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xA6);// Disable Inverse Display On (0xa6/a7) 
 80006f8:	20a6      	movs	r0, #166	; 0xa6
 80006fa:	f7ff ff45 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(0xAF);//--turn on oled panel
 80006fe:	20af      	movs	r0, #175	; 0xaf
 8000700:	f7ff ff42 	bl	8000588 <IIC_Writecmd>
	
	IIC_Writecmd(0xAF); /*display ON*/ 
 8000704:	20af      	movs	r0, #175	; 0xaf
 8000706:	f7ff ff3f 	bl	8000588 <IIC_Writecmd>
	OLED_Clear();
 800070a:	f7ff ff6d 	bl	80005e8 <OLED_Clear>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}

08000716 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	0002      	movs	r2, r0
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	1c0a      	adds	r2, r1, #0
 8000726:	701a      	strb	r2, [r3, #0]
	IIC_Writecmd(0xb0+y);
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3b50      	subs	r3, #80	; 0x50
 800072e:	b2db      	uxtb	r3, r3
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ff29 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd(((x&0xf0)>>4)|0x10);
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	091b      	lsrs	r3, r3, #4
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2210      	movs	r2, #16
 8000740:	4313      	orrs	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff1f 	bl	8000588 <IIC_Writecmd>
	IIC_Writecmd((x&0x0f)|0x01); 
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	220e      	movs	r2, #14
 8000752:	4013      	ands	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	2201      	movs	r2, #1
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff12 	bl	8000588 <IIC_Writecmd>
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <OLED_ShowChar>:
			p[x+((y/8)*128)] ^= 0x01<<(y%8);
	IIC_Writedata(p[x+((y/8)*128)]);
}

void OLED_ShowChar(uint32_t x,uint32_t y,char chr,uint8_t mode)
{      	
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	0019      	movs	r1, r3
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	1c0a      	adds	r2, r1, #0
 8000780:	701a      	strb	r2, [r3, #0]
	unsigned char c=chr-' ',i;
 8000782:	2316      	movs	r3, #22
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	1dfa      	adds	r2, r7, #7
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	3a20      	subs	r2, #32
 800078c:	701a      	strb	r2, [r3, #0]
	if(x>Max_Column-1){x=0;y=y+2;}	
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b7f      	cmp	r3, #127	; 0x7f
 8000792:	d904      	bls.n	800079e <OLED_ShowChar+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3302      	adds	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
	OLED_Set_Pos(x,y);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ffb4 	bl	8000716 <OLED_Set_Pos>
	for(i=0;i<6;i++)
 80007ae:	2317      	movs	r3, #23
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e029      	b.n	800080c <OLED_ShowChar+0xa0>
	IIC_Writedata((mode)?F6x8[c][i]:~F6x8[c][i]);
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <OLED_ShowChar+0x70>
 80007c0:	2316      	movs	r3, #22
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	2317      	movs	r3, #23
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	7819      	ldrb	r1, [r3, #0]
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <OLED_ShowChar+0xb4>)
 80007ce:	0013      	movs	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	18c3      	adds	r3, r0, r3
 80007d8:	5c5b      	ldrb	r3, [r3, r1]
 80007da:	e00e      	b.n	80007fa <OLED_ShowChar+0x8e>
 80007dc:	2316      	movs	r3, #22
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	2317      	movs	r3, #23
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <OLED_ShowChar+0xb4>)
 80007ea:	0013      	movs	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	18c3      	adds	r3, r0, r3
 80007f4:	5c5b      	ldrb	r3, [r3, r1]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fedc 	bl	80005b8 <IIC_Writedata>
	for(i=0;i<6;i++)
 8000800:	2117      	movs	r1, #23
 8000802:	187b      	adds	r3, r7, r1
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	187b      	adds	r3, r7, r1
 8000808:	3201      	adds	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	2317      	movs	r3, #23
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b05      	cmp	r3, #5
 8000814:	d9d0      	bls.n	80007b8 <OLED_ShowChar+0x4c>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800510c 	.word	0x0800510c

08000824 <OLED_ShowString>:
	for(i=8;i<16;i++)
	IIC_Writedata((mode)?F8X16[c][i]:~F8X16[c][i]);
}

void OLED_ShowString(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	001a      	movs	r2, r3
 8000832:	1cfb      	adds	r3, r7, #3
 8000834:	701a      	strb	r2, [r3, #0]
	unsigned char j=0;
 8000836:	2317      	movs	r3, #23
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 800083e:	e035      	b.n	80008ac <OLED_ShowString+0x88>
	{		
		if(chr[j]=='\n') 
 8000840:	2317      	movs	r3, #23
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b0a      	cmp	r3, #10
 800084e:	d105      	bne.n	800085c <OLED_ShowString+0x38>
		{
			x=0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
			y++;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e021      	b.n	80008a0 <OLED_ShowString+0x7c>
		}
		else if(chr[j]=='\f') OLED_Clear();
 800085c:	2317      	movs	r3, #23
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b0c      	cmp	r3, #12
 800086a:	d102      	bne.n	8000872 <OLED_ShowString+0x4e>
 800086c:	f7ff febc 	bl	80005e8 <OLED_Clear>
 8000870:	e016      	b.n	80008a0 <OLED_ShowString+0x7c>
		else
		{
			OLED_ShowChar(x,y,chr[j],mode);
 8000872:	2317      	movs	r3, #23
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ff71 	bl	800076c <OLED_ShowChar>
			x+=6;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3306      	adds	r3, #6
 800088e:	60fb      	str	r3, [r7, #12]
			if(x>120)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b78      	cmp	r3, #120	; 0x78
 8000894:	d904      	bls.n	80008a0 <OLED_ShowString+0x7c>
			{
				x=0;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
				y++;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3301      	adds	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 80008a0:	2117      	movs	r1, #23
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	3201      	adds	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 80008ac:	2317      	movs	r3, #23
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1c1      	bne.n	8000840 <OLED_ShowString+0x1c>
	}
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b006      	add	sp, #24
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fd71 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f815 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fb11 	bl	8000ef8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008d6:	f000 f9a1 	bl	8000c1c <MX_TIM2_Init>
  MX_ADC_Init();
 80008da:	f000 f889 	bl	80009f0 <MX_ADC_Init>
  MX_DMA_Init();
 80008de:	f000 faed 	bl	8000ebc <MX_DMA_Init>
  MX_TIM22_Init();
 80008e2:	f000 fa61 	bl	8000da8 <MX_TIM22_Init>
  MX_TIM6_Init();
 80008e6:	f000 fa21 	bl	8000d2c <MX_TIM6_Init>
  MX_I2C1_Init();
 80008ea:	f000 f8f3 	bl	8000ad4 <MX_I2C1_Init>
  MX_RTC_Init();
 80008ee:	f000 f931 	bl	8000b54 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start_IT(&htim22, TIM_CHANNEL_2);
//	lcd_init(&hi2c1);
  appSetup();
 80008f2:	f7ff fddd 	bl	80004b0 <appSetup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		appLoop();
 80008f6:	f7ff fdf3 	bl	80004e0 <appLoop>
 80008fa:	e7fc      	b.n	80008f6 <main+0x30>

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b09d      	sub	sp, #116	; 0x74
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	2438      	movs	r4, #56	; 0x38
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2338      	movs	r3, #56	; 0x38
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f003 ffad 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	2314      	movs	r3, #20
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f003 ffa5 	bl	800486c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	0018      	movs	r0, r3
 8000926:	2320      	movs	r3, #32
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f003 ff9e 	bl	800486c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <SystemClock_Config+0xec>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <SystemClock_Config+0xf0>)
 8000936:	401a      	ands	r2, r3
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <SystemClock_Config+0xec>)
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0109      	lsls	r1, r1, #4
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	220a      	movs	r2, #10
 8000948:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2210      	movs	r2, #16
 8000954:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2201      	movs	r2, #1
 800095a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2202      	movs	r2, #2
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	02d2      	lsls	r2, r2, #11
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	187b      	adds	r3, r7, r1
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f898 	bl	8002ab0 <HAL_RCC_OscConfig>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000984:	f000 fafc 	bl	8000f80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	2124      	movs	r1, #36	; 0x24
 800098a:	187b      	adds	r3, r7, r1
 800098c:	220f      	movs	r2, #15
 800098e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2203      	movs	r2, #3
 8000994:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2101      	movs	r1, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 fc43 	bl	8003238 <HAL_RCC_ClockConfig>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009b6:	f000 fae3 	bl	8000f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2228      	movs	r2, #40	; 0x28
 80009be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0292      	lsls	r2, r2, #10
 80009cc:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fe1f 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009da:	f000 fad1 	bl	8000f80 <Error_Handler>
  }
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b01d      	add	sp, #116	; 0x74
 80009e4:	bd90      	pop	{r4, r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40007000 	.word	0x40007000
 80009ec:	ffffe7ff 	.word	0xffffe7ff

080009f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	003b      	movs	r3, r7
 80009f8:	0018      	movs	r0, r3
 80009fa:	2308      	movs	r3, #8
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f003 ff34 	bl	800486c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a04:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a06:	4a31      	ldr	r2, [pc, #196]	; (8000acc <MX_ADC_Init+0xdc>)
 8000a08:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	05d2      	lsls	r2, r2, #23
 8000a16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a3a:	2221      	movs	r2, #33	; 0x21
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	00d2      	lsls	r2, r2, #3
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a50:	222c      	movs	r2, #44	; 0x2c
 8000a52:	2101      	movs	r1, #1
 8000a54:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fd2e 	bl	80014d8 <HAL_ADC_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000a80:	f000 fa7e 	bl	8000f80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0152      	lsls	r2, r2, #5
 8000a90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a92:	003a      	movs	r2, r7
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 ff65 	bl	8001968 <HAL_ADC_ConfigChannel>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000aa2:	f000 fa6d 	bl	8000f80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <MX_ADC_Init+0xe0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aac:	003a      	movs	r2, r7
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_ADC_Init+0xd8>)
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 ff58 	bl	8001968 <HAL_ADC_ConfigChannel>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000abc:	f000 fa60 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000022c 	.word	0x2000022c
 8000acc:	40012400 	.word	0x40012400
 8000ad0:	04000002 	.word	0x04000002

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C1_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fb81 	bl	8002218 <HAL_I2C_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 fa31 	bl	8000f80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 ff2c 	bl	8002980 <HAL_I2CEx_ConfigAnalogFilter>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 fa28 	bl	8000f80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 ff6f 	bl	8002a18 <HAL_I2CEx_ConfigDigitalFilter>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 fa1f 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000b4 	.word	0x200000b4
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	00707cbb 	.word	0x00707cbb

08000b54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f003 fe82 	bl	800486c <memset>
  RTC_DateTypeDef sDate = {0};
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <MX_RTC_Init+0xc4>)
 8000b72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b7c:	227f      	movs	r2, #127	; 0x7f
 8000b7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 fe7d 	bl	80038a0 <HAL_RTC_Init>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000baa:	f000 f9e9 	bl	8000f80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x1;
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 ff02 	bl	80039dc <HAL_RTC_SetTime>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f9d0 	bl	8000f80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000be6:	003b      	movs	r3, r7
 8000be8:	2201      	movs	r2, #1
 8000bea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2201      	movs	r2, #1
 8000bf0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x19;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2219      	movs	r2, #25
 8000bf6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bf8:	0039      	movs	r1, r7
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_RTC_Init+0xc0>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f003 f80c 	bl	8003c1c <HAL_RTC_SetDate>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000c08:	f000 f9ba 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b006      	add	sp, #24
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000140 	.word	0x20000140
 8000c18:	40002800 	.word	0x40002800

08000c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	2318      	movs	r3, #24
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2310      	movs	r3, #16
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f003 fe1d 	bl	800486c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	2310      	movs	r3, #16
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2308      	movs	r3, #8
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f003 fe15 	bl	800486c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	003b      	movs	r3, r7
 8000c44:	0018      	movs	r0, r3
 8000c46:	2310      	movs	r3, #16
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f003 fe0e 	bl	800486c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	05d2      	lsls	r2, r2, #23
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c5a:	221f      	movs	r2, #31
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <MX_TIM2_Init+0x10c>)
 8000c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 f961 	bl	8003f40 <HAL_TIM_Base_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f97d 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	2118      	movs	r1, #24
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	0152      	lsls	r2, r2, #5
 8000c8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c90:	187a      	adds	r2, r7, r1
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f003 faa0 	bl	80041dc <HAL_TIM_ConfigClockSource>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ca0:	f000 f96e 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 f98a 	bl	8003fc0 <HAL_TIM_PWM_Init>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cb0:	f000 f966 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc2:	187a      	adds	r2, r7, r1
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f003 fd4d 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000cd2:	f000 f955 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2260      	movs	r2, #96	; 0x60
 8000cda:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 600;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2296      	movs	r2, #150	; 0x96
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	003b      	movs	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf0:	0039      	movs	r1, r7
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 f9aa 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000d00:	f000 f93e 	bl	8000f80 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2108      	movs	r1, #8
 8000d10:	438a      	bics	r2, r1
 8000d12:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fa4e 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b00a      	add	sp, #40	; 0x28
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001a4 	.word	0x200001a4
 8000d28:	000003e7 	.word	0x000003e7

08000d2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d32:	003b      	movs	r3, r7
 8000d34:	0018      	movs	r0, r3
 8000d36:	2308      	movs	r3, #8
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 fd96 	bl	800486c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <MX_TIM6_Init+0x70>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3200-1;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_TIM6_Init+0x74>)
 8000d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_TIM6_Init+0x78>)
 8000d56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f003 f8ed 	bl	8003f40 <HAL_TIM_Base_Init>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d6a:	f000 f909 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2220      	movs	r2, #32
 8000d72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	003b      	movs	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d7a:	003a      	movs	r2, r7
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_TIM6_Init+0x6c>)
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f003 fcf1 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000d8a:	f000 f8f9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	20000164 	.word	0x20000164
 8000d9c:	40001000 	.word	0x40001000
 8000da0:	00000c7f 	.word	0x00000c7f
 8000da4:	000003e7 	.word	0x000003e7

08000da8 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	2318      	movs	r3, #24
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	0018      	movs	r0, r3
 8000db4:	2310      	movs	r3, #16
 8000db6:	001a      	movs	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	f003 fd57 	bl	800486c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f003 fd4f 	bl	800486c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dce:	003b      	movs	r3, r7
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f003 fd48 	bl	800486c <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_TIM22_Init+0x104>)
 8000dde:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <MX_TIM22_Init+0x108>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_TIM22_Init+0x104>)
 8000de4:	221f      	movs	r2, #31
 8000de6:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_TIM22_Init+0x104>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1000-1;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_TIM22_Init+0x104>)
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <MX_TIM22_Init+0x10c>)
 8000df2:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_TIM22_Init+0x104>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_TIM22_Init+0x104>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 f89c 	bl	8003f40 <HAL_TIM_Base_Init>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8000e0c:	f000 f8b8 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	2118      	movs	r1, #24
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0152      	lsls	r2, r2, #5
 8000e18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 f9db 	bl	80041dc <HAL_TIM_ConfigClockSource>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 8000e2a:	f000 f8a9 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f003 f8c5 	bl	8003fc0 <HAL_TIM_PWM_Init>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f8a1 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2110      	movs	r1, #16
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000e4c:	187a      	adds	r2, r7, r1
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f003 fc88 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM22_Init+0xb8>
  {
    Error_Handler();
 8000e5c:	f000 f890 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2260      	movs	r2, #96	; 0x60
 8000e64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e78:	0039      	movs	r1, r7
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f003 f8e6 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM22_Init+0xe4>
  {
    Error_Handler();
 8000e88:	f000 f87a 	bl	8000f80 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim22, TIM_CHANNEL_2);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <MX_TIM22_Init+0x110>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <MX_TIM22_Init+0x104>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f98a 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b00a      	add	sp, #40	; 0x28
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000100 	.word	0x20000100
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	000003e7 	.word	0x000003e7
 8000eb8:	fffff7ff 	.word	0xfffff7ff

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2009      	movs	r0, #9
 8000ee0:	f000 fe94 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee4:	2009      	movs	r0, #9
 8000ee6:	f000 fea6 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	240c      	movs	r4, #12
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	0018      	movs	r0, r3
 8000f04:	2314      	movs	r3, #20
 8000f06:	001a      	movs	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f003 fcaf 	bl	800486c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_GPIO_Init+0x84>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	2200      	movs	r2, #0
 8000f44:	2118      	movs	r1, #24
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 f92e 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000f4c:	0021      	movs	r1, r4
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2218      	movs	r2, #24
 8000f52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2201      	movs	r2, #1
 8000f58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	187a      	adds	r2, r7, r1
 8000f68:	23a0      	movs	r3, #160	; 0xa0
 8000f6a:	05db      	lsls	r3, r3, #23
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 ffa4 	bl	8001ebc <HAL_GPIO_Init>

}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b009      	add	sp, #36	; 0x24
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	40021000 	.word	0x40021000

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_MspInit+0x24>)
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0549      	lsls	r1, r1, #21
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	240c      	movs	r4, #12
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f003 fc50 	bl	800486c <memset>
  if(hadc->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d155      	bne.n	8001082 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0089      	lsls	r1, r1, #2
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 8000fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = LEVEL_Pin|WEIGHT_Pin;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2203      	movs	r2, #3
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2203      	movs	r2, #3
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	193b      	adds	r3, r7, r4
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	193a      	adds	r2, r7, r4
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f000 ff50 	bl	8001ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <HAL_ADC_MspInit+0xe4>)
 8001020:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	0052      	lsls	r2, r2, #1
 8001040:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800104c:	2220      	movs	r2, #32
 800104e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fe09 	bl	8001c70 <HAL_DMA_Init>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8001062:	f7ff ff8d 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800106a:	64da      	str	r2, [r3, #76]	; 0x4c
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_ADC_MspInit+0xe0>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200c      	movs	r0, #12
 8001078:	f000 fdc8 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800107c:	200c      	movs	r0, #12
 800107e:	f000 fdda 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b009      	add	sp, #36	; 0x24
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40012400 	.word	0x40012400
 8001090:	40021000 	.word	0x40021000
 8001094:	200001e4 	.word	0x200001e4
 8001098:	40020008 	.word	0x40020008

0800109c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	240c      	movs	r4, #12
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	2314      	movs	r3, #20
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f003 fbdc 	bl	800486c <memset>
  if(hi2c->Instance==I2C1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_I2C_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d128      	bne.n	8001110 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_I2C_MspInit+0x80>)
 80010c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_I2C_MspInit+0x80>)
 80010c4:	2102      	movs	r1, #2
 80010c6:	430a      	orrs	r2, r1
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_I2C_MspInit+0x80>)
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d6:	0021      	movs	r1, r4
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	22c0      	movs	r2, #192	; 0xc0
 80010dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2212      	movs	r2, #18
 80010e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2203      	movs	r2, #3
 80010ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2201      	movs	r2, #1
 80010f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_I2C_MspInit+0x84>)
 80010fa:	0019      	movs	r1, r3
 80010fc:	0010      	movs	r0, r2
 80010fe:	f000 fedd 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_I2C_MspInit+0x80>)
 8001104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_I2C_MspInit+0x80>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0389      	lsls	r1, r1, #14
 800110c:	430a      	orrs	r2, r1
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b009      	add	sp, #36	; 0x24
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	40005400 	.word	0x40005400
 800111c:	40021000 	.word	0x40021000
 8001120:	50000400 	.word	0x50000400

08001124 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_RTC_MspInit+0x28>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d106      	bne.n	8001144 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_RTC_MspInit+0x2c>)
 8001138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RTC_MspInit+0x2c>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	02c9      	lsls	r1, r1, #11
 8001140:	430a      	orrs	r2, r1
 8001142:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40002800 	.word	0x40002800
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	429a      	cmp	r2, r3
 8001166:	d106      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 800116a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8001174:	e016      	b.n	80011a4 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM6)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_TIM_Base_MspInit+0x5c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d106      	bne.n	800118e <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 8001182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 8001186:	2110      	movs	r1, #16
 8001188:	430a      	orrs	r2, r1
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800118c:	e00a      	b.n	80011a4 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM22)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d105      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 800119a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_TIM_Base_MspInit+0x58>)
 800119e:	2120      	movs	r1, #32
 80011a0:	430a      	orrs	r2, r1
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40001000 	.word	0x40001000
 80011b4:	40011400 	.word	0x40011400

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	2414      	movs	r4, #20
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	0018      	movs	r0, r3
 80011c6:	2314      	movs	r3, #20
 80011c8:	001a      	movs	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	f003 fb4e 	bl	800486c <memset>
  if(htim->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	429a      	cmp	r2, r3
 80011da:	d123      	bne.n	8001224 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 80011de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 80011f4:	0021      	movs	r1, r4
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2220      	movs	r2, #32
 80011fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2202      	movs	r2, #2
 8001200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2205      	movs	r2, #5
 8001212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001214:	187a      	adds	r2, r7, r1
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fe4d 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8001222:	e027      	b.n	8001274 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM22)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_TIM_MspPostInit+0xc8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d122      	bne.n	8001274 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 8001230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_TIM_MspPostInit+0xc4>)
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED5_Pin;
 8001246:	2114      	movs	r1, #20
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2202      	movs	r2, #2
 8001252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2205      	movs	r2, #5
 8001264:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8001266:	187a      	adds	r2, r7, r1
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f000 fe24 	bl	8001ebc <HAL_GPIO_Init>
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b00b      	add	sp, #44	; 0x2c
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40011400 	.word	0x40011400

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f8d6 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <DMA1_Channel1_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fd50 	bl	8001d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	200001e4 	.word	0x200001e4

080012cc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <ADC1_COMP_IRQHandler+0x14>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fa74 	bl	80017c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	2000022c 	.word	0x2000022c

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	18d3      	adds	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f003 fa80 	bl	8004818 <__errno>
 8001318:	0003      	movs	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	2301      	movs	r3, #1
 8001320:	425b      	negs	r3, r3
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	18d2      	adds	r2, r2, r3
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20002000 	.word	0x20002000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000090 	.word	0x20000090
 800134c:	200002a0 	.word	0x200002a0

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800135e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopForever+0x6>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopForever+0xe>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopForever+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001386:	f7ff ffe3 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f003 fa4b 	bl	8004824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fa9a 	bl	80008c6 <main>

08001392 <LoopForever>:

LoopForever:
    b LoopForever
 8001392:	e7fe      	b.n	8001392 <LoopForever>
   ldr   r0, =_estack
 8001394:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013a0:	08005390 	.word	0x08005390
  ldr r2, =_sbss
 80013a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013a8:	2000029c 	.word	0x2000029c

080013ac <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <DMA1_Channel2_3_IRQHandler>
	...

080013b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x3c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Init+0x3c>)
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f811 	bl	80013f0 <HAL_InitTick>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d003      	beq.n	80013da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e001      	b.n	80013de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013da:	f7ff fdd7 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_InitTick+0x5c>)
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0019      	movs	r1, r3
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	0098      	lsls	r0, r3, #2
 8001406:	f7fe fe89 	bl	800011c <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	0019      	movs	r1, r3
 800140e:	0020      	movs	r0, r4
 8001410:	f7fe fe84 	bl	800011c <__udivsi3>
 8001414:	0003      	movs	r3, r0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fc1d 	bl	8001c56 <HAL_SYSTICK_Config>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00f      	b.n	8001444 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d80b      	bhi.n	8001442 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2301      	movs	r3, #1
 800142e:	425b      	negs	r3, r3
 8001430:	2200      	movs	r2, #0
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fbea 	bl	8001c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_InitTick+0x64>)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b003      	add	sp, #12
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	18d2      	adds	r2, r2, r3
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_IncTick+0x20>)
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	20000008 	.word	0x20000008
 8001478:	20000288 	.word	0x20000288

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	20000288 	.word	0x20000288

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	001a      	movs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e159      	b.n	800179e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10a      	bne.n	8001508 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2250      	movs	r2, #80	; 0x50
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fd56 	bl	8000fb4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	2210      	movs	r2, #16
 800150e:	4013      	ands	r3, r2
 8001510:	2b10      	cmp	r3, #16
 8001512:	d005      	beq.n	8001520 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2204      	movs	r2, #4
 800151c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800151e:	d00b      	beq.n	8001538 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	2210      	movs	r2, #16
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2250      	movs	r2, #80	; 0x50
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e132      	b.n	800179e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	4a9a      	ldr	r2, [pc, #616]	; (80017a8 <HAL_ADC_Init+0x2d0>)
 800153e:	4013      	ands	r3, r2
 8001540:	2202      	movs	r2, #2
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2203      	movs	r2, #3
 8001550:	4013      	ands	r3, r2
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_ADC_Init+0x90>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_Init+0x90>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_ADC_Init+0x92>
 8001568:	2300      	movs	r3, #0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d149      	bne.n	8001602 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	429a      	cmp	r2, r3
 8001578:	d00b      	beq.n	8001592 <HAL_ADC_Init+0xba>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	429a      	cmp	r2, r3
 8001584:	d005      	beq.n	8001592 <HAL_ADC_Init+0xba>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	429a      	cmp	r2, r3
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_Init+0xde>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	0892      	lsrs	r2, r2, #2
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6919      	ldr	r1, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	e014      	b.n	80015e0 <HAL_ADC_Init+0x108>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	0892      	lsrs	r2, r2, #2
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_ADC_Init+0x2d4>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_ADC_Init+0x2d4>)
 80015cc:	4978      	ldr	r1, [pc, #480]	; (80017b0 <HAL_ADC_Init+0x2d8>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_ADC_Init+0x2d4>)
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4b74      	ldr	r3, [pc, #464]	; (80017ac <HAL_ADC_Init+0x2d4>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2118      	movs	r1, #24
 80015ec:	438a      	bics	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001602:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_ADC_Init+0x2d4>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b69      	ldr	r3, [pc, #420]	; (80017ac <HAL_ADC_Init+0x2d4>)
 8001608:	496a      	ldr	r1, [pc, #424]	; (80017b4 <HAL_ADC_Init+0x2dc>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800160e:	4b67      	ldr	r3, [pc, #412]	; (80017ac <HAL_ADC_Init+0x2d4>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	065a      	lsls	r2, r3, #25
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_ADC_Init+0x2d4>)
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	4013      	ands	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0549      	lsls	r1, r1, #21
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	495b      	ldr	r1, [pc, #364]	; (80017b8 <HAL_ADC_Init+0x2e0>)
 800164a:	400a      	ands	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d9      	ldr	r1, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d101      	bne.n	8001664 <HAL_ADC_Init+0x18c>
 8001660:	2304      	movs	r3, #4
 8001662:	e000      	b.n	8001666 <HAL_ADC_Init+0x18e>
 8001664:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001666:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2020      	movs	r0, #32
 800166c:	5c1b      	ldrb	r3, [r3, r0]
 800166e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001670:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	202c      	movs	r0, #44	; 0x2c
 8001676:	5c1b      	ldrb	r3, [r3, r0]
 8001678:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800167a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001680:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001688:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001690:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	23c2      	movs	r3, #194	; 0xc2
 80016a0:	33ff      	adds	r3, #255	; 0xff
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d00b      	beq.n	80016be <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68d9      	ldr	r1, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2221      	movs	r2, #33	; 0x21
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d11a      	bne.n	80016fe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2220      	movs	r2, #32
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0249      	lsls	r1, r1, #9
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e00b      	b.n	80016fe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	2220      	movs	r2, #32
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	2201      	movs	r2, #1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11f      	bne.n	8001746 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	492a      	ldr	r1, [pc, #168]	; (80017bc <HAL_ADC_Init+0x2e4>)
 8001712:	400a      	ands	r2, r1
 8001714:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6919      	ldr	r1, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001724:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800172a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	e00e      	b.n	8001764 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2107      	movs	r1, #7
 8001770:	438a      	bics	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6959      	ldr	r1, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2203      	movs	r2, #3
 8001792:	4393      	bics	r3, r2
 8001794:	2201      	movs	r2, #1
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	fffffefd 	.word	0xfffffefd
 80017ac:	40012708 	.word	0x40012708
 80017b0:	ffc3ffff 	.word	0xffc3ffff
 80017b4:	fdffffff 	.word	0xfdffffff
 80017b8:	fffe0219 	.word	0xfffe0219
 80017bc:	fffffc03 	.word	0xfffffc03

080017c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d106      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x24>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d00d      	beq.n	8001800 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2208      	movs	r2, #8
 80017ec:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d154      	bne.n	800189c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2208      	movs	r2, #8
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d14d      	bne.n	800189c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	2210      	movs	r2, #16
 8001806:	4013      	ands	r3, r2
 8001808:	d106      	bne.n	8001818 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4013      	ands	r3, r2
 8001824:	d12e      	bne.n	8001884 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800182c:	2b00      	cmp	r3, #0
 800182e:	d129      	bne.n	8001884 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	4013      	ands	r3, r2
 800183a:	2b08      	cmp	r3, #8
 800183c:	d122      	bne.n	8001884 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2204      	movs	r2, #4
 8001846:	4013      	ands	r3, r2
 8001848:	d110      	bne.n	800186c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	210c      	movs	r1, #12
 8001856:	438a      	bics	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	4a35      	ldr	r2, [pc, #212]	; (8001934 <HAL_ADC_IRQHandler+0x174>)
 8001860:	4013      	ands	r3, r2
 8001862:	2201      	movs	r2, #1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
 800186a:	e00b      	b.n	8001884 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	2220      	movs	r2, #32
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	2201      	movs	r2, #1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f856 	bl	8001938 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d003      	beq.n	800189c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	220c      	movs	r2, #12
 800189a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b80      	cmp	r3, #128	; 0x80
 80018a8:	d115      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x116>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b80      	cmp	r3, #128	; 0x80
 80018b6:	d10e      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	0252      	lsls	r2, r2, #9
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f83d 	bl	8001948 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2210      	movs	r2, #16
 80018de:	4013      	ands	r3, r2
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d123      	bne.n	800192c <HAL_ADC_IRQHandler+0x16c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2210      	movs	r2, #16
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d11c      	bne.n	800192c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001904:	2b01      	cmp	r3, #1
 8001906:	d10d      	bne.n	8001924 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	2202      	movs	r2, #2
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2210      	movs	r2, #16
 800191a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f81a 	bl	8001958 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	601a      	str	r2, [r3, #0]
  }
  
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}
 8001934:	fffffefe 	.word	0xfffffefe

08001938 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2250      	movs	r2, #80	; 0x50
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x18>
 800197c:	2302      	movs	r3, #2
 800197e:	e06c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0xf2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2250      	movs	r2, #80	; 0x50
 8001984:	2101      	movs	r1, #1
 8001986:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	d00b      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	2220      	movs	r2, #32
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2250      	movs	r2, #80	; 0x50
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e056      	b.n	8001a5a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <HAL_ADC_ConfigChannel+0xfc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d028      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	035b      	lsls	r3, r3, #13
 80019c2:	0b5a      	lsrs	r2, r3, #13
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	02db      	lsls	r3, r3, #11
 80019d4:	4013      	ands	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0409      	lsls	r1, r1, #16
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80019e6:	200a      	movs	r0, #10
 80019e8:	f000 f844 	bl	8001a74 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	d02b      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	03c9      	lsls	r1, r1, #15
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e023      	b.n	8001a50 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	035b      	lsls	r3, r3, #13
 8001a14:	0b5b      	lsrs	r3, r3, #13
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	02db      	lsls	r3, r3, #11
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d005      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 8001a32:	490e      	ldr	r1, [pc, #56]	; (8001a6c <HAL_ADC_ConfigChannel+0x104>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	4013      	ands	r3, r2
 8001a42:	d005      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_ADC_ConfigChannel+0x100>)
 8001a4a:	4909      	ldr	r1, [pc, #36]	; (8001a70 <HAL_ADC_ConfigChannel+0x108>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2250      	movs	r2, #80	; 0x50
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	00001001 	.word	0x00001001
 8001a68:	40012708 	.word	0x40012708
 8001a6c:	ff7fffff 	.word	0xff7fffff
 8001a70:	ffbfffff 	.word	0xffbfffff

08001a74 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <ADC_DelayMicroSecond+0x38>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	490b      	ldr	r1, [pc, #44]	; (8001ab0 <ADC_DelayMicroSecond+0x3c>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7fe fb4a 	bl	800011c <__udivsi3>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4353      	muls	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001a92:	e002      	b.n	8001a9a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f9      	bne.n	8001a94 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	000f4240 	.word	0x000f4240

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac6:	d809      	bhi.n	8001adc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	231f      	movs	r3, #31
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_EnableIRQ+0x30>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7f      	cmp	r3, #127	; 0x7f
 8001afc:	d828      	bhi.n	8001b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	33c0      	adds	r3, #192	; 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	; 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	481f      	ldr	r0, [pc, #124]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	430a      	orrs	r2, r1
 8001b48:	33c0      	adds	r3, #192	; 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b4e:	e031      	b.n	8001bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0019      	movs	r1, r3
 8001b58:	230f      	movs	r3, #15
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3306      	adds	r3, #6
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	; 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	3306      	adds	r3, #6
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18c3      	adds	r3, r0, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d301      	bcc.n	8001bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e010      	b.n	8001bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <SysTick_Config+0x44>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	3a01      	subs	r2, #1
 8001be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff ff7c 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x44>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ffaf 	bl	8001bc4 <SysTick_Config>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e061      	b.n	8001d46 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_DMA_Init+0xe0>)
 8001c88:	4694      	mov	ip, r2
 8001c8a:	4463      	add	r3, ip
 8001c8c:	2114      	movs	r1, #20
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7fe fa44 	bl	800011c <__udivsi3>
 8001c94:	0003      	movs	r3, r0
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_DMA_Init+0xe4>)
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2225      	movs	r2, #37	; 0x25
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <HAL_DMA_Init+0xe8>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d018      	beq.n	8001d2e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_DMA_Init+0xec>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	211c      	movs	r1, #28
 8001d06:	400b      	ands	r3, r1
 8001d08:	210f      	movs	r1, #15
 8001d0a:	4099      	lsls	r1, r3
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_DMA_Init+0xec>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_DMA_Init+0xec>)
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	201c      	movs	r0, #28
 8001d24:	4003      	ands	r3, r0
 8001d26:	409a      	lsls	r2, r3
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_DMA_Init+0xec>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2225      	movs	r2, #37	; 0x25
 8001d38:	2101      	movs	r1, #1
 8001d3a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	bffdfff8 	.word	0xbffdfff8
 8001d54:	40020000 	.word	0x40020000
 8001d58:	ffff800f 	.word	0xffff800f
 8001d5c:	400200a8 	.word	0x400200a8

08001d60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	221c      	movs	r2, #28
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2204      	movs	r2, #4
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d026      	beq.n	8001dda <HAL_DMA_IRQHandler+0x7a>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4013      	ands	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2104      	movs	r1, #4
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	221c      	movs	r2, #28
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4091      	lsls	r1, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <HAL_DMA_IRQHandler+0x6e>
 8001dcc:	e071      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	e06b      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	221c      	movs	r2, #28
 8001de0:	4013      	ands	r3, r2
 8001de2:	2202      	movs	r2, #2
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	d02d      	beq.n	8001e4a <HAL_DMA_IRQHandler+0xea>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d029      	beq.n	8001e4a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d10b      	bne.n	8001e1a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2225      	movs	r2, #37	; 0x25
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	221c      	movs	r2, #28
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2102      	movs	r1, #2
 8001e28:	4091      	lsls	r1, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2224      	movs	r2, #36	; 0x24
 8001e32:	2100      	movs	r1, #0
 8001e34:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d039      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	0010      	movs	r0, r2
 8001e46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e48:	e033      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	221c      	movs	r2, #28
 8001e50:	4013      	ands	r3, r2
 8001e52:	2208      	movs	r2, #8
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d02a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x154>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2208      	movs	r2, #8
 8001e62:	4013      	ands	r3, r2
 8001e64:	d026      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	210e      	movs	r1, #14
 8001e72:	438a      	bics	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	221c      	movs	r2, #28
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2101      	movs	r1, #1
 8001e84:	4091      	lsls	r1, r2
 8001e86:	000a      	movs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2225      	movs	r2, #37	; 0x25
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	0010      	movs	r0, r2
 8001eb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46c0      	nop			; (mov r8, r8)
}
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ed2:	e14f      	b.n	8002174 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4091      	lsls	r1, r2
 8001ede:	000a      	movs	r2, r1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d100      	bne.n	8001eec <HAL_GPIO_Init+0x30>
 8001eea:	e140      	b.n	800216e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d005      	beq.n	8001f04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d130      	bne.n	8001f66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	43da      	mvns	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	0013      	movs	r3, r2
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	43da      	mvns	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	2201      	movs	r2, #1
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d017      	beq.n	8001fa2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	43da      	mvns	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d123      	bne.n	8001ff6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	58d3      	ldr	r3, [r2, r3]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2107      	movs	r1, #7
 8001fda:	400b      	ands	r3, r1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	43da      	mvns	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	401a      	ands	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	029b      	lsls	r3, r3, #10
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_GPIO_Init+0x17c>
 8002036:	e09a      	b.n	800216e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x2d4>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	589b      	ldr	r3, [r3, r2]
 8002050:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	43da      	mvns	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	23a0      	movs	r3, #160	; 0xa0
 800206c:	05db      	lsls	r3, r3, #23
 800206e:	429a      	cmp	r2, r3
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x1ea>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_GPIO_Init+0x2d8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x1e6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_GPIO_Init+0x2dc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x1e2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_GPIO_Init+0x2e0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x1de>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a44      	ldr	r2, [pc, #272]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x1da>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x1ec>
 8002096:	2306      	movs	r3, #6
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x1ec>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x1ec>
 80020a6:	2300      	movs	r3, #0
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	2103      	movs	r1, #3
 80020ac:	400a      	ands	r2, r1
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x2d4>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43da      	mvns	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	4013      	ands	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	035b      	lsls	r3, r3, #13
 8002132:	4013      	ands	r3, r2
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43da      	mvns	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	039b      	lsls	r3, r3, #14
 800215c:	4013      	ands	r3, r2
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	40da      	lsrs	r2, r3
 800217c:	1e13      	subs	r3, r2, #0
 800217e:	d000      	beq.n	8002182 <HAL_GPIO_Init+0x2c6>
 8002180:	e6a8      	b.n	8001ed4 <HAL_GPIO_Init+0x18>
  }
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	50000400 	.word	0x50000400
 8002198:	50000800 	.word	0x50000800
 800219c:	50000c00 	.word	0x50000c00
 80021a0:	50001c00 	.word	0x50001c00
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	0008      	movs	r0, r1
 80021b2:	0011      	movs	r1, r2
 80021b4:	1cbb      	adds	r3, r7, #2
 80021b6:	1c02      	adds	r2, r0, #0
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	1c7b      	adds	r3, r7, #1
 80021bc:	1c0a      	adds	r2, r1, #0
 80021be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c0:	1c7b      	adds	r3, r7, #1
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c8:	1cbb      	adds	r3, r7, #2
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80021d2:	1cbb      	adds	r3, r7, #2
 80021d4:	881a      	ldrh	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	000a      	movs	r2, r1
 80021ec:	1cbb      	adds	r3, r7, #2
 80021ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f6:	1cbb      	adds	r3, r7, #2
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	1cb9      	adds	r1, r7, #2
 8002206:	8809      	ldrh	r1, [r1, #0]
 8002208:	400b      	ands	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b004      	add	sp, #16
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e082      	b.n	8002330 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2241      	movs	r2, #65	; 0x41
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe ff2b 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2241      	movs	r2, #65	; 0x41
 800224a:	2124      	movs	r1, #36	; 0x24
 800224c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	438a      	bics	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4934      	ldr	r1, [pc, #208]	; (8002338 <HAL_I2C_Init+0x120>)
 8002268:	400a      	ands	r2, r1
 800226a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4931      	ldr	r1, [pc, #196]	; (800233c <HAL_I2C_Init+0x124>)
 8002278:	400a      	ands	r2, r1
 800227a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0209      	lsls	r1, r1, #8
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e007      	b.n	80022a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2184      	movs	r1, #132	; 0x84
 80022a0:	0209      	lsls	r1, r1, #8
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d104      	bne.n	80022b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	491f      	ldr	r1, [pc, #124]	; (8002340 <HAL_I2C_Init+0x128>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	491a      	ldr	r1, [pc, #104]	; (800233c <HAL_I2C_Init+0x124>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69d9      	ldr	r1, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	2120      	movs	r1, #32
 800231e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2242      	movs	r2, #66	; 0x42
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}
 8002338:	f0ffffff 	.word	0xf0ffffff
 800233c:	ffff7fff 	.word	0xffff7fff
 8002340:	02008000 	.word	0x02008000

08002344 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	000c      	movs	r4, r1
 800234e:	0010      	movs	r0, r2
 8002350:	0019      	movs	r1, r3
 8002352:	230a      	movs	r3, #10
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	1c22      	adds	r2, r4, #0
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	2308      	movs	r3, #8
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	1c02      	adds	r2, r0, #0
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	1c0a      	adds	r2, r1, #0
 8002366:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2241      	movs	r2, #65	; 0x41
 800236c:	5c9b      	ldrb	r3, [r3, r2]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	d000      	beq.n	8002376 <HAL_I2C_Mem_Write+0x32>
 8002374:	e10c      	b.n	8002590 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_I2C_Mem_Write+0x42>
 800237c:	232c      	movs	r3, #44	; 0x2c
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0ff      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	5c9b      	ldrb	r3, [r3, r2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Mem_Write+0x5c>
 800239c:	2302      	movs	r3, #2
 800239e:	e0f8      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	2101      	movs	r1, #1
 80023a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a8:	f7ff f868 	bl	800147c <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	0219      	lsls	r1, r3, #8
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2319      	movs	r3, #25
 80023bc:	2201      	movs	r2, #1
 80023be:	f000 f975 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e3      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2241      	movs	r2, #65	; 0x41
 80023ce:	2121      	movs	r1, #33	; 0x21
 80023d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2242      	movs	r2, #66	; 0x42
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	222c      	movs	r2, #44	; 0x2c
 80023ea:	18ba      	adds	r2, r7, r2
 80023ec:	8812      	ldrh	r2, [r2, #0]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f6:	1dbb      	adds	r3, r7, #6
 80023f8:	881c      	ldrh	r4, [r3, #0]
 80023fa:	2308      	movs	r3, #8
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	230a      	movs	r3, #10
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	8819      	ldrh	r1, [r3, #0]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	0023      	movs	r3, r4
 8002412:	f000 f8c5 	bl	80025a0 <I2C_RequestMemoryWrite>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d005      	beq.n	8002426 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0b5      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d911      	bls.n	8002454 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	045c      	lsls	r4, r3, #17
 8002440:	230a      	movs	r3, #10
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	8819      	ldrh	r1, [r3, #0]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	0023      	movs	r3, r4
 800244e:	f000 fa61 	bl	8002914 <I2C_TransferConfig>
 8002452:	e012      	b.n	800247a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	b2da      	uxtb	r2, r3
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	049c      	lsls	r4, r3, #18
 8002468:	230a      	movs	r3, #10
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	8819      	ldrh	r1, [r3, #0]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	0023      	movs	r3, r4
 8002476:	f000 fa4d 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f952 	bl	800272a <I2C_WaitOnTXISFlagUntilTimeout>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e081      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03a      	beq.n	800253e <HAL_I2C_Mem_Write+0x1fa>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d136      	bne.n	800253e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0013      	movs	r3, r2
 80024da:	2200      	movs	r2, #0
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	f000 f8e5 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e053      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2bff      	cmp	r3, #255	; 0xff
 80024f2:	d911      	bls.n	8002518 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22ff      	movs	r2, #255	; 0xff
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	045c      	lsls	r4, r3, #17
 8002504:	230a      	movs	r3, #10
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	8819      	ldrh	r1, [r3, #0]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0023      	movs	r3, r4
 8002512:	f000 f9ff 	bl	8002914 <I2C_TransferConfig>
 8002516:	e012      	b.n	800253e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	049c      	lsls	r4, r3, #18
 800252c:	230a      	movs	r3, #10
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	0023      	movs	r3, r4
 800253a:	f000 f9eb 	bl	8002914 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d198      	bne.n	800247a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f92a 	bl	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e01a      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2220      	movs	r2, #32
 8002562:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	490b      	ldr	r1, [pc, #44]	; (800259c <HAL_I2C_Mem_Write+0x258>)
 8002570:	400a      	ands	r2, r1
 8002572:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2241      	movs	r2, #65	; 0x41
 8002578:	2120      	movs	r1, #32
 800257a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2242      	movs	r2, #66	; 0x42
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b007      	add	sp, #28
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	fe00e800 	.word	0xfe00e800

080025a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	000c      	movs	r4, r1
 80025aa:	0010      	movs	r0, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	250a      	movs	r5, #10
 80025b0:	197b      	adds	r3, r7, r5
 80025b2:	1c22      	adds	r2, r4, #0
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	2308      	movs	r3, #8
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	1c02      	adds	r2, r0, #0
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	1dbb      	adds	r3, r7, #6
 80025c0:	1c0a      	adds	r2, r1, #0
 80025c2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	045c      	lsls	r4, r3, #17
 80025ce:	197b      	adds	r3, r7, r5
 80025d0:	8819      	ldrh	r1, [r3, #0]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <I2C_RequestMemoryWrite+0xc4>)
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	0023      	movs	r3, r4
 80025da:	f000 f99b 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f8a0 	bl	800272a <I2C_WaitOnTXISFlagUntilTimeout>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e033      	b.n	800265a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fa:	2308      	movs	r3, #8
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
 8002608:	e019      	b.n	800263e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800260a:	2308      	movs	r3, #8
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	6a39      	ldr	r1, [r7, #32]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f881 	bl	800272a <I2C_WaitOnTXISFlagUntilTimeout>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d001      	beq.n	8002630 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e014      	b.n	800265a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002630:	2308      	movs	r3, #8
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	0013      	movs	r3, r2
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	f000 f82e 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d001      	beq.n	8002658 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bdb0      	pop	{r4, r5, r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	80002000 	.word	0x80002000

08002668 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d103      	bne.n	8002686 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	2b01      	cmp	r3, #1
 8002692:	d007      	beq.n	80026a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
  }
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026bc:	e021      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	d01e      	beq.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c4:	f7fe feda 	bl	800147c <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d302      	bcc.n	80026da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	2220      	movs	r2, #32
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2241      	movs	r2, #65	; 0x41
 80026ea:	2120      	movs	r1, #32
 80026ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2242      	movs	r2, #66	; 0x42
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2240      	movs	r2, #64	; 0x40
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	4013      	ands	r3, r2
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	425a      	negs	r2, r3
 8002712:	4153      	adcs	r3, r2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	001a      	movs	r2, r3
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d0ce      	beq.n	80026be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002736:	e02b      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f86e 	bl	8002820 <I2C_IsAcknowledgeFailed>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e029      	b.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3301      	adds	r3, #1
 8002750:	d01e      	beq.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7fe fe93 	bl	800147c <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d113      	bne.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	2220      	movs	r2, #32
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2241      	movs	r2, #65	; 0x41
 8002778:	2120      	movs	r1, #32
 800277a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2242      	movs	r2, #66	; 0x42
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d1cc      	bne.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b4:	e028      	b.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f82f 	bl	8002820 <I2C_IsAcknowledgeFailed>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e026      	b.n	8002818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe fe57 	bl	800147c <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	2220      	movs	r2, #32
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2241      	movs	r2, #65	; 0x41
 80027f0:	2120      	movs	r1, #32
 80027f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2242      	movs	r2, #66	; 0x42
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2220      	movs	r2, #32
 8002810:	4013      	ands	r3, r2
 8002812:	2b20      	cmp	r3, #32
 8002814:	d1cf      	bne.n	80027b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2210      	movs	r2, #16
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d164      	bne.n	8002904 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	049b      	lsls	r3, r3, #18
 8002844:	401a      	ands	r2, r3
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	049b      	lsls	r3, r3, #18
 800284a:	429a      	cmp	r2, r3
 800284c:	d02b      	beq.n	80028a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	01c9      	lsls	r1, r1, #7
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002860:	e021      	b.n	80028a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3301      	adds	r3, #1
 8002866:	d01e      	beq.n	80028a6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe fe08 	bl	800147c <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_IsAcknowledgeFailed+0x5e>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d113      	bne.n	80028a6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	2220      	movs	r2, #32
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2241      	movs	r2, #65	; 0x41
 800288e:	2120      	movs	r1, #32
 8002890:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2242      	movs	r2, #66	; 0x42
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02f      	b.n	8002906 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2220      	movs	r2, #32
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d1d6      	bne.n	8002862 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2220      	movs	r2, #32
 80028c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff fece 	bl	8002668 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	490e      	ldr	r1, [pc, #56]	; (8002910 <I2C_IsAcknowledgeFailed+0xf0>)
 80028d8:	400a      	ands	r2, r1
 80028da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2204      	movs	r2, #4
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2120      	movs	r1, #32
 80028ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2242      	movs	r2, #66	; 0x42
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	fe00e800 	.word	0xfe00e800

08002914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	0008      	movs	r0, r1
 800291e:	0011      	movs	r1, r2
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	240a      	movs	r4, #10
 8002924:	193b      	adds	r3, r7, r4
 8002926:	1c02      	adds	r2, r0, #0
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	2009      	movs	r0, #9
 800292c:	183b      	adds	r3, r7, r0
 800292e:	1c0a      	adds	r2, r1, #0
 8002930:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	0d51      	lsrs	r1, r2, #21
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	00d2      	lsls	r2, r2, #3
 8002940:	400a      	ands	r2, r1
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <I2C_TransferConfig+0x68>)
 8002944:	430a      	orrs	r2, r1
 8002946:	43d2      	mvns	r2, r2
 8002948:	401a      	ands	r2, r3
 800294a:	0011      	movs	r1, r2
 800294c:	193b      	adds	r3, r7, r4
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	059b      	lsls	r3, r3, #22
 8002952:	0d9a      	lsrs	r2, r3, #22
 8002954:	183b      	adds	r3, r7, r0
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	0418      	lsls	r0, r3, #16
 800295a:	23ff      	movs	r3, #255	; 0xff
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	4003      	ands	r3, r0
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b005      	add	sp, #20
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	03ff63ff 	.word	0x03ff63ff

08002980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2241      	movs	r2, #65	; 0x41
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	d138      	bne.n	8002a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	5c9b      	ldrb	r3, [r3, r2]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e032      	b.n	8002a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	2101      	movs	r1, #1
 80029aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2241      	movs	r2, #65	; 0x41
 80029b0:	2124      	movs	r1, #36	; 0x24
 80029b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4911      	ldr	r1, [pc, #68]	; (8002a14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2241      	movs	r2, #65	; 0x41
 80029f8:	2120      	movs	r1, #32
 80029fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	ffffefff 	.word	0xffffefff

08002a18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2241      	movs	r2, #65	; 0x41
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d139      	bne.n	8002aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e033      	b.n	8002aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2240      	movs	r2, #64	; 0x40
 8002a40:	2101      	movs	r1, #1
 8002a42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2241      	movs	r2, #65	; 0x41
 8002a48:	2124      	movs	r1, #36	; 0x24
 8002a4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	438a      	bics	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2241      	movs	r2, #65	; 0x41
 8002a92:	2120      	movs	r1, #32
 8002a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2240      	movs	r2, #64	; 0x40
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	fffff0ff 	.word	0xfffff0ff

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f000 fbaf 	bl	8003222 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac4:	4bcf      	ldr	r3, [pc, #828]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ace:	4bcd      	ldr	r3, [pc, #820]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x36>
 8002ae4:	e07e      	b.n	8002be4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d007      	beq.n	8002afc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d112      	bne.n	8002b18 <HAL_RCC_OscConfig+0x68>
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	025b      	lsls	r3, r3, #9
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d10d      	bne.n	8002b18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4bc1      	ldr	r3, [pc, #772]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	029b      	lsls	r3, r3, #10
 8002b04:	4013      	ands	r3, r2
 8002b06:	d100      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5a>
 8002b08:	e06b      	b.n	8002be2 <HAL_RCC_OscConfig+0x132>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d167      	bne.n	8002be2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f000 fb85 	bl	8003222 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	025b      	lsls	r3, r3, #9
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x84>
 8002b24:	4bb7      	ldr	r3, [pc, #732]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4bb6      	ldr	r3, [pc, #728]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	0249      	lsls	r1, r1, #9
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e027      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	23a0      	movs	r3, #160	; 0xa0
 8002b3a:	02db      	lsls	r3, r3, #11
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10e      	bne.n	8002b5e <HAL_RCC_OscConfig+0xae>
 8002b40:	4bb0      	ldr	r3, [pc, #704]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4baf      	ldr	r3, [pc, #700]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	02c9      	lsls	r1, r1, #11
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	4bad      	ldr	r3, [pc, #692]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4bac      	ldr	r3, [pc, #688]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0249      	lsls	r1, r1, #9
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e012      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b5e:	4ba9      	ldr	r3, [pc, #676]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4ba8      	ldr	r3, [pc, #672]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b64:	49a8      	ldr	r1, [pc, #672]	; (8002e08 <HAL_RCC_OscConfig+0x358>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	4ba6      	ldr	r3, [pc, #664]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	025b      	lsls	r3, r3, #9
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4ba2      	ldr	r3, [pc, #648]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4ba1      	ldr	r3, [pc, #644]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002b7e:	49a3      	ldr	r1, [pc, #652]	; (8002e0c <HAL_RCC_OscConfig+0x35c>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fc76 	bl	800147c <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b94:	e009      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b96:	f7fe fc71 	bl	800147c <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 fb3c 	bl	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002baa:	4b96      	ldr	r3, [pc, #600]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	029b      	lsls	r3, r3, #10
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCC_OscConfig+0xe6>
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc60 	bl	800147c <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fc5b 	bl	800147c <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e326      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd4:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x112>
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d100      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x140>
 8002bee:	e08b      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d13e      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1d0>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d13b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_RCC_OscConfig+0x16c>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e302      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b79      	ldr	r3, [pc, #484]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x360>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	021a      	lsls	r2, r3, #8
 8002c2c:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c32:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2209      	movs	r2, #9
 8002c38:	4393      	bics	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	4b71      	ldr	r3, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c44:	f000 fc40 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8002c48:	0001      	movs	r1, r0
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	220f      	movs	r2, #15
 8002c52:	4013      	ands	r3, r2
 8002c54:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x364>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	000a      	movs	r2, r1
 8002c5a:	40da      	lsrs	r2, r3
 8002c5c:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x368>)
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c60:	4b6e      	ldr	r3, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x36c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2513      	movs	r5, #19
 8002c66:	197c      	adds	r4, r7, r5
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fbc1 	bl	80013f0 <HAL_InitTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c72:	197b      	adds	r3, r7, r5
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d046      	beq.n	8002d08 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	e2d0      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d027      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2209      	movs	r2, #9
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fbf0 	bl	800147c <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fbeb 	bl	800147c <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e2b6      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d0f1      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x360>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	e018      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	438a      	bics	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fbcb 	bl	800147c <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fbc6 	bl	800147c <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e291      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	d1f1      	bne.n	8002cec <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d100      	bne.n	8002d14 <HAL_RCC_OscConfig+0x264>
 8002d12:	e0a1      	b.n	8002e58 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d140      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x282>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e277      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x370>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	0a19      	lsrs	r1, r3, #8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	061a      	lsls	r2, r3, #24
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	3301      	adds	r3, #1
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d68:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	210f      	movs	r1, #15
 8002d70:	400b      	ands	r3, r1
 8002d72:	4928      	ldr	r1, [pc, #160]	; (8002e14 <HAL_RCC_OscConfig+0x364>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x368>)
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x36c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2513      	movs	r5, #19
 8002d82:	197c      	adds	r4, r7, r5
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fe fb33 	bl	80013f0 <HAL_InitTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d8e:	197b      	adds	r3, r7, r5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d060      	beq.n	8002e58 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002d96:	197b      	adds	r3, r7, r5
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	e242      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03f      	beq.n	8002e24 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0049      	lsls	r1, r1, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fb63 	bl	800147c <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fb5e 	bl	800147c <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e229      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x370>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	0a19      	lsrs	r1, r3, #8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	061a      	lsls	r2, r3, #24
 8002dfc:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <HAL_RCC_OscConfig+0x354>)
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e029      	b.n	8002e58 <HAL_RCC_OscConfig+0x3a8>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	fffeffff 	.word	0xfffeffff
 8002e0c:	fffbffff 	.word	0xfffbffff
 8002e10:	ffffe0ff 	.word	0xffffe0ff
 8002e14:	08005334 	.word	0x08005334
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e24:	4bbd      	ldr	r3, [pc, #756]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4bbc      	ldr	r3, [pc, #752]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e2a:	49bd      	ldr	r1, [pc, #756]	; (8003120 <HAL_RCC_OscConfig+0x670>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fb24 	bl	800147c <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fb1f 	bl	800147c <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1ea      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e4c:	4bb3      	ldr	r3, [pc, #716]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4bac      	ldr	r3, [pc, #688]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e6e:	4bab      	ldr	r3, [pc, #684]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fb01 	bl	800147c <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fafc 	bl	800147c <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1c7      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e92:	4ba2      	ldr	r3, [pc, #648]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d0f1      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3d0>
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b9f      	ldr	r3, [pc, #636]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea2:	4b9e      	ldr	r3, [pc, #632]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fae7 	bl	800147c <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fae2 	bl	800147c <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1ad      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec6:	4b95      	ldr	r3, [pc, #596]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d1f1      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d100      	bne.n	8002edc <HAL_RCC_OscConfig+0x42c>
 8002eda:	e0ae      	b.n	800303a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002edc:	2027      	movs	r0, #39	; 0x27
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	055b      	lsls	r3, r3, #21
 8002eec:	4013      	ands	r3, r2
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef4:	4b89      	ldr	r3, [pc, #548]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0549      	lsls	r1, r1, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <HAL_RCC_OscConfig+0x674>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d11a      	bne.n	8002f46 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x674>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b83      	ldr	r3, [pc, #524]	; (8003124 <HAL_RCC_OscConfig+0x674>)
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	0049      	lsls	r1, r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe faad 	bl	800147c <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe faa8 	bl	800147c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e173      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x674>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4b2>
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f56:	4b71      	ldr	r3, [pc, #452]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0049      	lsls	r1, r1, #1
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f60:	e031      	b.n	8002fc6 <HAL_RCC_OscConfig+0x516>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4d4>
 8002f6a:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f6e:	4b6b      	ldr	r3, [pc, #428]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f70:	496b      	ldr	r1, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x670>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	651a      	str	r2, [r3, #80]	; 0x50
 8002f76:	4b69      	ldr	r3, [pc, #420]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7a:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f7c:	496a      	ldr	r1, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x678>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50
 8002f82:	e020      	b.n	8002fc6 <HAL_RCC_OscConfig+0x516>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	23a0      	movs	r3, #160	; 0xa0
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d10e      	bne.n	8002fae <HAL_RCC_OscConfig+0x4fe>
 8002f90:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	00c9      	lsls	r1, r1, #3
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa2:	4b5e      	ldr	r3, [pc, #376]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	0049      	lsls	r1, r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	651a      	str	r2, [r3, #80]	; 0x50
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x516>
 8002fae:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb2:	4b5a      	ldr	r3, [pc, #360]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fb4:	495a      	ldr	r1, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x670>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002fba:	4b58      	ldr	r3, [pc, #352]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fbe:	4b57      	ldr	r3, [pc, #348]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fc0:	4959      	ldr	r1, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x678>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d015      	beq.n	8002ffa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fe fa55 	bl	800147c <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fd6:	e009      	b.n	8002fec <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fa50 	bl	800147c <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e11a      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8002fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x528>
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fa3f 	bl	800147c <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003002:	e009      	b.n	8003018 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fa3a 	bl	800147c <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	4a47      	ldr	r2, [pc, #284]	; (800312c <HAL_RCC_OscConfig+0x67c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e104      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003018:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 800301a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d1ef      	bne.n	8003004 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003024:	2327      	movs	r3, #39	; 0x27
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d105      	bne.n	800303a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8003034:	493e      	ldr	r1, [pc, #248]	; (8003130 <HAL_RCC_OscConfig+0x680>)
 8003036:	400a      	ands	r2, r1
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2220      	movs	r2, #32
 8003040:	4013      	ands	r3, r2
 8003042:	d049      	beq.n	80030d8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d026      	beq.n	800309a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8003052:	2101      	movs	r1, #1
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 800305a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 800305e:	2101      	movs	r1, #1
 8003060:	430a      	orrs	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	; 0x34
 8003064:	4b33      	ldr	r3, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x684>)
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_RCC_OscConfig+0x684>)
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	0189      	lsls	r1, r1, #6
 800306e:	430a      	orrs	r2, r1
 8003070:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fa03 	bl	800147c <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800307c:	f7fe f9fe 	bl	800147c <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0c9      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800308e:	4b23      	ldr	r3, [pc, #140]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_OscConfig+0x5cc>
 8003098:	e01e      	b.n	80030d8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	438a      	bics	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_RCC_OscConfig+0x684>)
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <HAL_RCC_OscConfig+0x684>)
 80030ac:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_OscConfig+0x688>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe f9e3 	bl	800147c <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030bc:	f7fe f9de 	bl	800147c <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0a9      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d1f1      	bne.n	80030bc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <HAL_RCC_OscConfig+0x632>
 80030e0:	e09e      	b.n	8003220 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_OscConfig+0x63a>
 80030e8:	e077      	b.n	80031da <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d158      	bne.n	80031a4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_OscConfig+0x66c>)
 80030f8:	4910      	ldr	r1, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x68c>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f9bd 	bl	800147c <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003106:	e01b      	b.n	8003140 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f9b8 	bl	800147c <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d914      	bls.n	8003140 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e083      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	40021000 	.word	0x40021000
 8003120:	fffffeff 	.word	0xfffffeff
 8003124:	40007000 	.word	0x40007000
 8003128:	fffffbff 	.word	0xfffffbff
 800312c:	00001388 	.word	0x00001388
 8003130:	efffffff 	.word	0xefffffff
 8003134:	40010000 	.word	0x40010000
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003140:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	049b      	lsls	r3, r3, #18
 8003148:	4013      	ands	r3, r2
 800314a:	d1dd      	bne.n	8003108 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x780>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	431a      	orrs	r2, r3
 8003166:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316c:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	0449      	lsls	r1, r1, #17
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe f97f 	bl	800147c <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe f97a 	bl	800147c <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e045      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	049b      	lsls	r3, r3, #18
 800319e:	4013      	ands	r3, r2
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x6d4>
 80031a2:	e03d      	b.n	8003220 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCC_OscConfig+0x784>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe f964 	bl	800147c <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe f95f 	bl	800147c <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e02a      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	049b      	lsls	r3, r3, #18
 80031d4:	4013      	ands	r3, r2
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x70a>
 80031d8:	e022      	b.n	8003220 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e01d      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_OscConfig+0x77c>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	025b      	lsls	r3, r3, #9
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10f      	bne.n	800321c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	23f0      	movs	r3, #240	; 0xf0
 8003200:	039b      	lsls	r3, r3, #14
 8003202:	401a      	ands	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b00a      	add	sp, #40	; 0x28
 8003228:	bdb0      	pop	{r4, r5, r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	ff02ffff 	.word	0xff02ffff
 8003234:	feffffff 	.word	0xfeffffff

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e128      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b96      	ldr	r3, [pc, #600]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d91e      	bls.n	8003298 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b93      	ldr	r3, [pc, #588]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	4393      	bics	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	4b90      	ldr	r3, [pc, #576]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800326c:	f7fe f906 	bl	800147c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003274:	e009      	b.n	800328a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003276:	f7fe f901 	bl	800147c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	4a8a      	ldr	r2, [pc, #552]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e109      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b87      	ldr	r3, [pc, #540]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a2:	4b83      	ldr	r3, [pc, #524]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	22f0      	movs	r2, #240	; 0xf0
 80032a8:	4393      	bics	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b7f      	ldr	r3, [pc, #508]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d100      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x8a>
 80032c0:	e089      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ca:	4b79      	ldr	r3, [pc, #484]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	4013      	ands	r3, r2
 80032d4:	d120      	bne.n	8003318 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e1      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	049b      	lsls	r3, r3, #18
 80032ea:	4013      	ands	r3, r2
 80032ec:	d114      	bne.n	8003318 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0d5      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032fa:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2204      	movs	r2, #4
 8003300:	4013      	ands	r3, r2
 8003302:	d109      	bne.n	8003318 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ca      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003308:	4b69      	ldr	r3, [pc, #420]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0c2      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003318:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2203      	movs	r2, #3
 800331e:	4393      	bics	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fe f8a6 	bl	800147c <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d111      	bne.n	8003360 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	e009      	b.n	8003352 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fe f89d 	bl	800147c <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	4a58      	ldr	r2, [pc, #352]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0a5      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003352:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	220c      	movs	r2, #12
 8003358:	4013      	ands	r3, r2
 800335a:	2b08      	cmp	r3, #8
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_ClockConfig+0x106>
 800335e:	e03a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d111      	bne.n	800338c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	e009      	b.n	800337e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f7fe f887 	bl	800147c <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	4a4d      	ldr	r2, [pc, #308]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e08f      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337e:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	220c      	movs	r2, #12
 8003384:	4013      	ands	r3, r2
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_ClockConfig+0x132>
 800338a:	e024      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d11b      	bne.n	80033cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe f871 	bl	800147c <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a42      	ldr	r2, [pc, #264]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e079      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	220c      	movs	r2, #12
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d1ef      	bne.n	8003396 <HAL_RCC_ClockConfig+0x15e>
 80033b6:	e00e      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fe f860 	bl	800147c <HAL_GetTick>
 80033bc:	0002      	movs	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e068      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033cc:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	220c      	movs	r2, #12
 80033d2:	4013      	ands	r3, r2
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d6:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d21e      	bcs.n	8003422 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033f6:	f7fe f841 	bl	800147c <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	e009      	b.n	8003414 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fe f83c 	bl	800147c <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	4a28      	ldr	r2, [pc, #160]	; (80034ac <HAL_RCC_ClockConfig+0x274>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e044      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003414:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCC_ClockConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2204      	movs	r2, #4
 8003428:	4013      	ands	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_RCC_ClockConfig+0x27c>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2208      	movs	r2, #8
 8003446:	4013      	ands	r3, r2
 8003448:	d00a      	beq.n	8003460 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_RCC_ClockConfig+0x280>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	00da      	lsls	r2, r3, #3
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003460:	f000 f832 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003464:	0001      	movs	r1, r0
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x278>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	220f      	movs	r2, #15
 800346e:	4013      	ands	r3, r2
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x284>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	000a      	movs	r2, r1
 8003476:	40da      	lsrs	r2, r3
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_ClockConfig+0x288>)
 800347a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x28c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	250b      	movs	r5, #11
 8003482:	197c      	adds	r4, r7, r5
 8003484:	0018      	movs	r0, r3
 8003486:	f7fd ffb3 	bl	80013f0 <HAL_InitTick>
 800348a:	0003      	movs	r3, r0
 800348c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800348e:	197b      	adds	r3, r7, r5
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003496:	197b      	adds	r3, r7, r5
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	e000      	b.n	800349e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bdb0      	pop	{r4, r5, r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40022000 	.word	0x40022000
 80034ac:	00001388 	.word	0x00001388
 80034b0:	40021000 	.word	0x40021000
 80034b4:	fffff8ff 	.word	0xfffff8ff
 80034b8:	ffffc7ff 	.word	0xffffc7ff
 80034bc:	08005334 	.word	0x08005334
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b08e      	sub	sp, #56	; 0x38
 80034cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034ce:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_GetSysClockFreq+0x138>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d6:	230c      	movs	r3, #12
 80034d8:	4013      	ands	r3, r2
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d014      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 80034de:	d900      	bls.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80034e0:	e07b      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x112>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x24>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d00b      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ea:	e076      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034ec:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_GetSysClockFreq+0x138>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	4013      	ands	r3, r2
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034fa:	e07c      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <HAL_RCC_GetSysClockFreq+0x140>)
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003500:	e079      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_RCC_GetSysClockFreq+0x144>)
 8003504:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003506:	e076      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	0c9a      	lsrs	r2, r3, #18
 800350c:	230f      	movs	r3, #15
 800350e:	401a      	ands	r2, r3
 8003510:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <HAL_RCC_GetSysClockFreq+0x148>)
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	0d9a      	lsrs	r2, r3, #22
 800351a:	2303      	movs	r3, #3
 800351c:	4013      	ands	r3, r2
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_GetSysClockFreq+0x138>)
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	025b      	lsls	r3, r3, #9
 800352a:	4013      	ands	r3, r2
 800352c:	d01a      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	4a35      	ldr	r2, [pc, #212]	; (800360c <HAL_RCC_GetSysClockFreq+0x144>)
 8003538:	2300      	movs	r3, #0
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	69f9      	ldr	r1, [r7, #28]
 800353e:	f7fc fe99 	bl	8000274 <__aeabi_lmul>
 8003542:	0002      	movs	r2, r0
 8003544:	000b      	movs	r3, r1
 8003546:	0010      	movs	r0, r2
 8003548:	0019      	movs	r1, r3
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f7fc fe6d 	bl	8000234 <__aeabi_uldivmod>
 800355a:	0002      	movs	r2, r0
 800355c:	000b      	movs	r3, r1
 800355e:	0013      	movs	r3, r2
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
 8003562:	e037      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_RCC_GetSysClockFreq+0x138>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2210      	movs	r2, #16
 800356a:	4013      	ands	r3, r2
 800356c:	d01a      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003578:	2300      	movs	r3, #0
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	f7fc fe79 	bl	8000274 <__aeabi_lmul>
 8003582:	0002      	movs	r2, r0
 8003584:	000b      	movs	r3, r1
 8003586:	0010      	movs	r0, r2
 8003588:	0019      	movs	r1, r3
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f7fc fe4d 	bl	8000234 <__aeabi_uldivmod>
 800359a:	0002      	movs	r2, r0
 800359c:	000b      	movs	r3, r1
 800359e:	0013      	movs	r3, r2
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	e017      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	0018      	movs	r0, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	0019      	movs	r1, r3
 80035ac:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_RCC_GetSysClockFreq+0x140>)
 80035ae:	2300      	movs	r3, #0
 80035b0:	f7fc fe60 	bl	8000274 <__aeabi_lmul>
 80035b4:	0002      	movs	r2, r0
 80035b6:	000b      	movs	r3, r1
 80035b8:	0010      	movs	r0, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	001c      	movs	r4, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	001d      	movs	r5, r3
 80035c4:	0022      	movs	r2, r4
 80035c6:	002b      	movs	r3, r5
 80035c8:	f7fc fe34 	bl	8000234 <__aeabi_uldivmod>
 80035cc:	0002      	movs	r2, r0
 80035ce:	000b      	movs	r3, r1
 80035d0:	0013      	movs	r3, r2
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035d8:	e00d      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_GetSysClockFreq+0x138>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0b5b      	lsrs	r3, r3, #13
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	3301      	adds	r3, #1
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	0212      	lsls	r2, r2, #8
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b00e      	add	sp, #56	; 0x38
 80035fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	003d0900 	.word	0x003d0900
 8003608:	00f42400 	.word	0x00f42400
 800360c:	007a1200 	.word	0x007a1200
 8003610:	08005344 	.word	0x08005344

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800361c:	2017      	movs	r0, #23
 800361e:	183b      	adds	r3, r7, r0
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800362e:	e0c2      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003630:	4b90      	ldr	r3, [pc, #576]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	055b      	lsls	r3, r3, #21
 8003638:	4013      	ands	r3, r2
 800363a:	d109      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0549      	lsls	r1, r1, #21
 8003646:	430a      	orrs	r2, r1
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800364a:	183b      	adds	r3, r7, r0
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b89      	ldr	r3, [pc, #548]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4013      	ands	r3, r2
 800365a:	d11a      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b86      	ldr	r3, [pc, #536]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fd ff07 	bl	800147c <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fd ff02 	bl	800147c <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0f2      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003692:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	039b      	lsls	r3, r3, #14
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	23c0      	movs	r3, #192	; 0xc0
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	401a      	ands	r2, r3
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036c0:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	401a      	ands	r2, r3
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0ca      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036da:	23c0      	movs	r3, #192	; 0xc0
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	; 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	4013      	ands	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d033      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2220      	movs	r2, #32
 80036fe:	4013      	ands	r3, r2
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003710:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0309      	lsls	r1, r1, #12
 8003716:	430a      	orrs	r2, r1
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800371e:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4957      	ldr	r1, [pc, #348]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003722:	400a      	ands	r2, r1
 8003724:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003726:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fea1 	bl	800147c <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fd fe9c 	bl	800147c <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e08b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003754:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4013      	ands	r3, r2
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	23c0      	movs	r3, #192	; 0xc0
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	401a      	ands	r2, r3
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	429a      	cmp	r2, r3
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003772:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a44      	ldr	r2, [pc, #272]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	039b      	lsls	r3, r3, #14
 8003784:	401a      	ands	r2, r3
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	401a      	ands	r2, r3
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379c:	430a      	orrs	r2, r1
 800379e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a0:	2317      	movs	r3, #23
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	4936      	ldr	r1, [pc, #216]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2203      	movs	r2, #3
 80037c6:	4393      	bics	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2202      	movs	r2, #2
 80037da:	4013      	ands	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	220c      	movs	r2, #12
 80037e4:	4393      	bics	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	430a      	orrs	r2, r1
 80037f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2204      	movs	r2, #4
 80037f8:	4013      	ands	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	430a      	orrs	r2, r1
 800380e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2208      	movs	r2, #8
 8003816:	4013      	ands	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003820:	4013      	ands	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	430a      	orrs	r2, r1
 800382c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	4013      	ands	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	430a      	orrs	r2, r1
 800384a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	4013      	ands	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	430a      	orrs	r2, r1
 8003868:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	fffcffff 	.word	0xfffcffff
 8003880:	fff7ffff 	.word	0xfff7ffff
 8003884:	00001388 	.word	0x00001388
 8003888:	ffcfffff 	.word	0xffcfffff
 800388c:	efffffff 	.word	0xefffffff
 8003890:	fffff3ff 	.word	0xfffff3ff
 8003894:	ffffcfff 	.word	0xffffcfff
 8003898:	fbffffff 	.word	0xfbffffff
 800389c:	fff3ffff 	.word	0xfff3ffff

080038a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e08e      	b.n	80039d0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	2100      	movs	r1, #0
 80038c4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd fc2b 	bl	8001124 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2221      	movs	r2, #33	; 0x21
 80038d2:	2102      	movs	r1, #2
 80038d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	22ca      	movs	r2, #202	; 0xca
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2253      	movs	r2, #83	; 0x53
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 faba 	bl	8003e62 <RTC_EnterInitMode>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2221      	movs	r2, #33	; 0x21
 80038fe:	2104      	movs	r1, #4
 8003900:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e064      	b.n	80039d0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4931      	ldr	r1, [pc, #196]	; (80039d8 <HAL_RTC_Init+0x138>)
 8003912:	400a      	ands	r2, r1
 8003914:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6919      	ldr	r1, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	438a      	bics	r2, r1
 8003960:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2103      	movs	r1, #3
 800396e:	438a      	bics	r2, r1
 8003970:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2220      	movs	r2, #32
 8003992:	4013      	ands	r3, r2
 8003994:	d113      	bne.n	80039be <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 fa3b 	bl	8003e14 <HAL_RTC_WaitForSynchro>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d00d      	beq.n	80039be <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2221      	movs	r2, #33	; 0x21
 80039ae:	2104      	movs	r1, #4
 80039b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e008      	b.n	80039d0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2221      	movs	r2, #33	; 0x21
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
  }
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	ff8fffbf 	.word	0xff8fffbf

080039dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_RTC_SetTime+0x1a>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0ad      	b.n	8003b52 <HAL_RTC_SetTime+0x176>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	2102      	movs	r1, #2
 8003a04:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d125      	bne.n	8003a58 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	4013      	ands	r3, r2
 8003a16:	d102      	bne.n	8003a1e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fa47 	bl	8003eb6 <RTC_ByteToBcd2>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 fa40 	bl	8003eb6 <RTC_ByteToBcd2>
 8003a36:	0003      	movs	r3, r0
 8003a38:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a3a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	789b      	ldrb	r3, [r3, #2]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 fa38 	bl	8003eb6 <RTC_ByteToBcd2>
 8003a46:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a48:	0022      	movs	r2, r4
 8003a4a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	78db      	ldrb	r3, [r3, #3]
 8003a50:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e017      	b.n	8003a88 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	4013      	ands	r3, r2
 8003a62:	d102      	bne.n	8003a6a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a76:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	22ca      	movs	r2, #202	; 0xca
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2253      	movs	r2, #83	; 0x53
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 f9e1 	bl	8003e62 <RTC_EnterInitMode>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	22ff      	movs	r2, #255	; 0xff
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2221      	movs	r2, #33	; 0x21
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e048      	b.n	8003b52 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <HAL_RTC_SetTime+0x180>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4922      	ldr	r1, [pc, #136]	; (8003b60 <HAL_RTC_SetTime+0x184>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	438a      	bics	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d113      	bne.n	8003b38 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f97e 	bl	8003e14 <HAL_RTC_WaitForSynchro>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2221      	movs	r2, #33	; 0x21
 8003b28:	2104      	movs	r1, #4
 8003b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e00c      	b.n	8003b52 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	22ff      	movs	r2, #255	; 0xff
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2221      	movs	r2, #33	; 0x21
 8003b44:	2101      	movs	r1, #1
 8003b46:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
  }
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b007      	add	sp, #28
 8003b58:	bd90      	pop	{r4, r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	007f7f7f 	.word	0x007f7f7f
 8003b60:	fffbffff 	.word	0xfffbffff

08003b64 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	045b      	lsls	r3, r3, #17
 8003b82:	0c5a      	lsrs	r2, r3, #17
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <HAL_RTC_GetTime+0xb4>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	223f      	movs	r2, #63	; 0x3f
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	227f      	movs	r2, #127	; 0x7f
 8003bac:	4013      	ands	r3, r2
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	227f      	movs	r2, #127	; 0x7f
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11a      	bne.n	8003c0e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 f992 	bl	8003f06 <RTC_Bcd2ToByte>
 8003be2:	0003      	movs	r3, r0
 8003be4:	001a      	movs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 f989 	bl	8003f06 <RTC_Bcd2ToByte>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	789b      	ldrb	r3, [r3, #2]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f980 	bl	8003f06 <RTC_Bcd2ToByte>
 8003c06:	0003      	movs	r3, r0
 8003c08:	001a      	movs	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b006      	add	sp, #24
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	007f7f7f 	.word	0x007f7f7f

08003c1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_RTC_SetDate+0x1a>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e099      	b.n	8003d6a <HAL_RTC_SetDate+0x14e>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	2102      	movs	r1, #2
 8003c44:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10e      	bne.n	8003c6a <HAL_RTC_SetDate+0x4e>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	001a      	movs	r2, r3
 8003c52:	2310      	movs	r3, #16
 8003c54:	4013      	ands	r3, r2
 8003c56:	d008      	beq.n	8003c6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4393      	bics	r3, r2
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	330a      	adds	r3, #10
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11c      	bne.n	8003caa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	78db      	ldrb	r3, [r3, #3]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 f91e 	bl	8003eb6 <RTC_ByteToBcd2>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 f917 	bl	8003eb6 <RTC_ByteToBcd2>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	789b      	ldrb	r3, [r3, #2]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 f90f 	bl	8003eb6 <RTC_ByteToBcd2>
 8003c98:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c9a:	0022      	movs	r2, r4
 8003c9c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e00e      	b.n	8003cc8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	78db      	ldrb	r3, [r3, #3]
 8003cae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003cb6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003cbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	22ca      	movs	r2, #202	; 0xca
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2253      	movs	r2, #83	; 0x53
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f8c1 	bl	8003e62 <RTC_EnterInitMode>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e034      	b.n	8003d6a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	491b      	ldr	r1, [pc, #108]	; (8003d74 <HAL_RTC_SetDate+0x158>)
 8003d08:	400a      	ands	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	438a      	bics	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2220      	movs	r2, #32
 8003d24:	4013      	ands	r3, r2
 8003d26:	d113      	bne.n	8003d50 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f872 	bl	8003e14 <HAL_RTC_WaitForSynchro>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2221      	movs	r2, #33	; 0x21
 8003d40:	2104      	movs	r1, #4
 8003d42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e00c      	b.n	8003d6a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2221      	movs	r2, #33	; 0x21
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
  }
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b007      	add	sp, #28
 8003d70:	bd90      	pop	{r4, r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	00ffff3f 	.word	0x00ffff3f

08003d78 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_RTC_GetDate+0x98>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	221f      	movs	r2, #31
 8003da2:	4013      	ands	r3, r2
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	223f      	movs	r2, #63	; 0x3f
 8003db0:	4013      	ands	r3, r2
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	0b5b      	lsrs	r3, r3, #13
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2207      	movs	r2, #7
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11a      	bne.n	8003e04 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 f897 	bl	8003f06 <RTC_Bcd2ToByte>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	001a      	movs	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f88e 	bl	8003f06 <RTC_Bcd2ToByte>
 8003dea:	0003      	movs	r3, r0
 8003dec:	001a      	movs	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	789b      	ldrb	r3, [r3, #2]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f885 	bl	8003f06 <RTC_Bcd2ToByte>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	001a      	movs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b006      	add	sp, #24
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	00ffff3f 	.word	0x00ffff3f

08003e14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	21a0      	movs	r1, #160	; 0xa0
 8003e28:	438a      	bics	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003e2c:	f7fd fb26 	bl	800147c <HAL_GetTick>
 8003e30:	0003      	movs	r3, r0
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e34:	e00a      	b.n	8003e4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e36:	f7fd fb21 	bl	800147c <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	23fa      	movs	r3, #250	; 0xfa
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d901      	bls.n	8003e4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	4013      	ands	r3, r2
 8003e56:	d0ee      	beq.n	8003e36 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2240      	movs	r2, #64	; 0x40
 8003e72:	4013      	ands	r3, r2
 8003e74:	d11a      	bne.n	8003eac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4252      	negs	r2, r2
 8003e7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e80:	f7fd fafc 	bl	800147c <HAL_GetTick>
 8003e84:	0003      	movs	r3, r0
 8003e86:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e88:	e00a      	b.n	8003ea0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e8a:	f7fd faf7 	bl	800147c <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	23fa      	movs	r3, #250	; 0xfa
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d901      	bls.n	8003ea0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d0ee      	beq.n	8003e8a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003ec6:	230b      	movs	r3, #11
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	1dfa      	adds	r2, r7, #7
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003ed0:	e008      	b.n	8003ee4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003ed8:	220b      	movs	r2, #11
 8003eda:	18bb      	adds	r3, r7, r2
 8003edc:	18ba      	adds	r2, r7, r2
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	3a0a      	subs	r2, #10
 8003ee2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003ee4:	210b      	movs	r1, #11
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b09      	cmp	r3, #9
 8003eec:	d8f1      	bhi.n	8003ed2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	b2db      	uxtb	r3, r3
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	210f      	movs	r1, #15
 8003f30:	400b      	ands	r3, r1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b004      	add	sp, #16
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e032      	b.n	8003fb8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2239      	movs	r2, #57	; 0x39
 8003f56:	5c9b      	ldrb	r3, [r3, r2]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2238      	movs	r2, #56	; 0x38
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fd f8f3 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2239      	movs	r2, #57	; 0x39
 8003f72:	2102      	movs	r1, #2
 8003f74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	0019      	movs	r1, r3
 8003f80:	0010      	movs	r0, r2
 8003f82:	f000 f9ff 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	223e      	movs	r2, #62	; 0x3e
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	223a      	movs	r2, #58	; 0x3a
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	223b      	movs	r2, #59	; 0x3b
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223c      	movs	r2, #60	; 0x3c
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223d      	movs	r2, #61	; 0x3d
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2239      	movs	r2, #57	; 0x39
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e032      	b.n	8004038 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2239      	movs	r2, #57	; 0x39
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2238      	movs	r2, #56	; 0x38
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f829 	bl	8004040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2239      	movs	r2, #57	; 0x39
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	0019      	movs	r1, r3
 8004000:	0010      	movs	r0, r2
 8004002:	f000 f9bf 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223e      	movs	r2, #62	; 0x3e
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223a      	movs	r2, #58	; 0x3a
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223b      	movs	r2, #59	; 0x3b
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223c      	movs	r2, #60	; 0x3c
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	223d      	movs	r2, #61	; 0x3d
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2239      	movs	r2, #57	; 0x39
 8004032:	2101      	movs	r1, #1
 8004034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2317      	movs	r3, #23
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2238      	movs	r2, #56	; 0x38
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x22>
 800406e:	2302      	movs	r3, #2
 8004070:	e0ad      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2238      	movs	r2, #56	; 0x38
 8004076:	2101      	movs	r1, #1
 8004078:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b0c      	cmp	r3, #12
 800407e:	d100      	bne.n	8004082 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004080:	e076      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d900      	bls.n	800408a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004088:	e095      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d04e      	beq.n	800412e <HAL_TIM_PWM_ConfigChannel+0xde>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d900      	bls.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004096:	e08e      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d021      	beq.n	80040e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80040a4:	e087      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 f9bc 	bl	800442c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2108      	movs	r1, #8
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2104      	movs	r1, #4
 80040d0:	438a      	bics	r2, r1
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	619a      	str	r2, [r3, #24]
      break;
 80040e6:	e06b      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f9d7 	bl	80044a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0109      	lsls	r1, r1, #4
 8004104:	430a      	orrs	r2, r1
 8004106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4931      	ldr	r1, [pc, #196]	; (80041d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004114:	400a      	ands	r2, r1
 8004116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6999      	ldr	r1, [r3, #24]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	619a      	str	r2, [r3, #24]
      break;
 800412c:	e048      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f9f6 	bl	8004528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2108      	movs	r1, #8
 8004148:	430a      	orrs	r2, r1
 800414a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2104      	movs	r1, #4
 8004158:	438a      	bics	r2, r1
 800415a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69d9      	ldr	r1, [r3, #28]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
      break;
 800416e:	e027      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	0011      	movs	r1, r2
 8004178:	0018      	movs	r0, r3
 800417a:	f000 fa15 	bl	80045a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2180      	movs	r1, #128	; 0x80
 800418a:	0109      	lsls	r1, r1, #4
 800418c:	430a      	orrs	r2, r1
 800418e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	490f      	ldr	r1, [pc, #60]	; (80041d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800419c:	400a      	ands	r2, r1
 800419e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69d9      	ldr	r1, [r3, #28]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
      break;
 80041b4:	e004      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80041b6:	2317      	movs	r3, #23
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
      break;
 80041be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2238      	movs	r2, #56	; 0x38
 80041c4:	2100      	movs	r1, #0
 80041c6:	5499      	strb	r1, [r3, r2]

  return status;
 80041c8:	2317      	movs	r3, #23
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b006      	add	sp, #24
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	fffffbff 	.word	0xfffffbff

080041dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	230f      	movs	r3, #15
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2238      	movs	r2, #56	; 0x38
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_ConfigClockSource+0x20>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0bc      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x19a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2238      	movs	r2, #56	; 0x38
 8004200:	2101      	movs	r1, #1
 8004202:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2239      	movs	r2, #57	; 0x39
 8004208:	2102      	movs	r1, #2
 800420a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2277      	movs	r2, #119	; 0x77
 8004218:	4393      	bics	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	0192      	lsls	r2, r2, #6
 8004234:	4293      	cmp	r3, r2
 8004236:	d040      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xde>
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	0192      	lsls	r2, r2, #6
 800423c:	4293      	cmp	r3, r2
 800423e:	d900      	bls.n	8004242 <HAL_TIM_ConfigClockSource+0x66>
 8004240:	e088      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	0152      	lsls	r2, r2, #5
 8004246:	4293      	cmp	r3, r2
 8004248:	d100      	bne.n	800424c <HAL_TIM_ConfigClockSource+0x70>
 800424a:	e088      	b.n	800435e <HAL_TIM_ConfigClockSource+0x182>
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	0152      	lsls	r2, r2, #5
 8004250:	4293      	cmp	r3, r2
 8004252:	d900      	bls.n	8004256 <HAL_TIM_ConfigClockSource+0x7a>
 8004254:	e07e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 8004256:	2b70      	cmp	r3, #112	; 0x70
 8004258:	d018      	beq.n	800428c <HAL_TIM_ConfigClockSource+0xb0>
 800425a:	d900      	bls.n	800425e <HAL_TIM_ConfigClockSource+0x82>
 800425c:	e07a      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 800425e:	2b60      	cmp	r3, #96	; 0x60
 8004260:	d04f      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x126>
 8004262:	d900      	bls.n	8004266 <HAL_TIM_ConfigClockSource+0x8a>
 8004264:	e076      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 8004266:	2b50      	cmp	r3, #80	; 0x50
 8004268:	d03b      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x106>
 800426a:	d900      	bls.n	800426e <HAL_TIM_ConfigClockSource+0x92>
 800426c:	e072      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d057      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x146>
 8004272:	d900      	bls.n	8004276 <HAL_TIM_ConfigClockSource+0x9a>
 8004274:	e06e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 8004276:	2b30      	cmp	r3, #48	; 0x30
 8004278:	d063      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x166>
 800427a:	d86b      	bhi.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 800427c:	2b20      	cmp	r3, #32
 800427e:	d060      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x166>
 8004280:	d868      	bhi.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d05d      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x166>
 8004286:	2b10      	cmp	r3, #16
 8004288:	d05b      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x166>
 800428a:	e063      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f000 fa44 	bl	8004728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2277      	movs	r2, #119	; 0x77
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	609a      	str	r2, [r3, #8]
      break;
 80042b8:	e052      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f000 fa2d 	bl	8004728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	01c9      	lsls	r1, r1, #7
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
      break;
 80042e0:	e03e      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	001a      	movs	r2, r3
 80042f0:	f000 f9a0 	bl	8004634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2150      	movs	r1, #80	; 0x50
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 f9fa 	bl	80046f4 <TIM_ITRx_SetConfig>
      break;
 8004300:	e02e      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	001a      	movs	r2, r3
 8004310:	f000 f9be 	bl	8004690 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2160      	movs	r1, #96	; 0x60
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9ea 	bl	80046f4 <TIM_ITRx_SetConfig>
      break;
 8004320:	e01e      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	001a      	movs	r2, r3
 8004330:	f000 f980 	bl	8004634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2140      	movs	r1, #64	; 0x40
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f9da 	bl	80046f4 <TIM_ITRx_SetConfig>
      break;
 8004340:	e00e      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0019      	movs	r1, r3
 800434c:	0010      	movs	r0, r2
 800434e:	f000 f9d1 	bl	80046f4 <TIM_ITRx_SetConfig>
      break;
 8004352:	e005      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
      break;
 800435c:	e000      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800435e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2239      	movs	r2, #57	; 0x39
 8004364:	2101      	movs	r1, #1
 8004366:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2238      	movs	r2, #56	; 0x38
 800436c:	2100      	movs	r1, #0
 800436e:	5499      	strb	r1, [r3, r2]

  return status;
 8004370:	230f      	movs	r3, #15
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	781b      	ldrb	r3, [r3, #0]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b004      	add	sp, #16
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	ffff00ff 	.word	0xffff00ff

08004384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	429a      	cmp	r2, r3
 800439c:	d007      	beq.n	80043ae <TIM_Base_SetConfig+0x2a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <TIM_Base_SetConfig+0x9c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_Base_SetConfig+0x2a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <TIM_Base_SetConfig+0xa0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d108      	bne.n	80043c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2270      	movs	r2, #112	; 0x70
 80043b2:	4393      	bics	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x56>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <TIM_Base_SetConfig+0x9c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x56>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a13      	ldr	r2, [pc, #76]	; (8004424 <TIM_Base_SetConfig+0xa0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a12      	ldr	r2, [pc, #72]	; (8004428 <TIM_Base_SetConfig+0xa4>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	4393      	bics	r3, r2
 80043f2:	001a      	movs	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	615a      	str	r2, [r3, #20]
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40010800 	.word	0x40010800
 8004424:	40011400 	.word	0x40011400
 8004428:	fffffcff 	.word	0xfffffcff

0800442c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	2201      	movs	r2, #1
 800443c:	4393      	bics	r3, r2
 800443e:	001a      	movs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2270      	movs	r2, #112	; 0x70
 800445a:	4393      	bics	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2203      	movs	r2, #3
 8004462:	4393      	bics	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2202      	movs	r2, #2
 8004474:	4393      	bics	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b006      	add	sp, #24
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	2210      	movs	r2, #16
 80044b4:	4393      	bics	r3, r2
 80044b6:	001a      	movs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_OC2_SetConfig+0x7c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <TIM_OC2_SetConfig+0x80>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2220      	movs	r2, #32
 80044ee:	4393      	bics	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b006      	add	sp, #24
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffff8fff 	.word	0xffff8fff
 8004524:	fffffcff 	.word	0xfffffcff

08004528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <TIM_OC3_SetConfig+0x78>)
 8004538:	401a      	ands	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2270      	movs	r2, #112	; 0x70
 8004554:	4393      	bics	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2203      	movs	r2, #3
 800455c:	4393      	bics	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <TIM_OC3_SetConfig+0x7c>)
 800456e:	4013      	ands	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b006      	add	sp, #24
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	fffffeff 	.word	0xfffffeff
 80045a4:	fffffdff 	.word	0xfffffdff

080045a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <TIM_OC4_SetConfig+0x7c>)
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <TIM_OC4_SetConfig+0x80>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC4_SetConfig+0x84>)
 80045dc:	4013      	ands	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <TIM_OC4_SetConfig+0x88>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b006      	add	sp, #24
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	ffffefff 	.word	0xffffefff
 8004628:	ffff8fff 	.word	0xffff8fff
 800462c:	fffffcff 	.word	0xfffffcff
 8004630:	ffffdfff 	.word	0xffffdfff

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	2201      	movs	r2, #1
 800464c:	4393      	bics	r3, r2
 800464e:	001a      	movs	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	22f0      	movs	r2, #240	; 0xf0
 800465e:	4393      	bics	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	220a      	movs	r2, #10
 8004670:	4393      	bics	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b006      	add	sp, #24
 800468e:	bd80      	pop	{r7, pc}

08004690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	2210      	movs	r2, #16
 80046a2:	4393      	bics	r3, r2
 80046a4:	001a      	movs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <TIM_TI2_ConfigInputStage+0x60>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	22a0      	movs	r2, #160	; 0xa0
 80046cc:	4393      	bics	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b006      	add	sp, #24
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	ffff0fff 	.word	0xffff0fff

080046f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2270      	movs	r2, #112	; 0x70
 8004708:	4393      	bics	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	2207      	movs	r2, #7
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	609a      	str	r2, [r3, #8]
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <TIM_ETR_SetConfig+0x3c>)
 8004740:	4013      	ands	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	431a      	orrs	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b006      	add	sp, #24
 8004762:	bd80      	pop	{r7, pc}
 8004764:	ffff00ff 	.word	0xffff00ff

08004768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2238      	movs	r2, #56	; 0x38
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800477c:	2302      	movs	r3, #2
 800477e:	e042      	b.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2238      	movs	r2, #56	; 0x38
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2239      	movs	r2, #57	; 0x39
 800478c:	2102      	movs	r1, #2
 800478e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2270      	movs	r2, #112	; 0x70
 80047a4:	4393      	bics	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	05db      	lsls	r3, r3, #23
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d009      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a11      	ldr	r2, [pc, #68]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10c      	bne.n	80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	4393      	bics	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2239      	movs	r2, #57	; 0x39
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2238      	movs	r2, #56	; 0x38
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b004      	add	sp, #16
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	40010800 	.word	0x40010800
 8004814:	40011400 	.word	0x40011400

08004818 <__errno>:
 8004818:	4b01      	ldr	r3, [pc, #4]	; (8004820 <__errno+0x8>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	4770      	bx	lr
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	2000000c 	.word	0x2000000c

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	2600      	movs	r6, #0
 8004828:	4d0c      	ldr	r5, [pc, #48]	; (800485c <__libc_init_array+0x38>)
 800482a:	4c0d      	ldr	r4, [pc, #52]	; (8004860 <__libc_init_array+0x3c>)
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	42a6      	cmp	r6, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	2600      	movs	r6, #0
 8004836:	f000 fc47 	bl	80050c8 <_init>
 800483a:	4d0a      	ldr	r5, [pc, #40]	; (8004864 <__libc_init_array+0x40>)
 800483c:	4c0a      	ldr	r4, [pc, #40]	; (8004868 <__libc_init_array+0x44>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	42a6      	cmp	r6, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	00b3      	lsls	r3, r6, #2
 800484a:	58eb      	ldr	r3, [r5, r3]
 800484c:	4798      	blx	r3
 800484e:	3601      	adds	r6, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	00b3      	lsls	r3, r6, #2
 8004854:	58eb      	ldr	r3, [r5, r3]
 8004856:	4798      	blx	r3
 8004858:	3601      	adds	r6, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	08005388 	.word	0x08005388
 8004860:	08005388 	.word	0x08005388
 8004864:	08005388 	.word	0x08005388
 8004868:	0800538c 	.word	0x0800538c

0800486c <memset>:
 800486c:	0003      	movs	r3, r0
 800486e:	1882      	adds	r2, r0, r2
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	7019      	strb	r1, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <siprintf>:
 800487c:	b40e      	push	{r1, r2, r3}
 800487e:	b500      	push	{lr}
 8004880:	490b      	ldr	r1, [pc, #44]	; (80048b0 <siprintf+0x34>)
 8004882:	b09c      	sub	sp, #112	; 0x70
 8004884:	ab1d      	add	r3, sp, #116	; 0x74
 8004886:	9002      	str	r0, [sp, #8]
 8004888:	9006      	str	r0, [sp, #24]
 800488a:	9107      	str	r1, [sp, #28]
 800488c:	9104      	str	r1, [sp, #16]
 800488e:	4809      	ldr	r0, [pc, #36]	; (80048b4 <siprintf+0x38>)
 8004890:	4909      	ldr	r1, [pc, #36]	; (80048b8 <siprintf+0x3c>)
 8004892:	cb04      	ldmia	r3!, {r2}
 8004894:	9105      	str	r1, [sp, #20]
 8004896:	6800      	ldr	r0, [r0, #0]
 8004898:	a902      	add	r1, sp, #8
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	f000 f870 	bl	8004980 <_svfiprintf_r>
 80048a0:	2300      	movs	r3, #0
 80048a2:	9a02      	ldr	r2, [sp, #8]
 80048a4:	7013      	strb	r3, [r2, #0]
 80048a6:	b01c      	add	sp, #112	; 0x70
 80048a8:	bc08      	pop	{r3}
 80048aa:	b003      	add	sp, #12
 80048ac:	4718      	bx	r3
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	7fffffff 	.word	0x7fffffff
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	ffff0208 	.word	0xffff0208

080048bc <__ssputs_r>:
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	688e      	ldr	r6, [r1, #8]
 80048c0:	b085      	sub	sp, #20
 80048c2:	0007      	movs	r7, r0
 80048c4:	000c      	movs	r4, r1
 80048c6:	9203      	str	r2, [sp, #12]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	429e      	cmp	r6, r3
 80048cc:	d83c      	bhi.n	8004948 <__ssputs_r+0x8c>
 80048ce:	2390      	movs	r3, #144	; 0x90
 80048d0:	898a      	ldrh	r2, [r1, #12]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	421a      	tst	r2, r3
 80048d6:	d034      	beq.n	8004942 <__ssputs_r+0x86>
 80048d8:	2503      	movs	r5, #3
 80048da:	6909      	ldr	r1, [r1, #16]
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	1a5b      	subs	r3, r3, r1
 80048e0:	9302      	str	r3, [sp, #8]
 80048e2:	6963      	ldr	r3, [r4, #20]
 80048e4:	9802      	ldr	r0, [sp, #8]
 80048e6:	435d      	muls	r5, r3
 80048e8:	0feb      	lsrs	r3, r5, #31
 80048ea:	195d      	adds	r5, r3, r5
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	106d      	asrs	r5, r5, #1
 80048f0:	3301      	adds	r3, #1
 80048f2:	181b      	adds	r3, r3, r0
 80048f4:	42ab      	cmp	r3, r5
 80048f6:	d900      	bls.n	80048fa <__ssputs_r+0x3e>
 80048f8:	001d      	movs	r5, r3
 80048fa:	0553      	lsls	r3, r2, #21
 80048fc:	d532      	bpl.n	8004964 <__ssputs_r+0xa8>
 80048fe:	0029      	movs	r1, r5
 8004900:	0038      	movs	r0, r7
 8004902:	f000 fb31 	bl	8004f68 <_malloc_r>
 8004906:	1e06      	subs	r6, r0, #0
 8004908:	d109      	bne.n	800491e <__ssputs_r+0x62>
 800490a:	230c      	movs	r3, #12
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	2340      	movs	r3, #64	; 0x40
 8004910:	2001      	movs	r0, #1
 8004912:	89a2      	ldrh	r2, [r4, #12]
 8004914:	4240      	negs	r0, r0
 8004916:	4313      	orrs	r3, r2
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	b005      	add	sp, #20
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491e:	9a02      	ldr	r2, [sp, #8]
 8004920:	6921      	ldr	r1, [r4, #16]
 8004922:	f000 faba 	bl	8004e9a <memcpy>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <__ssputs_r+0xc0>)
 800492a:	401a      	ands	r2, r3
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	4313      	orrs	r3, r2
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	6126      	str	r6, [r4, #16]
 8004936:	18f6      	adds	r6, r6, r3
 8004938:	6026      	str	r6, [r4, #0]
 800493a:	6165      	str	r5, [r4, #20]
 800493c:	9e01      	ldr	r6, [sp, #4]
 800493e:	1aed      	subs	r5, r5, r3
 8004940:	60a5      	str	r5, [r4, #8]
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	429e      	cmp	r6, r3
 8004946:	d900      	bls.n	800494a <__ssputs_r+0x8e>
 8004948:	9e01      	ldr	r6, [sp, #4]
 800494a:	0032      	movs	r2, r6
 800494c:	9903      	ldr	r1, [sp, #12]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	f000 faac 	bl	8004eac <memmove>
 8004954:	68a3      	ldr	r3, [r4, #8]
 8004956:	2000      	movs	r0, #0
 8004958:	1b9b      	subs	r3, r3, r6
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	199e      	adds	r6, r3, r6
 8004960:	6026      	str	r6, [r4, #0]
 8004962:	e7da      	b.n	800491a <__ssputs_r+0x5e>
 8004964:	002a      	movs	r2, r5
 8004966:	0038      	movs	r0, r7
 8004968:	f000 fb5c 	bl	8005024 <_realloc_r>
 800496c:	1e06      	subs	r6, r0, #0
 800496e:	d1e0      	bne.n	8004932 <__ssputs_r+0x76>
 8004970:	0038      	movs	r0, r7
 8004972:	6921      	ldr	r1, [r4, #16]
 8004974:	f000 faae 	bl	8004ed4 <_free_r>
 8004978:	e7c7      	b.n	800490a <__ssputs_r+0x4e>
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	fffffb7f 	.word	0xfffffb7f

08004980 <_svfiprintf_r>:
 8004980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004982:	b0a1      	sub	sp, #132	; 0x84
 8004984:	9003      	str	r0, [sp, #12]
 8004986:	001d      	movs	r5, r3
 8004988:	898b      	ldrh	r3, [r1, #12]
 800498a:	000f      	movs	r7, r1
 800498c:	0016      	movs	r6, r2
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	d511      	bpl.n	80049b6 <_svfiprintf_r+0x36>
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10e      	bne.n	80049b6 <_svfiprintf_r+0x36>
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	f000 fae5 	bl	8004f68 <_malloc_r>
 800499e:	6038      	str	r0, [r7, #0]
 80049a0:	6138      	str	r0, [r7, #16]
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d105      	bne.n	80049b2 <_svfiprintf_r+0x32>
 80049a6:	230c      	movs	r3, #12
 80049a8:	9a03      	ldr	r2, [sp, #12]
 80049aa:	3801      	subs	r0, #1
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	b021      	add	sp, #132	; 0x84
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b2:	2340      	movs	r3, #64	; 0x40
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	2300      	movs	r3, #0
 80049b8:	ac08      	add	r4, sp, #32
 80049ba:	6163      	str	r3, [r4, #20]
 80049bc:	3320      	adds	r3, #32
 80049be:	7663      	strb	r3, [r4, #25]
 80049c0:	3310      	adds	r3, #16
 80049c2:	76a3      	strb	r3, [r4, #26]
 80049c4:	9507      	str	r5, [sp, #28]
 80049c6:	0035      	movs	r5, r6
 80049c8:	782b      	ldrb	r3, [r5, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <_svfiprintf_r+0x52>
 80049ce:	2b25      	cmp	r3, #37	; 0x25
 80049d0:	d147      	bne.n	8004a62 <_svfiprintf_r+0xe2>
 80049d2:	1bab      	subs	r3, r5, r6
 80049d4:	9305      	str	r3, [sp, #20]
 80049d6:	42b5      	cmp	r5, r6
 80049d8:	d00c      	beq.n	80049f4 <_svfiprintf_r+0x74>
 80049da:	0032      	movs	r2, r6
 80049dc:	0039      	movs	r1, r7
 80049de:	9803      	ldr	r0, [sp, #12]
 80049e0:	f7ff ff6c 	bl	80048bc <__ssputs_r>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d100      	bne.n	80049ea <_svfiprintf_r+0x6a>
 80049e8:	e0ae      	b.n	8004b48 <_svfiprintf_r+0x1c8>
 80049ea:	6962      	ldr	r2, [r4, #20]
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	4694      	mov	ip, r2
 80049f0:	4463      	add	r3, ip
 80049f2:	6163      	str	r3, [r4, #20]
 80049f4:	782b      	ldrb	r3, [r5, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d100      	bne.n	80049fc <_svfiprintf_r+0x7c>
 80049fa:	e0a5      	b.n	8004b48 <_svfiprintf_r+0x1c8>
 80049fc:	2201      	movs	r2, #1
 80049fe:	2300      	movs	r3, #0
 8004a00:	4252      	negs	r2, r2
 8004a02:	6062      	str	r2, [r4, #4]
 8004a04:	a904      	add	r1, sp, #16
 8004a06:	3254      	adds	r2, #84	; 0x54
 8004a08:	1852      	adds	r2, r2, r1
 8004a0a:	1c6e      	adds	r6, r5, #1
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	60e3      	str	r3, [r4, #12]
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	7013      	strb	r3, [r2, #0]
 8004a14:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a16:	2205      	movs	r2, #5
 8004a18:	7831      	ldrb	r1, [r6, #0]
 8004a1a:	4854      	ldr	r0, [pc, #336]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004a1c:	f000 fa32 	bl	8004e84 <memchr>
 8004a20:	1c75      	adds	r5, r6, #1
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d11f      	bne.n	8004a66 <_svfiprintf_r+0xe6>
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	06d3      	lsls	r3, r2, #27
 8004a2a:	d504      	bpl.n	8004a36 <_svfiprintf_r+0xb6>
 8004a2c:	2353      	movs	r3, #83	; 0x53
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	185b      	adds	r3, r3, r1
 8004a32:	2120      	movs	r1, #32
 8004a34:	7019      	strb	r1, [r3, #0]
 8004a36:	0713      	lsls	r3, r2, #28
 8004a38:	d504      	bpl.n	8004a44 <_svfiprintf_r+0xc4>
 8004a3a:	2353      	movs	r3, #83	; 0x53
 8004a3c:	a904      	add	r1, sp, #16
 8004a3e:	185b      	adds	r3, r3, r1
 8004a40:	212b      	movs	r1, #43	; 0x2b
 8004a42:	7019      	strb	r1, [r3, #0]
 8004a44:	7833      	ldrb	r3, [r6, #0]
 8004a46:	2b2a      	cmp	r3, #42	; 0x2a
 8004a48:	d016      	beq.n	8004a78 <_svfiprintf_r+0xf8>
 8004a4a:	0035      	movs	r5, r6
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	200a      	movs	r0, #10
 8004a50:	68e3      	ldr	r3, [r4, #12]
 8004a52:	782a      	ldrb	r2, [r5, #0]
 8004a54:	1c6e      	adds	r6, r5, #1
 8004a56:	3a30      	subs	r2, #48	; 0x30
 8004a58:	2a09      	cmp	r2, #9
 8004a5a:	d94e      	bls.n	8004afa <_svfiprintf_r+0x17a>
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d111      	bne.n	8004a84 <_svfiprintf_r+0x104>
 8004a60:	e017      	b.n	8004a92 <_svfiprintf_r+0x112>
 8004a62:	3501      	adds	r5, #1
 8004a64:	e7b0      	b.n	80049c8 <_svfiprintf_r+0x48>
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	1ac0      	subs	r0, r0, r3
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4083      	lsls	r3, r0
 8004a70:	4313      	orrs	r3, r2
 8004a72:	002e      	movs	r6, r5
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	e7ce      	b.n	8004a16 <_svfiprintf_r+0x96>
 8004a78:	9b07      	ldr	r3, [sp, #28]
 8004a7a:	1d19      	adds	r1, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	9107      	str	r1, [sp, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	db01      	blt.n	8004a88 <_svfiprintf_r+0x108>
 8004a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a86:	e004      	b.n	8004a92 <_svfiprintf_r+0x112>
 8004a88:	425b      	negs	r3, r3
 8004a8a:	60e3      	str	r3, [r4, #12]
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	782b      	ldrb	r3, [r5, #0]
 8004a94:	2b2e      	cmp	r3, #46	; 0x2e
 8004a96:	d10a      	bne.n	8004aae <_svfiprintf_r+0x12e>
 8004a98:	786b      	ldrb	r3, [r5, #1]
 8004a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9c:	d135      	bne.n	8004b0a <_svfiprintf_r+0x18a>
 8004a9e:	9b07      	ldr	r3, [sp, #28]
 8004aa0:	3502      	adds	r5, #2
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	9207      	str	r2, [sp, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db2b      	blt.n	8004b04 <_svfiprintf_r+0x184>
 8004aac:	9309      	str	r3, [sp, #36]	; 0x24
 8004aae:	4e30      	ldr	r6, [pc, #192]	; (8004b70 <_svfiprintf_r+0x1f0>)
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	0030      	movs	r0, r6
 8004ab4:	7829      	ldrb	r1, [r5, #0]
 8004ab6:	f000 f9e5 	bl	8004e84 <memchr>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d006      	beq.n	8004acc <_svfiprintf_r+0x14c>
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	1b80      	subs	r0, r0, r6
 8004ac2:	4083      	lsls	r3, r0
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	3501      	adds	r5, #1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	7829      	ldrb	r1, [r5, #0]
 8004ace:	2206      	movs	r2, #6
 8004ad0:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_svfiprintf_r+0x1f4>)
 8004ad2:	1c6e      	adds	r6, r5, #1
 8004ad4:	7621      	strb	r1, [r4, #24]
 8004ad6:	f000 f9d5 	bl	8004e84 <memchr>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d03c      	beq.n	8004b58 <_svfiprintf_r+0x1d8>
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <_svfiprintf_r+0x1f8>)
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d125      	bne.n	8004b30 <_svfiprintf_r+0x1b0>
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	9b07      	ldr	r3, [sp, #28]
 8004ae8:	3307      	adds	r3, #7
 8004aea:	4393      	bics	r3, r2
 8004aec:	3308      	adds	r3, #8
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	6963      	ldr	r3, [r4, #20]
 8004af2:	9a04      	ldr	r2, [sp, #16]
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	e765      	b.n	80049c6 <_svfiprintf_r+0x46>
 8004afa:	4343      	muls	r3, r0
 8004afc:	0035      	movs	r5, r6
 8004afe:	2101      	movs	r1, #1
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	e7a6      	b.n	8004a52 <_svfiprintf_r+0xd2>
 8004b04:	2301      	movs	r3, #1
 8004b06:	425b      	negs	r3, r3
 8004b08:	e7d0      	b.n	8004aac <_svfiprintf_r+0x12c>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	200a      	movs	r0, #10
 8004b0e:	001a      	movs	r2, r3
 8004b10:	3501      	adds	r5, #1
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	7829      	ldrb	r1, [r5, #0]
 8004b16:	1c6e      	adds	r6, r5, #1
 8004b18:	3930      	subs	r1, #48	; 0x30
 8004b1a:	2909      	cmp	r1, #9
 8004b1c:	d903      	bls.n	8004b26 <_svfiprintf_r+0x1a6>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0c5      	beq.n	8004aae <_svfiprintf_r+0x12e>
 8004b22:	9209      	str	r2, [sp, #36]	; 0x24
 8004b24:	e7c3      	b.n	8004aae <_svfiprintf_r+0x12e>
 8004b26:	4342      	muls	r2, r0
 8004b28:	0035      	movs	r5, r6
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	1852      	adds	r2, r2, r1
 8004b2e:	e7f1      	b.n	8004b14 <_svfiprintf_r+0x194>
 8004b30:	ab07      	add	r3, sp, #28
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	003a      	movs	r2, r7
 8004b36:	0021      	movs	r1, r4
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <_svfiprintf_r+0x1fc>)
 8004b3a:	9803      	ldr	r0, [sp, #12]
 8004b3c:	e000      	b.n	8004b40 <_svfiprintf_r+0x1c0>
 8004b3e:	bf00      	nop
 8004b40:	9004      	str	r0, [sp, #16]
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d1d3      	bne.n	8004af0 <_svfiprintf_r+0x170>
 8004b48:	89bb      	ldrh	r3, [r7, #12]
 8004b4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b4c:	065b      	lsls	r3, r3, #25
 8004b4e:	d400      	bmi.n	8004b52 <_svfiprintf_r+0x1d2>
 8004b50:	e72d      	b.n	80049ae <_svfiprintf_r+0x2e>
 8004b52:	2001      	movs	r0, #1
 8004b54:	4240      	negs	r0, r0
 8004b56:	e72a      	b.n	80049ae <_svfiprintf_r+0x2e>
 8004b58:	ab07      	add	r3, sp, #28
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	003a      	movs	r2, r7
 8004b5e:	0021      	movs	r1, r4
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <_svfiprintf_r+0x1fc>)
 8004b62:	9803      	ldr	r0, [sp, #12]
 8004b64:	f000 f87c 	bl	8004c60 <_printf_i>
 8004b68:	e7ea      	b.n	8004b40 <_svfiprintf_r+0x1c0>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	0800534d 	.word	0x0800534d
 8004b70:	08005353 	.word	0x08005353
 8004b74:	08005357 	.word	0x08005357
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	080048bd 	.word	0x080048bd

08004b80 <_printf_common>:
 8004b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b82:	0015      	movs	r5, r2
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	688a      	ldr	r2, [r1, #8]
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	000c      	movs	r4, r1
 8004b8c:	9000      	str	r0, [sp, #0]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	da00      	bge.n	8004b94 <_printf_common+0x14>
 8004b92:	0013      	movs	r3, r2
 8004b94:	0022      	movs	r2, r4
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	3243      	adds	r2, #67	; 0x43
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	d001      	beq.n	8004ba4 <_printf_common+0x24>
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	069b      	lsls	r3, r3, #26
 8004ba8:	d502      	bpl.n	8004bb0 <_printf_common+0x30>
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	3302      	adds	r3, #2
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	0017      	movs	r7, r2
 8004bb6:	401f      	ands	r7, r3
 8004bb8:	421a      	tst	r2, r3
 8004bba:	d027      	beq.n	8004c0c <_printf_common+0x8c>
 8004bbc:	0023      	movs	r3, r4
 8004bbe:	3343      	adds	r3, #67	; 0x43
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	4193      	sbcs	r3, r2
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d430      	bmi.n	8004c2e <_printf_common+0xae>
 8004bcc:	0022      	movs	r2, r4
 8004bce:	9901      	ldr	r1, [sp, #4]
 8004bd0:	9800      	ldr	r0, [sp, #0]
 8004bd2:	9e08      	ldr	r6, [sp, #32]
 8004bd4:	3243      	adds	r2, #67	; 0x43
 8004bd6:	47b0      	blx	r6
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d025      	beq.n	8004c28 <_printf_common+0xa8>
 8004bdc:	2306      	movs	r3, #6
 8004bde:	6820      	ldr	r0, [r4, #0]
 8004be0:	682a      	ldr	r2, [r5, #0]
 8004be2:	68e1      	ldr	r1, [r4, #12]
 8004be4:	2500      	movs	r5, #0
 8004be6:	4003      	ands	r3, r0
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0x74>
 8004bec:	1a8d      	subs	r5, r1, r2
 8004bee:	43eb      	mvns	r3, r5
 8004bf0:	17db      	asrs	r3, r3, #31
 8004bf2:	401d      	ands	r5, r3
 8004bf4:	68a3      	ldr	r3, [r4, #8]
 8004bf6:	6922      	ldr	r2, [r4, #16]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	dd01      	ble.n	8004c00 <_printf_common+0x80>
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	18ed      	adds	r5, r5, r3
 8004c00:	2700      	movs	r7, #0
 8004c02:	42bd      	cmp	r5, r7
 8004c04:	d120      	bne.n	8004c48 <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e010      	b.n	8004c2c <_printf_common+0xac>
 8004c0a:	3701      	adds	r7, #1
 8004c0c:	68e3      	ldr	r3, [r4, #12]
 8004c0e:	682a      	ldr	r2, [r5, #0]
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	42bb      	cmp	r3, r7
 8004c14:	ddd2      	ble.n	8004bbc <_printf_common+0x3c>
 8004c16:	0022      	movs	r2, r4
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9901      	ldr	r1, [sp, #4]
 8004c1c:	9800      	ldr	r0, [sp, #0]
 8004c1e:	9e08      	ldr	r6, [sp, #32]
 8004c20:	3219      	adds	r2, #25
 8004c22:	47b0      	blx	r6
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d1f0      	bne.n	8004c0a <_printf_common+0x8a>
 8004c28:	2001      	movs	r0, #1
 8004c2a:	4240      	negs	r0, r0
 8004c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c2e:	2030      	movs	r0, #48	; 0x30
 8004c30:	18e1      	adds	r1, r4, r3
 8004c32:	3143      	adds	r1, #67	; 0x43
 8004c34:	7008      	strb	r0, [r1, #0]
 8004c36:	0021      	movs	r1, r4
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	3145      	adds	r1, #69	; 0x45
 8004c3c:	7809      	ldrb	r1, [r1, #0]
 8004c3e:	18a2      	adds	r2, r4, r2
 8004c40:	3243      	adds	r2, #67	; 0x43
 8004c42:	3302      	adds	r3, #2
 8004c44:	7011      	strb	r1, [r2, #0]
 8004c46:	e7c1      	b.n	8004bcc <_printf_common+0x4c>
 8004c48:	0022      	movs	r2, r4
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	9901      	ldr	r1, [sp, #4]
 8004c4e:	9800      	ldr	r0, [sp, #0]
 8004c50:	9e08      	ldr	r6, [sp, #32]
 8004c52:	321a      	adds	r2, #26
 8004c54:	47b0      	blx	r6
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa8>
 8004c5a:	3701      	adds	r7, #1
 8004c5c:	e7d1      	b.n	8004c02 <_printf_common+0x82>
	...

08004c60 <_printf_i>:
 8004c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c62:	b08b      	sub	sp, #44	; 0x2c
 8004c64:	9206      	str	r2, [sp, #24]
 8004c66:	000a      	movs	r2, r1
 8004c68:	3243      	adds	r2, #67	; 0x43
 8004c6a:	9307      	str	r3, [sp, #28]
 8004c6c:	9005      	str	r0, [sp, #20]
 8004c6e:	9204      	str	r2, [sp, #16]
 8004c70:	7e0a      	ldrb	r2, [r1, #24]
 8004c72:	000c      	movs	r4, r1
 8004c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c76:	2a78      	cmp	r2, #120	; 0x78
 8004c78:	d806      	bhi.n	8004c88 <_printf_i+0x28>
 8004c7a:	2a62      	cmp	r2, #98	; 0x62
 8004c7c:	d808      	bhi.n	8004c90 <_printf_i+0x30>
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d100      	bne.n	8004c84 <_printf_i+0x24>
 8004c82:	e0c0      	b.n	8004e06 <_printf_i+0x1a6>
 8004c84:	2a58      	cmp	r2, #88	; 0x58
 8004c86:	d052      	beq.n	8004d2e <_printf_i+0xce>
 8004c88:	0026      	movs	r6, r4
 8004c8a:	3642      	adds	r6, #66	; 0x42
 8004c8c:	7032      	strb	r2, [r6, #0]
 8004c8e:	e022      	b.n	8004cd6 <_printf_i+0x76>
 8004c90:	0010      	movs	r0, r2
 8004c92:	3863      	subs	r0, #99	; 0x63
 8004c94:	2815      	cmp	r0, #21
 8004c96:	d8f7      	bhi.n	8004c88 <_printf_i+0x28>
 8004c98:	f7fb fa36 	bl	8000108 <__gnu_thumb1_case_shi>
 8004c9c:	001f0016 	.word	0x001f0016
 8004ca0:	fff6fff6 	.word	0xfff6fff6
 8004ca4:	fff6fff6 	.word	0xfff6fff6
 8004ca8:	fff6001f 	.word	0xfff6001f
 8004cac:	fff6fff6 	.word	0xfff6fff6
 8004cb0:	00a8fff6 	.word	0x00a8fff6
 8004cb4:	009a0036 	.word	0x009a0036
 8004cb8:	fff6fff6 	.word	0xfff6fff6
 8004cbc:	fff600b9 	.word	0xfff600b9
 8004cc0:	fff60036 	.word	0xfff60036
 8004cc4:	009efff6 	.word	0x009efff6
 8004cc8:	0026      	movs	r6, r4
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	3642      	adds	r6, #66	; 0x42
 8004cce:	1d11      	adds	r1, r2, #4
 8004cd0:	6019      	str	r1, [r3, #0]
 8004cd2:	6813      	ldr	r3, [r2, #0]
 8004cd4:	7033      	strb	r3, [r6, #0]
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0a7      	b.n	8004e2a <_printf_i+0x1ca>
 8004cda:	6808      	ldr	r0, [r1, #0]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	1d0a      	adds	r2, r1, #4
 8004ce0:	0605      	lsls	r5, r0, #24
 8004ce2:	d50b      	bpl.n	8004cfc <_printf_i+0x9c>
 8004ce4:	680d      	ldr	r5, [r1, #0]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	da03      	bge.n	8004cf4 <_printf_i+0x94>
 8004cec:	232d      	movs	r3, #45	; 0x2d
 8004cee:	9a04      	ldr	r2, [sp, #16]
 8004cf0:	426d      	negs	r5, r5
 8004cf2:	7013      	strb	r3, [r2, #0]
 8004cf4:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <_printf_i+0x21c>)
 8004cf6:	270a      	movs	r7, #10
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	e032      	b.n	8004d62 <_printf_i+0x102>
 8004cfc:	680d      	ldr	r5, [r1, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	0641      	lsls	r1, r0, #25
 8004d02:	d5f1      	bpl.n	8004ce8 <_printf_i+0x88>
 8004d04:	b22d      	sxth	r5, r5
 8004d06:	e7ef      	b.n	8004ce8 <_printf_i+0x88>
 8004d08:	680d      	ldr	r5, [r1, #0]
 8004d0a:	6819      	ldr	r1, [r3, #0]
 8004d0c:	1d08      	adds	r0, r1, #4
 8004d0e:	6018      	str	r0, [r3, #0]
 8004d10:	062e      	lsls	r6, r5, #24
 8004d12:	d501      	bpl.n	8004d18 <_printf_i+0xb8>
 8004d14:	680d      	ldr	r5, [r1, #0]
 8004d16:	e003      	b.n	8004d20 <_printf_i+0xc0>
 8004d18:	066d      	lsls	r5, r5, #25
 8004d1a:	d5fb      	bpl.n	8004d14 <_printf_i+0xb4>
 8004d1c:	680d      	ldr	r5, [r1, #0]
 8004d1e:	b2ad      	uxth	r5, r5
 8004d20:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <_printf_i+0x21c>)
 8004d22:	270a      	movs	r7, #10
 8004d24:	9303      	str	r3, [sp, #12]
 8004d26:	2a6f      	cmp	r2, #111	; 0x6f
 8004d28:	d117      	bne.n	8004d5a <_printf_i+0xfa>
 8004d2a:	2708      	movs	r7, #8
 8004d2c:	e015      	b.n	8004d5a <_printf_i+0xfa>
 8004d2e:	3145      	adds	r1, #69	; 0x45
 8004d30:	700a      	strb	r2, [r1, #0]
 8004d32:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <_printf_i+0x21c>)
 8004d34:	9203      	str	r2, [sp, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	ca20      	ldmia	r2!, {r5}
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	0608      	lsls	r0, r1, #24
 8004d40:	d550      	bpl.n	8004de4 <_printf_i+0x184>
 8004d42:	07cb      	lsls	r3, r1, #31
 8004d44:	d502      	bpl.n	8004d4c <_printf_i+0xec>
 8004d46:	2320      	movs	r3, #32
 8004d48:	4319      	orrs	r1, r3
 8004d4a:	6021      	str	r1, [r4, #0]
 8004d4c:	2710      	movs	r7, #16
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	d103      	bne.n	8004d5a <_printf_i+0xfa>
 8004d52:	2320      	movs	r3, #32
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	439a      	bics	r2, r3
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	0023      	movs	r3, r4
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	3343      	adds	r3, #67	; 0x43
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db03      	blt.n	8004d72 <_printf_i+0x112>
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	4391      	bics	r1, r2
 8004d70:	6021      	str	r1, [r4, #0]
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	d102      	bne.n	8004d7c <_printf_i+0x11c>
 8004d76:	9e04      	ldr	r6, [sp, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <_printf_i+0x136>
 8004d7c:	9e04      	ldr	r6, [sp, #16]
 8004d7e:	0028      	movs	r0, r5
 8004d80:	0039      	movs	r1, r7
 8004d82:	f7fb fa51 	bl	8000228 <__aeabi_uidivmod>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	3e01      	subs	r6, #1
 8004d8a:	5c5b      	ldrb	r3, [r3, r1]
 8004d8c:	7033      	strb	r3, [r6, #0]
 8004d8e:	002b      	movs	r3, r5
 8004d90:	0005      	movs	r5, r0
 8004d92:	429f      	cmp	r7, r3
 8004d94:	d9f3      	bls.n	8004d7e <_printf_i+0x11e>
 8004d96:	2f08      	cmp	r7, #8
 8004d98:	d109      	bne.n	8004dae <_printf_i+0x14e>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	07db      	lsls	r3, r3, #31
 8004d9e:	d506      	bpl.n	8004dae <_printf_i+0x14e>
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	6922      	ldr	r2, [r4, #16]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	dc02      	bgt.n	8004dae <_printf_i+0x14e>
 8004da8:	2330      	movs	r3, #48	; 0x30
 8004daa:	3e01      	subs	r6, #1
 8004dac:	7033      	strb	r3, [r6, #0]
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	1b9b      	subs	r3, r3, r6
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	0021      	movs	r1, r4
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	9805      	ldr	r0, [sp, #20]
 8004dbc:	9b06      	ldr	r3, [sp, #24]
 8004dbe:	aa09      	add	r2, sp, #36	; 0x24
 8004dc0:	f7ff fede 	bl	8004b80 <_printf_common>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d135      	bne.n	8004e34 <_printf_i+0x1d4>
 8004dc8:	2001      	movs	r0, #1
 8004dca:	4240      	negs	r0, r0
 8004dcc:	b00b      	add	sp, #44	; 0x2c
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	6809      	ldr	r1, [r1, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	6022      	str	r2, [r4, #0]
 8004dd8:	0022      	movs	r2, r4
 8004dda:	2178      	movs	r1, #120	; 0x78
 8004ddc:	3245      	adds	r2, #69	; 0x45
 8004dde:	7011      	strb	r1, [r2, #0]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <_printf_i+0x220>)
 8004de2:	e7a7      	b.n	8004d34 <_printf_i+0xd4>
 8004de4:	0648      	lsls	r0, r1, #25
 8004de6:	d5ac      	bpl.n	8004d42 <_printf_i+0xe2>
 8004de8:	b2ad      	uxth	r5, r5
 8004dea:	e7aa      	b.n	8004d42 <_printf_i+0xe2>
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	680d      	ldr	r5, [r1, #0]
 8004df0:	1d10      	adds	r0, r2, #4
 8004df2:	6949      	ldr	r1, [r1, #20]
 8004df4:	6018      	str	r0, [r3, #0]
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	062e      	lsls	r6, r5, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0x1a0>
 8004dfc:	6019      	str	r1, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0x1a6>
 8004e00:	066d      	lsls	r5, r5, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0x19c>
 8004e04:	8019      	strh	r1, [r3, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9e04      	ldr	r6, [sp, #16]
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	e7d2      	b.n	8004db4 <_printf_i+0x154>
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	1d11      	adds	r1, r2, #4
 8004e12:	6019      	str	r1, [r3, #0]
 8004e14:	6816      	ldr	r6, [r2, #0]
 8004e16:	2100      	movs	r1, #0
 8004e18:	0030      	movs	r0, r6
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	f000 f832 	bl	8004e84 <memchr>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d001      	beq.n	8004e28 <_printf_i+0x1c8>
 8004e24:	1b80      	subs	r0, r0, r6
 8004e26:	6060      	str	r0, [r4, #4]
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9a04      	ldr	r2, [sp, #16]
 8004e30:	7013      	strb	r3, [r2, #0]
 8004e32:	e7bf      	b.n	8004db4 <_printf_i+0x154>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	0032      	movs	r2, r6
 8004e38:	9906      	ldr	r1, [sp, #24]
 8004e3a:	9805      	ldr	r0, [sp, #20]
 8004e3c:	9d07      	ldr	r5, [sp, #28]
 8004e3e:	47a8      	blx	r5
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d0c1      	beq.n	8004dc8 <_printf_i+0x168>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	079b      	lsls	r3, r3, #30
 8004e48:	d415      	bmi.n	8004e76 <_printf_i+0x216>
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	68e0      	ldr	r0, [r4, #12]
 8004e4e:	4298      	cmp	r0, r3
 8004e50:	dabc      	bge.n	8004dcc <_printf_i+0x16c>
 8004e52:	0018      	movs	r0, r3
 8004e54:	e7ba      	b.n	8004dcc <_printf_i+0x16c>
 8004e56:	0022      	movs	r2, r4
 8004e58:	2301      	movs	r3, #1
 8004e5a:	9906      	ldr	r1, [sp, #24]
 8004e5c:	9805      	ldr	r0, [sp, #20]
 8004e5e:	9e07      	ldr	r6, [sp, #28]
 8004e60:	3219      	adds	r2, #25
 8004e62:	47b0      	blx	r6
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d0af      	beq.n	8004dc8 <_printf_i+0x168>
 8004e68:	3501      	adds	r5, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_i+0x1f6>
 8004e74:	e7e9      	b.n	8004e4a <_printf_i+0x1ea>
 8004e76:	2500      	movs	r5, #0
 8004e78:	e7f7      	b.n	8004e6a <_printf_i+0x20a>
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	0800535e 	.word	0x0800535e
 8004e80:	0800536f 	.word	0x0800536f

08004e84 <memchr>:
 8004e84:	b2c9      	uxtb	r1, r1
 8004e86:	1882      	adds	r2, r0, r2
 8004e88:	4290      	cmp	r0, r2
 8004e8a:	d101      	bne.n	8004e90 <memchr+0xc>
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4770      	bx	lr
 8004e90:	7803      	ldrb	r3, [r0, #0]
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d0fb      	beq.n	8004e8e <memchr+0xa>
 8004e96:	3001      	adds	r0, #1
 8004e98:	e7f6      	b.n	8004e88 <memchr+0x4>

08004e9a <memcpy>:
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d100      	bne.n	8004ea4 <memcpy+0xa>
 8004ea2:	bd10      	pop	{r4, pc}
 8004ea4:	5ccc      	ldrb	r4, [r1, r3]
 8004ea6:	54c4      	strb	r4, [r0, r3]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	e7f8      	b.n	8004e9e <memcpy+0x4>

08004eac <memmove>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4288      	cmp	r0, r1
 8004eb0:	d902      	bls.n	8004eb8 <memmove+0xc>
 8004eb2:	188b      	adds	r3, r1, r2
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	d303      	bcc.n	8004ec0 <memmove+0x14>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e007      	b.n	8004ecc <memmove+0x20>
 8004ebc:	5c8b      	ldrb	r3, [r1, r2]
 8004ebe:	5483      	strb	r3, [r0, r2]
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	d2fb      	bcs.n	8004ebc <memmove+0x10>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	5ccc      	ldrb	r4, [r1, r3]
 8004ec8:	54c4      	strb	r4, [r0, r3]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1fa      	bne.n	8004ec6 <memmove+0x1a>
 8004ed0:	e7f8      	b.n	8004ec4 <memmove+0x18>
	...

08004ed4 <_free_r>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	0005      	movs	r5, r0
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d010      	beq.n	8004efe <_free_r+0x2a>
 8004edc:	1f0c      	subs	r4, r1, #4
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da00      	bge.n	8004ee6 <_free_r+0x12>
 8004ee4:	18e4      	adds	r4, r4, r3
 8004ee6:	0028      	movs	r0, r5
 8004ee8:	f000 f8d4 	bl	8005094 <__malloc_lock>
 8004eec:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <_free_r+0x90>)
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <_free_r+0x2c>
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6014      	str	r4, [r2, #0]
 8004ef8:	0028      	movs	r0, r5
 8004efa:	f000 f8d3 	bl	80050a4 <__malloc_unlock>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d908      	bls.n	8004f16 <_free_r+0x42>
 8004f04:	6821      	ldr	r1, [r4, #0]
 8004f06:	1860      	adds	r0, r4, r1
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	d1f3      	bne.n	8004ef4 <_free_r+0x20>
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1841      	adds	r1, r0, r1
 8004f12:	6021      	str	r1, [r4, #0]
 8004f14:	e7ee      	b.n	8004ef4 <_free_r+0x20>
 8004f16:	001a      	movs	r2, r3
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <_free_r+0x4e>
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	d9f9      	bls.n	8004f16 <_free_r+0x42>
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	1850      	adds	r0, r2, r1
 8004f26:	42a0      	cmp	r0, r4
 8004f28:	d10b      	bne.n	8004f42 <_free_r+0x6e>
 8004f2a:	6820      	ldr	r0, [r4, #0]
 8004f2c:	1809      	adds	r1, r1, r0
 8004f2e:	1850      	adds	r0, r2, r1
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	4283      	cmp	r3, r0
 8004f34:	d1e0      	bne.n	8004ef8 <_free_r+0x24>
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	1841      	adds	r1, r0, r1
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	6053      	str	r3, [r2, #4]
 8004f40:	e7da      	b.n	8004ef8 <_free_r+0x24>
 8004f42:	42a0      	cmp	r0, r4
 8004f44:	d902      	bls.n	8004f4c <_free_r+0x78>
 8004f46:	230c      	movs	r3, #12
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	e7d5      	b.n	8004ef8 <_free_r+0x24>
 8004f4c:	6821      	ldr	r1, [r4, #0]
 8004f4e:	1860      	adds	r0, r4, r1
 8004f50:	4283      	cmp	r3, r0
 8004f52:	d103      	bne.n	8004f5c <_free_r+0x88>
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	1841      	adds	r1, r0, r1
 8004f5a:	6021      	str	r1, [r4, #0]
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6054      	str	r4, [r2, #4]
 8004f60:	e7ca      	b.n	8004ef8 <_free_r+0x24>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	20000094 	.word	0x20000094

08004f68 <_malloc_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	1ccd      	adds	r5, r1, #3
 8004f6e:	439d      	bics	r5, r3
 8004f70:	3508      	adds	r5, #8
 8004f72:	0006      	movs	r6, r0
 8004f74:	2d0c      	cmp	r5, #12
 8004f76:	d21f      	bcs.n	8004fb8 <_malloc_r+0x50>
 8004f78:	250c      	movs	r5, #12
 8004f7a:	42a9      	cmp	r1, r5
 8004f7c:	d81e      	bhi.n	8004fbc <_malloc_r+0x54>
 8004f7e:	0030      	movs	r0, r6
 8004f80:	f000 f888 	bl	8005094 <__malloc_lock>
 8004f84:	4925      	ldr	r1, [pc, #148]	; (800501c <_malloc_r+0xb4>)
 8004f86:	680a      	ldr	r2, [r1, #0]
 8004f88:	0014      	movs	r4, r2
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	d11a      	bne.n	8004fc4 <_malloc_r+0x5c>
 8004f8e:	4f24      	ldr	r7, [pc, #144]	; (8005020 <_malloc_r+0xb8>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <_malloc_r+0x38>
 8004f96:	0021      	movs	r1, r4
 8004f98:	0030      	movs	r0, r6
 8004f9a:	f000 f869 	bl	8005070 <_sbrk_r>
 8004f9e:	6038      	str	r0, [r7, #0]
 8004fa0:	0029      	movs	r1, r5
 8004fa2:	0030      	movs	r0, r6
 8004fa4:	f000 f864 	bl	8005070 <_sbrk_r>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d12b      	bne.n	8005004 <_malloc_r+0x9c>
 8004fac:	230c      	movs	r3, #12
 8004fae:	0030      	movs	r0, r6
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	f000 f877 	bl	80050a4 <__malloc_unlock>
 8004fb6:	e003      	b.n	8004fc0 <_malloc_r+0x58>
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	dade      	bge.n	8004f7a <_malloc_r+0x12>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	6033      	str	r3, [r6, #0]
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	1b5b      	subs	r3, r3, r5
 8004fc8:	d419      	bmi.n	8004ffe <_malloc_r+0x96>
 8004fca:	2b0b      	cmp	r3, #11
 8004fcc:	d903      	bls.n	8004fd6 <_malloc_r+0x6e>
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	18e4      	adds	r4, r4, r3
 8004fd2:	6025      	str	r5, [r4, #0]
 8004fd4:	e003      	b.n	8004fde <_malloc_r+0x76>
 8004fd6:	6863      	ldr	r3, [r4, #4]
 8004fd8:	42a2      	cmp	r2, r4
 8004fda:	d10e      	bne.n	8004ffa <_malloc_r+0x92>
 8004fdc:	600b      	str	r3, [r1, #0]
 8004fde:	0030      	movs	r0, r6
 8004fe0:	f000 f860 	bl	80050a4 <__malloc_unlock>
 8004fe4:	0020      	movs	r0, r4
 8004fe6:	2207      	movs	r2, #7
 8004fe8:	300b      	adds	r0, #11
 8004fea:	1d23      	adds	r3, r4, #4
 8004fec:	4390      	bics	r0, r2
 8004fee:	1ac2      	subs	r2, r0, r3
 8004ff0:	4298      	cmp	r0, r3
 8004ff2:	d0e6      	beq.n	8004fc2 <_malloc_r+0x5a>
 8004ff4:	1a1b      	subs	r3, r3, r0
 8004ff6:	50a3      	str	r3, [r4, r2]
 8004ff8:	e7e3      	b.n	8004fc2 <_malloc_r+0x5a>
 8004ffa:	6053      	str	r3, [r2, #4]
 8004ffc:	e7ef      	b.n	8004fde <_malloc_r+0x76>
 8004ffe:	0022      	movs	r2, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7c2      	b.n	8004f8a <_malloc_r+0x22>
 8005004:	2303      	movs	r3, #3
 8005006:	1cc4      	adds	r4, r0, #3
 8005008:	439c      	bics	r4, r3
 800500a:	42a0      	cmp	r0, r4
 800500c:	d0e1      	beq.n	8004fd2 <_malloc_r+0x6a>
 800500e:	1a21      	subs	r1, r4, r0
 8005010:	0030      	movs	r0, r6
 8005012:	f000 f82d 	bl	8005070 <_sbrk_r>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d1db      	bne.n	8004fd2 <_malloc_r+0x6a>
 800501a:	e7c7      	b.n	8004fac <_malloc_r+0x44>
 800501c:	20000094 	.word	0x20000094
 8005020:	20000098 	.word	0x20000098

08005024 <_realloc_r>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	0007      	movs	r7, r0
 8005028:	000d      	movs	r5, r1
 800502a:	0016      	movs	r6, r2
 800502c:	2900      	cmp	r1, #0
 800502e:	d105      	bne.n	800503c <_realloc_r+0x18>
 8005030:	0011      	movs	r1, r2
 8005032:	f7ff ff99 	bl	8004f68 <_malloc_r>
 8005036:	0004      	movs	r4, r0
 8005038:	0020      	movs	r0, r4
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503c:	2a00      	cmp	r2, #0
 800503e:	d103      	bne.n	8005048 <_realloc_r+0x24>
 8005040:	f7ff ff48 	bl	8004ed4 <_free_r>
 8005044:	0034      	movs	r4, r6
 8005046:	e7f7      	b.n	8005038 <_realloc_r+0x14>
 8005048:	f000 f834 	bl	80050b4 <_malloc_usable_size_r>
 800504c:	002c      	movs	r4, r5
 800504e:	42b0      	cmp	r0, r6
 8005050:	d2f2      	bcs.n	8005038 <_realloc_r+0x14>
 8005052:	0031      	movs	r1, r6
 8005054:	0038      	movs	r0, r7
 8005056:	f7ff ff87 	bl	8004f68 <_malloc_r>
 800505a:	1e04      	subs	r4, r0, #0
 800505c:	d0ec      	beq.n	8005038 <_realloc_r+0x14>
 800505e:	0029      	movs	r1, r5
 8005060:	0032      	movs	r2, r6
 8005062:	f7ff ff1a 	bl	8004e9a <memcpy>
 8005066:	0029      	movs	r1, r5
 8005068:	0038      	movs	r0, r7
 800506a:	f7ff ff33 	bl	8004ed4 <_free_r>
 800506e:	e7e3      	b.n	8005038 <_realloc_r+0x14>

08005070 <_sbrk_r>:
 8005070:	2300      	movs	r3, #0
 8005072:	b570      	push	{r4, r5, r6, lr}
 8005074:	4d06      	ldr	r5, [pc, #24]	; (8005090 <_sbrk_r+0x20>)
 8005076:	0004      	movs	r4, r0
 8005078:	0008      	movs	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fc f932 	bl	80012e4 <_sbrk>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d103      	bne.n	800508c <_sbrk_r+0x1c>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d000      	beq.n	800508c <_sbrk_r+0x1c>
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	2000028c 	.word	0x2000028c

08005094 <__malloc_lock>:
 8005094:	b510      	push	{r4, lr}
 8005096:	4802      	ldr	r0, [pc, #8]	; (80050a0 <__malloc_lock+0xc>)
 8005098:	f000 f814 	bl	80050c4 <__retarget_lock_acquire_recursive>
 800509c:	bd10      	pop	{r4, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	20000294 	.word	0x20000294

080050a4 <__malloc_unlock>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4802      	ldr	r0, [pc, #8]	; (80050b0 <__malloc_unlock+0xc>)
 80050a8:	f000 f80d 	bl	80050c6 <__retarget_lock_release_recursive>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	20000294 	.word	0x20000294

080050b4 <_malloc_usable_size_r>:
 80050b4:	1f0b      	subs	r3, r1, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	1f18      	subs	r0, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da01      	bge.n	80050c2 <_malloc_usable_size_r+0xe>
 80050be:	580b      	ldr	r3, [r1, r0]
 80050c0:	18c0      	adds	r0, r0, r3
 80050c2:	4770      	bx	lr

080050c4 <__retarget_lock_acquire_recursive>:
 80050c4:	4770      	bx	lr

080050c6 <__retarget_lock_release_recursive>:
 80050c6:	4770      	bx	lr

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
