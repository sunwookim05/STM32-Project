
IWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b4  0800bb08  0800bb08  0001bb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cbc0  0800cbc0  0001cbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  0800cbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000584  200001e8  0800cdac  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000076c  0800cdac  0002076c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ede6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a1f  00000000  00000000  0002eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fa8  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e40  00000000  00000000  000329c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000153fa  00000000  00000000  00033800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001272f  00000000  00000000  00048bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007d088  00000000  00000000  0005b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000d83b1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004844  00000000  00000000  000d8404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800baec 	.word	0x0800baec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800baec 	.word	0x0800baec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0d 	bl	800125c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe5d 	bl	800110c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feff 	bl	800125c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef5 	bl	800125c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe85 	bl	8001190 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7b 	bl	8001190 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fd8a 	bl	8002074 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fc8a 	bl	8002074 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff fb0f 	bl	800024c <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fafb 	bl	800024c <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff faa3 	bl	800024c <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa96 	bl	800024c <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f952 	bl	8002074 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 f936 	bl	8002074 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	0800be8c 	.word	0x0800be8c
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f867 	bl	8002074 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f858 	bl	8002074 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fd4e 	bl	8002074 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fd30 	bl	8002074 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	0800becc 	.word	0x0800becc
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fc80 	bl	8002074 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fc72 	bl	8002074 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fbdc 	bl	8002074 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 faa4 	bl	8002074 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f84c 	bl	8002074 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f821 	bl	8002074 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__clzsi2>:
 8002074:	211c      	movs	r1, #28
 8002076:	2301      	movs	r3, #1
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	4298      	cmp	r0, r3
 800207c:	d301      	bcc.n	8002082 <__clzsi2+0xe>
 800207e:	0c00      	lsrs	r0, r0, #16
 8002080:	3910      	subs	r1, #16
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	4298      	cmp	r0, r3
 8002086:	d301      	bcc.n	800208c <__clzsi2+0x18>
 8002088:	0a00      	lsrs	r0, r0, #8
 800208a:	3908      	subs	r1, #8
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	4298      	cmp	r0, r3
 8002090:	d301      	bcc.n	8002096 <__clzsi2+0x22>
 8002092:	0900      	lsrs	r0, r0, #4
 8002094:	3904      	subs	r1, #4
 8002096:	a202      	add	r2, pc, #8	; (adr r2, 80020a0 <__clzsi2+0x2c>)
 8002098:	5c10      	ldrb	r0, [r2, r0]
 800209a:	1840      	adds	r0, r0, r1
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	02020304 	.word	0x02020304
 80020a4:	01010101 	.word	0x01010101
	...

080020b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_Init+0x3c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_Init+0x3c>)
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c8:	2000      	movs	r0, #0
 80020ca:	f000 f811 	bl	80020f0 <HAL_InitTick>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d003      	beq.n	80020da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e001      	b.n	80020de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020da:	f006 fb7d 	bl	80087d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	781b      	ldrb	r3, [r3, #0]
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40022000 	.word	0x40022000

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020f8:	240f      	movs	r4, #15
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_InitTick+0x50>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	22fa      	movs	r2, #250	; 0xfa
 8002106:	0091      	lsls	r1, r2, #2
 8002108:	0018      	movs	r0, r3
 800210a:	f7fe f819 	bl	8000140 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fcb0 	bl	8002a76 <HAL_SYSTICK_Config>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d003      	beq.n	8002122 <HAL_InitTick+0x32>
  {
    status = HAL_ERROR;
 800211a:	193b      	adds	r3, r7, r4
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e006      	b.n	8002130 <HAL_InitTick+0x40>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	2301      	movs	r3, #1
 8002126:	425b      	negs	r3, r3
 8002128:	2200      	movs	r2, #0
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fc7e 	bl	8002a2c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b005      	add	sp, #20
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	20000014 	.word	0x20000014

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  uwTick++;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_IncTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_IncTick+0x14>)
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000204 	.word	0x20000204

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <HAL_GetTick+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000204 	.word	0x20000204

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff fff0 	bl	800215c <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	d002      	beq.n	8002190 <HAL_Delay+0x20>
  {
    wait++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	f7ff ffe3 	bl	800215c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d8f7      	bhi.n	8002192 <HAL_Delay+0x22>
  {
  }
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e159      	b.n	8002472 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2250      	movs	r2, #80	; 0x50
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f002 fd1c 	bl	8004c14 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	2210      	movs	r2, #16
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d005      	beq.n	80021f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80021f2:	d00b      	beq.n	800220c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	2210      	movs	r2, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2250      	movs	r2, #80	; 0x50
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e132      	b.n	8002472 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	4a9a      	ldr	r2, [pc, #616]	; (800247c <HAL_ADC_Init+0x2d0>)
 8002212:	4013      	ands	r3, r2
 8002214:	2202      	movs	r2, #2
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_ADC_Init+0x90>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_Init+0x90>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_ADC_Init+0x92>
 800223c:	2300      	movs	r3, #0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d149      	bne.n	80022d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	23c0      	movs	r3, #192	; 0xc0
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	429a      	cmp	r2, r3
 800224c:	d00b      	beq.n	8002266 <HAL_ADC_Init+0xba>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	05db      	lsls	r3, r3, #23
 8002256:	429a      	cmp	r2, r3
 8002258:	d005      	beq.n	8002266 <HAL_ADC_Init+0xba>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	429a      	cmp	r2, r3
 8002264:	d111      	bne.n	800228a <HAL_ADC_Init+0xde>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	0892      	lsrs	r2, r2, #2
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6919      	ldr	r1, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	611a      	str	r2, [r3, #16]
 8002288:	e014      	b.n	80022b4 <HAL_ADC_Init+0x108>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	0892      	lsrs	r2, r2, #2
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <HAL_ADC_Init+0x2d4>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022a0:	4978      	ldr	r1, [pc, #480]	; (8002484 <HAL_ADC_Init+0x2d8>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b74      	ldr	r3, [pc, #464]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2118      	movs	r1, #24
 80022c0:	438a      	bics	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80022d6:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b69      	ldr	r3, [pc, #420]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022dc:	496a      	ldr	r1, [pc, #424]	; (8002488 <HAL_ADC_Init+0x2dc>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	065a      	lsls	r2, r3, #25
 80022ec:	4b64      	ldr	r3, [pc, #400]	; (8002480 <HAL_ADC_Init+0x2d4>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4013      	ands	r3, r2
 80022fe:	d108      	bne.n	8002312 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0549      	lsls	r1, r1, #21
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	495b      	ldr	r1, [pc, #364]	; (800248c <HAL_ADC_Init+0x2e0>)
 800231e:	400a      	ands	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68d9      	ldr	r1, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_Init+0x18c>
 8002334:	2304      	movs	r3, #4
 8002336:	e000      	b.n	800233a <HAL_ADC_Init+0x18e>
 8002338:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800233a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2020      	movs	r0, #32
 8002340:	5c1b      	ldrb	r3, [r3, r0]
 8002342:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002344:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	202c      	movs	r0, #44	; 0x2c
 800234a:	5c1b      	ldrb	r3, [r3, r0]
 800234c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800234e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002354:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800235c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002364:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002372:	23c2      	movs	r3, #194	; 0xc2
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	429a      	cmp	r2, r3
 8002378:	d00b      	beq.n	8002392 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2221      	movs	r2, #33	; 0x21
 8002396:	5c9b      	ldrb	r3, [r3, r2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d11a      	bne.n	80023d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	5c9b      	ldrb	r3, [r3, r2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0249      	lsls	r1, r1, #9
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	e00b      	b.n	80023d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	2220      	movs	r2, #32
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	2201      	movs	r2, #1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11f      	bne.n	800241a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	492a      	ldr	r1, [pc, #168]	; (8002490 <HAL_ADC_Init+0x2e4>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6919      	ldr	r1, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80023f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80023fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2101      	movs	r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	e00e      	b.n	8002438 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2107      	movs	r1, #7
 8002444:	438a      	bics	r2, r1
 8002446:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6959      	ldr	r1, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2203      	movs	r2, #3
 8002466:	4393      	bics	r3, r2
 8002468:	2201      	movs	r2, #1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	fffffefd 	.word	0xfffffefd
 8002480:	40012708 	.word	0x40012708
 8002484:	ffc3ffff 	.word	0xffc3ffff
 8002488:	fdffffff 	.word	0xfdffffff
 800248c:	fffe0219 	.word	0xfffe0219
 8002490:	fffffc03 	.word	0xfffffc03

08002494 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2204      	movs	r2, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	d15e      	bne.n	8002572 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2250      	movs	r2, #80	; 0x50
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x2e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e05e      	b.n	8002580 <HAL_ADC_Start_DMA+0xec>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2250      	movs	r2, #80	; 0x50
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d007      	beq.n	80024e2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80024d2:	2317      	movs	r3, #23
 80024d4:	18fc      	adds	r4, r7, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f8fb 	bl	80026d4 <ADC_Enable>
 80024de:	0003      	movs	r3, r0
 80024e0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024e2:	2317      	movs	r3, #23
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d146      	bne.n	800257a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_ADC_Start_DMA+0xf4>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0052      	lsls	r2, r2, #1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2250      	movs	r2, #80	; 0x50
 8002508:	2100      	movs	r1, #0
 800250a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_ADC_Start_DMA+0xf8>)
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_ADC_Start_DMA+0xfc>)
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_ADC_Start_DMA+0x100>)
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	221c      	movs	r2, #28
 800252a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2110      	movs	r1, #16
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	0019      	movs	r1, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f000 fb10 	bl	8002b80 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2104      	movs	r1, #4
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e003      	b.n	800257a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002572:	2317      	movs	r3, #23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800257a:	2317      	movs	r3, #23
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b007      	add	sp, #28
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	fffff0fe 	.word	0xfffff0fe
 800258c:	08002795 	.word	0x08002795
 8002590:	08002849 	.word	0x08002849
 8002594:	08002867 	.word	0x08002867

08002598 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2250      	movs	r2, #80	; 0x50
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x18>
 80025dc:	2302      	movs	r3, #2
 80025de:	e06c      	b.n	80026ba <HAL_ADC_ConfigChannel+0xf2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2250      	movs	r2, #80	; 0x50
 80025e4:	2101      	movs	r1, #1
 80025e6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2204      	movs	r2, #4
 80025f0:	4013      	ands	r3, r2
 80025f2:	d00b      	beq.n	800260c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	2220      	movs	r2, #32
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2250      	movs	r2, #80	; 0x50
 8002604:	2100      	movs	r1, #0
 8002606:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e056      	b.n	80026ba <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_ADC_ConfigChannel+0xfc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d028      	beq.n	8002668 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	035b      	lsls	r3, r3, #13
 8002622:	0b5a      	lsrs	r2, r3, #13
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	02db      	lsls	r3, r3, #11
 8002634:	4013      	ands	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0409      	lsls	r1, r1, #16
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002646:	200a      	movs	r0, #10
 8002648:	f000 f928 	bl	800289c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	4013      	ands	r3, r2
 8002656:	d02b      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	03c9      	lsls	r1, r1, #15
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e023      	b.n	80026b0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	035b      	lsls	r3, r3, #13
 8002674:	0b5b      	lsrs	r3, r3, #13
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	400a      	ands	r2, r1
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	02db      	lsls	r3, r3, #11
 8002688:	4013      	ands	r3, r2
 800268a:	d005      	beq.n	8002698 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 8002692:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_ADC_ConfigChannel+0x104>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	d005      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_ADC_ConfigChannel+0x100>)
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <HAL_ADC_ConfigChannel+0x108>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2250      	movs	r2, #80	; 0x50
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	00001001 	.word	0x00001001
 80026c8:	40012708 	.word	0x40012708
 80026cc:	ff7fffff 	.word	0xff7fffff
 80026d0:	ffbfffff 	.word	0xffbfffff

080026d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2203      	movs	r2, #3
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <ADC_Enable+0x2c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <ADC_Enable+0x2c>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <ADC_Enable+0x2e>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d13f      	bne.n	8002786 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <ADC_Enable+0xbc>)
 800270e:	4013      	ands	r3, r2
 8002710:	d00d      	beq.n	800272e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	2210      	movs	r2, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	2201      	movs	r2, #1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02c      	b.n	8002788 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800273e:	2001      	movs	r0, #1
 8002740:	f000 f8ac 	bl	800289c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002744:	f7ff fd0a 	bl	800215c <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800274c:	e014      	b.n	8002778 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800274e:	f7ff fd05 	bl	800215c <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b0a      	cmp	r3, #10
 800275a:	d90d      	bls.n	8002778 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	2210      	movs	r2, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	2201      	movs	r2, #1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e007      	b.n	8002788 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	2b01      	cmp	r3, #1
 8002784:	d1e3      	bne.n	800274e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	80000017 	.word	0x80000017

08002794 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	2250      	movs	r2, #80	; 0x50
 80027a8:	4013      	ands	r3, r2
 80027aa:	d141      	bne.n	8002830 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	23c0      	movs	r3, #192	; 0xc0
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	d12e      	bne.n	8002826 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d129      	bne.n	8002826 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	4013      	ands	r3, r2
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d122      	bne.n	8002826 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d110      	bne.n	800280e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	210c      	movs	r1, #12
 80027f8:	438a      	bics	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	4a10      	ldr	r2, [pc, #64]	; (8002844 <ADC_DMAConvCplt+0xb0>)
 8002802:	4013      	ands	r3, r2
 8002804:	2201      	movs	r2, #1
 8002806:	431a      	orrs	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
 800280c:	e00b      	b.n	8002826 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	2220      	movs	r2, #32
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	2201      	movs	r2, #1
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff feb5 	bl	8002598 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800282e:	e005      	b.n	800283c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	0010      	movs	r0, r2
 800283a:	4798      	blx	r3
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}
 8002844:	fffffefe 	.word	0xfffffefe

08002848 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff fea5 	bl	80025a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bd80      	pop	{r7, pc}

08002866 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	2240      	movs	r2, #64	; 0x40
 800287a:	431a      	orrs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	2204      	movs	r2, #4
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fe92 	bl	80025b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}

0800289c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <ADC_DelayMicroSecond+0x38>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	490b      	ldr	r1, [pc, #44]	; (80028d8 <ADC_DelayMicroSecond+0x3c>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fd fc48 	bl	8000140 <__udivsi3>
 80028b0:	0003      	movs	r3, r0
 80028b2:	001a      	movs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4353      	muls	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80028ba:	e002      	b.n	80028c2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <ADC_DelayMicroSecond+0x20>
  } 
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20000014 	.word	0x20000014
 80028d8:	000f4240 	.word	0x000f4240

080028dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	0002      	movs	r2, r0
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	001a      	movs	r2, r3
 80028ee:	231f      	movs	r3, #31
 80028f0:	401a      	ands	r2, r3
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <NVIC_EnableIRQ+0x28>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	4091      	lsls	r1, r2
 80028f8:	000a      	movs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e000e100 	.word	0xe000e100

08002908 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	0002      	movs	r2, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b7f      	cmp	r3, #127	; 0x7f
 800291c:	d932      	bls.n	8002984 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800291e:	4a2f      	ldr	r2, [pc, #188]	; (80029dc <NVIC_SetPriority+0xd4>)
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	0019      	movs	r1, r3
 8002926:	230f      	movs	r3, #15
 8002928:	400b      	ands	r3, r1
 800292a:	3b08      	subs	r3, #8
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3306      	adds	r3, #6
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	3304      	adds	r3, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1dfa      	adds	r2, r7, #7
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	0011      	movs	r1, r2
 800293e:	2203      	movs	r2, #3
 8002940:	400a      	ands	r2, r1
 8002942:	00d2      	lsls	r2, r2, #3
 8002944:	21ff      	movs	r1, #255	; 0xff
 8002946:	4091      	lsls	r1, r2
 8002948:	000a      	movs	r2, r1
 800294a:	43d2      	mvns	r2, r2
 800294c:	401a      	ands	r2, r3
 800294e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	019b      	lsls	r3, r3, #6
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	401a      	ands	r2, r3
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	0018      	movs	r0, r3
 800295e:	2303      	movs	r3, #3
 8002960:	4003      	ands	r3, r0
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002966:	481d      	ldr	r0, [pc, #116]	; (80029dc <NVIC_SetPriority+0xd4>)
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	001c      	movs	r4, r3
 800296e:	230f      	movs	r3, #15
 8002970:	4023      	ands	r3, r4
 8002972:	3b08      	subs	r3, #8
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	430a      	orrs	r2, r1
 8002978:	3306      	adds	r3, #6
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	18c3      	adds	r3, r0, r3
 800297e:	3304      	adds	r3, #4
 8002980:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002982:	e027      	b.n	80029d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <NVIC_SetPriority+0xd8>)
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b25b      	sxtb	r3, r3
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	33c0      	adds	r3, #192	; 0xc0
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	589b      	ldr	r3, [r3, r2]
 8002994:	1dfa      	adds	r2, r7, #7
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	0011      	movs	r1, r2
 800299a:	2203      	movs	r2, #3
 800299c:	400a      	ands	r2, r1
 800299e:	00d2      	lsls	r2, r2, #3
 80029a0:	21ff      	movs	r1, #255	; 0xff
 80029a2:	4091      	lsls	r1, r2
 80029a4:	000a      	movs	r2, r1
 80029a6:	43d2      	mvns	r2, r2
 80029a8:	401a      	ands	r2, r3
 80029aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	019b      	lsls	r3, r3, #6
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	401a      	ands	r2, r3
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	0018      	movs	r0, r3
 80029ba:	2303      	movs	r3, #3
 80029bc:	4003      	ands	r3, r0
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c2:	4807      	ldr	r0, [pc, #28]	; (80029e0 <NVIC_SetPriority+0xd8>)
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	430a      	orrs	r2, r1
 80029ce:	33c0      	adds	r3, #192	; 0xc0
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	501a      	str	r2, [r3, r0]
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b003      	add	sp, #12
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	045b      	lsls	r3, r3, #17
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d301      	bcc.n	80029fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f8:	2301      	movs	r3, #1
 80029fa:	e010      	b.n	8002a1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <SysTick_Config+0x44>)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	3a01      	subs	r2, #1
 8002a02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a04:	2301      	movs	r3, #1
 8002a06:	425b      	negs	r3, r3
 8002a08:	2103      	movs	r1, #3
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff ff7c 	bl	8002908 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SysTick_Config+0x44>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <SysTick_Config+0x44>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	210f      	movs	r1, #15
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	1c02      	adds	r2, r0, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff ff5d 	bl	8002908 <NVIC_SetPriority>
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ff37 	bl	80028dc <NVIC_EnableIRQ>
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff ffaf 	bl	80029e4 <SysTick_Config>
 8002a86:	0003      	movs	r3, r0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e061      	b.n	8002b66 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_Init+0xe0>)
 8002aa8:	4694      	mov	ip, r2
 8002aaa:	4463      	add	r3, ip
 8002aac:	2114      	movs	r1, #20
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f7fd fb46 	bl	8000140 <__udivsi3>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a2d      	ldr	r2, [pc, #180]	; (8002b74 <HAL_DMA_Init+0xe4>)
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2225      	movs	r2, #37	; 0x25
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_DMA_Init+0xe8>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	01db      	lsls	r3, r3, #7
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_DMA_Init+0xec>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	211c      	movs	r1, #28
 8002b26:	400b      	ands	r3, r1
 8002b28:	210f      	movs	r1, #15
 8002b2a:	4099      	lsls	r1, r3
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_DMA_Init+0xec>)
 8002b32:	400a      	ands	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_DMA_Init+0xec>)
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	201c      	movs	r0, #28
 8002b44:	4003      	ands	r3, r0
 8002b46:	409a      	lsls	r2, r3
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_DMA_Init+0xec>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2225      	movs	r2, #37	; 0x25
 8002b58:	2101      	movs	r1, #1
 8002b5a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	bffdfff8 	.word	0xbffdfff8
 8002b74:	40020000 	.word	0x40020000
 8002b78:	ffff800f 	.word	0xffff800f
 8002b7c:	400200a8 	.word	0x400200a8

08002b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2317      	movs	r3, #23
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2224      	movs	r2, #36	; 0x24
 8002b9a:	5c9b      	ldrb	r3, [r3, r2]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x24>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04f      	b.n	8002c44 <HAL_DMA_Start_IT+0xc4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	2101      	movs	r1, #1
 8002baa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2225      	movs	r2, #37	; 0x25
 8002bb0:	5c9b      	ldrb	r3, [r3, r2]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d13a      	bne.n	8002c2e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2225      	movs	r2, #37	; 0x25
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f8e3 	bl	8002da8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	210e      	movs	r1, #14
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00f      	b.n	8002c1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2104      	movs	r1, #4
 8002c08:	438a      	bics	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	210a      	movs	r1, #10
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2224      	movs	r2, #36	; 0x24
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c36:	2317      	movs	r3, #23
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002c3e:	2317      	movs	r3, #23
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	221c      	movs	r2, #28
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	d026      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x7a>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2220      	movs	r2, #32
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2104      	movs	r1, #4
 8002c98:	438a      	bics	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	221c      	movs	r2, #28
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4091      	lsls	r1, r2
 8002cac:	000a      	movs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d100      	bne.n	8002cba <HAL_DMA_IRQHandler+0x6e>
 8002cb8:	e071      	b.n	8002d9e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	e06b      	b.n	8002d9e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	221c      	movs	r2, #28
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2202      	movs	r2, #2
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d02d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xea>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d029      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	4013      	ands	r3, r2
 8002cec:	d10b      	bne.n	8002d06 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	210a      	movs	r1, #10
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2225      	movs	r2, #37	; 0x25
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	221c      	movs	r2, #28
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2102      	movs	r1, #2
 8002d14:	4091      	lsls	r1, r2
 8002d16:	000a      	movs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2224      	movs	r2, #36	; 0x24
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d039      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	0010      	movs	r0, r2
 8002d32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d34:	e033      	b.n	8002d9e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	221c      	movs	r2, #28
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2208      	movs	r2, #8
 8002d40:	409a      	lsls	r2, r3
 8002d42:	0013      	movs	r3, r2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	d02a      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x154>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d026      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	210e      	movs	r1, #14
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	221c      	movs	r2, #28
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4091      	lsls	r1, r2
 8002d72:	000a      	movs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2225      	movs	r2, #37	; 0x25
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46c0      	nop			; (mov r8, r8)
}
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	221c      	movs	r2, #28
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4091      	lsls	r1, r2
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d108      	bne.n	8002dec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dea:	e007      	b.n	8002dfc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e1a:	e14f      	b.n	80030bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4091      	lsls	r1, r2
 8002e26:	000a      	movs	r2, r1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <HAL_GPIO_Init+0x30>
 8002e32:	e140      	b.n	80030b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x40>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	58d3      	ldr	r3, [r2, r3]
 8002e50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2207      	movs	r2, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	0013      	movs	r3, r2
 8002e60:	43da      	mvns	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2107      	movs	r1, #7
 8002e70:	400b      	ands	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	409a      	lsls	r2, r3
 8002e76:	0013      	movs	r3, r2
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d00b      	beq.n	8002eac <HAL_GPIO_Init+0xa8>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d007      	beq.n	8002eac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea0:	2b11      	cmp	r3, #17
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b12      	cmp	r3, #18
 8002eaa:	d130      	bne.n	8002f0e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	0013      	movs	r3, r2
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	0013      	movs	r3, r2
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	43da      	mvns	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	2201      	movs	r2, #1
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	0013      	movs	r3, r2
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	0013      	movs	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	43da      	mvns	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	055b      	lsls	r3, r3, #21
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d100      	bne.n	8002f80 <HAL_GPIO_Init+0x17c>
 8002f7e:	e09a      	b.n	80030b6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f80:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_GPIO_Init+0x2d4>)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	589b      	ldr	r3, [r3, r2]
 8002f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	23a0      	movs	r3, #160	; 0xa0
 8002fb4:	05db      	lsls	r3, r3, #23
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x1ea>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a47      	ldr	r2, [pc, #284]	; (80030dc <HAL_GPIO_Init+0x2d8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x1e6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a46      	ldr	r2, [pc, #280]	; (80030e0 <HAL_GPIO_Init+0x2dc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x1e2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a45      	ldr	r2, [pc, #276]	; (80030e4 <HAL_GPIO_Init+0x2e0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x1de>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a44      	ldr	r2, [pc, #272]	; (80030e8 <HAL_GPIO_Init+0x2e4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x1da>
 8002fda:	2305      	movs	r3, #5
 8002fdc:	e008      	b.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e004      	b.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	4093      	lsls	r3, r2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003000:	4935      	ldr	r1, [pc, #212]	; (80030d8 <HAL_GPIO_Init+0x2d4>)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43da      	mvns	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	025b      	lsls	r3, r3, #9
 8003026:	4013      	ands	r3, r2
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003032:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43da      	mvns	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	029b      	lsls	r3, r3, #10
 8003050:	4013      	ands	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43da      	mvns	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	035b      	lsls	r3, r3, #13
 800307a:	4013      	ands	r3, r2
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43da      	mvns	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	039b      	lsls	r3, r3, #14
 80030a4:	4013      	ands	r3, r2
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	40da      	lsrs	r2, r3
 80030c4:	1e13      	subs	r3, r2, #0
 80030c6:	d000      	beq.n	80030ca <HAL_GPIO_Init+0x2c6>
 80030c8:	e6a8      	b.n	8002e1c <HAL_GPIO_Init+0x18>
  }
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010000 	.word	0x40010000
 80030dc:	50000400 	.word	0x50000400
 80030e0:	50000800 	.word	0x50000800
 80030e4:	50000c00 	.word	0x50000c00
 80030e8:	50001c00 	.word	0x50001c00
 80030ec:	40010400 	.word	0x40010400

080030f0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	000a      	movs	r2, r1
 80030fa:	1cbb      	adds	r3, r7, #2
 80030fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	1cba      	adds	r2, r7, #2
 8003104:	8812      	ldrh	r2, [r2, #0]
 8003106:	4013      	ands	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800310a:	230f      	movs	r3, #15
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e003      	b.n	800311c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800311c:	230f      	movs	r3, #15
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	0008      	movs	r0, r1
 8003134:	0011      	movs	r1, r2
 8003136:	1cbb      	adds	r3, r7, #2
 8003138:	1c02      	adds	r2, r0, #0
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	1c7b      	adds	r3, r7, #1
 800313e:	1c0a      	adds	r2, r1, #0
 8003140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003142:	1c7b      	adds	r3, r7, #1
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	1cbb      	adds	r3, r7, #2
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003152:	e003      	b.n	800315c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003154:	1cbb      	adds	r3, r7, #2
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e082      	b.n	800327c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2241      	movs	r2, #65	; 0x41
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f001 fe89 	bl	8004ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2241      	movs	r2, #65	; 0x41
 8003196:	2124      	movs	r1, #36	; 0x24
 8003198:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <HAL_I2C_Init+0x120>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4931      	ldr	r1, [pc, #196]	; (8003288 <HAL_I2C_Init+0x124>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0209      	lsls	r1, r1, #8
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e007      	b.n	80031f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2184      	movs	r1, #132	; 0x84
 80031ec:	0209      	lsls	r1, r1, #8
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d104      	bne.n	8003204 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	491f      	ldr	r1, [pc, #124]	; (800328c <HAL_I2C_Init+0x128>)
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	491a      	ldr	r1, [pc, #104]	; (8003288 <HAL_I2C_Init+0x124>)
 8003220:	400a      	ands	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	431a      	orrs	r2, r3
 800322e:	0011      	movs	r1, r2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	021a      	lsls	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69d9      	ldr	r1, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2241      	movs	r2, #65	; 0x41
 8003268:	2120      	movs	r1, #32
 800326a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2242      	movs	r2, #66	; 0x42
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}
 8003284:	f0ffffff 	.word	0xf0ffffff
 8003288:	ffff7fff 	.word	0xffff7fff
 800328c:	02008000 	.word	0x02008000

08003290 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	000c      	movs	r4, r1
 800329a:	0010      	movs	r0, r2
 800329c:	0019      	movs	r1, r3
 800329e:	230a      	movs	r3, #10
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	1c22      	adds	r2, r4, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	2308      	movs	r3, #8
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	1c02      	adds	r2, r0, #0
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	1c0a      	adds	r2, r1, #0
 80032b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2241      	movs	r2, #65	; 0x41
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d000      	beq.n	80032c2 <HAL_I2C_Mem_Write+0x32>
 80032c0:	e10c      	b.n	80034dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_I2C_Mem_Write+0x42>
 80032c8:	232c      	movs	r3, #44	; 0x2c
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0ff      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_I2C_Mem_Write+0x5c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0f8      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2240      	movs	r2, #64	; 0x40
 80032f0:	2101      	movs	r1, #1
 80032f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032f4:	f7fe ff32 	bl	800215c <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	0219      	lsls	r1, r3, #8
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2319      	movs	r3, #25
 8003308:	2201      	movs	r2, #1
 800330a:	f000 f975 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0e3      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2241      	movs	r2, #65	; 0x41
 800331a:	2121      	movs	r1, #33	; 0x21
 800331c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2242      	movs	r2, #66	; 0x42
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	222c      	movs	r2, #44	; 0x2c
 8003336:	18ba      	adds	r2, r7, r2
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	881c      	ldrh	r4, [r3, #0]
 8003346:	2308      	movs	r3, #8
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	230a      	movs	r3, #10
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	8819      	ldrh	r1, [r3, #0]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	0023      	movs	r3, r4
 800335e:	f000 f8c5 	bl	80034ec <I2C_RequestMemoryWrite>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d005      	beq.n	8003372 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0b5      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	2bff      	cmp	r3, #255	; 0xff
 800337a:	d911      	bls.n	80033a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	045c      	lsls	r4, r3, #17
 800338c:	230a      	movs	r3, #10
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	8819      	ldrh	r1, [r3, #0]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	2300      	movs	r3, #0
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0023      	movs	r3, r4
 800339a:	f000 fa4d 	bl	8003838 <I2C_TransferConfig>
 800339e:	e012      	b.n	80033c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	049c      	lsls	r4, r3, #18
 80033b4:	230a      	movs	r3, #10
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	8819      	ldrh	r1, [r3, #0]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	0023      	movs	r3, r4
 80033c2:	f000 fa39 	bl	8003838 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f952 	bl	8003676 <I2C_WaitOnTXISFlagUntilTimeout>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e081      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03a      	beq.n	800348a <HAL_I2C_Mem_Write+0x1fa>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d136      	bne.n	800348a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800341c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	0013      	movs	r3, r2
 8003426:	2200      	movs	r2, #0
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	f000 f8e5 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e053      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2bff      	cmp	r3, #255	; 0xff
 800343e:	d911      	bls.n	8003464 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	b2da      	uxtb	r2, r3
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	045c      	lsls	r4, r3, #17
 8003450:	230a      	movs	r3, #10
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	8819      	ldrh	r1, [r3, #0]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	0023      	movs	r3, r4
 800345e:	f000 f9eb 	bl	8003838 <I2C_TransferConfig>
 8003462:	e012      	b.n	800348a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	b2da      	uxtb	r2, r3
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	049c      	lsls	r4, r3, #18
 8003478:	230a      	movs	r3, #10
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	8819      	ldrh	r1, [r3, #0]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	0023      	movs	r3, r4
 8003486:	f000 f9d7 	bl	8003838 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d198      	bne.n	80033c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f92a 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01a      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2220      	movs	r2, #32
 80034ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_I2C_Mem_Write+0x258>)
 80034bc:	400a      	ands	r2, r1
 80034be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2241      	movs	r2, #65	; 0x41
 80034c4:	2120      	movs	r1, #32
 80034c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2242      	movs	r2, #66	; 0x42
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2240      	movs	r2, #64	; 0x40
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b007      	add	sp, #28
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	fe00e800 	.word	0xfe00e800

080034ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b5b0      	push	{r4, r5, r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	000c      	movs	r4, r1
 80034f6:	0010      	movs	r0, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	250a      	movs	r5, #10
 80034fc:	197b      	adds	r3, r7, r5
 80034fe:	1c22      	adds	r2, r4, #0
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	2308      	movs	r3, #8
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	1c02      	adds	r2, r0, #0
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	1dbb      	adds	r3, r7, #6
 800350c:	1c0a      	adds	r2, r1, #0
 800350e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	045c      	lsls	r4, r3, #17
 800351a:	197b      	adds	r3, r7, r5
 800351c:	8819      	ldrh	r1, [r3, #0]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <I2C_RequestMemoryWrite+0xc4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	0023      	movs	r3, r4
 8003526:	f000 f987 	bl	8003838 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	6a39      	ldr	r1, [r7, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f8a0 	bl	8003676 <I2C_WaitOnTXISFlagUntilTimeout>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e033      	b.n	80035a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800353e:	1dbb      	adds	r3, r7, #6
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003546:	2308      	movs	r3, #8
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
 8003554:	e019      	b.n	800358a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003556:	2308      	movs	r3, #8
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b29b      	uxth	r3, r3
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356a:	6a39      	ldr	r1, [r7, #32]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f881 	bl	8003676 <I2C_WaitOnTXISFlagUntilTimeout>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d001      	beq.n	800357c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e014      	b.n	80035a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357c:	2308      	movs	r3, #8
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0013      	movs	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	f000 f82e 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bdb0      	pop	{r4, r5, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	80002000 	.word	0x80002000

080035b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d007      	beq.n	80035f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003608:	e021      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	d01e      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fda4 	bl	800215c <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	2220      	movs	r2, #32
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2241      	movs	r2, #65	; 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2242      	movs	r2, #66	; 0x42
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	001a      	movs	r2, r3
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0ce      	beq.n	800360a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003682:	e02b      	b.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f86e 	bl	800376c <I2C_IsAcknowledgeFailed>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e029      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	d01e      	beq.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fd5d 	bl	800215c <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d113      	bne.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	2220      	movs	r2, #32
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2241      	movs	r2, #65	; 0x41
 80036c4:	2120      	movs	r1, #32
 80036c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2242      	movs	r2, #66	; 0x42
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2202      	movs	r2, #2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d1cc      	bne.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	e028      	b.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 f82f 	bl	800376c <I2C_IsAcknowledgeFailed>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e026      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fd21 	bl	800215c <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	2220      	movs	r2, #32
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	2120      	movs	r1, #32
 800373e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2242      	movs	r2, #66	; 0x42
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2220      	movs	r2, #32
 800375c:	4013      	ands	r3, r2
 800375e:	2b20      	cmp	r3, #32
 8003760:	d1cf      	bne.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2210      	movs	r2, #16
 8003780:	4013      	ands	r3, r2
 8003782:	2b10      	cmp	r3, #16
 8003784:	d151      	bne.n	800382a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003786:	e021      	b.n	80037cc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	d01e      	beq.n	80037cc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fce5 	bl	800215c <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_IsAcknowledgeFailed+0x38>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	2220      	movs	r2, #32
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2241      	movs	r2, #65	; 0x41
 80037b4:	2120      	movs	r1, #32
 80037b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2242      	movs	r2, #66	; 0x42
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	2100      	movs	r1, #0
 80037c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e02f      	b.n	800382c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2220      	movs	r2, #32
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d1d6      	bne.n	8003788 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2210      	movs	r2, #16
 80037e0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2220      	movs	r2, #32
 80037e8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff fee1 	bl	80035b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	490d      	ldr	r1, [pc, #52]	; (8003834 <I2C_IsAcknowledgeFailed+0xc8>)
 80037fe:	400a      	ands	r2, r1
 8003800:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	2204      	movs	r2, #4
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2241      	movs	r2, #65	; 0x41
 8003812:	2120      	movs	r1, #32
 8003814:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2242      	movs	r2, #66	; 0x42
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bd80      	pop	{r7, pc}
 8003834:	fe00e800 	.word	0xfe00e800

08003838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	0008      	movs	r0, r1
 8003842:	0011      	movs	r1, r2
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	240a      	movs	r4, #10
 8003848:	193b      	adds	r3, r7, r4
 800384a:	1c02      	adds	r2, r0, #0
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	2009      	movs	r0, #9
 8003850:	183b      	adds	r3, r7, r0
 8003852:	1c0a      	adds	r2, r1, #0
 8003854:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	0d51      	lsrs	r1, r2, #21
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	00d2      	lsls	r2, r2, #3
 8003864:	400a      	ands	r2, r1
 8003866:	490e      	ldr	r1, [pc, #56]	; (80038a0 <I2C_TransferConfig+0x68>)
 8003868:	430a      	orrs	r2, r1
 800386a:	43d2      	mvns	r2, r2
 800386c:	401a      	ands	r2, r3
 800386e:	0011      	movs	r1, r2
 8003870:	193b      	adds	r3, r7, r4
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	059b      	lsls	r3, r3, #22
 8003876:	0d9a      	lsrs	r2, r3, #22
 8003878:	183b      	adds	r3, r7, r0
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	0418      	lsls	r0, r3, #16
 800387e:	23ff      	movs	r3, #255	; 0xff
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4003      	ands	r3, r0
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b005      	add	sp, #20
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	03ff63ff 	.word	0x03ff63ff

080038a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2241      	movs	r2, #65	; 0x41
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d138      	bne.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e032      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2241      	movs	r2, #65	; 0x41
 80038d4:	2124      	movs	r1, #36	; 0x24
 80038d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4911      	ldr	r1, [pc, #68]	; (8003938 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	ffffefff 	.word	0xffffefff

0800393c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2241      	movs	r2, #65	; 0x41
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d139      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2240      	movs	r2, #64	; 0x40
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e033      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	2101      	movs	r1, #1
 8003966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2241      	movs	r2, #65	; 0x41
 800396c:	2124      	movs	r1, #36	; 0x24
 800396e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	430a      	orrs	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2241      	movs	r2, #65	; 0x41
 80039b6:	2120      	movs	r1, #32
 80039b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	fffff0ff 	.word	0xfffff0ff

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f000 fba5 	bl	8004132 <HAL_RCC_OscConfig+0x75e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e8:	4bce      	ldr	r3, [pc, #824]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	220c      	movs	r2, #12
 80039ee:	4013      	ands	r3, r2
 80039f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f2:	4bcc      	ldr	r3, [pc, #816]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	025b      	lsls	r3, r3, #9
 80039fa:	4013      	ands	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x36>
 8003a08:	e07d      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d112      	bne.n	8003a3c <HAL_RCC_OscConfig+0x68>
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	025b      	lsls	r3, r3, #9
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	4bc0      	ldr	r3, [pc, #768]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <HAL_RCC_OscConfig+0x5a>
 8003a2c:	e06a      	b.n	8003b04 <HAL_RCC_OscConfig+0x130>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d166      	bne.n	8003b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f000 fb7b 	bl	8004132 <HAL_RCC_OscConfig+0x75e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	025b      	lsls	r3, r3, #9
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x84>
 8003a48:	4bb6      	ldr	r3, [pc, #728]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4bb5      	ldr	r3, [pc, #724]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	0249      	lsls	r1, r1, #9
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e027      	b.n	8003aa8 <HAL_RCC_OscConfig+0xd4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	02db      	lsls	r3, r3, #11
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d10e      	bne.n	8003a82 <HAL_RCC_OscConfig+0xae>
 8003a64:	4baf      	ldr	r3, [pc, #700]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4bae      	ldr	r3, [pc, #696]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	02c9      	lsls	r1, r1, #11
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	4bac      	ldr	r3, [pc, #688]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4bab      	ldr	r3, [pc, #684]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a78:	2180      	movs	r1, #128	; 0x80
 8003a7a:	0249      	lsls	r1, r1, #9
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e012      	b.n	8003aa8 <HAL_RCC_OscConfig+0xd4>
 8003a82:	4ba8      	ldr	r3, [pc, #672]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba7      	ldr	r3, [pc, #668]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a88:	49a7      	ldr	r1, [pc, #668]	; (8003d28 <HAL_RCC_OscConfig+0x354>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4ba5      	ldr	r3, [pc, #660]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	025b      	lsls	r3, r3, #9
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4ba0      	ldr	r3, [pc, #640]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003aa2:	49a2      	ldr	r1, [pc, #648]	; (8003d2c <HAL_RCC_OscConfig+0x358>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d014      	beq.n	8003ada <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fb54 	bl	800215c <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aba:	f7fe fb4f 	bl	800215c <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	; 0x64
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e332      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003acc:	4b95      	ldr	r3, [pc, #596]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	029b      	lsls	r3, r3, #10
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0xe6>
 8003ad8:	e015      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe fb3f 	bl	800215c <HAL_GetTick>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fb3a 	bl	800215c <HAL_GetTick>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e31d      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	4013      	ands	r3, r2
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x110>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <HAL_RCC_OscConfig+0x13e>
 8003b10:	e08a      	b.n	8003c28 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d13d      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1cc>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d13a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b2a:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	4013      	ands	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_RCC_OscConfig+0x16a>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x16a>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e2f9      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a7b      	ldr	r2, [pc, #492]	; (8003d30 <HAL_RCC_OscConfig+0x35c>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2209      	movs	r2, #9
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	4b71      	ldr	r3, [pc, #452]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 fc19 	bl	800439c <HAL_RCC_GetSysClockFreq>
 8003b6a:	0001      	movs	r1, r0
 8003b6c:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	220f      	movs	r2, #15
 8003b74:	4013      	ands	r3, r2
 8003b76:	4a6f      	ldr	r2, [pc, #444]	; (8003d34 <HAL_RCC_OscConfig+0x360>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	40da      	lsrs	r2, r3
 8003b7e:	4b6e      	ldr	r3, [pc, #440]	; (8003d38 <HAL_RCC_OscConfig+0x364>)
 8003b80:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b82:	2513      	movs	r5, #19
 8003b84:	197c      	adds	r4, r7, r5
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fe fab2 	bl	80020f0 <HAL_InitTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b90:	002a      	movs	r2, r5
 8003b92:	18bb      	adds	r3, r7, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d046      	beq.n	8003c28 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8003b9a:	18bb      	adds	r3, r7, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	e2c8      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2209      	movs	r2, #9
 8003bac:	4393      	bics	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fad0 	bl	800215c <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fe facb 	bl	800215c <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e2ae      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d0f1      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4a53      	ldr	r2, [pc, #332]	; (8003d30 <HAL_RCC_OscConfig+0x35c>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	e018      	b.n	8003c28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fe faab 	bl	800215c <HAL_GetTick>
 8003c06:	0003      	movs	r3, r0
 8003c08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe faa6 	bl	800215c <HAL_GetTick>
 8003c10:	0002      	movs	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e289      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2204      	movs	r2, #4
 8003c24:	4013      	ands	r3, r2
 8003c26:	d1f1      	bne.n	8003c0c <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d100      	bne.n	8003c34 <HAL_RCC_OscConfig+0x260>
 8003c32:	e09f      	b.n	8003d74 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d13f      	bne.n	8003cba <HAL_RCC_OscConfig+0x2e6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <HAL_RCC_OscConfig+0x27e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e26f      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a39      	ldr	r2, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x368>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	0a19      	lsrs	r1, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	061a      	lsls	r2, r3, #24
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	0b5b      	lsrs	r3, r3, #13
 8003c80:	3301      	adds	r3, #1
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	0212      	lsls	r2, r2, #8
 8003c86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	210f      	movs	r1, #15
 8003c90:	400b      	ands	r3, r1
 8003c92:	4928      	ldr	r1, [pc, #160]	; (8003d34 <HAL_RCC_OscConfig+0x360>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x364>)
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c9c:	2513      	movs	r5, #19
 8003c9e:	197c      	adds	r4, r7, r5
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fe fa25 	bl	80020f0 <HAL_InitTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003caa:	002a      	movs	r2, r5
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05f      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003cb4:	18bb      	adds	r3, r7, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	e23b      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03e      	beq.n	8003d40 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	0049      	lsls	r1, r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fa44 	bl	800215c <HAL_GetTick>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cda:	f7fe fa3f 	bl	800215c <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e222      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x306>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <HAL_RCC_OscConfig+0x368>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	0a19      	lsrs	r1, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	061a      	lsls	r2, r3, #24
 8003d1a:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <HAL_RCC_OscConfig+0x350>)
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	e028      	b.n	8003d74 <HAL_RCC_OscConfig+0x3a0>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	fffeffff 	.word	0xfffeffff
 8003d2c:	fffbffff 	.word	0xfffbffff
 8003d30:	ffffe0ff 	.word	0xffffe0ff
 8003d34:	0800c7c8 	.word	0x0800c7c8
 8003d38:	20000014 	.word	0x20000014
 8003d3c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d40:	4bbd      	ldr	r3, [pc, #756]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4bbc      	ldr	r3, [pc, #752]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003d46:	49bd      	ldr	r1, [pc, #756]	; (800403c <HAL_RCC_OscConfig+0x668>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fa06 	bl	800215c <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d56:	f7fe fa01 	bl	800215c <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1e4      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d68:	4bb3      	ldr	r3, [pc, #716]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4013      	ands	r3, r2
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d019      	beq.n	8003dba <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4bac      	ldr	r3, [pc, #688]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d8a:	4bab      	ldr	r3, [pc, #684]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe f9e3 	bl	800215c <HAL_GetTick>
 8003d96:	0003      	movs	r3, r0
 8003d98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe f9de 	bl	800215c <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1c1      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dae:	4ba2      	ldr	r3, [pc, #648]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	2202      	movs	r2, #2
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f1      	beq.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
 8003db8:	e018      	b.n	8003dec <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dba:	4b9f      	ldr	r3, [pc, #636]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dbe:	4b9e      	ldr	r3, [pc, #632]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	438a      	bics	r2, r1
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe f9c9 	bl	800215c <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f9c4 	bl	800215c <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1a7      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003de2:	4b95      	ldr	r3, [pc, #596]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d1f1      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	4013      	ands	r3, r2
 8003df4:	d100      	bne.n	8003df8 <HAL_RCC_OscConfig+0x424>
 8003df6:	e0ae      	b.n	8003f56 <HAL_RCC_OscConfig+0x582>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df8:	2027      	movs	r0, #39	; 0x27
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e00:	4b8d      	ldr	r3, [pc, #564]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	055b      	lsls	r3, r3, #21
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCC_OscConfig+0x44c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e10:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	0549      	lsls	r1, r1, #21
 8003e16:	430a      	orrs	r2, r1
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b87      	ldr	r3, [pc, #540]	; (8004040 <HAL_RCC_OscConfig+0x66c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d11a      	bne.n	8003e62 <HAL_RCC_OscConfig+0x48e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2c:	4b84      	ldr	r3, [pc, #528]	; (8004040 <HAL_RCC_OscConfig+0x66c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b83      	ldr	r3, [pc, #524]	; (8004040 <HAL_RCC_OscConfig+0x66c>)
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	0049      	lsls	r1, r1, #1
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe f98f 	bl	800215c <HAL_GetTick>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x482>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e44:	f7fe f98a 	bl	800215c <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x482>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e16d      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x66c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x470>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4aa>
 8003e6e:	4b72      	ldr	r3, [pc, #456]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	0049      	lsls	r1, r1, #1
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e7c:	e031      	b.n	8003ee2 <HAL_RCC_OscConfig+0x50e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4cc>
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e8a:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e8c:	496b      	ldr	r1, [pc, #428]	; (800403c <HAL_RCC_OscConfig+0x668>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	651a      	str	r2, [r3, #80]	; 0x50
 8003e92:	4b69      	ldr	r3, [pc, #420]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e96:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003e98:	496a      	ldr	r1, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x670>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8003e9e:	e020      	b.n	8003ee2 <HAL_RCC_OscConfig+0x50e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	23a0      	movs	r3, #160	; 0xa0
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10e      	bne.n	8003eca <HAL_RCC_OscConfig+0x4f6>
 8003eac:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eb0:	4b61      	ldr	r3, [pc, #388]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	00c9      	lsls	r1, r1, #3
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	0049      	lsls	r1, r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x50e>
 8003eca:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003ed0:	495a      	ldr	r1, [pc, #360]	; (800403c <HAL_RCC_OscConfig+0x668>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8003ed6:	4b58      	ldr	r3, [pc, #352]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eda:	4b57      	ldr	r3, [pc, #348]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003edc:	4959      	ldr	r1, [pc, #356]	; (8004044 <HAL_RCC_OscConfig+0x670>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d015      	beq.n	8003f16 <HAL_RCC_OscConfig+0x542>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe f937 	bl	800215c <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef2:	e009      	b.n	8003f08 <HAL_RCC_OscConfig+0x534>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fe f932 	bl	800215c <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x674>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x534>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e114      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d0ef      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x520>
 8003f14:	e014      	b.n	8003f40 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fe f921 	bl	800215c <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1e:	e009      	b.n	8003f34 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fe f91c 	bl	800215c <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	4a47      	ldr	r2, [pc, #284]	; (8004048 <HAL_RCC_OscConfig+0x674>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0fe      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d1ef      	bne.n	8003f20 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f40:	2327      	movs	r3, #39	; 0x27
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x582>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f50:	493e      	ldr	r1, [pc, #248]	; (800404c <HAL_RCC_OscConfig+0x678>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d049      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x620>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d026      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x5e2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f68:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f80:	4b33      	ldr	r3, [pc, #204]	; (8004050 <HAL_RCC_OscConfig+0x67c>)
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCC_OscConfig+0x67c>)
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	0189      	lsls	r1, r1, #6
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fe f8e5 	bl	800215c <HAL_GetTick>
 8003f92:	0003      	movs	r3, r0
 8003f94:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x5d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f98:	f7fe f8e0 	bl	800215c <HAL_GetTick>
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0c3      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d0f1      	beq.n	8003f98 <HAL_RCC_OscConfig+0x5c4>
 8003fb4:	e01e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x620>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_RCC_OscConfig+0x67c>)
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_OscConfig+0x67c>)
 8003fc8:	4922      	ldr	r1, [pc, #136]	; (8004054 <HAL_RCC_OscConfig+0x680>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe f8c5 	bl	800215c <HAL_GetTick>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd8:	f7fe f8c0 	bl	800215c <HAL_GetTick>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0a3      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d1f1      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x604>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d100      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
 8003ffc:	e098      	b.n	8004130 <HAL_RCC_OscConfig+0x75c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d100      	bne.n	8004006 <HAL_RCC_OscConfig+0x632>
 8004004:	e077      	b.n	80040f6 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2b02      	cmp	r3, #2
 800400c:	d158      	bne.n	80040c0 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_OscConfig+0x664>)
 8004014:	4910      	ldr	r1, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x684>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fe f89f 	bl	800215c <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004022:	e01b      	b.n	800405c <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fe f89a 	bl	800215c <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d914      	bls.n	800405c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e07d      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	40021000 	.word	0x40021000
 800403c:	fffffeff 	.word	0xfffffeff
 8004040:	40007000 	.word	0x40007000
 8004044:	fffffbff 	.word	0xfffffbff
 8004048:	00001388 	.word	0x00001388
 800404c:	efffffff 	.word	0xefffffff
 8004050:	40010000 	.word	0x40010000
 8004054:	ffffdfff 	.word	0xffffdfff
 8004058:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800405c:	4b37      	ldr	r3, [pc, #220]	; (800413c <HAL_RCC_OscConfig+0x768>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	049b      	lsls	r3, r3, #18
 8004064:	4013      	ands	r3, r2
 8004066:	d1dd      	bne.n	8004024 <HAL_RCC_OscConfig+0x650>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b34      	ldr	r3, [pc, #208]	; (800413c <HAL_RCC_OscConfig+0x768>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a34      	ldr	r2, [pc, #208]	; (8004140 <HAL_RCC_OscConfig+0x76c>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	431a      	orrs	r2, r3
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCC_OscConfig+0x768>)
 8004084:	430a      	orrs	r2, r1
 8004086:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_RCC_OscConfig+0x768>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCC_OscConfig+0x768>)
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	0449      	lsls	r1, r1, #17
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe f861 	bl	800215c <HAL_GetTick>
 800409a:	0003      	movs	r3, r0
 800409c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe f85c 	bl	800215c <HAL_GetTick>
 80040a4:	0002      	movs	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e03f      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_OscConfig+0x768>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	049b      	lsls	r3, r3, #18
 80040ba:	4013      	ands	r3, r2
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x6cc>
 80040be:	e037      	b.n	8004130 <HAL_RCC_OscConfig+0x75c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_OscConfig+0x768>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_OscConfig+0x768>)
 80040c6:	491f      	ldr	r1, [pc, #124]	; (8004144 <HAL_RCC_OscConfig+0x770>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe f846 	bl	800215c <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe f841 	bl	800215c <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e024      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_RCC_OscConfig+0x768>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	049b      	lsls	r3, r3, #18
 80040f0:	4013      	ands	r3, r2
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x702>
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->CFGR;
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <HAL_RCC_OscConfig+0x768>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	025b      	lsls	r3, r3, #9
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
 800410a:	d10f      	bne.n	800412c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	23f0      	movs	r3, #240	; 0xf0
 8004110:	039b      	lsls	r3, r3, #14
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	23c0      	movs	r3, #192	; 0xc0
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	401a      	ands	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x75e>
      }
    }
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b00a      	add	sp, #40	; 0x28
 8004138:	bdb0      	pop	{r4, r5, r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	40021000 	.word	0x40021000
 8004140:	ff02ffff 	.word	0xff02ffff
 8004144:	feffffff 	.word	0xfeffffff

08004148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004148:	b5b0      	push	{r4, r5, r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e10d      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800415c:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	4013      	ands	r3, r2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d911      	bls.n	800418e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b85      	ldr	r3, [pc, #532]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	4393      	bics	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	4b82      	ldr	r3, [pc, #520]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417c:	4b80      	ldr	r3, [pc, #512]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2201      	movs	r2, #1
 8004182:	4013      	ands	r3, r2
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d001      	beq.n	800418e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0f4      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b7a      	ldr	r3, [pc, #488]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	22f0      	movs	r2, #240	; 0xf0
 800419e:	4393      	bics	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	4b77      	ldr	r3, [pc, #476]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x70>
 80041b6:	e089      	b.n	80042cc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041c0:	4b70      	ldr	r3, [pc, #448]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	4013      	ands	r3, r2
 80041ca:	d120      	bne.n	800420e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0d3      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	049b      	lsls	r3, r3, #18
 80041e0:	4013      	ands	r3, r2
 80041e2:	d114      	bne.n	800420e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0c7      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2204      	movs	r2, #4
 80041f6:	4013      	ands	r3, r2
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0bc      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041fe:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0b4      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2203      	movs	r2, #3
 8004214:	4393      	bics	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 800421e:	430a      	orrs	r2, r1
 8004220:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004222:	f7fd ff9b 	bl	800215c <HAL_GetTick>
 8004226:	0003      	movs	r3, r0
 8004228:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d111      	bne.n	8004256 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004232:	e009      	b.n	8004248 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fd ff92 	bl	800215c <HAL_GetTick>
 8004238:	0002      	movs	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x240>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e097      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004248:	4b4e      	ldr	r3, [pc, #312]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	220c      	movs	r2, #12
 800424e:	4013      	ands	r3, r2
 8004250:	2b08      	cmp	r3, #8
 8004252:	d1ef      	bne.n	8004234 <HAL_RCC_ClockConfig+0xec>
 8004254:	e03a      	b.n	80042cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d111      	bne.n	8004282 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	e009      	b.n	8004274 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fd ff7c 	bl	800215c <HAL_GetTick>
 8004264:	0002      	movs	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	4a47      	ldr	r2, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x240>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e081      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	220c      	movs	r2, #12
 800427a:	4013      	ands	r3, r2
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d1ef      	bne.n	8004260 <HAL_RCC_ClockConfig+0x118>
 8004280:	e024      	b.n	80042cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d11b      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800428a:	e009      	b.n	80042a0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fd ff66 	bl	800215c <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	4a3c      	ldr	r2, [pc, #240]	; (8004388 <HAL_RCC_ClockConfig+0x240>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e06b      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	220c      	movs	r2, #12
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d1ef      	bne.n	800428c <HAL_RCC_ClockConfig+0x144>
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ae:	f7fd ff55 	bl	800215c <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_RCC_ClockConfig+0x240>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e05a      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	220c      	movs	r2, #12
 80042c8:	4013      	ands	r3, r2
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	4013      	ands	r3, r2
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d211      	bcs.n	80042fe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b29      	ldr	r3, [pc, #164]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	4393      	bics	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_ClockConfig+0x238>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e03c      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a1f      	ldr	r2, [pc, #124]	; (800438c <HAL_RCC_ClockConfig+0x244>)
 800430e:	4013      	ands	r3, r2
 8004310:	0019      	movs	r1, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004318:	430a      	orrs	r2, r1
 800431a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2208      	movs	r2, #8
 8004322:	4013      	ands	r3, r2
 8004324:	d00a      	beq.n	800433c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_RCC_ClockConfig+0x248>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	00da      	lsls	r2, r3, #3
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004338:	430a      	orrs	r2, r1
 800433a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433c:	f000 f82e 	bl	800439c <HAL_RCC_GetSysClockFreq>
 8004340:	0001      	movs	r1, r0
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_ClockConfig+0x23c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	220f      	movs	r2, #15
 800434a:	4013      	ands	r3, r2
 800434c:	4a11      	ldr	r2, [pc, #68]	; (8004394 <HAL_RCC_ClockConfig+0x24c>)
 800434e:	5cd3      	ldrb	r3, [r2, r3]
 8004350:	000a      	movs	r2, r1
 8004352:	40da      	lsrs	r2, r3
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_ClockConfig+0x250>)
 8004356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004358:	250b      	movs	r5, #11
 800435a:	197c      	adds	r4, r7, r5
 800435c:	2000      	movs	r0, #0
 800435e:	f7fd fec7 	bl	80020f0 <HAL_InitTick>
 8004362:	0003      	movs	r3, r0
 8004364:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004366:	002a      	movs	r2, r5
 8004368:	18bb      	adds	r3, r7, r2
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004370:	18bb      	adds	r3, r7, r2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	e000      	b.n	8004378 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bdb0      	pop	{r4, r5, r7, pc}
 8004380:	40022000 	.word	0x40022000
 8004384:	40021000 	.word	0x40021000
 8004388:	00001388 	.word	0x00001388
 800438c:	fffff8ff 	.word	0xfffff8ff
 8004390:	ffffc7ff 	.word	0xffffc7ff
 8004394:	0800c7c8 	.word	0x0800c7c8
 8004398:	20000014 	.word	0x20000014

0800439c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80043a2:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	220c      	movs	r2, #12
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d013      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x3e>
 80043b2:	d85c      	bhi.n	800446e <HAL_RCC_GetSysClockFreq+0xd2>
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d002      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x22>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00b      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x38>
 80043bc:	e057      	b.n	800446e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043be:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	4013      	ands	r3, r2
 80043c6:	d002      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043ca:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043cc:	e05d      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <HAL_RCC_GetSysClockFreq+0x100>)
 80043d0:	613b      	str	r3, [r7, #16]
      break;
 80043d2:	e05a      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d6:	613b      	str	r3, [r7, #16]
      break;
 80043d8:	e057      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0c9b      	lsrs	r3, r3, #18
 80043de:	220f      	movs	r2, #15
 80043e0:	4013      	ands	r3, r2
 80043e2:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	0d9b      	lsrs	r3, r3, #22
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	3301      	adds	r3, #1
 80043f2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	4013      	ands	r3, r2
 80043fe:	d00f      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	000a      	movs	r2, r1
 8004404:	0152      	lsls	r2, r2, #5
 8004406:	1a52      	subs	r2, r2, r1
 8004408:	0193      	lsls	r3, r2, #6
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	185b      	adds	r3, r3, r1
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fb fe93 	bl	8000140 <__udivsi3>
 800441a:	0003      	movs	r3, r0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e023      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	4013      	ands	r3, r2
 8004428:	d00f      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	000a      	movs	r2, r1
 800442e:	0152      	lsls	r2, r2, #5
 8004430:	1a52      	subs	r2, r2, r1
 8004432:	0193      	lsls	r3, r2, #6
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	185b      	adds	r3, r3, r1
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f7fb fe7e 	bl	8000140 <__udivsi3>
 8004444:	0003      	movs	r3, r0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e00e      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	000a      	movs	r2, r1
 800444e:	0152      	lsls	r2, r2, #5
 8004450:	1a52      	subs	r2, r2, r1
 8004452:	0193      	lsls	r3, r2, #6
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	185b      	adds	r3, r3, r1
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	0018      	movs	r0, r3
 8004460:	f7fb fe6e 	bl	8000140 <__udivsi3>
 8004464:	0003      	movs	r3, r0
 8004466:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	613b      	str	r3, [r7, #16]
      break;
 800446c:	e00d      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	2207      	movs	r2, #7
 8004476:	4013      	ands	r3, r2
 8004478:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	0212      	lsls	r2, r2, #8
 8004482:	409a      	lsls	r2, r3
 8004484:	0013      	movs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
      break;
 8004488:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800448a:	693b      	ldr	r3, [r7, #16]
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b006      	add	sp, #24
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	003d0900 	.word	0x003d0900
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200
 80044a4:	0800c7d8 	.word	0x0800c7d8

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2220      	movs	r2, #32
 80044b6:	4013      	ands	r3, r2
 80044b8:	d100      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x14>
 80044ba:	e0c6      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80044bc:	2017      	movs	r0, #23
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c4:	4b90      	ldr	r3, [pc, #576]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	055b      	lsls	r3, r3, #21
 80044cc:	4013      	ands	r3, r2
 80044ce:	d109      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d4:	4b8c      	ldr	r3, [pc, #560]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	0549      	lsls	r1, r1, #21
 80044da:	430a      	orrs	r2, r1
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	d11a      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f0:	4b86      	ldr	r3, [pc, #536]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	0049      	lsls	r1, r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fd fe2d 	bl	800215c <HAL_GetTick>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fd fe28 	bl	800215c <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0f2      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4013      	ands	r3, r2
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004526:	4b78      	ldr	r3, [pc, #480]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	23c0      	movs	r3, #192	; 0xc0
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	23c0      	movs	r3, #192	; 0xc0
 8004538:	039b      	lsls	r3, r3, #14
 800453a:	4013      	ands	r3, r2
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	d013      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	23c0      	movs	r3, #192	; 0xc0
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	401a      	ands	r2, r3
 800454c:	23c0      	movs	r3, #192	; 0xc0
 800454e:	029b      	lsls	r3, r3, #10
 8004550:	429a      	cmp	r2, r3
 8004552:	d10a      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004554:	4b6c      	ldr	r3, [pc, #432]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	401a      	ands	r2, r3
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	429a      	cmp	r2, r3
 8004564:	d101      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0ca      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800456a:	4b67      	ldr	r3, [pc, #412]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800456e:	23c0      	movs	r3, #192	; 0xc0
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03b      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	23c0      	movs	r3, #192	; 0xc0
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d033      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	4013      	ands	r3, r2
 8004594:	d02e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004596:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	4a5d      	ldr	r2, [pc, #372]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a4:	4b58      	ldr	r3, [pc, #352]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	0309      	lsls	r1, r1, #12
 80045aa:	430a      	orrs	r2, r1
 80045ac:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ae:	4b56      	ldr	r3, [pc, #344]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b4:	4957      	ldr	r1, [pc, #348]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80045ba:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	d014      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fd fdc7 	bl	800215c <HAL_GetTick>
 80045ce:	0003      	movs	r3, r0
 80045d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d2:	e009      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd fdc2 	bl	800215c <HAL_GetTick>
 80045d8:	0002      	movs	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	4a4e      	ldr	r2, [pc, #312]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e08b      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e8:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	d0ef      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	23c0      	movs	r3, #192	; 0xc0
 80045fa:	029b      	lsls	r3, r3, #10
 80045fc:	401a      	ands	r2, r3
 80045fe:	23c0      	movs	r3, #192	; 0xc0
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	429a      	cmp	r2, r3
 8004604:	d10c      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004606:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a44      	ldr	r2, [pc, #272]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800460c:	4013      	ands	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	23c0      	movs	r3, #192	; 0xc0
 8004616:	039b      	lsls	r3, r3, #14
 8004618:	401a      	ands	r2, r3
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	4b39      	ldr	r3, [pc, #228]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	23c0      	movs	r3, #192	; 0xc0
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	401a      	ands	r2, r3
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	430a      	orrs	r2, r1
 8004632:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004634:	2317      	movs	r3, #23
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463e:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004644:	4936      	ldr	r1, [pc, #216]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004646:	400a      	ands	r2, r1
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	4013      	ands	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004654:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	2203      	movs	r2, #3
 800465a:	4393      	bics	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004664:	430a      	orrs	r2, r1
 8004666:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2202      	movs	r2, #2
 800466e:	4013      	ands	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004672:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	220c      	movs	r2, #12
 8004678:	4393      	bics	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	430a      	orrs	r2, r1
 8004684:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2204      	movs	r2, #4
 800468c:	4013      	ands	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	430a      	orrs	r2, r1
 80046a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2208      	movs	r2, #8
 80046aa:	4013      	ands	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	430a      	orrs	r2, r1
 80046c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	4013      	ands	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	430a      	orrs	r2, r1
 80046de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	4013      	ands	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	4a10      	ldr	r2, [pc, #64]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	430a      	orrs	r2, r1
 80046fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b006      	add	sp, #24
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	40007000 	.word	0x40007000
 8004710:	fffcffff 	.word	0xfffcffff
 8004714:	fff7ffff 	.word	0xfff7ffff
 8004718:	00001388 	.word	0x00001388
 800471c:	ffcfffff 	.word	0xffcfffff
 8004720:	efffffff 	.word	0xefffffff
 8004724:	fffff3ff 	.word	0xfffff3ff
 8004728:	ffffcfff 	.word	0xffffcfff
 800472c:	fbffffff 	.word	0xfbffffff
 8004730:	fff3ffff 	.word	0xfff3ffff

08004734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e01e      	b.n	8004784 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2239      	movs	r2, #57	; 0x39
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2238      	movs	r2, #56	; 0x38
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f004 f9af 	bl	8008ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2239      	movs	r2, #57	; 0x39
 8004766:	2102      	movs	r1, #2
 8004768:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3304      	adds	r3, #4
 8004772:	0019      	movs	r1, r3
 8004774:	0010      	movs	r0, r2
 8004776:	f000 f933 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2239      	movs	r2, #57	; 0x39
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b002      	add	sp, #8
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2101      	movs	r1, #1
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2207      	movs	r2, #7
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d007      	beq.n	80047c6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b004      	add	sp, #16
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2202      	movs	r2, #2
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d124      	bne.n	8004830 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2202      	movs	r2, #2
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d11d      	bne.n	8004830 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2203      	movs	r2, #3
 80047fa:	4252      	negs	r2, r2
 80047fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2203      	movs	r2, #3
 800480c:	4013      	ands	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f8cc 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 8004818:	e007      	b.n	800482a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 f8bf 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f000 f8cb 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2204      	movs	r2, #4
 8004838:	4013      	ands	r3, r2
 800483a:	2b04      	cmp	r3, #4
 800483c:	d125      	bne.n	800488a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2204      	movs	r2, #4
 8004846:	4013      	ands	r3, r2
 8004848:	2b04      	cmp	r3, #4
 800484a:	d11e      	bne.n	800488a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2205      	movs	r2, #5
 8004852:	4252      	negs	r2, r2
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	23c0      	movs	r3, #192	; 0xc0
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4013      	ands	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f89f 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 8004872:	e007      	b.n	8004884 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0018      	movs	r0, r3
 8004878:	f000 f892 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0018      	movs	r0, r3
 8004880:	f000 f89e 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2208      	movs	r2, #8
 8004892:	4013      	ands	r3, r2
 8004894:	2b08      	cmp	r3, #8
 8004896:	d124      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2208      	movs	r2, #8
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11d      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2209      	movs	r2, #9
 80048ac:	4252      	negs	r2, r2
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2204      	movs	r2, #4
 80048b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2203      	movs	r2, #3
 80048be:	4013      	ands	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 f873 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e007      	b.n	80048dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f866 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 f872 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2210      	movs	r2, #16
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d125      	bne.n	800493c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2210      	movs	r2, #16
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d11e      	bne.n	800493c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2211      	movs	r2, #17
 8004904:	4252      	negs	r2, r2
 8004906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2208      	movs	r2, #8
 800490c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	23c0      	movs	r3, #192	; 0xc0
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	0018      	movs	r0, r3
 8004920:	f000 f846 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 8004924:	e007      	b.n	8004936 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0018      	movs	r0, r3
 800492a:	f000 f839 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f845 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2201      	movs	r2, #1
 8004944:	4013      	ands	r3, r2
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10f      	bne.n	800496a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	4013      	ands	r3, r2
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2202      	movs	r2, #2
 800495e:	4252      	negs	r2, r2
 8004960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f001 f87b 	bl	8005a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	4013      	ands	r3, r2
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d10f      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	4013      	ands	r3, r2
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d108      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	4252      	negs	r2, r2
 800498e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f81c 	bl	80049d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	05db      	lsls	r3, r3, #23
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0x2a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <TIM_Base_SetConfig+0x9c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0x2a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <TIM_Base_SetConfig+0xa0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2270      	movs	r2, #112	; 0x70
 8004a0e:	4393      	bics	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	05db      	lsls	r3, r3, #23
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d007      	beq.n	8004a36 <TIM_Base_SetConfig+0x56>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <TIM_Base_SetConfig+0x9c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_Base_SetConfig+0x56>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <TIM_Base_SetConfig+0xa0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <TIM_Base_SetConfig+0xa4>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	001a      	movs	r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	615a      	str	r2, [r3, #20]
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40010800 	.word	0x40010800
 8004a80:	40011400 	.word	0x40011400
 8004a84:	fffffcff 	.word	0xfffffcff

08004a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2238      	movs	r2, #56	; 0x38
 8004a96:	5c9b      	ldrb	r3, [r3, r2]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e032      	b.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2238      	movs	r2, #56	; 0x38
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2239      	movs	r2, #57	; 0x39
 8004aac:	2102      	movs	r1, #2
 8004aae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2270      	movs	r2, #112	; 0x70
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2239      	movs	r2, #57	; 0x39
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2238      	movs	r2, #56	; 0x38
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b004      	add	sp, #16
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004b16:	003b      	movs	r3, r7
 8004b18:	0018      	movs	r0, r3
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f004 f842 	bl	8008ba8 <memset>

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004b24:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <MX_ADC_Init+0xf8>)
 8004b28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	05d2      	lsls	r2, r2, #23
 8004b36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004b38:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004b44:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b52:	2220      	movs	r2, #32
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004b58:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b68:	22c2      	movs	r2, #194	; 0xc2
 8004b6a:	32ff      	adds	r2, #255	; 0xff
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004b6e:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b70:	222c      	movs	r2, #44	; 0x2c
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004b76:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b78:	2208      	movs	r2, #8
 8004b7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004b82:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7fd fb08 	bl	80021ac <HAL_ADC_Init>
 8004b9c:	1e03      	subs	r3, r0, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004ba0:	f003 fe14 	bl	80087cc <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004ba4:	003b      	movs	r3, r7
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004baa:	003b      	movs	r3, r7
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	0152      	lsls	r2, r2, #5
 8004bb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bb2:	003a      	movs	r2, r7
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fd fd05 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004bc2:	f003 fe03 	bl	80087cc <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004bc6:	003b      	movs	r3, r7
 8004bc8:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <MX_ADC_Init+0xfc>)
 8004bca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bcc:	003a      	movs	r2, r7
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004bd0:	0011      	movs	r1, r2
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fd fcf8 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d001      	beq.n	8004be0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004bdc:	f003 fdf6 	bl	80087cc <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004be0:	003b      	movs	r3, r7
 8004be2:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <MX_ADC_Init+0x100>)
 8004be4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004be6:	003a      	movs	r2, r7
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <MX_ADC_Init+0xf4>)
 8004bea:	0011      	movs	r1, r2
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7fd fceb 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8004bf2:	1e03      	subs	r3, r0, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8004bf6:	f003 fde9 	bl	80087cc <Error_Handler>
  }

}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	20000208 	.word	0x20000208
 8004c08:	40012400 	.word	0x40012400
 8004c0c:	04000002 	.word	0x04000002
 8004c10:	08000004 	.word	0x08000004

08004c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1c:	240c      	movs	r4, #12
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	0018      	movs	r0, r3
 8004c22:	2314      	movs	r3, #20
 8004c24:	001a      	movs	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f003 ffbe 	bl	8008ba8 <memset>
  if(adcHandle->Instance==ADC1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_ADC_MspInit+0xc8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d14d      	bne.n	8004cd2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c36:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_ADC_MspInit+0xcc>)
 8004c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_ADC_MspInit+0xcc>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0089      	lsls	r1, r1, #2
 8004c40:	430a      	orrs	r2, r1
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c44:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_ADC_MspInit+0xcc>)
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_ADC_MspInit+0xcc>)
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c50:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <HAL_ADC_MspInit+0xcc>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2201      	movs	r2, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = Level_Pin|Weight_Pin|Temp_Pin;
 8004c5c:	193b      	adds	r3, r7, r4
 8004c5e:	2207      	movs	r2, #7
 8004c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c62:	193b      	adds	r3, r7, r4
 8004c64:	2203      	movs	r2, #3
 8004c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	193b      	adds	r3, r7, r4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6e:	193a      	adds	r2, r7, r4
 8004c70:	23a0      	movs	r3, #160	; 0xa0
 8004c72:	05db      	lsls	r3, r3, #23
 8004c74:	0011      	movs	r1, r2
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fe f8c4 	bl	8002e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_ADC_MspInit+0xd4>)
 8004c80:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	0052      	lsls	r2, r2, #1
 8004ca0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fd fee9 	bl	8002a90 <HAL_DMA_Init>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8004cc2:	f003 fd83 	bl	80087cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a06      	ldr	r2, [pc, #24]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004cca:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_ADC_MspInit+0xd0>)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b009      	add	sp, #36	; 0x24
 8004cd8:	bd90      	pop	{r4, r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	40012400 	.word	0x40012400
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	20000264 	.word	0x20000264
 8004ce8:	40020008 	.word	0x40020008

08004cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <MX_DMA_Init+0x38>)
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <MX_DMA_Init+0x38>)
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <MX_DMA_Init+0x38>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	2201      	movs	r2, #1
 8004d04:	4013      	ands	r3, r2
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2009      	movs	r0, #9
 8004d10:	f7fd fe8c 	bl	8002a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004d14:	2009      	movs	r0, #9
 8004d16:	f7fd fe9e 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b002      	add	sp, #8
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	40021000 	.word	0x40021000

08004d28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2e:	240c      	movs	r4, #12
 8004d30:	193b      	adds	r3, r7, r4
 8004d32:	0018      	movs	r0, r3
 8004d34:	2314      	movs	r3, #20
 8004d36:	001a      	movs	r2, r3
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f003 ff35 	bl	8008ba8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d44:	2104      	movs	r1, #4
 8004d46:	430a      	orrs	r2, r1
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d4a:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d62:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	2201      	movs	r2, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d74:	2102      	movs	r1, #2
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d7a:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <MX_GPIO_Init+0xec>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	2202      	movs	r2, #2
 8004d80:	4013      	ands	r3, r2
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED11_Pin, GPIO_PIN_SET);
 8004d86:	23c0      	movs	r3, #192	; 0xc0
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	4823      	ldr	r0, [pc, #140]	; (8004e18 <MX_GPIO_Init+0xf0>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	0019      	movs	r1, r3
 8004d90:	f7fe f9cb 	bl	800312a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8004d94:	4921      	ldr	r1, [pc, #132]	; (8004e1c <MX_GPIO_Init+0xf4>)
 8004d96:	23a0      	movs	r3, #160	; 0xa0
 8004d98:	05db      	lsls	r3, r3, #23
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fe f9c4 	bl	800312a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |PZ_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin;
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	22c0      	movs	r2, #192	; 0xc0
 8004da6:	0212      	lsls	r2, r2, #8
 8004da8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	2201      	movs	r2, #1
 8004dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <MX_GPIO_Init+0xf0>)
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	f7fe f81e 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <MX_GPIO_Init+0xf4>)
 8004dcc:	601a      	str	r2, [r3, #0]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |PZ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dce:	193b      	adds	r3, r7, r4
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de0:	193a      	adds	r2, r7, r4
 8004de2:	23a0      	movs	r3, #160	; 0xa0
 8004de4:	05db      	lsls	r3, r3, #23
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fe f80b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S5_Pin
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	223b      	movs	r2, #59	; 0x3b
 8004df2:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004df4:	193b      	adds	r3, r7, r4
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <MX_GPIO_Init+0xf8>)
 8004e04:	0019      	movs	r1, r3
 8004e06:	0010      	movs	r0, r2
 8004e08:	f7fd fffc 	bl	8002e04 <HAL_GPIO_Init>

}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b009      	add	sp, #36	; 0x24
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	50000800 	.word	0x50000800
 8004e1c:	000087f8 	.word	0x000087f8
 8004e20:	50000400 	.word	0x50000400

08004e24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e2a:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <MX_I2C1_Init+0x78>)
 8004e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <MX_I2C1_Init+0x7c>)
 8004e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e3a:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e40:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7fe f97f 	bl	8003164 <HAL_I2C_Init>
 8004e66:	1e03      	subs	r3, r0, #0
 8004e68:	d001      	beq.n	8004e6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004e6a:	f003 fcaf 	bl	80087cc <Error_Handler>
  }
  /**Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e70:	2100      	movs	r1, #0
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7fe fd16 	bl	80038a4 <HAL_I2CEx_ConfigAnalogFilter>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004e7c:	f003 fca6 	bl	80087cc <Error_Handler>
  }
  /**Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <MX_I2C1_Init+0x74>)
 8004e82:	2100      	movs	r1, #0
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fe fd59 	bl	800393c <HAL_I2CEx_ConfigDigitalFilter>
 8004e8a:	1e03      	subs	r3, r0, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004e8e:	f003 fc9d 	bl	80087cc <Error_Handler>
  }

}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200002ac 	.word	0x200002ac
 8004e9c:	40005400 	.word	0x40005400
 8004ea0:	00300f38 	.word	0x00300f38

08004ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b089      	sub	sp, #36	; 0x24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	240c      	movs	r4, #12
 8004eae:	193b      	adds	r3, r7, r4
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	2314      	movs	r3, #20
 8004eb4:	001a      	movs	r2, r3
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	f003 fe76 	bl	8008ba8 <memset>
  if(i2cHandle->Instance==I2C1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_I2C_MspInit+0x7c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d128      	bne.n	8004f18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_I2C_MspInit+0x80>)
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_I2C_MspInit+0x80>)
 8004ecc:	2102      	movs	r1, #2
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <HAL_I2C_MspInit+0x80>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ede:	0021      	movs	r1, r4
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	22c0      	movs	r2, #192	; 0xc0
 8004ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	2212      	movs	r2, #18
 8004eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	2201      	movs	r2, #1
 8004ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2201      	movs	r2, #1
 8004efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <HAL_I2C_MspInit+0x84>)
 8004f02:	0019      	movs	r1, r3
 8004f04:	0010      	movs	r0, r2
 8004f06:	f7fd ff7d 	bl	8002e04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_I2C_MspInit+0x80>)
 8004f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_I2C_MspInit+0x80>)
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	0389      	lsls	r1, r1, #14
 8004f14:	430a      	orrs	r2, r1
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b009      	add	sp, #36	; 0x24
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	40005400 	.word	0x40005400
 8004f24:	40021000 	.word	0x40021000
 8004f28:	50000400 	.word	0x50000400

08004f2c <IIC_Writecmd>:
//**************************************************************************************************
//  Send comman to LCD display
//**************************************************************************************************
//
void IIC_Writecmd(uint8_t com)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af04      	add	r7, sp, #16
 8004f32:	0002      	movs	r2, r0
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x00,1,&com,1,100);
 8004f38:	4807      	ldr	r0, [pc, #28]	; (8004f58 <IIC_Writecmd+0x2c>)
 8004f3a:	2364      	movs	r3, #100	; 0x64
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	1dfb      	adds	r3, r7, #7
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2301      	movs	r3, #1
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2178      	movs	r1, #120	; 0x78
 8004f4c:	f7fe f9a0 	bl	8003290 <HAL_I2C_Mem_Write>
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200002ac 	.word	0x200002ac

08004f5c <IIC_Writedata>:

void IIC_Writedata(uint8_t data)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	0002      	movs	r2, r0
 8004f64:	1dfb      	adds	r3, r7, #7
 8004f66:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x40,1,&data,1,100);
 8004f68:	4807      	ldr	r0, [pc, #28]	; (8004f88 <IIC_Writedata+0x2c>)
 8004f6a:	2364      	movs	r3, #100	; 0x64
 8004f6c:	9302      	str	r3, [sp, #8]
 8004f6e:	2301      	movs	r3, #1
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2301      	movs	r3, #1
 8004f78:	2240      	movs	r2, #64	; 0x40
 8004f7a:	2178      	movs	r1, #120	; 0x78
 8004f7c:	f7fe f988 	bl	8003290 <HAL_I2C_Mem_Write>
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200002ac 	.word	0x200002ac

08004f8c <OLED_Clear>:

void OLED_Clear(void)  
{  
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e022      	b.n	8004fe0 <OLED_Clear+0x54>
	{
		IIC_Writecmd(0xb0+i);
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	3b50      	subs	r3, #80	; 0x50
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff ffc2 	bl	8004f2c <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7ff ffbf 	bl	8004f2c <IIC_Writecmd>
		IIC_Writecmd(0x10);
 8004fae:	2010      	movs	r0, #16
 8004fb0:	f7ff ffbc 	bl	8004f2c <IIC_Writecmd>
		for(n=0;n<128;n++)IIC_Writedata(0); 
 8004fb4:	1dbb      	adds	r3, r7, #6
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e007      	b.n	8004fcc <OLED_Clear+0x40>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7ff ffcd 	bl	8004f5c <IIC_Writedata>
 8004fc2:	1dbb      	adds	r3, r7, #6
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	1dbb      	adds	r3, r7, #6
 8004fc8:	3201      	adds	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	1dbb      	adds	r3, r7, #6
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	daf2      	bge.n	8004fbc <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	1dfb      	adds	r3, r7, #7
 8004fdc:	3201      	adds	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	d9d8      	bls.n	8004f9a <OLED_Clear+0xe>
	}
	OLED_Set_Pos(0,0);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	2000      	movs	r0, #0
 8004fec:	f000 f865 	bl	80050ba <OLED_Set_Pos>
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <lcd_init>:
//**************************************************************************************************
//	LCD display initialization
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *h)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	IIC_Writecmd(0xAE);//--turn off oled panel
 8005000:	20ae      	movs	r0, #174	; 0xae
 8005002:	f7ff ff93 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x00);//---set low column address
 8005006:	2000      	movs	r0, #0
 8005008:	f7ff ff90 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x10);//---set high column address
 800500c:	2010      	movs	r0, #16
 800500e:	f7ff ff8d 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8005012:	2040      	movs	r0, #64	; 0x40
 8005014:	f7ff ff8a 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x81);//--set contrast control register
 8005018:	2081      	movs	r0, #129	; 0x81
 800501a:	f7ff ff87 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xCF); // Set SEG Output Current Brightness
 800501e:	20cf      	movs	r0, #207	; 0xcf
 8005020:	f7ff ff84 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xA1);//--Set SEG/Column Mapping
 8005024:	20a1      	movs	r0, #161	; 0xa1
 8005026:	f7ff ff81 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xC8);//Set COM/Row Scan Direction
 800502a:	20c8      	movs	r0, #200	; 0xc8
 800502c:	f7ff ff7e 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xA6);//--set normal display
 8005030:	20a6      	movs	r0, #166	; 0xa6
 8005032:	f7ff ff7b 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xA8);//--set multiplex ratio(1 to 64)
 8005036:	20a8      	movs	r0, #168	; 0xa8
 8005038:	f7ff ff78 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x3f);//--1/64 duty
 800503c:	203f      	movs	r0, #63	; 0x3f
 800503e:	f7ff ff75 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8005042:	20d3      	movs	r0, #211	; 0xd3
 8005044:	f7ff ff72 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x00);//-not offset
 8005048:	2000      	movs	r0, #0
 800504a:	f7ff ff6f 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xd5);//--set display clock divide ratio/oscillator frequency
 800504e:	20d5      	movs	r0, #213	; 0xd5
 8005050:	f7ff ff6c 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 8005054:	2080      	movs	r0, #128	; 0x80
 8005056:	f7ff ff69 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xD9);//--set pre-charge period
 800505a:	20d9      	movs	r0, #217	; 0xd9
 800505c:	f7ff ff66 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8005060:	20f1      	movs	r0, #241	; 0xf1
 8005062:	f7ff ff63 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xDA);//--set com pins hardware configuration
 8005066:	20da      	movs	r0, #218	; 0xda
 8005068:	f7ff ff60 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x12);
 800506c:	2012      	movs	r0, #18
 800506e:	f7ff ff5d 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xDB);//--set vcomh
 8005072:	20db      	movs	r0, #219	; 0xdb
 8005074:	f7ff ff5a 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x40);//Set VCOM Deselect Level
 8005078:	2040      	movs	r0, #64	; 0x40
 800507a:	f7ff ff57 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 800507e:	2020      	movs	r0, #32
 8005080:	f7ff ff54 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x02);//
 8005084:	2002      	movs	r0, #2
 8005086:	f7ff ff51 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x8D);//--set Charge Pump enable/disable
 800508a:	208d      	movs	r0, #141	; 0x8d
 800508c:	f7ff ff4e 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0x14);//--set(0x10) disable
 8005090:	2014      	movs	r0, #20
 8005092:	f7ff ff4b 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xA4);// Disable Entire Display On (0xa4/0xa5)
 8005096:	20a4      	movs	r0, #164	; 0xa4
 8005098:	f7ff ff48 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xA6);// Disable Inverse Display On (0xa6/a7) 
 800509c:	20a6      	movs	r0, #166	; 0xa6
 800509e:	f7ff ff45 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(0xAF);//--turn on oled panel
 80050a2:	20af      	movs	r0, #175	; 0xaf
 80050a4:	f7ff ff42 	bl	8004f2c <IIC_Writecmd>
	
	IIC_Writecmd(0xAF); /*display ON*/ 
 80050a8:	20af      	movs	r0, #175	; 0xaf
 80050aa:	f7ff ff3f 	bl	8004f2c <IIC_Writecmd>
	OLED_Clear();
 80050ae:	f7ff ff6d 	bl	8004f8c <OLED_Clear>
}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b002      	add	sp, #8
 80050b8:	bd80      	pop	{r7, pc}

080050ba <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	0002      	movs	r2, r0
 80050c2:	1dfb      	adds	r3, r7, #7
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	1dbb      	adds	r3, r7, #6
 80050c8:	1c0a      	adds	r2, r1, #0
 80050ca:	701a      	strb	r2, [r3, #0]
	IIC_Writecmd(0xb0+y);
 80050cc:	1dbb      	adds	r3, r7, #6
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	3b50      	subs	r3, #80	; 0x50
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7ff ff29 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd(((x&0xf0)>>4)|0x10);
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2210      	movs	r2, #16
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff ff1f 	bl	8004f2c <IIC_Writecmd>
	IIC_Writecmd((x&0x0f)|0x01); 
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	220e      	movs	r2, #14
 80050f6:	4013      	ands	r3, r2
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	2201      	movs	r2, #1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	0018      	movs	r0, r3
 8005104:	f7ff ff12 	bl	8004f2c <IIC_Writecmd>
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <OLED_ShowChar>:
			p[x+((y/8)*128)] ^= 0x01<<(y%8);
	IIC_Writedata(p[x+((y/8)*128)]);
}

void OLED_ShowChar(uint32_t x,uint32_t y,char chr,uint8_t mode)
{      	
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	0019      	movs	r1, r3
 800511c:	1dfb      	adds	r3, r7, #7
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	1dbb      	adds	r3, r7, #6
 8005122:	1c0a      	adds	r2, r1, #0
 8005124:	701a      	strb	r2, [r3, #0]
	unsigned char c=chr-' ',i;
 8005126:	2316      	movs	r3, #22
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	1dfa      	adds	r2, r7, #7
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	3a20      	subs	r2, #32
 8005130:	701a      	strb	r2, [r3, #0]
	if(x>Max_Column-1){x=0;y=y+2;}	
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d904      	bls.n	8005142 <OLED_ShowChar+0x32>
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	3302      	adds	r3, #2
 8005140:	60bb      	str	r3, [r7, #8]
	OLED_Set_Pos(x,y);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	0011      	movs	r1, r2
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff ffb4 	bl	80050ba <OLED_Set_Pos>
	for(i=0;i<6;i++){
 8005152:	2317      	movs	r3, #23
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e059      	b.n	8005210 <OLED_ShowChar+0x100>
		if(y == 1){
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d12c      	bne.n	80051bc <OLED_ShowChar+0xac>
			IIC_Writedata((mode)?F6x8[c][i]|0x01:~F6x8[c][i]|0x01);
 8005162:	1dbb      	adds	r3, r7, #6
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <OLED_ShowChar+0x7c>
 800516a:	2316      	movs	r3, #22
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	2317      	movs	r3, #23
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	7819      	ldrb	r1, [r3, #0]
 8005176:	482b      	ldr	r0, [pc, #172]	; (8005224 <OLED_ShowChar+0x114>)
 8005178:	0013      	movs	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	189b      	adds	r3, r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	18c3      	adds	r3, r0, r3
 8005182:	5c5b      	ldrb	r3, [r3, r1]
 8005184:	2201      	movs	r2, #1
 8005186:	4313      	orrs	r3, r2
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e013      	b.n	80051b4 <OLED_ShowChar+0xa4>
 800518c:	2316      	movs	r3, #22
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	2317      	movs	r3, #23
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	7819      	ldrb	r1, [r3, #0]
 8005198:	4822      	ldr	r0, [pc, #136]	; (8005224 <OLED_ShowChar+0x114>)
 800519a:	0013      	movs	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	18c3      	adds	r3, r0, r3
 80051a4:	5c5b      	ldrb	r3, [r3, r1]
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	2201      	movs	r2, #1
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7ff fed1 	bl	8004f5c <IIC_Writedata>
 80051ba:	e023      	b.n	8005204 <OLED_ShowChar+0xf4>

		}else{
			IIC_Writedata((mode)?F6x8[c][i]:~F6x8[c][i]);
 80051bc:	1dbb      	adds	r3, r7, #6
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <OLED_ShowChar+0xd0>
 80051c4:	2316      	movs	r3, #22
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	2317      	movs	r3, #23
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	7819      	ldrb	r1, [r3, #0]
 80051d0:	4814      	ldr	r0, [pc, #80]	; (8005224 <OLED_ShowChar+0x114>)
 80051d2:	0013      	movs	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	18c3      	adds	r3, r0, r3
 80051dc:	5c5b      	ldrb	r3, [r3, r1]
 80051de:	e00e      	b.n	80051fe <OLED_ShowChar+0xee>
 80051e0:	2316      	movs	r3, #22
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	2317      	movs	r3, #23
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	7819      	ldrb	r1, [r3, #0]
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <OLED_ShowChar+0x114>)
 80051ee:	0013      	movs	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	18c3      	adds	r3, r0, r3
 80051f8:	5c5b      	ldrb	r3, [r3, r1]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff feac 	bl	8004f5c <IIC_Writedata>
	for(i=0;i<6;i++){
 8005204:	2117      	movs	r1, #23
 8005206:	187b      	adds	r3, r7, r1
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	187b      	adds	r3, r7, r1
 800520c:	3201      	adds	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	2317      	movs	r3, #23
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d9a0      	bls.n	800515c <OLED_ShowChar+0x4c>
		}
	}
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	b006      	add	sp, #24
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800bf0c 	.word	0x0800bf0c

08005228 <OLED_ShowBigChar>:

void OLED_ShowBigChar(uint32_t x,uint32_t y,char chr,uint8_t mode)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	0019      	movs	r1, r3
 8005234:	1dfb      	adds	r3, r7, #7
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	1dbb      	adds	r3, r7, #6
 800523a:	1c0a      	adds	r2, r1, #0
 800523c:	701a      	strb	r2, [r3, #0]
	unsigned char c=chr-' ',i;
 800523e:	2316      	movs	r3, #22
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	1dfa      	adds	r2, r7, #7
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	3a20      	subs	r2, #32
 8005248:	701a      	strb	r2, [r3, #0]
	if(x>Max_Column-1){x=0;y=y+2;}
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b7f      	cmp	r3, #127	; 0x7f
 800524e:	d904      	bls.n	800525a <OLED_ShowBigChar+0x32>
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3302      	adds	r3, #2
 8005258:	60bb      	str	r3, [r7, #8]
	OLED_Set_Pos(x,y);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	0011      	movs	r1, r2
 8005264:	0018      	movs	r0, r3
 8005266:	f7ff ff28 	bl	80050ba <OLED_Set_Pos>
	for(i=0;i<8;i++)
 800526a:	2317      	movs	r3, #23
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e023      	b.n	80052bc <OLED_ShowBigChar+0x94>
	IIC_Writedata((mode)?F8X16[c][i]:~F8X16[c][i]);
 8005274:	1dbb      	adds	r3, r7, #6
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <OLED_ShowBigChar+0x6a>
 800527c:	2316      	movs	r3, #22
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	2317      	movs	r3, #23
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	492d      	ldr	r1, [pc, #180]	; (8005340 <OLED_ShowBigChar+0x118>)
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	188a      	adds	r2, r1, r2
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	e00b      	b.n	80052aa <OLED_ShowBigChar+0x82>
 8005292:	2316      	movs	r3, #22
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	781a      	ldrb	r2, [r3, #0]
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4928      	ldr	r1, [pc, #160]	; (8005340 <OLED_ShowBigChar+0x118>)
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	188a      	adds	r2, r1, r2
 80052a4:	5cd3      	ldrb	r3, [r2, r3]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7ff fe56 	bl	8004f5c <IIC_Writedata>
	for(i=0;i<8;i++)
 80052b0:	2117      	movs	r1, #23
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	187b      	adds	r3, r7, r1
 80052b8:	3201      	adds	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	2417      	movs	r4, #23
 80052be:	193b      	adds	r3, r7, r4
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	d9d6      	bls.n	8005274 <OLED_ShowBigChar+0x4c>
	OLED_Set_Pos(x,y+1);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	0019      	movs	r1, r3
 80052d4:	0010      	movs	r0, r2
 80052d6:	f7ff fef0 	bl	80050ba <OLED_Set_Pos>
	for(i=8;i<16;i++)
 80052da:	193b      	adds	r3, r7, r4
 80052dc:	2208      	movs	r2, #8
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e023      	b.n	800532a <OLED_ShowBigChar+0x102>
	IIC_Writedata((mode)?F8X16[c][i]:~F8X16[c][i]);
 80052e2:	1dbb      	adds	r3, r7, #6
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <OLED_ShowBigChar+0xd8>
 80052ea:	2316      	movs	r3, #22
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	2317      	movs	r3, #23
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	4912      	ldr	r1, [pc, #72]	; (8005340 <OLED_ShowBigChar+0x118>)
 80052f8:	0112      	lsls	r2, r2, #4
 80052fa:	188a      	adds	r2, r1, r2
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	e00b      	b.n	8005318 <OLED_ShowBigChar+0xf0>
 8005300:	2316      	movs	r3, #22
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	2317      	movs	r3, #23
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	490c      	ldr	r1, [pc, #48]	; (8005340 <OLED_ShowBigChar+0x118>)
 800530e:	0112      	lsls	r2, r2, #4
 8005310:	188a      	adds	r2, r1, r2
 8005312:	5cd3      	ldrb	r3, [r2, r3]
 8005314:	43db      	mvns	r3, r3
 8005316:	b2db      	uxtb	r3, r3
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff fe1f 	bl	8004f5c <IIC_Writedata>
	for(i=8;i<16;i++)
 800531e:	2117      	movs	r1, #23
 8005320:	187b      	adds	r3, r7, r1
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	187b      	adds	r3, r7, r1
 8005326:	3201      	adds	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	2317      	movs	r3, #23
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d9d6      	bls.n	80052e2 <OLED_ShowBigChar+0xba>
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b007      	add	sp, #28
 800533c:	bd90      	pop	{r4, r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	0800c140 	.word	0x0800c140

08005344 <OLED_ShowString>:

void OLED_ShowString(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	001a      	movs	r2, r3
 8005352:	1cfb      	adds	r3, r7, #3
 8005354:	701a      	strb	r2, [r3, #0]
	unsigned char j=0;
 8005356:	2317      	movs	r3, #23
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 800535e:	e035      	b.n	80053cc <OLED_ShowString+0x88>
	{		
		if(chr[j]=='\n') 
 8005360:	2317      	movs	r3, #23
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b0a      	cmp	r3, #10
 800536e:	d105      	bne.n	800537c <OLED_ShowString+0x38>
		{
			x=0;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
			y++;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3301      	adds	r3, #1
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	e021      	b.n	80053c0 <OLED_ShowString+0x7c>
		}
		else if(chr[j]=='\f') OLED_Clear();
 800537c:	2317      	movs	r3, #23
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d102      	bne.n	8005392 <OLED_ShowString+0x4e>
 800538c:	f7ff fdfe 	bl	8004f8c <OLED_Clear>
 8005390:	e016      	b.n	80053c0 <OLED_ShowString+0x7c>
		else
		{
			OLED_ShowChar(x,y,chr[j],mode);
 8005392:	2317      	movs	r3, #23
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	1cfb      	adds	r3, r7, #3
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff feb3 	bl	8005110 <OLED_ShowChar>
			x+=6;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3306      	adds	r3, #6
 80053ae:	60fb      	str	r3, [r7, #12]
			if(x>120)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b78      	cmp	r3, #120	; 0x78
 80053b4:	d904      	bls.n	80053c0 <OLED_ShowString+0x7c>
			{
				x=0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
				y++;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3301      	adds	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 80053c0:	2117      	movs	r1, #23
 80053c2:	187b      	adds	r3, r7, r1
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	187b      	adds	r3, r7, r1
 80053c8:	3201      	adds	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 80053cc:	2317      	movs	r3, #23
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	18d3      	adds	r3, r2, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1c1      	bne.n	8005360 <OLED_ShowString+0x1c>
	}
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b006      	add	sp, #24
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <OLED_ShowBigString>:

void OLED_ShowBigString(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	001a      	movs	r2, r3
 80053f4:	1cfb      	adds	r3, r7, #3
 80053f6:	701a      	strb	r2, [r3, #0]
	unsigned char j=0;
 80053f8:	2317      	movs	r3, #23
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8005400:	e035      	b.n	800546e <OLED_ShowBigString+0x88>
	{
		if(chr[j]=='\n')
 8005402:	2317      	movs	r3, #23
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b0a      	cmp	r3, #10
 8005410:	d105      	bne.n	800541e <OLED_ShowBigString+0x38>
		{
			x=0;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
			y++;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3301      	adds	r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	e021      	b.n	8005462 <OLED_ShowBigString+0x7c>
		}
		else if(chr[j]=='\f') OLED_Clear();
 800541e:	2317      	movs	r3, #23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b0c      	cmp	r3, #12
 800542c:	d102      	bne.n	8005434 <OLED_ShowBigString+0x4e>
 800542e:	f7ff fdad 	bl	8004f8c <OLED_Clear>
 8005432:	e016      	b.n	8005462 <OLED_ShowBigString+0x7c>
		else
		{
			OLED_ShowBigChar(x,y,chr[j],mode);
 8005434:	2317      	movs	r3, #23
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	1cfb      	adds	r3, r7, #3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff feee 	bl	8005228 <OLED_ShowBigChar>
			x+=8;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3308      	adds	r3, #8
 8005450:	60fb      	str	r3, [r7, #12]
			if(x>160)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2ba0      	cmp	r3, #160	; 0xa0
 8005456:	d904      	bls.n	8005462 <OLED_ShowBigString+0x7c>
			{
				x=0;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
				y++;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3301      	adds	r3, #1
 8005460:	60bb      	str	r3, [r7, #8]
			}
		}
		j++;
 8005462:	2117      	movs	r1, #23
 8005464:	187b      	adds	r3, r7, r1
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	187b      	adds	r3, r7, r1
 800546a:	3201      	adds	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 800546e:	2317      	movs	r3, #23
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1c1      	bne.n	8005402 <OLED_ShowBigString+0x1c>
	}
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b006      	add	sp, #24
 8005486:	bd80      	pop	{r7, pc}

08005488 <OLED_ShowStringXY>:

void OLED_ShowStringXY(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	001a      	movs	r2, r3
 8005496:	1cfb      	adds	r3, r7, #3
 8005498:	701a      	strb	r2, [r3, #0]
   OLED_ShowString(6*x,y,chr,mode);
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	0013      	movs	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	189b      	adds	r3, r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	0018      	movs	r0, r3
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	f7ff ff49 	bl	8005344 <OLED_ShowString>
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b004      	add	sp, #16
 80054b8:	bd80      	pop	{r7, pc}

080054ba <OLED_ShowBigStringXY>:

void OLED_ShowBigStringXY(uint32_t x,uint32_t y,char *chr,uint8_t mode)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	001a      	movs	r2, r3
 80054c8:	1cfb      	adds	r3, r7, #3
 80054ca:	701a      	strb	r2, [r3, #0]
	OLED_ShowBigString(8*x,y,chr,mode);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	00d8      	lsls	r0, r3, #3
 80054d0:	1cfb      	adds	r3, r7, #3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	f7ff ff85 	bl	80053e6 <OLED_ShowBigString>
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <ledoff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ledoff() {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0

	REV(0);
 80054e8:	23a0      	movs	r3, #160	; 0xa0
 80054ea:	05db      	lsls	r3, r3, #23
 80054ec:	2200      	movs	r2, #0
 80054ee:	2108      	movs	r1, #8
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fd fe1a 	bl	800312a <HAL_GPIO_WritePin>
	LOCK(0);
 80054f6:	23a0      	movs	r3, #160	; 0xa0
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	2200      	movs	r2, #0
 80054fc:	2110      	movs	r1, #16
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fd fe13 	bl	800312a <HAL_GPIO_WritePin>
	FWD(0);
 8005504:	23a0      	movs	r3, #160	; 0xa0
 8005506:	05db      	lsls	r3, r3, #23
 8005508:	2200      	movs	r2, #0
 800550a:	2120      	movs	r1, #32
 800550c:	0018      	movs	r0, r3
 800550e:	f7fd fe0c 	bl	800312a <HAL_GPIO_WritePin>
	DETERGENT(0);
 8005512:	23a0      	movs	r3, #160	; 0xa0
 8005514:	05db      	lsls	r3, r3, #23
 8005516:	2200      	movs	r2, #0
 8005518:	2140      	movs	r1, #64	; 0x40
 800551a:	0018      	movs	r0, r3
 800551c:	f7fd fe05 	bl	800312a <HAL_GPIO_WritePin>
	SUPPLY(0);
 8005520:	23a0      	movs	r3, #160	; 0xa0
 8005522:	05db      	lsls	r3, r3, #23
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	0018      	movs	r0, r3
 800552a:	f7fd fdfe 	bl	800312a <HAL_GPIO_WritePin>
	HEATING(0);
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	0059      	lsls	r1, r3, #1
 8005532:	23a0      	movs	r3, #160	; 0xa0
 8005534:	05db      	lsls	r3, r3, #23
 8005536:	2200      	movs	r2, #0
 8005538:	0018      	movs	r0, r3
 800553a:	f7fd fdf6 	bl	800312a <HAL_GPIO_WritePin>
	SOFT(0);
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	0099      	lsls	r1, r3, #2
 8005542:	23a0      	movs	r3, #160	; 0xa0
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	2200      	movs	r2, #0
 8005548:	0018      	movs	r0, r3
 800554a:	f7fd fdee 	bl	800312a <HAL_GPIO_WritePin>
	DRYER(0);
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	00d9      	lsls	r1, r3, #3
 8005552:	23a0      	movs	r3, #160	; 0xa0
 8005554:	05db      	lsls	r3, r3, #23
 8005556:	2200      	movs	r2, #0
 8005558:	0018      	movs	r0, r3
 800555a:	f7fd fde6 	bl	800312a <HAL_GPIO_WritePin>
	DRAIN(0);
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	01db      	lsls	r3, r3, #7
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <ledoff+0x9c>)
 8005564:	2200      	movs	r2, #0
 8005566:	0019      	movs	r1, r3
 8005568:	f7fd fddf 	bl	800312a <HAL_GPIO_WritePin>
	HI_SPEED(0);
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	4803      	ldr	r0, [pc, #12]	; (8005580 <ledoff+0x9c>)
 8005572:	2200      	movs	r2, #0
 8005574:	0019      	movs	r1, r3
 8005576:	f7fd fdd8 	bl	800312a <HAL_GPIO_WritePin>

}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	50000800 	.word	0x50000800

08005584 <st>:

void st() {
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
	while (SW_UP == 0) {
 8005588:	e002      	b.n	8005590 <st+0xc>
		HAL_Delay(75);
 800558a:	204b      	movs	r0, #75	; 0x4b
 800558c:	f7fc fdf0 	bl	8002170 <HAL_Delay>
	while (SW_UP == 0) {
 8005590:	4b1e      	ldr	r3, [pc, #120]	; (800560c <st+0x88>)
 8005592:	2120      	movs	r1, #32
 8005594:	0018      	movs	r0, r3
 8005596:	f7fd fdab 	bl	80030f0 <HAL_GPIO_ReadPin>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d0f5      	beq.n	800558a <st+0x6>
	}
	while (SW_DOWN == 0) {
 800559e:	e002      	b.n	80055a6 <st+0x22>
		HAL_Delay(75);
 80055a0:	204b      	movs	r0, #75	; 0x4b
 80055a2:	f7fc fde5 	bl	8002170 <HAL_Delay>
	while (SW_DOWN == 0) {
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <st+0x88>)
 80055a8:	2101      	movs	r1, #1
 80055aa:	0018      	movs	r0, r3
 80055ac:	f7fd fda0 	bl	80030f0 <HAL_GPIO_ReadPin>
 80055b0:	1e03      	subs	r3, r0, #0
 80055b2:	d0f5      	beq.n	80055a0 <st+0x1c>
	}
	while (SW_BACK == 0) {
 80055b4:	e002      	b.n	80055bc <st+0x38>
		HAL_Delay(75);
 80055b6:	204b      	movs	r0, #75	; 0x4b
 80055b8:	f7fc fdda 	bl	8002170 <HAL_Delay>
	while (SW_BACK == 0) {
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <st+0x88>)
 80055be:	2108      	movs	r1, #8
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7fd fd95 	bl	80030f0 <HAL_GPIO_ReadPin>
 80055c6:	1e03      	subs	r3, r0, #0
 80055c8:	d0f5      	beq.n	80055b6 <st+0x32>
	}
	while (SW_ENTER == 0) {
 80055ca:	e002      	b.n	80055d2 <st+0x4e>
		HAL_Delay(75);
 80055cc:	204b      	movs	r0, #75	; 0x4b
 80055ce:	f7fc fdcf 	bl	8002170 <HAL_Delay>
	while (SW_ENTER == 0) {
 80055d2:	4b0e      	ldr	r3, [pc, #56]	; (800560c <st+0x88>)
 80055d4:	2102      	movs	r1, #2
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fd fd8a 	bl	80030f0 <HAL_GPIO_ReadPin>
 80055dc:	1e03      	subs	r3, r0, #0
 80055de:	d0f5      	beq.n	80055cc <st+0x48>
	}
	BUZZER(1);
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	0219      	lsls	r1, r3, #8
 80055e4:	23a0      	movs	r3, #160	; 0xa0
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	2201      	movs	r2, #1
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7fd fd9d 	bl	800312a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80055f0:	2064      	movs	r0, #100	; 0x64
 80055f2:	f7fc fdbd 	bl	8002170 <HAL_Delay>
	BUZZER(0);
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	0219      	lsls	r1, r3, #8
 80055fa:	23a0      	movs	r3, #160	; 0xa0
 80055fc:	05db      	lsls	r3, r3, #23
 80055fe:	2200      	movs	r2, #0
 8005600:	0018      	movs	r0, r3
 8005602:	f7fd fd92 	bl	800312a <HAL_GPIO_WritePin>
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	50000400 	.word	0x50000400

08005610 <error>:

void error() {
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0

	while (SW_UP == 0) {
 8005614:	e002      	b.n	800561c <error+0xc>
		HAL_Delay(75);
 8005616:	204b      	movs	r0, #75	; 0x4b
 8005618:	f7fc fdaa 	bl	8002170 <HAL_Delay>
	while (SW_UP == 0) {
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <error+0xb4>)
 800561e:	2120      	movs	r1, #32
 8005620:	0018      	movs	r0, r3
 8005622:	f7fd fd65 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005626:	1e03      	subs	r3, r0, #0
 8005628:	d0f5      	beq.n	8005616 <error+0x6>
	}
	while (SW_DOWN == 0) {
 800562a:	e002      	b.n	8005632 <error+0x22>
		HAL_Delay(75);
 800562c:	204b      	movs	r0, #75	; 0x4b
 800562e:	f7fc fd9f 	bl	8002170 <HAL_Delay>
	while (SW_DOWN == 0) {
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <error+0xb4>)
 8005634:	2101      	movs	r1, #1
 8005636:	0018      	movs	r0, r3
 8005638:	f7fd fd5a 	bl	80030f0 <HAL_GPIO_ReadPin>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d0f5      	beq.n	800562c <error+0x1c>
	}
	while (SW_BACK == 0) {
 8005640:	e002      	b.n	8005648 <error+0x38>
		HAL_Delay(75);
 8005642:	204b      	movs	r0, #75	; 0x4b
 8005644:	f7fc fd94 	bl	8002170 <HAL_Delay>
	while (SW_BACK == 0) {
 8005648:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <error+0xb4>)
 800564a:	2108      	movs	r1, #8
 800564c:	0018      	movs	r0, r3
 800564e:	f7fd fd4f 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005652:	1e03      	subs	r3, r0, #0
 8005654:	d0f5      	beq.n	8005642 <error+0x32>
	}
	while (SW_ENTER == 0) {
 8005656:	e002      	b.n	800565e <error+0x4e>
		HAL_Delay(75);
 8005658:	204b      	movs	r0, #75	; 0x4b
 800565a:	f7fc fd89 	bl	8002170 <HAL_Delay>
	while (SW_ENTER == 0) {
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <error+0xb4>)
 8005660:	2102      	movs	r1, #2
 8005662:	0018      	movs	r0, r3
 8005664:	f7fd fd44 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d0f5      	beq.n	8005658 <error+0x48>
	}

	BUZZER(1);
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	0219      	lsls	r1, r3, #8
 8005670:	23a0      	movs	r3, #160	; 0xa0
 8005672:	05db      	lsls	r3, r3, #23
 8005674:	2201      	movs	r2, #1
 8005676:	0018      	movs	r0, r3
 8005678:	f7fd fd57 	bl	800312a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800567c:	2064      	movs	r0, #100	; 0x64
 800567e:	f7fc fd77 	bl	8002170 <HAL_Delay>
	BUZZER(0);
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	0219      	lsls	r1, r3, #8
 8005686:	23a0      	movs	r3, #160	; 0xa0
 8005688:	05db      	lsls	r3, r3, #23
 800568a:	2200      	movs	r2, #0
 800568c:	0018      	movs	r0, r3
 800568e:	f7fd fd4c 	bl	800312a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005692:	2064      	movs	r0, #100	; 0x64
 8005694:	f7fc fd6c 	bl	8002170 <HAL_Delay>
	BUZZER(1);
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	0219      	lsls	r1, r3, #8
 800569c:	23a0      	movs	r3, #160	; 0xa0
 800569e:	05db      	lsls	r3, r3, #23
 80056a0:	2201      	movs	r2, #1
 80056a2:	0018      	movs	r0, r3
 80056a4:	f7fd fd41 	bl	800312a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80056a8:	2064      	movs	r0, #100	; 0x64
 80056aa:	f7fc fd61 	bl	8002170 <HAL_Delay>
	BUZZER(0);
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	0219      	lsls	r1, r3, #8
 80056b2:	23a0      	movs	r3, #160	; 0xa0
 80056b4:	05db      	lsls	r3, r3, #23
 80056b6:	2200      	movs	r2, #0
 80056b8:	0018      	movs	r0, r3
 80056ba:	f7fd fd36 	bl	800312a <HAL_GPIO_WritePin>

}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	50000400 	.word	0x50000400

080056c8 <dcount>:

int dcount(int i) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	switch (mon) {
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <dcount+0x1d8>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d900      	bls.n	80056da <dcount+0x12>
 80056d8:	e0dd      	b.n	8005896 <dcount+0x1ce>
 80056da:	009a      	lsls	r2, r3, #2
 80056dc:	4b71      	ldr	r3, [pc, #452]	; (80058a4 <dcount+0x1dc>)
 80056de:	18d3      	adds	r3, r2, r3
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	469f      	mov	pc, r3
	case 1:
		if (day == 32) {
 80056e4:	4b70      	ldr	r3, [pc, #448]	; (80058a8 <dcount+0x1e0>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d000      	beq.n	80056ee <dcount+0x26>
 80056ec:	e0bc      	b.n	8005868 <dcount+0x1a0>
			day = 1;
 80056ee:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <dcount+0x1e0>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
			mon++;
 80056f4:	4b6a      	ldr	r3, [pc, #424]	; (80058a0 <dcount+0x1d8>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	4b68      	ldr	r3, [pc, #416]	; (80058a0 <dcount+0x1d8>)
 80056fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005700:	e0b2      	b.n	8005868 <dcount+0x1a0>
	case 2:
		if (i == 0) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <dcount+0x5e>
			if (day == 29) {
 8005708:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <dcount+0x1e0>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b1d      	cmp	r3, #29
 800570e:	d000      	beq.n	8005712 <dcount+0x4a>
 8005710:	e0ac      	b.n	800586c <dcount+0x1a4>
				day = 1;
 8005712:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <dcount+0x1e0>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
				mon++;
 8005718:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <dcount+0x1d8>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4b5f      	ldr	r3, [pc, #380]	; (80058a0 <dcount+0x1d8>)
 8005722:	701a      	strb	r2, [r3, #0]
			if (day == 30) {
				day = 1;
				mon++;
			}
		}
		break;
 8005724:	e0a2      	b.n	800586c <dcount+0x1a4>
			if (day == 30) {
 8005726:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <dcount+0x1e0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b1e      	cmp	r3, #30
 800572c:	d000      	beq.n	8005730 <dcount+0x68>
 800572e:	e09d      	b.n	800586c <dcount+0x1a4>
				day = 1;
 8005730:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <dcount+0x1e0>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
				mon++;
 8005736:	4b5a      	ldr	r3, [pc, #360]	; (80058a0 <dcount+0x1d8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4b58      	ldr	r3, [pc, #352]	; (80058a0 <dcount+0x1d8>)
 8005740:	701a      	strb	r2, [r3, #0]
		break;
 8005742:	e093      	b.n	800586c <dcount+0x1a4>
	case 3:
		if (day == 32) {
 8005744:	4b58      	ldr	r3, [pc, #352]	; (80058a8 <dcount+0x1e0>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b20      	cmp	r3, #32
 800574a:	d000      	beq.n	800574e <dcount+0x86>
 800574c:	e090      	b.n	8005870 <dcount+0x1a8>
			day = 1;
 800574e:	4b56      	ldr	r3, [pc, #344]	; (80058a8 <dcount+0x1e0>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
			mon++;
 8005754:	4b52      	ldr	r3, [pc, #328]	; (80058a0 <dcount+0x1d8>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <dcount+0x1d8>)
 800575e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005760:	e086      	b.n	8005870 <dcount+0x1a8>
	case 4:
		if (day == 31) {
 8005762:	4b51      	ldr	r3, [pc, #324]	; (80058a8 <dcount+0x1e0>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b1f      	cmp	r3, #31
 8005768:	d000      	beq.n	800576c <dcount+0xa4>
 800576a:	e083      	b.n	8005874 <dcount+0x1ac>
			day = 1;
 800576c:	4b4e      	ldr	r3, [pc, #312]	; (80058a8 <dcount+0x1e0>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
			mon++;
 8005772:	4b4b      	ldr	r3, [pc, #300]	; (80058a0 <dcount+0x1d8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4b49      	ldr	r3, [pc, #292]	; (80058a0 <dcount+0x1d8>)
 800577c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800577e:	e079      	b.n	8005874 <dcount+0x1ac>
	case 5:
		if (day == 32) {
 8005780:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <dcount+0x1e0>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b20      	cmp	r3, #32
 8005786:	d000      	beq.n	800578a <dcount+0xc2>
 8005788:	e076      	b.n	8005878 <dcount+0x1b0>
			day = 1;
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <dcount+0x1e0>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
			mon++;
 8005790:	4b43      	ldr	r3, [pc, #268]	; (80058a0 <dcount+0x1d8>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <dcount+0x1d8>)
 800579a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800579c:	e06c      	b.n	8005878 <dcount+0x1b0>
	case 6:
		if (day == 31) {
 800579e:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <dcount+0x1e0>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b1f      	cmp	r3, #31
 80057a4:	d000      	beq.n	80057a8 <dcount+0xe0>
 80057a6:	e069      	b.n	800587c <dcount+0x1b4>
			day = 1;
 80057a8:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <dcount+0x1e0>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
			mon++;
 80057ae:	4b3c      	ldr	r3, [pc, #240]	; (80058a0 <dcount+0x1d8>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <dcount+0x1d8>)
 80057b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80057ba:	e05f      	b.n	800587c <dcount+0x1b4>
	case 7:
		if (day == 32) {
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <dcount+0x1e0>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d15d      	bne.n	8005880 <dcount+0x1b8>
			day = 1;
 80057c4:	4b38      	ldr	r3, [pc, #224]	; (80058a8 <dcount+0x1e0>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
			mon++;
 80057ca:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <dcount+0x1d8>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <dcount+0x1d8>)
 80057d4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80057d6:	e053      	b.n	8005880 <dcount+0x1b8>
	case 8:
		if (day == 32) {
 80057d8:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <dcount+0x1e0>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d151      	bne.n	8005884 <dcount+0x1bc>
			day = 1;
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <dcount+0x1e0>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
			mon++;
 80057e6:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <dcount+0x1d8>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <dcount+0x1d8>)
 80057f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80057f2:	e047      	b.n	8005884 <dcount+0x1bc>
	case 9:
		if (day == 31) {
 80057f4:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <dcount+0x1e0>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b1f      	cmp	r3, #31
 80057fa:	d145      	bne.n	8005888 <dcount+0x1c0>
			day = 1;
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <dcount+0x1e0>)
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
			mon++;
 8005802:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <dcount+0x1d8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	3301      	adds	r3, #1
 8005808:	b2da      	uxtb	r2, r3
 800580a:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <dcount+0x1d8>)
 800580c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800580e:	e03b      	b.n	8005888 <dcount+0x1c0>
	case 10:
		if (day == 32) {
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <dcount+0x1e0>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b20      	cmp	r3, #32
 8005816:	d139      	bne.n	800588c <dcount+0x1c4>
			day = 1;
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <dcount+0x1e0>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
			mon++;
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <dcount+0x1d8>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <dcount+0x1d8>)
 8005828:	701a      	strb	r2, [r3, #0]
		}
		break;
 800582a:	e02f      	b.n	800588c <dcount+0x1c4>
	case 11:
		if (day == 31) {
 800582c:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <dcount+0x1e0>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b1f      	cmp	r3, #31
 8005832:	d12d      	bne.n	8005890 <dcount+0x1c8>
			day = 1;
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <dcount+0x1e0>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
			mon++;
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <dcount+0x1d8>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <dcount+0x1d8>)
 8005844:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005846:	e023      	b.n	8005890 <dcount+0x1c8>
	case 12:
		if (day == 32) {
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <dcount+0x1e0>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b20      	cmp	r3, #32
 800584e:	d121      	bne.n	8005894 <dcount+0x1cc>

			day = 1;
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <dcount+0x1e0>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
			mon = 1;
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <dcount+0x1d8>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
			yea++;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <dcount+0x1e4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <dcount+0x1e4>)
 8005864:	601a      	str	r2, [r3, #0]
		}
		break;
 8005866:	e015      	b.n	8005894 <dcount+0x1cc>
		break;
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	e014      	b.n	8005896 <dcount+0x1ce>
		break;
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	e012      	b.n	8005896 <dcount+0x1ce>
		break;
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	e010      	b.n	8005896 <dcount+0x1ce>
		break;
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	e00e      	b.n	8005896 <dcount+0x1ce>
		break;
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	e00c      	b.n	8005896 <dcount+0x1ce>
		break;
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	e00a      	b.n	8005896 <dcount+0x1ce>
		break;
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	e008      	b.n	8005896 <dcount+0x1ce>
		break;
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	e006      	b.n	8005896 <dcount+0x1ce>
		break;
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	e004      	b.n	8005896 <dcount+0x1ce>
		break;
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	e002      	b.n	8005896 <dcount+0x1ce>
		break;
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	e000      	b.n	8005896 <dcount+0x1ce>
		break;
 8005894:	46c0      	nop			; (mov r8, r8)
	}
}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000008 	.word	0x20000008
 80058a4:	0800c730 	.word	0x0800c730
 80058a8:	20000009 	.word	0x20000009
 80058ac:	20000004 	.word	0x20000004

080058b0 <daygo>:

void daygo() {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0

	int i;
	if (h == 24) {
 80058b6:	4b26      	ldr	r3, [pc, #152]	; (8005950 <daygo+0xa0>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b18      	cmp	r3, #24
 80058bc:	d108      	bne.n	80058d0 <daygo+0x20>
		h = 0;
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <daygo+0xa0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
		day++;
 80058c4:	4b23      	ldr	r3, [pc, #140]	; (8005954 <daygo+0xa4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <daygo+0xa4>)
 80058ce:	701a      	strb	r2, [r3, #0]
	}
	if (day >= 28) {
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <daygo+0xa4>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b1b      	cmp	r3, #27
 80058d6:	d932      	bls.n	800593e <daygo+0x8e>
		if (yea % 4 == 0 && yea % 100 == 0 && yea % 400 == 0) {
 80058d8:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <daygo+0xa8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2203      	movs	r2, #3
 80058de:	4013      	ands	r3, r2
 80058e0:	d113      	bne.n	800590a <daygo+0x5a>
 80058e2:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <daygo+0xa8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7fa fcaf 	bl	800024c <__aeabi_uidivmod>
 80058ee:	1e0b      	subs	r3, r1, #0
 80058f0:	d10b      	bne.n	800590a <daygo+0x5a>
 80058f2:	4b19      	ldr	r3, [pc, #100]	; (8005958 <daygo+0xa8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	22c8      	movs	r2, #200	; 0xc8
 80058f8:	0051      	lsls	r1, r2, #1
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7fa fca6 	bl	800024c <__aeabi_uidivmod>
 8005900:	1e0b      	subs	r3, r1, #0
 8005902:	d102      	bne.n	800590a <daygo+0x5a>
			//윤년
			i = 1;
 8005904:	2301      	movs	r3, #1
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e019      	b.n	800593e <daygo+0x8e>
		} else if (yea % 4 == 0 && yea % 100 == 0) {
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <daygo+0xa8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2203      	movs	r2, #3
 8005910:	4013      	ands	r3, r2
 8005912:	d10a      	bne.n	800592a <daygo+0x7a>
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <daygo+0xa8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2164      	movs	r1, #100	; 0x64
 800591a:	0018      	movs	r0, r3
 800591c:	f7fa fc96 	bl	800024c <__aeabi_uidivmod>
 8005920:	1e0b      	subs	r3, r1, #0
 8005922:	d102      	bne.n	800592a <daygo+0x7a>
			//평년
			i = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	e009      	b.n	800593e <daygo+0x8e>
		} else if (yea % 4 == 0) {
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <daygo+0xa8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2203      	movs	r2, #3
 8005930:	4013      	ands	r3, r2
 8005932:	d102      	bne.n	800593a <daygo+0x8a>
			//윤년
			i = 1;
 8005934:	2301      	movs	r3, #1
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	e001      	b.n	800593e <daygo+0x8e>
		} else {
			//평년
			i = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
		}
	}

	dcount(i);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff fec1 	bl	80056c8 <dcount>

}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b002      	add	sp, #8
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	20000719 	.word	0x20000719
 8005954:	20000009 	.word	0x20000009
 8005958:	20000004 	.word	0x20000004

0800595c <timego>:

void timego() {
 800595c:	b590      	push	{r4, r7, lr}
 800595e:	b083      	sub	sp, #12
 8005960:	af02      	add	r7, sp, #8
	uint8_t n;

	if (t == 100) {
 8005962:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <timego+0xd0>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d15c      	bne.n	8005a24 <timego+0xc8>
		t = 0;
 800596a:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <timego+0xd0>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
		ms++;
 8005970:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <timego+0xd4>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	4b2d      	ldr	r3, [pc, #180]	; (8005a30 <timego+0xd4>)
 800597a:	701a      	strb	r2, [r3, #0]

		if (ms == 10) {
 800597c:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <timego+0xd4>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b0a      	cmp	r3, #10
 8005982:	d108      	bne.n	8005996 <timego+0x3a>
			ms = 0;
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <timego+0xd4>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
			s++;
 800598a:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <timego+0xd8>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	3301      	adds	r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <timego+0xd8>)
 8005994:	701a      	strb	r2, [r3, #0]
		}
		if (s == 60) {
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <timego+0xd8>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b3c      	cmp	r3, #60	; 0x3c
 800599c:	d108      	bne.n	80059b0 <timego+0x54>
			s = 0;
 800599e:	4b25      	ldr	r3, [pc, #148]	; (8005a34 <timego+0xd8>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
			m++;
 80059a4:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <timego+0xdc>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <timego+0xdc>)
 80059ae:	701a      	strb	r2, [r3, #0]
		}
		if (m == 60) {
 80059b0:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <timego+0xdc>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b3c      	cmp	r3, #60	; 0x3c
 80059b6:	d10a      	bne.n	80059ce <timego+0x72>
			m = 0;
 80059b8:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <timego+0xdc>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
			h++;
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <timego+0xe0>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <timego+0xe0>)
 80059c8:	701a      	strb	r2, [r3, #0]
			daygo();
 80059ca:	f7ff ff71 	bl	80058b0 <daygo>
		}
		sprintf(time, "%02d:%02d:%02d", h, m, s);
 80059ce:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <timego+0xe0>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	001a      	movs	r2, r3
 80059d4:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <timego+0xdc>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	001c      	movs	r4, r3
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <timego+0xd8>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4918      	ldr	r1, [pc, #96]	; (8005a40 <timego+0xe4>)
 80059e0:	4818      	ldr	r0, [pc, #96]	; (8005a44 <timego+0xe8>)
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	0023      	movs	r3, r4
 80059e6:	f003 fd55 	bl	8009494 <siprintf>
		sprintf(days, "%02ld-%02d-%02d", yea, mon, day);
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <timego+0xec>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <timego+0xf0>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001c      	movs	r4, r3
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <timego+0xf4>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4916      	ldr	r1, [pc, #88]	; (8005a54 <timego+0xf8>)
 80059fa:	4817      	ldr	r0, [pc, #92]	; (8005a58 <timego+0xfc>)
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	0023      	movs	r3, r4
 8005a00:	f003 fd48 	bl	8009494 <siprintf>

		if (timeload == 1) {
 8005a04:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <timego+0x100>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10b      	bne.n	8005a24 <timego+0xc8>

			OLED_ShowStringXY(13, 0, time, 1);
 8005a0c:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <timego+0xe8>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2100      	movs	r1, #0
 8005a12:	200d      	movs	r0, #13
 8005a14:	f7ff fd38 	bl	8005488 <OLED_ShowStringXY>
			OLED_ShowStringXY(0, 0, days, 1);
 8005a18:	4a0f      	ldr	r2, [pc, #60]	; (8005a58 <timego+0xfc>)
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f7ff fd32 	bl	8005488 <OLED_ShowStringXY>

		}
	}

}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b001      	add	sp, #4
 8005a2a:	bd90      	pop	{r4, r7, pc}
 8005a2c:	20000715 	.word	0x20000715
 8005a30:	20000716 	.word	0x20000716
 8005a34:	20000717 	.word	0x20000717
 8005a38:	20000718 	.word	0x20000718
 8005a3c:	20000719 	.word	0x20000719
 8005a40:	0800bb08 	.word	0x0800bb08
 8005a44:	20000384 	.word	0x20000384
 8005a48:	20000004 	.word	0x20000004
 8005a4c:	20000008 	.word	0x20000008
 8005a50:	20000009 	.word	0x20000009
 8005a54:	0800bb18 	.word	0x0800bb18
 8005a58:	20000390 	.word	0x20000390
 8005a5c:	20000000 	.word	0x20000000

08005a60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

	int a;

	if (htim->Instance == htim6.Instance) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d119      	bne.n	8005aa8 <HAL_TIM_PeriodElapsedCallback+0x48>
		t++;
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005a7e:	701a      	strb	r2, [r3, #0]
		for (a = 0; a < 8; a++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e00b      	b.n	8005a9e <HAL_TIM_PeriodElapsedCallback+0x3e>
			tc[i]++;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005a8c:	0099      	lsls	r1, r3, #2
 8005a8e:	588a      	ldr	r2, [r1, r2]
 8005a90:	1c51      	adds	r1, r2, #1
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	5099      	str	r1, [r3, r2]
		for (a = 0; a < 8; a++)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b07      	cmp	r3, #7
 8005aa2:	ddf0      	ble.n	8005a86 <HAL_TIM_PeriodElapsedCallback+0x26>
		timego();
 8005aa4:	f7ff ff5a 	bl	800595c <timego>
	}
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b004      	add	sp, #16
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000720 	.word	0x20000720
 8005ab4:	20000715 	.word	0x20000715
 8005ab8:	200002f8 	.word	0x200002f8
 8005abc:	200006ec 	.word	0x200006ec

08005ac0 <oc>:

void oc() {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
	int r, n;

	for (r = 1; r < 8; r++) {
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e019      	b.n	8005b00 <oc+0x40>
		IIC_Writecmd(0xb0 + r);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	33b0      	adds	r3, #176	; 0xb0
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff fa2b 	bl	8004f2c <IIC_Writecmd>
		IIC_Writecmd(0x00);
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f7ff fa28 	bl	8004f2c <IIC_Writecmd>
		IIC_Writecmd(0x10);
 8005adc:	2010      	movs	r0, #16
 8005ade:	f7ff fa25 	bl	8004f2c <IIC_Writecmd>
		for (n = 0; n < 128; n++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	e005      	b.n	8005af4 <oc+0x34>
			IIC_Writedata(0);
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7ff fa37 	bl	8004f5c <IIC_Writedata>
		for (n = 0; n < 128; n++)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b7f      	cmp	r3, #127	; 0x7f
 8005af8:	ddf6      	ble.n	8005ae8 <oc+0x28>
	for (r = 1; r < 8; r++) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3301      	adds	r3, #1
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	dde2      	ble.n	8005acc <oc+0xc>
	}
	OLED_Set_Pos(0, 0);
 8005b06:	2100      	movs	r1, #0
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f7ff fad6 	bl	80050ba <OLED_Set_Pos>

	if (timeload == 1) {
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <oc+0x88>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d113      	bne.n	8005b3e <oc+0x7e>
		OLED_Set_Pos(0, 1);
 8005b16:	2101      	movs	r1, #1
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7ff face 	bl	80050ba <OLED_Set_Pos>
		for (n = 0; n < 128; n++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	e005      	b.n	8005b30 <oc+0x70>
			IIC_Writedata(1);
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7ff fa19 	bl	8004f5c <IIC_Writedata>
		for (n = 0; n < 128; n++)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b7f      	cmp	r3, #127	; 0x7f
 8005b34:	ddf6      	ble.n	8005b24 <oc+0x64>
		OLED_Set_Pos(0, 0);
 8005b36:	2100      	movs	r1, #0
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f7ff fabe 	bl	80050ba <OLED_Set_Pos>
	}
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b002      	add	sp, #8
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	20000000 	.word	0x20000000

08005b4c <door>:

void door() {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0

	if (SW_DOOR == 0) {
 8005b50:	4b23      	ldr	r3, [pc, #140]	; (8005be0 <door+0x94>)
 8005b52:	2110      	movs	r1, #16
 8005b54:	0018      	movs	r0, r3
 8005b56:	f7fd facb 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005b5a:	1e03      	subs	r3, r0, #0
 8005b5c:	d10d      	bne.n	8005b7a <door+0x2e>

		LOCK(1);
 8005b5e:	23a0      	movs	r3, #160	; 0xa0
 8005b60:	05db      	lsls	r3, r3, #23
 8005b62:	2201      	movs	r2, #1
 8005b64:	2110      	movs	r1, #16
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7fd fadf 	bl	800312a <HAL_GPIO_WritePin>
		OLED_ShowStringXY(0, 4, "D:CLOSE", 1);
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <door+0x98>)
 8005b6e:	2301      	movs	r3, #1
 8005b70:	2104      	movs	r1, #4
 8005b72:	2000      	movs	r0, #0
 8005b74:	f7ff fc88 	bl	8005488 <OLED_ShowStringXY>
		LOCK(0);
		OLED_ShowStringXY(0, 4, "D:OPEN   ", 1);

	}

}
 8005b78:	e02e      	b.n	8005bd8 <door+0x8c>
	} else if (SW_DOOR == 1) {
 8005b7a:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <door+0x94>)
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7fd fab6 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005b84:	0003      	movs	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d126      	bne.n	8005bd8 <door+0x8c>
		if (work == 1) {
 8005b8a:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <door+0x9c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d115      	bne.n	8005bbe <door+0x72>
			BUZZER(1);
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	0219      	lsls	r1, r3, #8
 8005b96:	23a0      	movs	r3, #160	; 0xa0
 8005b98:	05db      	lsls	r3, r3, #23
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7fd fac4 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8005ba2:	2064      	movs	r0, #100	; 0x64
 8005ba4:	f7fc fae4 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	0219      	lsls	r1, r3, #8
 8005bac:	23a0      	movs	r3, #160	; 0xa0
 8005bae:	05db      	lsls	r3, r3, #23
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f7fd fab9 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8005bb8:	2064      	movs	r0, #100	; 0x64
 8005bba:	f7fc fad9 	bl	8002170 <HAL_Delay>
		LOCK(0);
 8005bbe:	23a0      	movs	r3, #160	; 0xa0
 8005bc0:	05db      	lsls	r3, r3, #23
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2110      	movs	r1, #16
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7fd faaf 	bl	800312a <HAL_GPIO_WritePin>
		OLED_ShowStringXY(0, 4, "D:OPEN   ", 1);
 8005bcc:	4a07      	ldr	r2, [pc, #28]	; (8005bec <door+0xa0>)
 8005bce:	2301      	movs	r3, #1
 8005bd0:	2104      	movs	r1, #4
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7ff fc58 	bl	8005488 <OLED_ShowStringXY>
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	50000400 	.word	0x50000400
 8005be4:	0800bb28 	.word	0x0800bb28
 8005be8:	20000304 	.word	0x20000304
 8005bec:	0800bb30 	.word	0x0800bb30

08005bf0 <vr>:

void vr() {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 3);
 8005bf4:	495d      	ldr	r1, [pc, #372]	; (8005d6c <vr+0x17c>)
 8005bf6:	4b5e      	ldr	r3, [pc, #376]	; (8005d70 <vr+0x180>)
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7fc fc4a 	bl	8002494 <HAL_ADC_Start_DMA>

	le = adc[0] / 40 - 3;
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <vr+0x17c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2128      	movs	r1, #40	; 0x28
 8005c06:	0018      	movs	r0, r3
 8005c08:	f7fa fa9a 	bl	8000140 <__udivsi3>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	3b03      	subs	r3, #3
 8005c10:	001a      	movs	r2, r3
 8005c12:	4b58      	ldr	r3, [pc, #352]	; (8005d74 <vr+0x184>)
 8005c14:	601a      	str	r2, [r3, #0]
	we = adc[1] / 227;
 8005c16:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <vr+0x17c>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	21e3      	movs	r1, #227	; 0xe3
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fa fa8f 	bl	8000140 <__udivsi3>
 8005c22:	0003      	movs	r3, r0
 8005c24:	001a      	movs	r2, r3
 8005c26:	4b54      	ldr	r3, [pc, #336]	; (8005d78 <vr+0x188>)
 8005c28:	601a      	str	r2, [r3, #0]
	te = adc[2] / 56 - 3;
 8005c2a:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <vr+0x17c>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2138      	movs	r1, #56	; 0x38
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fa fa85 	bl	8000140 <__udivsi3>
 8005c36:	0003      	movs	r3, r0
 8005c38:	3b03      	subs	r3, #3
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	4b4f      	ldr	r3, [pc, #316]	; (8005d7c <vr+0x18c>)
 8005c3e:	601a      	str	r2, [r3, #0]

	if (le <= -1) {
 8005c40:	4b4c      	ldr	r3, [pc, #304]	; (8005d74 <vr+0x184>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da02      	bge.n	8005c4e <vr+0x5e>
		le = 0;
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <vr+0x184>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
	}
	if (te <= -1) {
 8005c4e:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <vr+0x18c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da02      	bge.n	8005c5c <vr+0x6c>
		te = 0;
 8005c56:	4b49      	ldr	r3, [pc, #292]	; (8005d7c <vr+0x18c>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
	}
	if (te >= 66 || we >= 16) {
 8005c5c:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <vr+0x18c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b41      	cmp	r3, #65	; 0x41
 8005c62:	dc03      	bgt.n	8005c6c <vr+0x7c>
 8005c64:	4b44      	ldr	r3, [pc, #272]	; (8005d78 <vr+0x188>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b0f      	cmp	r3, #15
 8005c6a:	dd15      	ble.n	8005c98 <vr+0xa8>
		BUZZER(1);
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	0219      	lsls	r1, r3, #8
 8005c70:	23a0      	movs	r3, #160	; 0xa0
 8005c72:	05db      	lsls	r3, r3, #23
 8005c74:	2201      	movs	r2, #1
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7fd fa57 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8005c7c:	2064      	movs	r0, #100	; 0x64
 8005c7e:	f7fc fa77 	bl	8002170 <HAL_Delay>
		BUZZER(0);
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	0219      	lsls	r1, r3, #8
 8005c86:	23a0      	movs	r3, #160	; 0xa0
 8005c88:	05db      	lsls	r3, r3, #23
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7fd fa4c 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8005c92:	2064      	movs	r0, #100	; 0x64
 8005c94:	f7fc fa6c 	bl	8002170 <HAL_Delay>

	}

	sprintf(level, "L:%02d", le);
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <vr+0x184>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4938      	ldr	r1, [pc, #224]	; (8005d80 <vr+0x190>)
 8005c9e:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <vr+0x194>)
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f003 fbf7 	bl	8009494 <siprintf>
	sprintf(weight, "W:%02d", we);
 8005ca6:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <vr+0x188>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4937      	ldr	r1, [pc, #220]	; (8005d88 <vr+0x198>)
 8005cac:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <vr+0x19c>)
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f003 fbf0 	bl	8009494 <siprintf>
	sprintf(temp, "T:%02d", te);
 8005cb4:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <vr+0x18c>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4935      	ldr	r1, [pc, #212]	; (8005d90 <vr+0x1a0>)
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <vr+0x1a4>)
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f003 fbe9 	bl	8009494 <siprintf>

	OLED_ShowStringXY(0, 6, level, 1);
 8005cc2:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <vr+0x194>)
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	2106      	movs	r1, #6
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f7ff fbdd 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(8, 6, weight, 1);
 8005cce:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <vr+0x19c>)
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	2106      	movs	r1, #6
 8005cd4:	2008      	movs	r0, #8
 8005cd6:	f7ff fbd7 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(16, 6, temp, 1);
 8005cda:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <vr+0x1a4>)
 8005cdc:	2301      	movs	r3, #1
 8005cde:	2106      	movs	r1, #6
 8005ce0:	2010      	movs	r0, #16
 8005ce2:	f7ff fbd1 	bl	8005488 <OLED_ShowStringXY>

	if (le >= we * 6 && le != 0) {
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vr+0x188>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	0013      	movs	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <vr+0x184>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dc32      	bgt.n	8005d62 <vr+0x172>
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <vr+0x184>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02e      	beq.n	8005d62 <vr+0x172>

		SUPPLY(0);
 8005d04:	23a0      	movs	r3, #160	; 0xa0
 8005d06:	05db      	lsls	r3, r3, #23
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7fd fa0c 	bl	800312a <HAL_GPIO_WritePin>

		if (c == 0) {
 8005d12:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <vr+0x1a8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d123      	bne.n	8005d62 <vr+0x172>
			c = 1;
 8005d1a:	4b1f      	ldr	r3, [pc, #124]	; (8005d98 <vr+0x1a8>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
			sprintf(lvel[2], "%s", lvel[1]);
 8005d20:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <vr+0x1ac>)
 8005d22:	491f      	ldr	r1, [pc, #124]	; (8005da0 <vr+0x1b0>)
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <vr+0x1b4>)
 8005d26:	0018      	movs	r0, r3
 8005d28:	f003 fbb4 	bl	8009494 <siprintf>
			sprintf(lvel[1], "%s", lvel[0]);
 8005d2c:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <vr+0x1b8>)
 8005d2e:	491c      	ldr	r1, [pc, #112]	; (8005da0 <vr+0x1b0>)
 8005d30:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <vr+0x1ac>)
 8005d32:	0018      	movs	r0, r3
 8005d34:	f003 fbae 	bl	8009494 <siprintf>
			sprintf(lvel[0], "Water cost:%.2lf m|", tc[5] / 1000 * 0.08);
 8005d38:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <vr+0x1bc>)
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	22fa      	movs	r2, #250	; 0xfa
 8005d3e:	0091      	lsls	r1, r2, #2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7fa f9fd 	bl	8000140 <__udivsi3>
 8005d46:	0003      	movs	r3, r0
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fc f96d 	bl	8002028 <__aeabi_ui2d>
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <vr+0x1c0>)
 8005d50:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <vr+0x1c4>)
 8005d52:	f7fb fae7 	bl	8001324 <__aeabi_dmul>
 8005d56:	0002      	movs	r2, r0
 8005d58:	000b      	movs	r3, r1
 8005d5a:	4917      	ldr	r1, [pc, #92]	; (8005db8 <vr+0x1c8>)
 8005d5c:	4812      	ldr	r0, [pc, #72]	; (8005da8 <vr+0x1b8>)
 8005d5e:	f003 fb99 	bl	8009494 <siprintf>

		}

	}

	door();
 8005d62:	f7ff fef3 	bl	8005b4c <door>

}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	200006e0 	.word	0x200006e0
 8005d70:	20000208 	.word	0x20000208
 8005d74:	20000310 	.word	0x20000310
 8005d78:	20000314 	.word	0x20000314
 8005d7c:	20000318 	.word	0x20000318
 8005d80:	0800bb3c 	.word	0x0800bb3c
 8005d84:	200005b4 	.word	0x200005b4
 8005d88:	0800bb44 	.word	0x0800bb44
 8005d8c:	20000618 	.word	0x20000618
 8005d90:	0800bb4c 	.word	0x0800bb4c
 8005d94:	2000067c 	.word	0x2000067c
 8005d98:	200002fc 	.word	0x200002fc
 8005d9c:	2000051a 	.word	0x2000051a
 8005da0:	0800bb54 	.word	0x0800bb54
 8005da4:	20000538 	.word	0x20000538
 8005da8:	200004fc 	.word	0x200004fc
 8005dac:	200006ec 	.word	0x200006ec
 8005db0:	47ae147b 	.word	0x47ae147b
 8005db4:	3fb47ae1 	.word	0x3fb47ae1
 8005db8:	0800bb58 	.word	0x0800bb58

08005dbc <vrr>:

void vrr() {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 3);
 8005dc0:	495f      	ldr	r1, [pc, #380]	; (8005f40 <vrr+0x184>)
 8005dc2:	4b60      	ldr	r3, [pc, #384]	; (8005f44 <vrr+0x188>)
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fc fb64 	bl	8002494 <HAL_ADC_Start_DMA>

	le = adc[0] / 40 - 3;
 8005dcc:	4b5c      	ldr	r3, [pc, #368]	; (8005f40 <vrr+0x184>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2128      	movs	r1, #40	; 0x28
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7fa f9b4 	bl	8000140 <__udivsi3>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	3b03      	subs	r3, #3
 8005ddc:	001a      	movs	r2, r3
 8005dde:	4b5a      	ldr	r3, [pc, #360]	; (8005f48 <vrr+0x18c>)
 8005de0:	601a      	str	r2, [r3, #0]
	we = adc[1] / 227;
 8005de2:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <vrr+0x184>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	21e3      	movs	r1, #227	; 0xe3
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fa f9a9 	bl	8000140 <__udivsi3>
 8005dee:	0003      	movs	r3, r0
 8005df0:	001a      	movs	r2, r3
 8005df2:	4b56      	ldr	r3, [pc, #344]	; (8005f4c <vrr+0x190>)
 8005df4:	601a      	str	r2, [r3, #0]
	te = adc[2] / 56 - 3;
 8005df6:	4b52      	ldr	r3, [pc, #328]	; (8005f40 <vrr+0x184>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2138      	movs	r1, #56	; 0x38
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fa f99f 	bl	8000140 <__udivsi3>
 8005e02:	0003      	movs	r3, r0
 8005e04:	3b03      	subs	r3, #3
 8005e06:	001a      	movs	r2, r3
 8005e08:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <vrr+0x194>)
 8005e0a:	601a      	str	r2, [r3, #0]

	if (le <= -1) {
 8005e0c:	4b4e      	ldr	r3, [pc, #312]	; (8005f48 <vrr+0x18c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	da02      	bge.n	8005e1a <vrr+0x5e>
		le = 0;
 8005e14:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <vrr+0x18c>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
	}
	if (te <= -1) {
 8005e1a:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <vrr+0x194>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da02      	bge.n	8005e28 <vrr+0x6c>
		te = 0;
 8005e22:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <vrr+0x194>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
	}
	if (te >= 66 || we >= 16) {
 8005e28:	4b49      	ldr	r3, [pc, #292]	; (8005f50 <vrr+0x194>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b41      	cmp	r3, #65	; 0x41
 8005e2e:	dc03      	bgt.n	8005e38 <vrr+0x7c>
 8005e30:	4b46      	ldr	r3, [pc, #280]	; (8005f4c <vrr+0x190>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b0f      	cmp	r3, #15
 8005e36:	dd15      	ble.n	8005e64 <vrr+0xa8>
		BUZZER(1);
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	0219      	lsls	r1, r3, #8
 8005e3c:	23a0      	movs	r3, #160	; 0xa0
 8005e3e:	05db      	lsls	r3, r3, #23
 8005e40:	2201      	movs	r2, #1
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7fd f971 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8005e48:	2064      	movs	r0, #100	; 0x64
 8005e4a:	f7fc f991 	bl	8002170 <HAL_Delay>
		BUZZER(0);
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	0219      	lsls	r1, r3, #8
 8005e52:	23a0      	movs	r3, #160	; 0xa0
 8005e54:	05db      	lsls	r3, r3, #23
 8005e56:	2200      	movs	r2, #0
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7fd f966 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8005e5e:	2064      	movs	r0, #100	; 0x64
 8005e60:	f7fc f986 	bl	8002170 <HAL_Delay>

	}

	sprintf(level, "L:%02d", le);
 8005e64:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <vrr+0x18c>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	493a      	ldr	r1, [pc, #232]	; (8005f54 <vrr+0x198>)
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <vrr+0x19c>)
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f003 fb11 	bl	8009494 <siprintf>
	sprintf(weight, "W:%02d", we);
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <vrr+0x190>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4939      	ldr	r1, [pc, #228]	; (8005f5c <vrr+0x1a0>)
 8005e78:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <vrr+0x1a4>)
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f003 fb0a 	bl	8009494 <siprintf>
	sprintf(temp, "T:%02d", te);
 8005e80:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <vrr+0x194>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4937      	ldr	r1, [pc, #220]	; (8005f64 <vrr+0x1a8>)
 8005e86:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <vrr+0x1ac>)
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f003 fb03 	bl	8009494 <siprintf>

	OLED_ShowStringXY(0, 6, level, 1);
 8005e8e:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <vrr+0x19c>)
 8005e90:	2301      	movs	r3, #1
 8005e92:	2106      	movs	r1, #6
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7ff faf7 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(8, 6, weight, 1);
 8005e9a:	4a31      	ldr	r2, [pc, #196]	; (8005f60 <vrr+0x1a4>)
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	2106      	movs	r1, #6
 8005ea0:	2008      	movs	r0, #8
 8005ea2:	f7ff faf1 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(16, 6, temp, 1);
 8005ea6:	4a30      	ldr	r2, [pc, #192]	; (8005f68 <vrr+0x1ac>)
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	2106      	movs	r1, #6
 8005eac:	2010      	movs	r0, #16
 8005eae:	f7ff faeb 	bl	8005488 <OLED_ShowStringXY>

	if (le >= we * 6 && le != 0) {
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <vrr+0x190>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	0013      	movs	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <vrr+0x18c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	dc36      	bgt.n	8005f36 <vrr+0x17a>
 8005ec8:	4b1f      	ldr	r3, [pc, #124]	; (8005f48 <vrr+0x18c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d032      	beq.n	8005f36 <vrr+0x17a>

		SUPPLY(0);
 8005ed0:	23a0      	movs	r3, #160	; 0xa0
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f7fd f926 	bl	800312a <HAL_GPIO_WritePin>

		if (au == 0) {
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <vrr+0x1b0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d127      	bne.n	8005f36 <vrr+0x17a>
			if (c == 0) {
 8005ee6:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <vrr+0x1b4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d123      	bne.n	8005f36 <vrr+0x17a>
				c = 1;
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <vrr+0x1b4>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
				sprintf(lvel[2], "%s", lvel[1]);
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <vrr+0x1b8>)
 8005ef6:	4920      	ldr	r1, [pc, #128]	; (8005f78 <vrr+0x1bc>)
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <vrr+0x1c0>)
 8005efa:	0018      	movs	r0, r3
 8005efc:	f003 faca 	bl	8009494 <siprintf>
				sprintf(lvel[1], "%s", lvel[0]);
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <vrr+0x1c4>)
 8005f02:	491d      	ldr	r1, [pc, #116]	; (8005f78 <vrr+0x1bc>)
 8005f04:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <vrr+0x1b8>)
 8005f06:	0018      	movs	r0, r3
 8005f08:	f003 fac4 	bl	8009494 <siprintf>
				sprintf(lvel[0], "Water cost:%.2lf m|", tc[5] / 1000 * 0.08);
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <vrr+0x1c8>)
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	22fa      	movs	r2, #250	; 0xfa
 8005f12:	0091      	lsls	r1, r2, #2
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7fa f913 	bl	8000140 <__udivsi3>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fc f883 	bl	8002028 <__aeabi_ui2d>
 8005f22:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <vrr+0x1cc>)
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <vrr+0x1d0>)
 8005f26:	f7fb f9fd 	bl	8001324 <__aeabi_dmul>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	4918      	ldr	r1, [pc, #96]	; (8005f90 <vrr+0x1d4>)
 8005f30:	4813      	ldr	r0, [pc, #76]	; (8005f80 <vrr+0x1c4>)
 8005f32:	f003 faaf 	bl	8009494 <siprintf>
			}
		}

	}

	door();
 8005f36:	f7ff fe09 	bl	8005b4c <door>

}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200006e0 	.word	0x200006e0
 8005f44:	20000208 	.word	0x20000208
 8005f48:	20000310 	.word	0x20000310
 8005f4c:	20000314 	.word	0x20000314
 8005f50:	20000318 	.word	0x20000318
 8005f54:	0800bb3c 	.word	0x0800bb3c
 8005f58:	200005b4 	.word	0x200005b4
 8005f5c:	0800bb44 	.word	0x0800bb44
 8005f60:	20000618 	.word	0x20000618
 8005f64:	0800bb4c 	.word	0x0800bb4c
 8005f68:	2000067c 	.word	0x2000067c
 8005f6c:	20000300 	.word	0x20000300
 8005f70:	200002fc 	.word	0x200002fc
 8005f74:	2000051a 	.word	0x2000051a
 8005f78:	0800bb54 	.word	0x0800bb54
 8005f7c:	20000538 	.word	0x20000538
 8005f80:	200004fc 	.word	0x200004fc
 8005f84:	200006ec 	.word	0x200006ec
 8005f88:	47ae147b 	.word	0x47ae147b
 8005f8c:	3fb47ae1 	.word	0x3fb47ae1
 8005f90:	0800bb58 	.word	0x0800bb58

08005f94 <vd>:

void vd() {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 3);
 8005f98:	493e      	ldr	r1, [pc, #248]	; (8006094 <vd+0x100>)
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <vd+0x104>)
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7fc fa78 	bl	8002494 <HAL_ADC_Start_DMA>

	le = adc[0] / 40 - 3;
 8005fa4:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <vd+0x100>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2128      	movs	r1, #40	; 0x28
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7fa f8c8 	bl	8000140 <__udivsi3>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	3b03      	subs	r3, #3
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <vd+0x108>)
 8005fb8:	601a      	str	r2, [r3, #0]
	we = adc[1] / 227;
 8005fba:	4b36      	ldr	r3, [pc, #216]	; (8006094 <vd+0x100>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	21e3      	movs	r1, #227	; 0xe3
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7fa f8bd 	bl	8000140 <__udivsi3>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	001a      	movs	r2, r3
 8005fca:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <vd+0x10c>)
 8005fcc:	601a      	str	r2, [r3, #0]
	te = adc[2] / 56 - 3;
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <vd+0x100>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2138      	movs	r1, #56	; 0x38
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fa f8b3 	bl	8000140 <__udivsi3>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	3b03      	subs	r3, #3
 8005fde:	001a      	movs	r2, r3
 8005fe0:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <vd+0x110>)
 8005fe2:	601a      	str	r2, [r3, #0]

	if (le <= -1) {
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <vd+0x108>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da02      	bge.n	8005ff2 <vd+0x5e>
		le = 0;
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <vd+0x108>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
	}
	if (te <= -1) {
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <vd+0x110>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da02      	bge.n	8006000 <vd+0x6c>
		te = 0;
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <vd+0x110>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
	}

	if (te >= 66 || we >= 16) {
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <vd+0x110>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b41      	cmp	r3, #65	; 0x41
 8006006:	dc03      	bgt.n	8006010 <vd+0x7c>
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <vd+0x10c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	dd15      	ble.n	800603c <vd+0xa8>
		BUZZER(1);
 8006010:	2380      	movs	r3, #128	; 0x80
 8006012:	0219      	lsls	r1, r3, #8
 8006014:	23a0      	movs	r3, #160	; 0xa0
 8006016:	05db      	lsls	r3, r3, #23
 8006018:	2201      	movs	r2, #1
 800601a:	0018      	movs	r0, r3
 800601c:	f7fd f885 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8006020:	2064      	movs	r0, #100	; 0x64
 8006022:	f7fc f8a5 	bl	8002170 <HAL_Delay>
		BUZZER(0);
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	0219      	lsls	r1, r3, #8
 800602a:	23a0      	movs	r3, #160	; 0xa0
 800602c:	05db      	lsls	r3, r3, #23
 800602e:	2200      	movs	r2, #0
 8006030:	0018      	movs	r0, r3
 8006032:	f7fd f87a 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8006036:	2064      	movs	r0, #100	; 0x64
 8006038:	f7fc f89a 	bl	8002170 <HAL_Delay>

	}

	sprintf(level, "L:%02d", le);
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <vd+0x108>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4919      	ldr	r1, [pc, #100]	; (80060a8 <vd+0x114>)
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <vd+0x118>)
 8006044:	0018      	movs	r0, r3
 8006046:	f003 fa25 	bl	8009494 <siprintf>
	sprintf(weight, "W:%02d", we);
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <vd+0x10c>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4918      	ldr	r1, [pc, #96]	; (80060b0 <vd+0x11c>)
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <vd+0x120>)
 8006052:	0018      	movs	r0, r3
 8006054:	f003 fa1e 	bl	8009494 <siprintf>
	sprintf(temp, "T:%02d", te);
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <vd+0x110>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4916      	ldr	r1, [pc, #88]	; (80060b8 <vd+0x124>)
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <vd+0x128>)
 8006060:	0018      	movs	r0, r3
 8006062:	f003 fa17 	bl	8009494 <siprintf>

	OLED_ShowStringXY(0, 6, level, 1);
 8006066:	4a11      	ldr	r2, [pc, #68]	; (80060ac <vd+0x118>)
 8006068:	2301      	movs	r3, #1
 800606a:	2106      	movs	r1, #6
 800606c:	2000      	movs	r0, #0
 800606e:	f7ff fa0b 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(8, 6, weight, 1);
 8006072:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <vd+0x120>)
 8006074:	2301      	movs	r3, #1
 8006076:	2106      	movs	r1, #6
 8006078:	2008      	movs	r0, #8
 800607a:	f7ff fa05 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(16, 6, temp, 1);
 800607e:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <vd+0x128>)
 8006080:	2301      	movs	r3, #1
 8006082:	2106      	movs	r1, #6
 8006084:	2010      	movs	r0, #16
 8006086:	f7ff f9ff 	bl	8005488 <OLED_ShowStringXY>

	door();
 800608a:	f7ff fd5f 	bl	8005b4c <door>

}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200006e0 	.word	0x200006e0
 8006098:	20000208 	.word	0x20000208
 800609c:	20000310 	.word	0x20000310
 80060a0:	20000314 	.word	0x20000314
 80060a4:	20000318 	.word	0x20000318
 80060a8:	0800bb3c 	.word	0x0800bb3c
 80060ac:	200005b4 	.word	0x200005b4
 80060b0:	0800bb44 	.word	0x0800bb44
 80060b4:	20000618 	.word	0x20000618
 80060b8:	0800bb4c 	.word	0x0800bb4c
 80060bc:	2000067c 	.word	0x2000067c

080060c0 <swui>:

void swui() {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0

	switch (i) {
 80060c4:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <swui+0x80>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d836      	bhi.n	800613a <swui+0x7a>
 80060cc:	009a      	lsls	r2, r3, #2
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <swui+0x84>)
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	469f      	mov	pc, r3

	case 0:
		OLED_ShowStringXY(13, 4, "SET:COLD", 1);
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <swui+0x88>)
 80060d8:	2301      	movs	r3, #1
 80060da:	2104      	movs	r1, #4
 80060dc:	200d      	movs	r0, #13
 80060de:	f7ff f9d3 	bl	8005488 <OLED_ShowStringXY>
		tem = 20;
 80060e2:	4b1a      	ldr	r3, [pc, #104]	; (800614c <swui+0x8c>)
 80060e4:	2214      	movs	r2, #20
 80060e6:	701a      	strb	r2, [r3, #0]
		break;
 80060e8:	e027      	b.n	800613a <swui+0x7a>

	case 1:
		OLED_ShowStringXY(13, 4, "SET:30}C", 1);
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <swui+0x90>)
 80060ec:	2301      	movs	r3, #1
 80060ee:	2104      	movs	r1, #4
 80060f0:	200d      	movs	r0, #13
 80060f2:	f7ff f9c9 	bl	8005488 <OLED_ShowStringXY>
		tem = 30;
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <swui+0x8c>)
 80060f8:	221e      	movs	r2, #30
 80060fa:	701a      	strb	r2, [r3, #0]
		break;
 80060fc:	e01d      	b.n	800613a <swui+0x7a>

	case 2:
		OLED_ShowStringXY(13, 4, "SET:40}C", 1);
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <swui+0x94>)
 8006100:	2301      	movs	r3, #1
 8006102:	2104      	movs	r1, #4
 8006104:	200d      	movs	r0, #13
 8006106:	f7ff f9bf 	bl	8005488 <OLED_ShowStringXY>
		tem = 40;
 800610a:	4b10      	ldr	r3, [pc, #64]	; (800614c <swui+0x8c>)
 800610c:	2228      	movs	r2, #40	; 0x28
 800610e:	701a      	strb	r2, [r3, #0]
		break;
 8006110:	e013      	b.n	800613a <swui+0x7a>

	case 3:
		OLED_ShowStringXY(13, 4, "SET:50}C", 1);
 8006112:	4a11      	ldr	r2, [pc, #68]	; (8006158 <swui+0x98>)
 8006114:	2301      	movs	r3, #1
 8006116:	2104      	movs	r1, #4
 8006118:	200d      	movs	r0, #13
 800611a:	f7ff f9b5 	bl	8005488 <OLED_ShowStringXY>
		tem = 50;
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <swui+0x8c>)
 8006120:	2232      	movs	r2, #50	; 0x32
 8006122:	701a      	strb	r2, [r3, #0]
		break;
 8006124:	e009      	b.n	800613a <swui+0x7a>

	case 4:
		OLED_ShowStringXY(13, 4, "SET:60}C", 1);
 8006126:	4a0d      	ldr	r2, [pc, #52]	; (800615c <swui+0x9c>)
 8006128:	2301      	movs	r3, #1
 800612a:	2104      	movs	r1, #4
 800612c:	200d      	movs	r0, #13
 800612e:	f7ff f9ab 	bl	8005488 <OLED_ShowStringXY>
		tem = 60;
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <swui+0x8c>)
 8006134:	223c      	movs	r2, #60	; 0x3c
 8006136:	701a      	strb	r2, [r3, #0]
		break;
 8006138:	46c0      	nop			; (mov r8, r8)

	}

}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	200002f8 	.word	0x200002f8
 8006144:	0800c764 	.word	0x0800c764
 8006148:	0800bb6c 	.word	0x0800bb6c
 800614c:	20000714 	.word	0x20000714
 8006150:	0800bb78 	.word	0x0800bb78
 8006154:	0800bb84 	.word	0x0800bb84
 8006158:	0800bb90 	.word	0x0800bb90
 800615c:	0800bb9c 	.word	0x0800bb9c

08006160 <sww>:

int sww(int x) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

	static int j = 1;

	if (x == 1) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11c      	bne.n	80061a8 <sww+0x48>
		tc[5] = 0;
 800616e:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <sww+0x78>)
 8006170:	2200      	movs	r2, #0
 8006172:	615a      	str	r2, [r3, #20]
		tc[7] = 0;
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <sww+0x78>)
 8006176:	2200      	movs	r2, #0
 8006178:	61da      	str	r2, [r3, #28]
		check = 1;
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <sww+0x7c>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]
		SUPPLY(1);
 8006180:	23a0      	movs	r3, #160	; 0xa0
 8006182:	05db      	lsls	r3, r3, #23
 8006184:	2201      	movs	r2, #1
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	0018      	movs	r0, r3
 800618a:	f7fc ffce 	bl	800312a <HAL_GPIO_WritePin>
		DETERGENT(1);
 800618e:	23a0      	movs	r3, #160	; 0xa0
 8006190:	05db      	lsls	r3, r3, #23
 8006192:	2201      	movs	r2, #1
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	0018      	movs	r0, r3
 8006198:	f7fc ffc7 	bl	800312a <HAL_GPIO_WritePin>
		tc[1] = 0;
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <sww+0x78>)
 800619e:	2200      	movs	r2, #0
 80061a0:	605a      	str	r2, [r3, #4]
		j = 2;
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <sww+0x80>)
 80061a4:	2202      	movs	r2, #2
 80061a6:	601a      	str	r2, [r3, #0]
	}

	if (j == 2) {
 80061a8:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <sww+0x80>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d10e      	bne.n	80061ce <sww+0x6e>
		if (tc[1] >= 2000) {
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <sww+0x78>)
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	23fa      	movs	r3, #250	; 0xfa
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d308      	bcc.n	80061ce <sww+0x6e>
			DETERGENT(0);
 80061bc:	23a0      	movs	r3, #160	; 0xa0
 80061be:	05db      	lsls	r3, r3, #23
 80061c0:	2200      	movs	r2, #0
 80061c2:	2140      	movs	r1, #64	; 0x40
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7fc ffb0 	bl	800312a <HAL_GPIO_WritePin>
			return 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e7ff      	b.n	80061ce <sww+0x6e>
		}
	}

}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b002      	add	sp, #8
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	200006ec 	.word	0x200006ec
 80061dc:	20000308 	.word	0x20000308
 80061e0:	2000000c 	.word	0x2000000c

080061e4 <srw>:

int srw(int x) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

	static int j = 1;

	if (x == 1) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d11c      	bne.n	800622c <srw+0x48>
		tc[5] = 0;
 80061f2:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <srw+0xc4>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	615a      	str	r2, [r3, #20]
		tc[7] = 0;
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <srw+0xc4>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	61da      	str	r2, [r3, #28]
		check = 1;
 80061fe:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <srw+0xc8>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
		SUPPLY(1);
 8006204:	23a0      	movs	r3, #160	; 0xa0
 8006206:	05db      	lsls	r3, r3, #23
 8006208:	2201      	movs	r2, #1
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	0018      	movs	r0, r3
 800620e:	f7fc ff8c 	bl	800312a <HAL_GPIO_WritePin>
		DETERGENT(1);
 8006212:	23a0      	movs	r3, #160	; 0xa0
 8006214:	05db      	lsls	r3, r3, #23
 8006216:	2201      	movs	r2, #1
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	0018      	movs	r0, r3
 800621c:	f7fc ff85 	bl	800312a <HAL_GPIO_WritePin>
		tc[1] = 0;
 8006220:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <srw+0xc4>)
 8006222:	2200      	movs	r2, #0
 8006224:	605a      	str	r2, [r3, #4]
		j = 2;
 8006226:	4b22      	ldr	r3, [pc, #136]	; (80062b0 <srw+0xcc>)
 8006228:	2202      	movs	r2, #2
 800622a:	601a      	str	r2, [r3, #0]
	}

	if (j == 2) {
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <srw+0xcc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d10e      	bne.n	8006252 <srw+0x6e>
		if (tc[1] >= 1000) {
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <srw+0xc4>)
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	23fa      	movs	r3, #250	; 0xfa
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	429a      	cmp	r2, r3
 800623e:	d308      	bcc.n	8006252 <srw+0x6e>
			DETERGENT(0);
 8006240:	23a0      	movs	r3, #160	; 0xa0
 8006242:	05db      	lsls	r3, r3, #23
 8006244:	2200      	movs	r2, #0
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	0018      	movs	r0, r3
 800624a:	f7fc ff6e 	bl	800312a <HAL_GPIO_WritePin>
			return 1;
 800624e:	2301      	movs	r3, #1
 8006250:	e025      	b.n	800629e <srw+0xba>
		}
	}

	if (tc[7] >= 5000 && le < we * 6) {
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <srw+0xc4>)
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <srw+0xd0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d920      	bls.n	800629e <srw+0xba>
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <srw+0xd4>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	0013      	movs	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	189b      	adds	r3, r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	001a      	movs	r2, r3
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <srw+0xd8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	dd15      	ble.n	800629e <srw+0xba>
		BUZZER(1);
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	0219      	lsls	r1, r3, #8
 8006276:	23a0      	movs	r3, #160	; 0xa0
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	2201      	movs	r2, #1
 800627c:	0018      	movs	r0, r3
 800627e:	f7fc ff54 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8006282:	2064      	movs	r0, #100	; 0x64
 8006284:	f7fb ff74 	bl	8002170 <HAL_Delay>
		BUZZER(0);
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	0219      	lsls	r1, r3, #8
 800628c:	23a0      	movs	r3, #160	; 0xa0
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	2200      	movs	r2, #0
 8006292:	0018      	movs	r0, r3
 8006294:	f7fc ff49 	bl	800312a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8006298:	2064      	movs	r0, #100	; 0x64
 800629a:	f7fb ff69 	bl	8002170 <HAL_Delay>

	}
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b002      	add	sp, #8
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	200006ec 	.word	0x200006ec
 80062ac:	20000308 	.word	0x20000308
 80062b0:	20000010 	.word	0x20000010
 80062b4:	00001387 	.word	0x00001387
 80062b8:	20000314 	.word	0x20000314
 80062bc:	20000310 	.word	0x20000310

080062c0 <semid>:

int semid() {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0

	int x = 1, y = 0, j = 0, z;
 80062c6:	2301      	movs	r3, #1
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	2300      	movs	r3, #0
 80062d0:	607b      	str	r3, [r7, #4]
	i = 0;
 80062d2:	4b9d      	ldr	r3, [pc, #628]	; (8006548 <semid+0x288>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
	ledoff();
 80062d8:	f7ff f904 	bl	80054e4 <ledoff>
	door();
 80062dc:	f7ff fc36 	bl	8005b4c <door>
	vd();
 80062e0:	f7ff fe58 	bl	8005f94 <vd>
	tc[7] = 0;
 80062e4:	4b99      	ldr	r3, [pc, #612]	; (800654c <semid+0x28c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]

	while (1) {

		if (tc[0] >= 75) {
 80062ea:	4b98      	ldr	r3, [pc, #608]	; (800654c <semid+0x28c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b4a      	cmp	r3, #74	; 0x4a
 80062f0:	d800      	bhi.n	80062f4 <semid+0x34>
 80062f2:	e0c1      	b.n	8006478 <semid+0x1b8>
			tc[0] = 0;
 80062f4:	4b95      	ldr	r3, [pc, #596]	; (800654c <semid+0x28c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
			vd();
 80062fa:	f7ff fe4b 	bl	8005f94 <vd>
			if (tc[2] >= 500) {
 80062fe:	4b93      	ldr	r3, [pc, #588]	; (800654c <semid+0x28c>)
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	23fa      	movs	r3, #250	; 0xfa
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	429a      	cmp	r2, r3
 8006308:	d200      	bcs.n	800630c <semid+0x4c>
 800630a:	e0b5      	b.n	8006478 <semid+0x1b8>
				tc[2] = 0;
 800630c:	4b8f      	ldr	r3, [pc, #572]	; (800654c <semid+0x28c>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]

				if (le < 2 && SW_DOOR == 0) {
 8006312:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <semid+0x290>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b01      	cmp	r3, #1
 8006318:	dd00      	ble.n	800631c <semid+0x5c>
 800631a:	e0ad      	b.n	8006478 <semid+0x1b8>
 800631c:	4b8d      	ldr	r3, [pc, #564]	; (8006554 <semid+0x294>)
 800631e:	2110      	movs	r1, #16
 8006320:	0018      	movs	r0, r3
 8006322:	f7fc fee5 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d000      	beq.n	800632c <semid+0x6c>
 800632a:	e0a5      	b.n	8006478 <semid+0x1b8>

					work = 1;
 800632c:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <semid+0x298>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
					DRAIN(0);
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	01db      	lsls	r3, r3, #7
 8006336:	4889      	ldr	r0, [pc, #548]	; (800655c <semid+0x29c>)
 8006338:	2200      	movs	r2, #0
 800633a:	0019      	movs	r1, r3
 800633c:	f7fc fef5 	bl	800312a <HAL_GPIO_WritePin>

					if (y == 0) {
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <semid+0x90>
						y = 1;
 8006346:	2301      	movs	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
						tc[3] = 0;
 800634a:	4b80      	ldr	r3, [pc, #512]	; (800654c <semid+0x28c>)
 800634c:	2200      	movs	r2, #0
 800634e:	60da      	str	r2, [r3, #12]
					}

					if (tc[3] >= 0 && tc[3] < 3000) {
 8006350:	4b7e      	ldr	r3, [pc, #504]	; (800654c <semid+0x28c>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4a82      	ldr	r2, [pc, #520]	; (8006560 <semid+0x2a0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d807      	bhi.n	800636a <semid+0xaa>
						FWD(1);
 800635a:	23a0      	movs	r3, #160	; 0xa0
 800635c:	05db      	lsls	r3, r3, #23
 800635e:	2201      	movs	r2, #1
 8006360:	2120      	movs	r1, #32
 8006362:	0018      	movs	r0, r3
 8006364:	f7fc fee1 	bl	800312a <HAL_GPIO_WritePin>
 8006368:	e086      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 3000 && tc[3] < 4000) {
 800636a:	4b78      	ldr	r3, [pc, #480]	; (800654c <semid+0x28c>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4a7c      	ldr	r2, [pc, #496]	; (8006560 <semid+0x2a0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d90d      	bls.n	8006390 <semid+0xd0>
 8006374:	4b75      	ldr	r3, [pc, #468]	; (800654c <semid+0x28c>)
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	23fa      	movs	r3, #250	; 0xfa
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	429a      	cmp	r2, r3
 800637e:	d207      	bcs.n	8006390 <semid+0xd0>
						FWD(0);
 8006380:	23a0      	movs	r3, #160	; 0xa0
 8006382:	05db      	lsls	r3, r3, #23
 8006384:	2200      	movs	r2, #0
 8006386:	2120      	movs	r1, #32
 8006388:	0018      	movs	r0, r3
 800638a:	f7fc fece 	bl	800312a <HAL_GPIO_WritePin>
 800638e:	e073      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 4000 && tc[3] < 7000) {
 8006390:	4b6e      	ldr	r3, [pc, #440]	; (800654c <semid+0x28c>)
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	23fa      	movs	r3, #250	; 0xfa
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	429a      	cmp	r2, r3
 800639a:	d30c      	bcc.n	80063b6 <semid+0xf6>
 800639c:	4b6b      	ldr	r3, [pc, #428]	; (800654c <semid+0x28c>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4a70      	ldr	r2, [pc, #448]	; (8006564 <semid+0x2a4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d807      	bhi.n	80063b6 <semid+0xf6>
						REV(1);
 80063a6:	23a0      	movs	r3, #160	; 0xa0
 80063a8:	05db      	lsls	r3, r3, #23
 80063aa:	2201      	movs	r2, #1
 80063ac:	2108      	movs	r1, #8
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7fc febb 	bl	800312a <HAL_GPIO_WritePin>
 80063b4:	e060      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 7000 && tc[3] < 8000) {
 80063b6:	4b65      	ldr	r3, [pc, #404]	; (800654c <semid+0x28c>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	4a6a      	ldr	r2, [pc, #424]	; (8006564 <semid+0x2a4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d90d      	bls.n	80063dc <semid+0x11c>
 80063c0:	4b62      	ldr	r3, [pc, #392]	; (800654c <semid+0x28c>)
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	23fa      	movs	r3, #250	; 0xfa
 80063c6:	015b      	lsls	r3, r3, #5
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d207      	bcs.n	80063dc <semid+0x11c>
						REV(0);
 80063cc:	23a0      	movs	r3, #160	; 0xa0
 80063ce:	05db      	lsls	r3, r3, #23
 80063d0:	2200      	movs	r2, #0
 80063d2:	2108      	movs	r1, #8
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7fc fea8 	bl	800312a <HAL_GPIO_WritePin>
 80063da:	e04d      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 8000 && tc[3] < 11000) {
 80063dc:	4b5b      	ldr	r3, [pc, #364]	; (800654c <semid+0x28c>)
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	23fa      	movs	r3, #250	; 0xfa
 80063e2:	015b      	lsls	r3, r3, #5
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d30c      	bcc.n	8006402 <semid+0x142>
 80063e8:	4b58      	ldr	r3, [pc, #352]	; (800654c <semid+0x28c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a5e      	ldr	r2, [pc, #376]	; (8006568 <semid+0x2a8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d807      	bhi.n	8006402 <semid+0x142>
						FWD(1);
 80063f2:	23a0      	movs	r3, #160	; 0xa0
 80063f4:	05db      	lsls	r3, r3, #23
 80063f6:	2201      	movs	r2, #1
 80063f8:	2120      	movs	r1, #32
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fc fe95 	bl	800312a <HAL_GPIO_WritePin>
 8006400:	e03a      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 11000 && tc[3] < 20000) {
 8006402:	4b52      	ldr	r3, [pc, #328]	; (800654c <semid+0x28c>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4a58      	ldr	r2, [pc, #352]	; (8006568 <semid+0x2a8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d90c      	bls.n	8006426 <semid+0x166>
 800640c:	4b4f      	ldr	r3, [pc, #316]	; (800654c <semid+0x28c>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	4a56      	ldr	r2, [pc, #344]	; (800656c <semid+0x2ac>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d807      	bhi.n	8006426 <semid+0x166>
						HI_SPEED(1);
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	4850      	ldr	r0, [pc, #320]	; (800655c <semid+0x29c>)
 800641c:	2201      	movs	r2, #1
 800641e:	0019      	movs	r1, r3
 8006420:	f7fc fe83 	bl	800312a <HAL_GPIO_WritePin>
 8006424:	e028      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 20000 && tc[3] < 21000) {
 8006426:	4b49      	ldr	r3, [pc, #292]	; (800654c <semid+0x28c>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4a50      	ldr	r2, [pc, #320]	; (800656c <semid+0x2ac>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d90c      	bls.n	800644a <semid+0x18a>
 8006430:	4b46      	ldr	r3, [pc, #280]	; (800654c <semid+0x28c>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a4e      	ldr	r2, [pc, #312]	; (8006570 <semid+0x2b0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d807      	bhi.n	800644a <semid+0x18a>
						HI_SPEED(0);
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4847      	ldr	r0, [pc, #284]	; (800655c <semid+0x29c>)
 8006440:	2200      	movs	r2, #0
 8006442:	0019      	movs	r1, r3
 8006444:	f7fc fe71 	bl	800312a <HAL_GPIO_WritePin>
 8006448:	e016      	b.n	8006478 <semid+0x1b8>
					} else if (tc[3] >= 22000 && tc[3] < 23000) {
 800644a:	4b40      	ldr	r3, [pc, #256]	; (800654c <semid+0x28c>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4a49      	ldr	r2, [pc, #292]	; (8006574 <semid+0x2b4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d911      	bls.n	8006478 <semid+0x1b8>
 8006454:	4b3d      	ldr	r3, [pc, #244]	; (800654c <semid+0x28c>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4a47      	ldr	r2, [pc, #284]	; (8006578 <semid+0x2b8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d80c      	bhi.n	8006478 <semid+0x1b8>
						ledoff();
 800645e:	f7ff f841 	bl	80054e4 <ledoff>
						i = 2;
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <semid+0x288>)
 8006464:	2202      	movs	r2, #2
 8006466:	601a      	str	r2, [r3, #0]
						work = 0;
 8006468:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <semid+0x298>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
						check = 0;
 800646e:	4b43      	ldr	r3, [pc, #268]	; (800657c <semid+0x2bc>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
						return 5;
 8006474:	2305      	movs	r3, #5
 8006476:	e063      	b.n	8006540 <semid+0x280>
					}
				}
			}
		}

		if (le >= 2) {
 8006478:	4b35      	ldr	r3, [pc, #212]	; (8006550 <semid+0x290>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	dd31      	ble.n	80064e4 <semid+0x224>
			if (check == 0) {
 8006480:	4b3e      	ldr	r3, [pc, #248]	; (800657c <semid+0x2bc>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <semid+0x1d6>
				tc[7] = 0;
 8006488:	4b30      	ldr	r3, [pc, #192]	; (800654c <semid+0x28c>)
 800648a:	2200      	movs	r2, #0
 800648c:	61da      	str	r2, [r3, #28]
				check = 1;
 800648e:	4b3b      	ldr	r3, [pc, #236]	; (800657c <semid+0x2bc>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e01e      	b.n	80064d4 <semid+0x214>
			} else if (check == 1 && tc[7] >= 5000) {
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <semid+0x2bc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11a      	bne.n	80064d4 <semid+0x214>
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <semid+0x28c>)
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4a37      	ldr	r2, [pc, #220]	; (8006580 <semid+0x2c0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d915      	bls.n	80064d4 <semid+0x214>
				BUZZER(1);
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	0219      	lsls	r1, r3, #8
 80064ac:	23a0      	movs	r3, #160	; 0xa0
 80064ae:	05db      	lsls	r3, r3, #23
 80064b0:	2201      	movs	r2, #1
 80064b2:	0018      	movs	r0, r3
 80064b4:	f7fc fe39 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80064b8:	2064      	movs	r0, #100	; 0x64
 80064ba:	f7fb fe59 	bl	8002170 <HAL_Delay>
				BUZZER(0);
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	0219      	lsls	r1, r3, #8
 80064c2:	23a0      	movs	r3, #160	; 0xa0
 80064c4:	05db      	lsls	r3, r3, #23
 80064c6:	2200      	movs	r2, #0
 80064c8:	0018      	movs	r0, r3
 80064ca:	f7fc fe2e 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80064ce:	2064      	movs	r0, #100	; 0x64
 80064d0:	f7fb fe4e 	bl	8002170 <HAL_Delay>

			}
			DRAIN(1);
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	01db      	lsls	r3, r3, #7
 80064d8:	4820      	ldr	r0, [pc, #128]	; (800655c <semid+0x29c>)
 80064da:	2201      	movs	r2, #1
 80064dc:	0019      	movs	r1, r3
 80064de:	f7fc fe24 	bl	800312a <HAL_GPIO_WritePin>
 80064e2:	e006      	b.n	80064f2 <semid+0x232>

		} else {
			DRAIN(0);
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	01db      	lsls	r3, r3, #7
 80064e8:	481c      	ldr	r0, [pc, #112]	; (800655c <semid+0x29c>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	0019      	movs	r1, r3
 80064ee:	f7fc fe1c 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (SW_UP == 0) {
 80064f2:	4b18      	ldr	r3, [pc, #96]	; (8006554 <semid+0x294>)
 80064f4:	2120      	movs	r1, #32
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7fc fdfa 	bl	80030f0 <HAL_GPIO_ReadPin>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d102      	bne.n	8006506 <semid+0x246>
			error();
 8006500:	f7ff f886 	bl	8005610 <error>
 8006504:	e008      	b.n	8006518 <semid+0x258>

		} else if (SW_DOWN == 0) {
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <semid+0x294>)
 8006508:	2101      	movs	r1, #1
 800650a:	0018      	movs	r0, r3
 800650c:	f7fc fdf0 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d101      	bne.n	8006518 <semid+0x258>
			error();
 8006514:	f7ff f87c 	bl	8005610 <error>

		}

		if (SW_ENTER == 0) {
 8006518:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <semid+0x294>)
 800651a:	2102      	movs	r1, #2
 800651c:	0018      	movs	r0, r3
 800651e:	f7fc fde7 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006522:	1e03      	subs	r3, r0, #0
 8006524:	d101      	bne.n	800652a <semid+0x26a>
			error();
 8006526:	f7ff f873 	bl	8005610 <error>

		}

		if (SW_BACK == 0) {
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <semid+0x294>)
 800652c:	2108      	movs	r1, #8
 800652e:	0018      	movs	r0, r3
 8006530:	f7fc fdde 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006534:	1e03      	subs	r3, r0, #0
 8006536:	d000      	beq.n	800653a <semid+0x27a>
 8006538:	e6d7      	b.n	80062ea <semid+0x2a>

			error();
 800653a:	f7ff f869 	bl	8005610 <error>
		if (tc[0] >= 75) {
 800653e:	e6d4      	b.n	80062ea <semid+0x2a>

		}
	}

}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b004      	add	sp, #16
 8006546:	bd80      	pop	{r7, pc}
 8006548:	200002f8 	.word	0x200002f8
 800654c:	200006ec 	.word	0x200006ec
 8006550:	20000310 	.word	0x20000310
 8006554:	50000400 	.word	0x50000400
 8006558:	20000304 	.word	0x20000304
 800655c:	50000800 	.word	0x50000800
 8006560:	00000bb7 	.word	0x00000bb7
 8006564:	00001b57 	.word	0x00001b57
 8006568:	00002af7 	.word	0x00002af7
 800656c:	00004e1f 	.word	0x00004e1f
 8006570:	00005207 	.word	0x00005207
 8006574:	000055ef 	.word	0x000055ef
 8006578:	000059d7 	.word	0x000059d7
 800657c:	20000308 	.word	0x20000308
 8006580:	00001387 	.word	0x00001387

08006584 <semir>:

int semir() {
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0

	int x = 1, y = 0, j = 0, z;
 800658a:	2301      	movs	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]

	i = 0;
 8006596:	4ba5      	ldr	r3, [pc, #660]	; (800682c <semir+0x2a8>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
	door();
 800659c:	f7ff fad6 	bl	8005b4c <door>

	while (1) {

		if (tc[0] >= 75) {
 80065a0:	4ba3      	ldr	r3, [pc, #652]	; (8006830 <semir+0x2ac>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b4a      	cmp	r3, #74	; 0x4a
 80065a6:	d800      	bhi.n	80065aa <semir+0x26>
 80065a8:	e0ea      	b.n	8006780 <semir+0x1fc>
			tc[0] = 0;
 80065aa:	4ba1      	ldr	r3, [pc, #644]	; (8006830 <semir+0x2ac>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
			vrr();
 80065b0:	f7ff fc04 	bl	8005dbc <vrr>

			if (tc[2] >= 500) {
 80065b4:	4b9e      	ldr	r3, [pc, #632]	; (8006830 <semir+0x2ac>)
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	23fa      	movs	r3, #250	; 0xfa
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	429a      	cmp	r2, r3
 80065be:	d200      	bcs.n	80065c2 <semir+0x3e>
 80065c0:	e0de      	b.n	8006780 <semir+0x1fc>
				tc[2] = 0;
 80065c2:	4b9b      	ldr	r3, [pc, #620]	; (8006830 <semir+0x2ac>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	609a      	str	r2, [r3, #8]

				if (SW_DOOR == 0) {
 80065c8:	4b9a      	ldr	r3, [pc, #616]	; (8006834 <semir+0x2b0>)
 80065ca:	2110      	movs	r1, #16
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7fc fd8f 	bl	80030f0 <HAL_GPIO_ReadPin>
 80065d2:	1e03      	subs	r3, r0, #0
 80065d4:	d10a      	bne.n	80065ec <semir+0x68>
					j = srw(x);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff fe03 	bl	80061e4 <srw>
 80065de:	0003      	movs	r3, r0
 80065e0:	607b      	str	r3, [r7, #4]
					if (x == 1) {
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <semir+0x68>
						x = 2;
 80065e8:	2302      	movs	r3, #2
 80065ea:	60fb      	str	r3, [r7, #12]

					}
				}

				if (j == 1 && x == 2 && le >= we * 6 && SW_DOOR == 0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d000      	beq.n	80065f4 <semir+0x70>
 80065f2:	e0c5      	b.n	8006780 <semir+0x1fc>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d000      	beq.n	80065fc <semir+0x78>
 80065fa:	e0c1      	b.n	8006780 <semir+0x1fc>
 80065fc:	4b8e      	ldr	r3, [pc, #568]	; (8006838 <semir+0x2b4>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	0013      	movs	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	189b      	adds	r3, r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	001a      	movs	r2, r3
 800660a:	4b8c      	ldr	r3, [pc, #560]	; (800683c <semir+0x2b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	dd00      	ble.n	8006614 <semir+0x90>
 8006612:	e0b5      	b.n	8006780 <semir+0x1fc>
 8006614:	4b87      	ldr	r3, [pc, #540]	; (8006834 <semir+0x2b0>)
 8006616:	2110      	movs	r1, #16
 8006618:	0018      	movs	r0, r3
 800661a:	f7fc fd69 	bl	80030f0 <HAL_GPIO_ReadPin>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d000      	beq.n	8006624 <semir+0xa0>
 8006622:	e0ad      	b.n	8006780 <semir+0x1fc>
						&& le != 0) {
 8006624:	4b85      	ldr	r3, [pc, #532]	; (800683c <semir+0x2b8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d100      	bne.n	800662e <semir+0xaa>
 800662c:	e0a8      	b.n	8006780 <semir+0x1fc>

					work = 1;
 800662e:	4b84      	ldr	r3, [pc, #528]	; (8006840 <semir+0x2bc>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]

					if (y == 0) {
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <semir+0xc0>
						y = 1;
 800663a:	2301      	movs	r3, #1
 800663c:	60bb      	str	r3, [r7, #8]
						tc[3] = 0;
 800663e:	4b7c      	ldr	r3, [pc, #496]	; (8006830 <semir+0x2ac>)
 8006640:	2200      	movs	r2, #0
 8006642:	60da      	str	r2, [r3, #12]
					}

					if (tc[3] >= 0 && tc[3] < 2000) {
 8006644:	4b7a      	ldr	r3, [pc, #488]	; (8006830 <semir+0x2ac>)
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	23fa      	movs	r3, #250	; 0xfa
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	429a      	cmp	r2, r3
 800664e:	d207      	bcs.n	8006660 <semir+0xdc>
						FWD(1);
 8006650:	23a0      	movs	r3, #160	; 0xa0
 8006652:	05db      	lsls	r3, r3, #23
 8006654:	2201      	movs	r2, #1
 8006656:	2120      	movs	r1, #32
 8006658:	0018      	movs	r0, r3
 800665a:	f7fc fd66 	bl	800312a <HAL_GPIO_WritePin>
 800665e:	e08f      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 2000 && tc[3] < 3000) {
 8006660:	4b73      	ldr	r3, [pc, #460]	; (8006830 <semir+0x2ac>)
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	23fa      	movs	r3, #250	; 0xfa
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	429a      	cmp	r2, r3
 800666a:	d30c      	bcc.n	8006686 <semir+0x102>
 800666c:	4b70      	ldr	r3, [pc, #448]	; (8006830 <semir+0x2ac>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a74      	ldr	r2, [pc, #464]	; (8006844 <semir+0x2c0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d807      	bhi.n	8006686 <semir+0x102>
						FWD(0);
 8006676:	23a0      	movs	r3, #160	; 0xa0
 8006678:	05db      	lsls	r3, r3, #23
 800667a:	2200      	movs	r2, #0
 800667c:	2120      	movs	r1, #32
 800667e:	0018      	movs	r0, r3
 8006680:	f7fc fd53 	bl	800312a <HAL_GPIO_WritePin>
 8006684:	e07c      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 3000 && tc[3] < 5000) {
 8006686:	4b6a      	ldr	r3, [pc, #424]	; (8006830 <semir+0x2ac>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	4a6e      	ldr	r2, [pc, #440]	; (8006844 <semir+0x2c0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d90c      	bls.n	80066aa <semir+0x126>
 8006690:	4b67      	ldr	r3, [pc, #412]	; (8006830 <semir+0x2ac>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a6c      	ldr	r2, [pc, #432]	; (8006848 <semir+0x2c4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d807      	bhi.n	80066aa <semir+0x126>
						REV(1);
 800669a:	23a0      	movs	r3, #160	; 0xa0
 800669c:	05db      	lsls	r3, r3, #23
 800669e:	2201      	movs	r2, #1
 80066a0:	2108      	movs	r1, #8
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fc fd41 	bl	800312a <HAL_GPIO_WritePin>
 80066a8:	e06a      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 5000 && tc[3] < 6000) {
 80066aa:	4b61      	ldr	r3, [pc, #388]	; (8006830 <semir+0x2ac>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	4a66      	ldr	r2, [pc, #408]	; (8006848 <semir+0x2c4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d90c      	bls.n	80066ce <semir+0x14a>
 80066b4:	4b5e      	ldr	r3, [pc, #376]	; (8006830 <semir+0x2ac>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a64      	ldr	r2, [pc, #400]	; (800684c <semir+0x2c8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d807      	bhi.n	80066ce <semir+0x14a>
						REV(0);
 80066be:	23a0      	movs	r3, #160	; 0xa0
 80066c0:	05db      	lsls	r3, r3, #23
 80066c2:	2200      	movs	r2, #0
 80066c4:	2108      	movs	r1, #8
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7fc fd2f 	bl	800312a <HAL_GPIO_WritePin>
 80066cc:	e058      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 6000 && tc[3] < 8000) {
 80066ce:	4b58      	ldr	r3, [pc, #352]	; (8006830 <semir+0x2ac>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	4a5e      	ldr	r2, [pc, #376]	; (800684c <semir+0x2c8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d90d      	bls.n	80066f4 <semir+0x170>
 80066d8:	4b55      	ldr	r3, [pc, #340]	; (8006830 <semir+0x2ac>)
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	23fa      	movs	r3, #250	; 0xfa
 80066de:	015b      	lsls	r3, r3, #5
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d207      	bcs.n	80066f4 <semir+0x170>
						FWD(1);
 80066e4:	23a0      	movs	r3, #160	; 0xa0
 80066e6:	05db      	lsls	r3, r3, #23
 80066e8:	2201      	movs	r2, #1
 80066ea:	2120      	movs	r1, #32
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7fc fd1c 	bl	800312a <HAL_GPIO_WritePin>
 80066f2:	e045      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 8000 && tc[3] < 9000) {
 80066f4:	4b4e      	ldr	r3, [pc, #312]	; (8006830 <semir+0x2ac>)
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	23fa      	movs	r3, #250	; 0xfa
 80066fa:	015b      	lsls	r3, r3, #5
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d30c      	bcc.n	800671a <semir+0x196>
 8006700:	4b4b      	ldr	r3, [pc, #300]	; (8006830 <semir+0x2ac>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4a52      	ldr	r2, [pc, #328]	; (8006850 <semir+0x2cc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d807      	bhi.n	800671a <semir+0x196>
						FWD(0);
 800670a:	23a0      	movs	r3, #160	; 0xa0
 800670c:	05db      	lsls	r3, r3, #23
 800670e:	2200      	movs	r2, #0
 8006710:	2120      	movs	r1, #32
 8006712:	0018      	movs	r0, r3
 8006714:	f7fc fd09 	bl	800312a <HAL_GPIO_WritePin>
 8006718:	e032      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 9000 && tc[3] < 11000) {
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <semir+0x2ac>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4a4c      	ldr	r2, [pc, #304]	; (8006850 <semir+0x2cc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d90c      	bls.n	800673e <semir+0x1ba>
 8006724:	4b42      	ldr	r3, [pc, #264]	; (8006830 <semir+0x2ac>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a4a      	ldr	r2, [pc, #296]	; (8006854 <semir+0x2d0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d807      	bhi.n	800673e <semir+0x1ba>
						REV(1);
 800672e:	23a0      	movs	r3, #160	; 0xa0
 8006730:	05db      	lsls	r3, r3, #23
 8006732:	2201      	movs	r2, #1
 8006734:	2108      	movs	r1, #8
 8006736:	0018      	movs	r0, r3
 8006738:	f7fc fcf7 	bl	800312a <HAL_GPIO_WritePin>
 800673c:	e020      	b.n	8006780 <semir+0x1fc>
					} else if (tc[3] >= 11000 && tc[3] < 12000) {
 800673e:	4b3c      	ldr	r3, [pc, #240]	; (8006830 <semir+0x2ac>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4a44      	ldr	r2, [pc, #272]	; (8006854 <semir+0x2d0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d91b      	bls.n	8006780 <semir+0x1fc>
 8006748:	4b39      	ldr	r3, [pc, #228]	; (8006830 <semir+0x2ac>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a42      	ldr	r2, [pc, #264]	; (8006858 <semir+0x2d4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d816      	bhi.n	8006780 <semir+0x1fc>
						REV(0);
 8006752:	23a0      	movs	r3, #160	; 0xa0
 8006754:	05db      	lsls	r3, r3, #23
 8006756:	2200      	movs	r2, #0
 8006758:	2108      	movs	r1, #8
 800675a:	0018      	movs	r0, r3
 800675c:	f7fc fce5 	bl	800312a <HAL_GPIO_WritePin>
						ledoff();
 8006760:	f7fe fec0 	bl	80054e4 <ledoff>
						i = 1;
 8006764:	4b31      	ldr	r3, [pc, #196]	; (800682c <semir+0x2a8>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
						c = 0;
 800676a:	4b3c      	ldr	r3, [pc, #240]	; (800685c <semir+0x2d8>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
						work = 0;
 8006770:	4b33      	ldr	r3, [pc, #204]	; (8006840 <semir+0x2bc>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
						check = 0;
 8006776:	4b3a      	ldr	r3, [pc, #232]	; (8006860 <semir+0x2dc>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
						return 5;
 800677c:	2305      	movs	r3, #5
 800677e:	e050      	b.n	8006822 <semir+0x29e>
					}
				}
			}
		}

		if (check == 1) {
 8006780:	4b37      	ldr	r3, [pc, #220]	; (8006860 <semir+0x2dc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d125      	bne.n	80067d4 <semir+0x250>
			if (tc[7] >= 5000 && le < we * 6) {
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <semir+0x2ac>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	4a2e      	ldr	r2, [pc, #184]	; (8006848 <semir+0x2c4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d920      	bls.n	80067d4 <semir+0x250>
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <semir+0x2b4>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	0013      	movs	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	189b      	adds	r3, r3, r2
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	001a      	movs	r2, r3
 80067a0:	4b26      	ldr	r3, [pc, #152]	; (800683c <semir+0x2b8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	dd15      	ble.n	80067d4 <semir+0x250>
				BUZZER(1);
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	0219      	lsls	r1, r3, #8
 80067ac:	23a0      	movs	r3, #160	; 0xa0
 80067ae:	05db      	lsls	r3, r3, #23
 80067b0:	2201      	movs	r2, #1
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7fc fcb9 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80067b8:	2064      	movs	r0, #100	; 0x64
 80067ba:	f7fb fcd9 	bl	8002170 <HAL_Delay>
				BUZZER(0);
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	0219      	lsls	r1, r3, #8
 80067c2:	23a0      	movs	r3, #160	; 0xa0
 80067c4:	05db      	lsls	r3, r3, #23
 80067c6:	2200      	movs	r2, #0
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7fc fcae 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80067ce:	2064      	movs	r0, #100	; 0x64
 80067d0:	f7fb fcce 	bl	8002170 <HAL_Delay>

			}
		}

		if (SW_UP == 0) {
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <semir+0x2b0>)
 80067d6:	2120      	movs	r1, #32
 80067d8:	0018      	movs	r0, r3
 80067da:	f7fc fc89 	bl	80030f0 <HAL_GPIO_ReadPin>
 80067de:	1e03      	subs	r3, r0, #0
 80067e0:	d102      	bne.n	80067e8 <semir+0x264>
			error();
 80067e2:	f7fe ff15 	bl	8005610 <error>
 80067e6:	e008      	b.n	80067fa <semir+0x276>

		} else if (SW_DOWN == 0) {
 80067e8:	4b12      	ldr	r3, [pc, #72]	; (8006834 <semir+0x2b0>)
 80067ea:	2101      	movs	r1, #1
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fc fc7f 	bl	80030f0 <HAL_GPIO_ReadPin>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d101      	bne.n	80067fa <semir+0x276>
			error();
 80067f6:	f7fe ff0b 	bl	8005610 <error>
		}

		if (SW_ENTER == 0) {
 80067fa:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <semir+0x2b0>)
 80067fc:	2102      	movs	r1, #2
 80067fe:	0018      	movs	r0, r3
 8006800:	f7fc fc76 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006804:	1e03      	subs	r3, r0, #0
 8006806:	d101      	bne.n	800680c <semir+0x288>
			error();
 8006808:	f7fe ff02 	bl	8005610 <error>

		}

		if (SW_BACK == 0) {
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <semir+0x2b0>)
 800680e:	2108      	movs	r1, #8
 8006810:	0018      	movs	r0, r3
 8006812:	f7fc fc6d 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006816:	1e03      	subs	r3, r0, #0
 8006818:	d000      	beq.n	800681c <semir+0x298>
 800681a:	e6c1      	b.n	80065a0 <semir+0x1c>

			error();
 800681c:	f7fe fef8 	bl	8005610 <error>
		if (tc[0] >= 75) {
 8006820:	e6be      	b.n	80065a0 <semir+0x1c>

		}
	}

}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	200002f8 	.word	0x200002f8
 8006830:	200006ec 	.word	0x200006ec
 8006834:	50000400 	.word	0x50000400
 8006838:	20000314 	.word	0x20000314
 800683c:	20000310 	.word	0x20000310
 8006840:	20000304 	.word	0x20000304
 8006844:	00000bb7 	.word	0x00000bb7
 8006848:	00001387 	.word	0x00001387
 800684c:	0000176f 	.word	0x0000176f
 8006850:	00002327 	.word	0x00002327
 8006854:	00002af7 	.word	0x00002af7
 8006858:	00002edf 	.word	0x00002edf
 800685c:	200002fc 	.word	0x200002fc
 8006860:	20000308 	.word	0x20000308

08006864 <semiw>:

int semiw() {
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0

	int x = 0, y = 0, j = 0, ch = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	2300      	movs	r3, #0
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]

	i = 0;
 800687a:	4b9f      	ldr	r3, [pc, #636]	; (8006af8 <semiw+0x294>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(15, 2, "SETT", 1);
 8006880:	4a9e      	ldr	r2, [pc, #632]	; (8006afc <semiw+0x298>)
 8006882:	2301      	movs	r3, #1
 8006884:	2102      	movs	r1, #2
 8006886:	200f      	movs	r0, #15
 8006888:	f7fe fdfe 	bl	8005488 <OLED_ShowStringXY>
	door();
 800688c:	f7ff f95e 	bl	8005b4c <door>
	swui();
 8006890:	f7ff fc16 	bl	80060c0 <swui>

	while (1) {

		if (tc[0] >= 75) {
 8006894:	4b9a      	ldr	r3, [pc, #616]	; (8006b00 <semiw+0x29c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b4a      	cmp	r3, #74	; 0x4a
 800689a:	d800      	bhi.n	800689e <semiw+0x3a>
 800689c:	e156      	b.n	8006b4c <semiw+0x2e8>
			tc[0] = 0;
 800689e:	4b98      	ldr	r3, [pc, #608]	; (8006b00 <semiw+0x29c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
			vr();
 80068a4:	f7ff f9a4 	bl	8005bf0 <vr>
			if (tc[2] >= 500) {
 80068a8:	4b95      	ldr	r3, [pc, #596]	; (8006b00 <semiw+0x29c>)
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	23fa      	movs	r3, #250	; 0xfa
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d200      	bcs.n	80068b6 <semiw+0x52>
 80068b4:	e14a      	b.n	8006b4c <semiw+0x2e8>
				tc[2] = 0;
 80068b6:	4b92      	ldr	r3, [pc, #584]	; (8006b00 <semiw+0x29c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
				j = sww(x);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	0018      	movs	r0, r3
 80068c0:	f7ff fc4e 	bl	8006160 <sww>
 80068c4:	0003      	movs	r3, r0
 80068c6:	603b      	str	r3, [r7, #0]
				if (x == 1) {
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <semiw+0x6e>
					x = 2;
 80068ce:	2302      	movs	r3, #2
 80068d0:	60fb      	str	r3, [r7, #12]

				}

				if (j == 1 && x == 2 && le >= we * 6 && te >= tem
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d000      	beq.n	80068da <semiw+0x76>
 80068d8:	e138      	b.n	8006b4c <semiw+0x2e8>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d000      	beq.n	80068e2 <semiw+0x7e>
 80068e0:	e134      	b.n	8006b4c <semiw+0x2e8>
 80068e2:	4b88      	ldr	r3, [pc, #544]	; (8006b04 <semiw+0x2a0>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	0013      	movs	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	189b      	adds	r3, r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	001a      	movs	r2, r3
 80068f0:	4b85      	ldr	r3, [pc, #532]	; (8006b08 <semiw+0x2a4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dd00      	ble.n	80068fa <semiw+0x96>
 80068f8:	e128      	b.n	8006b4c <semiw+0x2e8>
 80068fa:	4b84      	ldr	r3, [pc, #528]	; (8006b0c <semiw+0x2a8>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	001a      	movs	r2, r3
 8006900:	4b83      	ldr	r3, [pc, #524]	; (8006b10 <semiw+0x2ac>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	dd00      	ble.n	800690a <semiw+0xa6>
 8006908:	e120      	b.n	8006b4c <semiw+0x2e8>
						&& SW_DOOR == 0 && le != 0) {
 800690a:	4b82      	ldr	r3, [pc, #520]	; (8006b14 <semiw+0x2b0>)
 800690c:	2110      	movs	r1, #16
 800690e:	0018      	movs	r0, r3
 8006910:	f7fc fbee 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006914:	1e03      	subs	r3, r0, #0
 8006916:	d000      	beq.n	800691a <semiw+0xb6>
 8006918:	e118      	b.n	8006b4c <semiw+0x2e8>
 800691a:	4b7b      	ldr	r3, [pc, #492]	; (8006b08 <semiw+0x2a4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d100      	bne.n	8006924 <semiw+0xc0>
 8006922:	e113      	b.n	8006b4c <semiw+0x2e8>

					work = 1;
 8006924:	4b7c      	ldr	r3, [pc, #496]	; (8006b18 <semiw+0x2b4>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]

					if (y == 0) {
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <semiw+0xd6>
						y = 1;
 8006930:	2301      	movs	r3, #1
 8006932:	60bb      	str	r3, [r7, #8]
						tc[3] = 0;
 8006934:	4b72      	ldr	r3, [pc, #456]	; (8006b00 <semiw+0x29c>)
 8006936:	2200      	movs	r2, #0
 8006938:	60da      	str	r2, [r3, #12]
					}

					if (tc[3] >= 0 && tc[3] < 2000) {
 800693a:	4b71      	ldr	r3, [pc, #452]	; (8006b00 <semiw+0x29c>)
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	23fa      	movs	r3, #250	; 0xfa
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	429a      	cmp	r2, r3
 8006944:	d207      	bcs.n	8006956 <semiw+0xf2>
						FWD(1);
 8006946:	23a0      	movs	r3, #160	; 0xa0
 8006948:	05db      	lsls	r3, r3, #23
 800694a:	2201      	movs	r2, #1
 800694c:	2120      	movs	r1, #32
 800694e:	0018      	movs	r0, r3
 8006950:	f7fc fbeb 	bl	800312a <HAL_GPIO_WritePin>
 8006954:	e0fa      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 2000 && tc[3] < 3000) {
 8006956:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <semiw+0x29c>)
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	23fa      	movs	r3, #250	; 0xfa
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	429a      	cmp	r2, r3
 8006960:	d30c      	bcc.n	800697c <semiw+0x118>
 8006962:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <semiw+0x29c>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4a6d      	ldr	r2, [pc, #436]	; (8006b1c <semiw+0x2b8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d807      	bhi.n	800697c <semiw+0x118>
						FWD(0);
 800696c:	23a0      	movs	r3, #160	; 0xa0
 800696e:	05db      	lsls	r3, r3, #23
 8006970:	2200      	movs	r2, #0
 8006972:	2120      	movs	r1, #32
 8006974:	0018      	movs	r0, r3
 8006976:	f7fc fbd8 	bl	800312a <HAL_GPIO_WritePin>
 800697a:	e0e7      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 3000 && tc[3] < 5000) {
 800697c:	4b60      	ldr	r3, [pc, #384]	; (8006b00 <semiw+0x29c>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a66      	ldr	r2, [pc, #408]	; (8006b1c <semiw+0x2b8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d90c      	bls.n	80069a0 <semiw+0x13c>
 8006986:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <semiw+0x29c>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <semiw+0x2bc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d807      	bhi.n	80069a0 <semiw+0x13c>
						REV(1);
 8006990:	23a0      	movs	r3, #160	; 0xa0
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	2201      	movs	r2, #1
 8006996:	2108      	movs	r1, #8
 8006998:	0018      	movs	r0, r3
 800699a:	f7fc fbc6 	bl	800312a <HAL_GPIO_WritePin>
 800699e:	e0d5      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 5000 && tc[3] < 6000) {
 80069a0:	4b57      	ldr	r3, [pc, #348]	; (8006b00 <semiw+0x29c>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4a5e      	ldr	r2, [pc, #376]	; (8006b20 <semiw+0x2bc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d90c      	bls.n	80069c4 <semiw+0x160>
 80069aa:	4b55      	ldr	r3, [pc, #340]	; (8006b00 <semiw+0x29c>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4a5d      	ldr	r2, [pc, #372]	; (8006b24 <semiw+0x2c0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d807      	bhi.n	80069c4 <semiw+0x160>
						REV(0);
 80069b4:	23a0      	movs	r3, #160	; 0xa0
 80069b6:	05db      	lsls	r3, r3, #23
 80069b8:	2200      	movs	r2, #0
 80069ba:	2108      	movs	r1, #8
 80069bc:	0018      	movs	r0, r3
 80069be:	f7fc fbb4 	bl	800312a <HAL_GPIO_WritePin>
 80069c2:	e0c3      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 6000 && tc[3] < 8000) {
 80069c4:	4b4e      	ldr	r3, [pc, #312]	; (8006b00 <semiw+0x29c>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a56      	ldr	r2, [pc, #344]	; (8006b24 <semiw+0x2c0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d90d      	bls.n	80069ea <semiw+0x186>
 80069ce:	4b4c      	ldr	r3, [pc, #304]	; (8006b00 <semiw+0x29c>)
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	23fa      	movs	r3, #250	; 0xfa
 80069d4:	015b      	lsls	r3, r3, #5
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d207      	bcs.n	80069ea <semiw+0x186>
						FWD(1);
 80069da:	23a0      	movs	r3, #160	; 0xa0
 80069dc:	05db      	lsls	r3, r3, #23
 80069de:	2201      	movs	r2, #1
 80069e0:	2120      	movs	r1, #32
 80069e2:	0018      	movs	r0, r3
 80069e4:	f7fc fba1 	bl	800312a <HAL_GPIO_WritePin>
 80069e8:	e0b0      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 8000 && tc[3] < 9000) {
 80069ea:	4b45      	ldr	r3, [pc, #276]	; (8006b00 <semiw+0x29c>)
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	23fa      	movs	r3, #250	; 0xfa
 80069f0:	015b      	lsls	r3, r3, #5
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d30c      	bcc.n	8006a10 <semiw+0x1ac>
 80069f6:	4b42      	ldr	r3, [pc, #264]	; (8006b00 <semiw+0x29c>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4a4b      	ldr	r2, [pc, #300]	; (8006b28 <semiw+0x2c4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d807      	bhi.n	8006a10 <semiw+0x1ac>
						FWD(0);
 8006a00:	23a0      	movs	r3, #160	; 0xa0
 8006a02:	05db      	lsls	r3, r3, #23
 8006a04:	2200      	movs	r2, #0
 8006a06:	2120      	movs	r1, #32
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fc fb8e 	bl	800312a <HAL_GPIO_WritePin>
 8006a0e:	e09d      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 9000 && tc[3] < 11000) {
 8006a10:	4b3b      	ldr	r3, [pc, #236]	; (8006b00 <semiw+0x29c>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a44      	ldr	r2, [pc, #272]	; (8006b28 <semiw+0x2c4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d90c      	bls.n	8006a34 <semiw+0x1d0>
 8006a1a:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <semiw+0x29c>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	4a43      	ldr	r2, [pc, #268]	; (8006b2c <semiw+0x2c8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d807      	bhi.n	8006a34 <semiw+0x1d0>
						REV(1);
 8006a24:	23a0      	movs	r3, #160	; 0xa0
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	2201      	movs	r2, #1
 8006a2a:	2108      	movs	r1, #8
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7fc fb7c 	bl	800312a <HAL_GPIO_WritePin>
 8006a32:	e08b      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 11000 && tc[3] < 12000) {
 8006a34:	4b32      	ldr	r3, [pc, #200]	; (8006b00 <semiw+0x29c>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4a3c      	ldr	r2, [pc, #240]	; (8006b2c <semiw+0x2c8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d90c      	bls.n	8006a58 <semiw+0x1f4>
 8006a3e:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <semiw+0x29c>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4a3b      	ldr	r2, [pc, #236]	; (8006b30 <semiw+0x2cc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d807      	bhi.n	8006a58 <semiw+0x1f4>
						REV(0);
 8006a48:	23a0      	movs	r3, #160	; 0xa0
 8006a4a:	05db      	lsls	r3, r3, #23
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2108      	movs	r1, #8
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7fc fb6a 	bl	800312a <HAL_GPIO_WritePin>
 8006a56:	e079      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 12000 && tc[3] < 14000) {
 8006a58:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <semiw+0x29c>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <semiw+0x2cc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d90c      	bls.n	8006a7c <semiw+0x218>
 8006a62:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <semiw+0x29c>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <semiw+0x2d0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d807      	bhi.n	8006a7c <semiw+0x218>
						FWD(1);
 8006a6c:	23a0      	movs	r3, #160	; 0xa0
 8006a6e:	05db      	lsls	r3, r3, #23
 8006a70:	2201      	movs	r2, #1
 8006a72:	2120      	movs	r1, #32
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7fc fb58 	bl	800312a <HAL_GPIO_WritePin>
 8006a7a:	e067      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 14000 && tc[3] < 15000) {
 8006a7c:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <semiw+0x29c>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <semiw+0x2d0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d90c      	bls.n	8006aa0 <semiw+0x23c>
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <semiw+0x29c>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <semiw+0x2d4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d807      	bhi.n	8006aa0 <semiw+0x23c>
						FWD(0);
 8006a90:	23a0      	movs	r3, #160	; 0xa0
 8006a92:	05db      	lsls	r3, r3, #23
 8006a94:	2200      	movs	r2, #0
 8006a96:	2120      	movs	r1, #32
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7fc fb46 	bl	800312a <HAL_GPIO_WritePin>
 8006a9e:	e055      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 15000 && tc[3] < 17000) {
 8006aa0:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <semiw+0x29c>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4a24      	ldr	r2, [pc, #144]	; (8006b38 <semiw+0x2d4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d90c      	bls.n	8006ac4 <semiw+0x260>
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <semiw+0x29c>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <semiw+0x2d8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d807      	bhi.n	8006ac4 <semiw+0x260>
						REV(1);
 8006ab4:	23a0      	movs	r3, #160	; 0xa0
 8006ab6:	05db      	lsls	r3, r3, #23
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2108      	movs	r1, #8
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7fc fb34 	bl	800312a <HAL_GPIO_WritePin>
 8006ac2:	e043      	b.n	8006b4c <semiw+0x2e8>
					} else if (tc[3] >= 17000 && tc[3] < 18000) {
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <semiw+0x29c>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <semiw+0x2d8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d93e      	bls.n	8006b4c <semiw+0x2e8>
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <semiw+0x29c>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <semiw+0x2dc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d839      	bhi.n	8006b4c <semiw+0x2e8>
						ledoff();
 8006ad8:	f7fe fd04 	bl	80054e4 <ledoff>
						i = 0;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <semiw+0x294>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
						c = 0;
 8006ae2:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <semiw+0x2e0>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
						work = 0;
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <semiw+0x2b4>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
						check = 0;
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <semiw+0x2e4>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
						return 5;
 8006af4:	2305      	movs	r3, #5
 8006af6:	e133      	b.n	8006d60 <semiw+0x4fc>
 8006af8:	200002f8 	.word	0x200002f8
 8006afc:	0800bba8 	.word	0x0800bba8
 8006b00:	200006ec 	.word	0x200006ec
 8006b04:	20000314 	.word	0x20000314
 8006b08:	20000310 	.word	0x20000310
 8006b0c:	20000714 	.word	0x20000714
 8006b10:	20000318 	.word	0x20000318
 8006b14:	50000400 	.word	0x50000400
 8006b18:	20000304 	.word	0x20000304
 8006b1c:	00000bb7 	.word	0x00000bb7
 8006b20:	00001387 	.word	0x00001387
 8006b24:	0000176f 	.word	0x0000176f
 8006b28:	00002327 	.word	0x00002327
 8006b2c:	00002af7 	.word	0x00002af7
 8006b30:	00002edf 	.word	0x00002edf
 8006b34:	000036af 	.word	0x000036af
 8006b38:	00003a97 	.word	0x00003a97
 8006b3c:	00004267 	.word	0x00004267
 8006b40:	0000464f 	.word	0x0000464f
 8006b44:	200002fc 	.word	0x200002fc
 8006b48:	20000308 	.word	0x20000308
				}
			}

		}

		if (te < tem && le >= we * 6 && le != 0 && we != 0) {
 8006b4c:	4b86      	ldr	r3, [pc, #536]	; (8006d68 <semiw+0x504>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	001a      	movs	r2, r3
 8006b52:	4b86      	ldr	r3, [pc, #536]	; (8006d6c <semiw+0x508>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	dd22      	ble.n	8006ba0 <semiw+0x33c>
 8006b5a:	4b85      	ldr	r3, [pc, #532]	; (8006d70 <semiw+0x50c>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	0013      	movs	r3, r2
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	001a      	movs	r2, r3
 8006b68:	4b82      	ldr	r3, [pc, #520]	; (8006d74 <semiw+0x510>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	dc17      	bgt.n	8006ba0 <semiw+0x33c>
 8006b70:	4b80      	ldr	r3, [pc, #512]	; (8006d74 <semiw+0x510>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <semiw+0x33c>
 8006b78:	4b7d      	ldr	r3, [pc, #500]	; (8006d70 <semiw+0x50c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <semiw+0x33c>
			if (ch == 0) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <semiw+0x32c>
				tc[6] = 0;
 8006b86:	4b7c      	ldr	r3, [pc, #496]	; (8006d78 <semiw+0x514>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]
				ch = 1;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	607b      	str	r3, [r7, #4]
			}
			HEATING(1);
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	0059      	lsls	r1, r3, #1
 8006b94:	23a0      	movs	r3, #160	; 0xa0
 8006b96:	05db      	lsls	r3, r3, #23
 8006b98:	2201      	movs	r2, #1
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7fc fac5 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (tc[6] < 5000 && te < tem) {
 8006ba0:	4b75      	ldr	r3, [pc, #468]	; (8006d78 <semiw+0x514>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	4a75      	ldr	r2, [pc, #468]	; (8006d7c <semiw+0x518>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d81c      	bhi.n	8006be4 <semiw+0x380>
 8006baa:	4b6f      	ldr	r3, [pc, #444]	; (8006d68 <semiw+0x504>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	001a      	movs	r2, r3
 8006bb0:	4b6e      	ldr	r3, [pc, #440]	; (8006d6c <semiw+0x508>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dd15      	ble.n	8006be4 <semiw+0x380>
			BUZZER(1);
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	0219      	lsls	r1, r3, #8
 8006bbc:	23a0      	movs	r3, #160	; 0xa0
 8006bbe:	05db      	lsls	r3, r3, #23
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fc fab1 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8006bc8:	2064      	movs	r0, #100	; 0x64
 8006bca:	f7fb fad1 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 8006bce:	2380      	movs	r3, #128	; 0x80
 8006bd0:	0219      	lsls	r1, r3, #8
 8006bd2:	23a0      	movs	r3, #160	; 0xa0
 8006bd4:	05db      	lsls	r3, r3, #23
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7fc faa6 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8006bde:	2064      	movs	r0, #100	; 0x64
 8006be0:	f7fb fac6 	bl	8002170 <HAL_Delay>

		}

		if (te >= tem) {
 8006be4:	4b60      	ldr	r3, [pc, #384]	; (8006d68 <semiw+0x504>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	001a      	movs	r2, r3
 8006bea:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <semiw+0x508>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	dc39      	bgt.n	8006c66 <semiw+0x402>
			if (au == 0) {
 8006bf2:	4b63      	ldr	r3, [pc, #396]	; (8006d80 <semiw+0x51c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d128      	bne.n	8006c4c <semiw+0x3e8>
				sprintf(lpc[2], "%s", lpc[1]);
 8006bfa:	4a62      	ldr	r2, [pc, #392]	; (8006d84 <semiw+0x520>)
 8006bfc:	4962      	ldr	r1, [pc, #392]	; (8006d88 <semiw+0x524>)
 8006bfe:	4b63      	ldr	r3, [pc, #396]	; (8006d8c <semiw+0x528>)
 8006c00:	0018      	movs	r0, r3
 8006c02:	f002 fc47 	bl	8009494 <siprintf>
				sprintf(lpc[1], "%s", lpc[0]);
 8006c06:	4a62      	ldr	r2, [pc, #392]	; (8006d90 <semiw+0x52c>)
 8006c08:	495f      	ldr	r1, [pc, #380]	; (8006d88 <semiw+0x524>)
 8006c0a:	4b5e      	ldr	r3, [pc, #376]	; (8006d84 <semiw+0x520>)
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f002 fc41 	bl	8009494 <siprintf>
				sprintf(lpc[0], "Power cost:%.2lf kw.h",
						12 * 0.05 + tc[6] / 1000 * 0.2);
 8006c12:	4b59      	ldr	r3, [pc, #356]	; (8006d78 <semiw+0x514>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	22fa      	movs	r2, #250	; 0xfa
 8006c18:	0091      	lsls	r1, r2, #2
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f7f9 fa90 	bl	8000140 <__udivsi3>
 8006c20:	0003      	movs	r3, r0
 8006c22:	0018      	movs	r0, r3
 8006c24:	f7fb fa00 	bl	8002028 <__aeabi_ui2d>
 8006c28:	4a5a      	ldr	r2, [pc, #360]	; (8006d94 <semiw+0x530>)
 8006c2a:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <semiw+0x534>)
 8006c2c:	f7fa fb7a 	bl	8001324 <__aeabi_dmul>
 8006c30:	0002      	movs	r2, r0
 8006c32:	000b      	movs	r3, r1
 8006c34:	0010      	movs	r0, r2
 8006c36:	0019      	movs	r1, r3
				sprintf(lpc[0], "Power cost:%.2lf kw.h",
 8006c38:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <semiw+0x538>)
 8006c3a:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <semiw+0x53c>)
 8006c3c:	f7f9 fc34 	bl	80004a8 <__aeabi_dadd>
 8006c40:	0002      	movs	r2, r0
 8006c42:	000b      	movs	r3, r1
 8006c44:	4957      	ldr	r1, [pc, #348]	; (8006da4 <semiw+0x540>)
 8006c46:	4852      	ldr	r0, [pc, #328]	; (8006d90 <semiw+0x52c>)
 8006c48:	f002 fc24 	bl	8009494 <siprintf>

			}
			ltem = tc[6];
 8006c4c:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <semiw+0x514>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	001a      	movs	r2, r3
 8006c52:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <semiw+0x544>)
 8006c54:	601a      	str	r2, [r3, #0]
			HEATING(0);
 8006c56:	2380      	movs	r3, #128	; 0x80
 8006c58:	0059      	lsls	r1, r3, #1
 8006c5a:	23a0      	movs	r3, #160	; 0xa0
 8006c5c:	05db      	lsls	r3, r3, #23
 8006c5e:	2200      	movs	r2, #0
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fc fa62 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (check == 1) {
 8006c66:	4b51      	ldr	r3, [pc, #324]	; (8006dac <semiw+0x548>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d125      	bne.n	8006cba <semiw+0x456>
			if (tc[7] >= 5000 && le < we * 6) {
 8006c6e:	4b42      	ldr	r3, [pc, #264]	; (8006d78 <semiw+0x514>)
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4a42      	ldr	r2, [pc, #264]	; (8006d7c <semiw+0x518>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d920      	bls.n	8006cba <semiw+0x456>
 8006c78:	4b3d      	ldr	r3, [pc, #244]	; (8006d70 <semiw+0x50c>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	0013      	movs	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	001a      	movs	r2, r3
 8006c86:	4b3b      	ldr	r3, [pc, #236]	; (8006d74 <semiw+0x510>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	dd15      	ble.n	8006cba <semiw+0x456>
				BUZZER(1);
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	0219      	lsls	r1, r3, #8
 8006c92:	23a0      	movs	r3, #160	; 0xa0
 8006c94:	05db      	lsls	r3, r3, #23
 8006c96:	2201      	movs	r2, #1
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7fc fa46 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8006c9e:	2064      	movs	r0, #100	; 0x64
 8006ca0:	f7fb fa66 	bl	8002170 <HAL_Delay>
				BUZZER(0);
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	0219      	lsls	r1, r3, #8
 8006ca8:	23a0      	movs	r3, #160	; 0xa0
 8006caa:	05db      	lsls	r3, r3, #23
 8006cac:	2200      	movs	r2, #0
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7fc fa3b 	bl	800312a <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8006cb4:	2064      	movs	r0, #100	; 0x64
 8006cb6:	f7fb fa5b 	bl	8002170 <HAL_Delay>

			}
		}

		if (SW_UP == 0) {
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <semiw+0x54c>)
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7fc fa16 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006cc4:	1e03      	subs	r3, r0, #0
 8006cc6:	d110      	bne.n	8006cea <semiw+0x486>
			st();
 8006cc8:	f7fe fc5c 	bl	8005584 <st>
			i++;
 8006ccc:	4b39      	ldr	r3, [pc, #228]	; (8006db4 <semiw+0x550>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	4b38      	ldr	r3, [pc, #224]	; (8006db4 <semiw+0x550>)
 8006cd4:	601a      	str	r2, [r3, #0]
			if (i >= 5) {
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <semiw+0x550>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	dd02      	ble.n	8006ce4 <semiw+0x480>
				i = 4;
 8006cde:	4b35      	ldr	r3, [pc, #212]	; (8006db4 <semiw+0x550>)
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	601a      	str	r2, [r3, #0]
			}
			swui();
 8006ce4:	f7ff f9ec 	bl	80060c0 <swui>
 8006ce8:	e016      	b.n	8006d18 <semiw+0x4b4>

		} else if (SW_DOWN == 0) {
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <semiw+0x54c>)
 8006cec:	2101      	movs	r1, #1
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7fc f9fe 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006cf4:	1e03      	subs	r3, r0, #0
 8006cf6:	d10f      	bne.n	8006d18 <semiw+0x4b4>
			st();
 8006cf8:	f7fe fc44 	bl	8005584 <st>
			i--;
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <semiw+0x550>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	4b2c      	ldr	r3, [pc, #176]	; (8006db4 <semiw+0x550>)
 8006d04:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 8006d06:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <semiw+0x550>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da02      	bge.n	8006d14 <semiw+0x4b0>
				i = 0;
 8006d0e:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <semiw+0x550>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
			}
			swui();
 8006d14:	f7ff f9d4 	bl	80060c0 <swui>

		}

		if (SW_ENTER == 0) {
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <semiw+0x54c>)
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7fc f9e7 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006d22:	1e03      	subs	r3, r0, #0
 8006d24:	d111      	bne.n	8006d4a <semiw+0x4e6>
			st();
 8006d26:	f7fe fc2d 	bl	8005584 <st>
			if (SW_DOOR == 0) {
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <semiw+0x54c>)
 8006d2c:	2110      	movs	r1, #16
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7fc f9de 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d108      	bne.n	8006d4a <semiw+0x4e6>
				OLED_ShowStringXY(15, 2, "     ", 1);
 8006d38:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <semiw+0x554>)
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	200f      	movs	r0, #15
 8006d40:	f7fe fba2 	bl	8005488 <OLED_ShowStringXY>
				x++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

			}

		}

		if (SW_BACK == 0) {
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <semiw+0x54c>)
 8006d4c:	2108      	movs	r1, #8
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fc f9ce 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d000      	beq.n	8006d5a <semiw+0x4f6>
 8006d58:	e59c      	b.n	8006894 <semiw+0x30>

			error();
 8006d5a:	f7fe fc59 	bl	8005610 <error>
		if (tc[0] >= 75) {
 8006d5e:	e599      	b.n	8006894 <semiw+0x30>

		}

	}

}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b004      	add	sp, #16
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000714 	.word	0x20000714
 8006d6c:	20000318 	.word	0x20000318
 8006d70:	20000314 	.word	0x20000314
 8006d74:	20000310 	.word	0x20000310
 8006d78:	200006ec 	.word	0x200006ec
 8006d7c:	00001387 	.word	0x00001387
 8006d80:	20000300 	.word	0x20000300
 8006d84:	20000576 	.word	0x20000576
 8006d88:	0800bb54 	.word	0x0800bb54
 8006d8c:	20000594 	.word	0x20000594
 8006d90:	20000558 	.word	0x20000558
 8006d94:	9999999a 	.word	0x9999999a
 8006d98:	3fc99999 	.word	0x3fc99999
 8006d9c:	33333334 	.word	0x33333334
 8006da0:	3fe33333 	.word	0x3fe33333
 8006da4:	0800bbb0 	.word	0x0800bbb0
 8006da8:	2000031c 	.word	0x2000031c
 8006dac:	20000308 	.word	0x20000308
 8006db0:	50000400 	.word	0x50000400
 8006db4:	200002f8 	.word	0x200002f8
 8006db8:	0800bbc8 	.word	0x0800bbc8

08006dbc <sautodry>:

int sautodry() {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0

	int x = 1, y = 0, j = 0, z;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]

	i = 0;
 8006dce:	4b92      	ldr	r3, [pc, #584]	; (8007018 <sautodry+0x25c>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(0, 2, "Auto-Dry ", 1);
 8006dd4:	4a91      	ldr	r2, [pc, #580]	; (800701c <sautodry+0x260>)
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	2102      	movs	r1, #2
 8006dda:	2000      	movs	r0, #0
 8006ddc:	f7fe fb54 	bl	8005488 <OLED_ShowStringXY>
	door();
 8006de0:	f7fe feb4 	bl	8005b4c <door>

	while (1) {

		if (tc[0] >= 75) {
 8006de4:	4b8e      	ldr	r3, [pc, #568]	; (8007020 <sautodry+0x264>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b4a      	cmp	r3, #74	; 0x4a
 8006dea:	d800      	bhi.n	8006dee <sautodry+0x32>
 8006dec:	e0d5      	b.n	8006f9a <sautodry+0x1de>
			tc[0] = 0;
 8006dee:	4b8c      	ldr	r3, [pc, #560]	; (8007020 <sautodry+0x264>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
			vd();
 8006df4:	f7ff f8ce 	bl	8005f94 <vd>
			if (tc[2] >= 500) {
 8006df8:	4b89      	ldr	r3, [pc, #548]	; (8007020 <sautodry+0x264>)
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	23fa      	movs	r3, #250	; 0xfa
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d200      	bcs.n	8006e06 <sautodry+0x4a>
 8006e04:	e0c9      	b.n	8006f9a <sautodry+0x1de>
				tc[2] = 0;
 8006e06:	4b86      	ldr	r3, [pc, #536]	; (8007020 <sautodry+0x264>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	609a      	str	r2, [r3, #8]

				if (le < 2 && SW_DOOR == 0) {
 8006e0c:	4b85      	ldr	r3, [pc, #532]	; (8007024 <sautodry+0x268>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	dd00      	ble.n	8006e16 <sautodry+0x5a>
 8006e14:	e0c1      	b.n	8006f9a <sautodry+0x1de>
 8006e16:	4b84      	ldr	r3, [pc, #528]	; (8007028 <sautodry+0x26c>)
 8006e18:	2110      	movs	r1, #16
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f7fc f968 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006e20:	1e03      	subs	r3, r0, #0
 8006e22:	d000      	beq.n	8006e26 <sautodry+0x6a>
 8006e24:	e0b9      	b.n	8006f9a <sautodry+0x1de>
					work = 1;
 8006e26:	4b81      	ldr	r3, [pc, #516]	; (800702c <sautodry+0x270>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
					DRAIN(0);
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	01db      	lsls	r3, r3, #7
 8006e30:	487f      	ldr	r0, [pc, #508]	; (8007030 <sautodry+0x274>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	0019      	movs	r1, r3
 8006e36:	f7fc f978 	bl	800312a <HAL_GPIO_WritePin>

					if (y == 0) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <sautodry+0x8e>
						y = 1;
 8006e40:	2301      	movs	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
						tc[3] = 0;
 8006e44:	4b76      	ldr	r3, [pc, #472]	; (8007020 <sautodry+0x264>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
					}

					if (tc[3] >= 0 && tc[3] < 2000) {
 8006e4a:	4b75      	ldr	r3, [pc, #468]	; (8007020 <sautodry+0x264>)
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	23fa      	movs	r3, #250	; 0xfa
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d20f      	bcs.n	8006e76 <sautodry+0xba>
						FWD(1);
 8006e56:	23a0      	movs	r3, #160	; 0xa0
 8006e58:	05db      	lsls	r3, r3, #23
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	2120      	movs	r1, #32
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7fc f963 	bl	800312a <HAL_GPIO_WritePin>
						DRYER(1);
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	00d9      	lsls	r1, r3, #3
 8006e68:	23a0      	movs	r3, #160	; 0xa0
 8006e6a:	05db      	lsls	r3, r3, #23
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f7fc f95b 	bl	800312a <HAL_GPIO_WritePin>
 8006e74:	e091      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 2000 && tc[3] < 3000) {
 8006e76:	4b6a      	ldr	r3, [pc, #424]	; (8007020 <sautodry+0x264>)
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	23fa      	movs	r3, #250	; 0xfa
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d30c      	bcc.n	8006e9c <sautodry+0xe0>
 8006e82:	4b67      	ldr	r3, [pc, #412]	; (8007020 <sautodry+0x264>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	4a6b      	ldr	r2, [pc, #428]	; (8007034 <sautodry+0x278>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d807      	bhi.n	8006e9c <sautodry+0xe0>
						FWD(0);
 8006e8c:	23a0      	movs	r3, #160	; 0xa0
 8006e8e:	05db      	lsls	r3, r3, #23
 8006e90:	2200      	movs	r2, #0
 8006e92:	2120      	movs	r1, #32
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7fc f948 	bl	800312a <HAL_GPIO_WritePin>
 8006e9a:	e07e      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 3000 && tc[3] < 5000) {
 8006e9c:	4b60      	ldr	r3, [pc, #384]	; (8007020 <sautodry+0x264>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4a64      	ldr	r2, [pc, #400]	; (8007034 <sautodry+0x278>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d90c      	bls.n	8006ec0 <sautodry+0x104>
 8006ea6:	4b5e      	ldr	r3, [pc, #376]	; (8007020 <sautodry+0x264>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	4a63      	ldr	r2, [pc, #396]	; (8007038 <sautodry+0x27c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d807      	bhi.n	8006ec0 <sautodry+0x104>
						REV(1);
 8006eb0:	23a0      	movs	r3, #160	; 0xa0
 8006eb2:	05db      	lsls	r3, r3, #23
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2108      	movs	r1, #8
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7fc f936 	bl	800312a <HAL_GPIO_WritePin>
 8006ebe:	e06c      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 5000 && tc[3] < 6000) {
 8006ec0:	4b57      	ldr	r3, [pc, #348]	; (8007020 <sautodry+0x264>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a5c      	ldr	r2, [pc, #368]	; (8007038 <sautodry+0x27c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d90c      	bls.n	8006ee4 <sautodry+0x128>
 8006eca:	4b55      	ldr	r3, [pc, #340]	; (8007020 <sautodry+0x264>)
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <sautodry+0x280>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d807      	bhi.n	8006ee4 <sautodry+0x128>
						REV(0);
 8006ed4:	23a0      	movs	r3, #160	; 0xa0
 8006ed6:	05db      	lsls	r3, r3, #23
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2108      	movs	r1, #8
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7fc f924 	bl	800312a <HAL_GPIO_WritePin>
 8006ee2:	e05a      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 6000 && tc[3] < 8000) {
 8006ee4:	4b4e      	ldr	r3, [pc, #312]	; (8007020 <sautodry+0x264>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a54      	ldr	r2, [pc, #336]	; (800703c <sautodry+0x280>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d90d      	bls.n	8006f0a <sautodry+0x14e>
 8006eee:	4b4c      	ldr	r3, [pc, #304]	; (8007020 <sautodry+0x264>)
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	23fa      	movs	r3, #250	; 0xfa
 8006ef4:	015b      	lsls	r3, r3, #5
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d207      	bcs.n	8006f0a <sautodry+0x14e>
						FWD(1);
 8006efa:	23a0      	movs	r3, #160	; 0xa0
 8006efc:	05db      	lsls	r3, r3, #23
 8006efe:	2201      	movs	r2, #1
 8006f00:	2120      	movs	r1, #32
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7fc f911 	bl	800312a <HAL_GPIO_WritePin>
 8006f08:	e047      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 8000 && tc[3] < 9000) {
 8006f0a:	4b45      	ldr	r3, [pc, #276]	; (8007020 <sautodry+0x264>)
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	23fa      	movs	r3, #250	; 0xfa
 8006f10:	015b      	lsls	r3, r3, #5
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d30c      	bcc.n	8006f30 <sautodry+0x174>
 8006f16:	4b42      	ldr	r3, [pc, #264]	; (8007020 <sautodry+0x264>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	4a49      	ldr	r2, [pc, #292]	; (8007040 <sautodry+0x284>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d807      	bhi.n	8006f30 <sautodry+0x174>
						FWD(0);
 8006f20:	23a0      	movs	r3, #160	; 0xa0
 8006f22:	05db      	lsls	r3, r3, #23
 8006f24:	2200      	movs	r2, #0
 8006f26:	2120      	movs	r1, #32
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f7fc f8fe 	bl	800312a <HAL_GPIO_WritePin>
 8006f2e:	e034      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 9000 && tc[3] < 11000) {
 8006f30:	4b3b      	ldr	r3, [pc, #236]	; (8007020 <sautodry+0x264>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a42      	ldr	r2, [pc, #264]	; (8007040 <sautodry+0x284>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d914      	bls.n	8006f64 <sautodry+0x1a8>
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <sautodry+0x264>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	; (8007044 <sautodry+0x288>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d80f      	bhi.n	8006f64 <sautodry+0x1a8>
						REV(1);
 8006f44:	23a0      	movs	r3, #160	; 0xa0
 8006f46:	05db      	lsls	r3, r3, #23
 8006f48:	2201      	movs	r2, #1
 8006f4a:	2108      	movs	r1, #8
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7fc f8ec 	bl	800312a <HAL_GPIO_WritePin>
						DRYER(1);
 8006f52:	2380      	movs	r3, #128	; 0x80
 8006f54:	00d9      	lsls	r1, r3, #3
 8006f56:	23a0      	movs	r3, #160	; 0xa0
 8006f58:	05db      	lsls	r3, r3, #23
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7fc f8e4 	bl	800312a <HAL_GPIO_WritePin>
 8006f62:	e01a      	b.n	8006f9a <sautodry+0x1de>
					} else if (tc[3] >= 11000 && tc[3] < 12000) {
 8006f64:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <sautodry+0x264>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a36      	ldr	r2, [pc, #216]	; (8007044 <sautodry+0x288>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d915      	bls.n	8006f9a <sautodry+0x1de>
 8006f6e:	4b2c      	ldr	r3, [pc, #176]	; (8007020 <sautodry+0x264>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	4a35      	ldr	r2, [pc, #212]	; (8007048 <sautodry+0x28c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d810      	bhi.n	8006f9a <sautodry+0x1de>
						REV(0);
 8006f78:	23a0      	movs	r3, #160	; 0xa0
 8006f7a:	05db      	lsls	r3, r3, #23
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2108      	movs	r1, #8
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7fc f8d2 	bl	800312a <HAL_GPIO_WritePin>
						ledoff();
 8006f86:	f7fe faad 	bl	80054e4 <ledoff>
						i = 1;
 8006f8a:	4b23      	ldr	r3, [pc, #140]	; (8007018 <sautodry+0x25c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
						work = 0;
 8006f90:	4b26      	ldr	r3, [pc, #152]	; (800702c <sautodry+0x270>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
						return 5;
 8006f96:	2305      	movs	r3, #5
 8006f98:	e039      	b.n	800700e <sautodry+0x252>
					}
				}
			}
		}

		if (le >= 2) {
 8006f9a:	4b22      	ldr	r3, [pc, #136]	; (8007024 <sautodry+0x268>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	dd07      	ble.n	8006fb2 <sautodry+0x1f6>
			DRAIN(1);
 8006fa2:	2380      	movs	r3, #128	; 0x80
 8006fa4:	01db      	lsls	r3, r3, #7
 8006fa6:	4822      	ldr	r0, [pc, #136]	; (8007030 <sautodry+0x274>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	0019      	movs	r1, r3
 8006fac:	f7fc f8bd 	bl	800312a <HAL_GPIO_WritePin>
 8006fb0:	e006      	b.n	8006fc0 <sautodry+0x204>

		} else {
			DRAIN(0);
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	01db      	lsls	r3, r3, #7
 8006fb6:	481e      	ldr	r0, [pc, #120]	; (8007030 <sautodry+0x274>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	0019      	movs	r1, r3
 8006fbc:	f7fc f8b5 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (SW_UP == 0) {
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <sautodry+0x26c>)
 8006fc2:	2120      	movs	r1, #32
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f7fc f893 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006fca:	1e03      	subs	r3, r0, #0
 8006fcc:	d102      	bne.n	8006fd4 <sautodry+0x218>
			error();
 8006fce:	f7fe fb1f 	bl	8005610 <error>
 8006fd2:	e008      	b.n	8006fe6 <sautodry+0x22a>

		} else if (SW_DOWN == 0) {
 8006fd4:	4b14      	ldr	r3, [pc, #80]	; (8007028 <sautodry+0x26c>)
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7fc f889 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006fde:	1e03      	subs	r3, r0, #0
 8006fe0:	d101      	bne.n	8006fe6 <sautodry+0x22a>
			error();
 8006fe2:	f7fe fb15 	bl	8005610 <error>
		}

		if (SW_ENTER == 0) {
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <sautodry+0x26c>)
 8006fe8:	2102      	movs	r1, #2
 8006fea:	0018      	movs	r0, r3
 8006fec:	f7fc f880 	bl	80030f0 <HAL_GPIO_ReadPin>
 8006ff0:	1e03      	subs	r3, r0, #0
 8006ff2:	d101      	bne.n	8006ff8 <sautodry+0x23c>
			error();
 8006ff4:	f7fe fb0c 	bl	8005610 <error>

		}

		if (SW_BACK == 0) {
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <sautodry+0x26c>)
 8006ffa:	2108      	movs	r1, #8
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7fc f877 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007002:	1e03      	subs	r3, r0, #0
 8007004:	d000      	beq.n	8007008 <sautodry+0x24c>
 8007006:	e6ed      	b.n	8006de4 <sautodry+0x28>

			error();
 8007008:	f7fe fb02 	bl	8005610 <error>
		if (tc[0] >= 75) {
 800700c:	e6ea      	b.n	8006de4 <sautodry+0x28>

		}
	}
}
 800700e:	0018      	movs	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	b004      	add	sp, #16
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	200002f8 	.word	0x200002f8
 800701c:	0800bbd0 	.word	0x0800bbd0
 8007020:	200006ec 	.word	0x200006ec
 8007024:	20000310 	.word	0x20000310
 8007028:	50000400 	.word	0x50000400
 800702c:	20000304 	.word	0x20000304
 8007030:	50000800 	.word	0x50000800
 8007034:	00000bb7 	.word	0x00000bb7
 8007038:	00001387 	.word	0x00001387
 800703c:	0000176f 	.word	0x0000176f
 8007040:	00002327 	.word	0x00002327
 8007044:	00002af7 	.word	0x00002af7
 8007048:	00002edf 	.word	0x00002edf

0800704c <semirepui>:

void semirepui(int j) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]

	OLED_ShowStringXY(0, 3, "-OK       ", 0 != j);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	4193      	sbcs	r3, r2
 800705a:	b2db      	uxtb	r3, r3
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <semirepui+0x38>)
 800705e:	2103      	movs	r1, #3
 8007060:	2000      	movs	r0, #0
 8007062:	f7fe fa11 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 5, "-BACK     ", 1 != j);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3b01      	subs	r3, #1
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	4193      	sbcs	r3, r2
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4a05      	ldr	r2, [pc, #20]	; (8007088 <semirepui+0x3c>)
 8007072:	2105      	movs	r1, #5
 8007074:	2000      	movs	r0, #0
 8007076:	f7fe fa07 	bl	8005488 <OLED_ShowStringXY>

}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	b002      	add	sp, #8
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	0800bbdc 	.word	0x0800bbdc
 8007088:	0800bbe8 	.word	0x0800bbe8

0800708c <semirep>:

int semirep() {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0

	int j = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
	semirepui(j);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f7ff ffd7 	bl	800704c <semirepui>

	while (1) {

		if (SW_UP == 0) {
 800709e:	4b28      	ldr	r3, [pc, #160]	; (8007140 <semirep+0xb4>)
 80070a0:	2120      	movs	r1, #32
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7fc f824 	bl	80030f0 <HAL_GPIO_ReadPin>
 80070a8:	1e03      	subs	r3, r0, #0
 80070aa:	d10e      	bne.n	80070ca <semirep+0x3e>
			st();
 80070ac:	f7fe fa6a 	bl	8005584 <st>
			j--;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
			if (j <= -1) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	da01      	bge.n	80070c0 <semirep+0x34>
				j = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	607b      	str	r3, [r7, #4]
			}
			semirepui(j);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7ff ffc2 	bl	800704c <semirepui>
 80070c8:	e014      	b.n	80070f4 <semirep+0x68>

		} else if (SW_DOWN == 0) {
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <semirep+0xb4>)
 80070cc:	2101      	movs	r1, #1
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fc f80e 	bl	80030f0 <HAL_GPIO_ReadPin>
 80070d4:	1e03      	subs	r3, r0, #0
 80070d6:	d10d      	bne.n	80070f4 <semirep+0x68>
			st();
 80070d8:	f7fe fa54 	bl	8005584 <st>
			j++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3301      	adds	r3, #1
 80070e0:	607b      	str	r3, [r7, #4]
			if (j >= 2) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	dd01      	ble.n	80070ec <semirep+0x60>
				j = 1;
 80070e8:	2301      	movs	r3, #1
 80070ea:	607b      	str	r3, [r7, #4]
			}
			semirepui(j);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7ff ffac 	bl	800704c <semirepui>

		}

		if (SW_ENTER == 0) {
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <semirep+0xb4>)
 80070f6:	2102      	movs	r1, #2
 80070f8:	0018      	movs	r0, r3
 80070fa:	f7fb fff9 	bl	80030f0 <HAL_GPIO_ReadPin>
 80070fe:	1e03      	subs	r3, r0, #0
 8007100:	d10d      	bne.n	800711e <semirep+0x92>
			st();
 8007102:	f7fe fa3f 	bl	8005584 <st>
			oc();
 8007106:	f7fe fcdb 	bl	8005ac0 <oc>
			if (j == 1) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d104      	bne.n	800711a <semirep+0x8e>
				i = 1;
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <semirep+0xb8>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
				return 1;
 8007116:	2301      	movs	r3, #1
 8007118:	e00e      	b.n	8007138 <semirep+0xac>

			} else {
				return 6;
 800711a:	2306      	movs	r3, #6
 800711c:	e00c      	b.n	8007138 <semirep+0xac>

			}

		}

		if (SW_BACK == 0) {
 800711e:	4b08      	ldr	r3, [pc, #32]	; (8007140 <semirep+0xb4>)
 8007120:	2108      	movs	r1, #8
 8007122:	0018      	movs	r0, r3
 8007124:	f7fb ffe4 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007128:	1e03      	subs	r3, r0, #0
 800712a:	d1b8      	bne.n	800709e <semirep+0x12>
			st();
 800712c:	f7fe fa2a 	bl	8005584 <st>
			i = 1;
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <semirep+0xb8>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
			return 1;
 8007136:	2301      	movs	r3, #1

		}

	}

}
 8007138:	0018      	movs	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	b002      	add	sp, #8
 800713e:	bd80      	pop	{r7, pc}
 8007140:	50000400 	.word	0x50000400
 8007144:	200002f8 	.word	0x200002f8

08007148 <sauto>:

int sauto() {
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0

	i = 0;
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <sauto+0x4c>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	au = 1;
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <sauto+0x50>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(0, 2, "Auto-Wash", 1);
 8007158:	4a10      	ldr	r2, [pc, #64]	; (800719c <sauto+0x54>)
 800715a:	2301      	movs	r3, #1
 800715c:	2102      	movs	r1, #2
 800715e:	2000      	movs	r0, #0
 8007160:	f7fe f992 	bl	8005488 <OLED_ShowStringXY>
	semiw();
 8007164:	f7ff fb7e 	bl	8006864 <semiw>
	semid();
 8007168:	f7ff f8aa 	bl	80062c0 <semid>
	semir();
 800716c:	f7ff fa0a 	bl	8006584 <semir>
	semid();
 8007170:	f7ff f8a6 	bl	80062c0 <semid>
	semir();
 8007174:	f7ff fa06 	bl	8006584 <semir>
	semid();
 8007178:	f7ff f8a2 	bl	80062c0 <semid>
	sautodry();
 800717c:	f7ff fe1e 	bl	8006dbc <sautodry>

	au = 0;
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <sauto+0x50>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
	i = 0;
 8007186:	4b03      	ldr	r3, [pc, #12]	; (8007194 <sauto+0x4c>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
	return 1;
 800718c:	2301      	movs	r3, #1

}
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200002f8 	.word	0x200002f8
 8007198:	20000300 	.word	0x20000300
 800719c:	0800bbf4 	.word	0x0800bbf4

080071a0 <sautoui>:

void sautoui(int j) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	OLED_ShowStringXY(0, 1, "Auto", 1);
 80071a8:	4a0e      	ldr	r2, [pc, #56]	; (80071e4 <sautoui+0x44>)
 80071aa:	2301      	movs	r3, #1
 80071ac:	2101      	movs	r1, #1
 80071ae:	2000      	movs	r0, #0
 80071b0:	f7fe f96a 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 3, "-START    ", 0 != j);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	4193      	sbcs	r3, r2
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	4a0a      	ldr	r2, [pc, #40]	; (80071e8 <sautoui+0x48>)
 80071be:	2103      	movs	r1, #3
 80071c0:	2000      	movs	r0, #0
 80071c2:	f7fe f961 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 5, "-BACK     ", 1 != j);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	4193      	sbcs	r3, r2
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	4a06      	ldr	r2, [pc, #24]	; (80071ec <sautoui+0x4c>)
 80071d2:	2105      	movs	r1, #5
 80071d4:	2000      	movs	r0, #0
 80071d6:	f7fe f957 	bl	8005488 <OLED_ShowStringXY>

}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	b002      	add	sp, #8
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	0800bc00 	.word	0x0800bc00
 80071e8:	0800bc08 	.word	0x0800bc08
 80071ec:	0800bbe8 	.word	0x0800bbe8

080071f0 <sautorep>:

int sautorep() {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0

	int j = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	607b      	str	r3, [r7, #4]
	sautoui(j);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7ff ffcf 	bl	80071a0 <sautoui>

	while (1) {

		if (SW_UP == 0) {
 8007202:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <sautorep+0xb4>)
 8007204:	2120      	movs	r1, #32
 8007206:	0018      	movs	r0, r3
 8007208:	f7fb ff72 	bl	80030f0 <HAL_GPIO_ReadPin>
 800720c:	1e03      	subs	r3, r0, #0
 800720e:	d10e      	bne.n	800722e <sautorep+0x3e>
			st();
 8007210:	f7fe f9b8 	bl	8005584 <st>
			j--;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
			if (j <= -1) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da01      	bge.n	8007224 <sautorep+0x34>
				j = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	607b      	str	r3, [r7, #4]
			}
			sautoui(j);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	0018      	movs	r0, r3
 8007228:	f7ff ffba 	bl	80071a0 <sautoui>
 800722c:	e014      	b.n	8007258 <sautorep+0x68>

		} else if (SW_DOWN == 0) {
 800722e:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <sautorep+0xb4>)
 8007230:	2101      	movs	r1, #1
 8007232:	0018      	movs	r0, r3
 8007234:	f7fb ff5c 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d10d      	bne.n	8007258 <sautorep+0x68>
			st();
 800723c:	f7fe f9a2 	bl	8005584 <st>
			j++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3301      	adds	r3, #1
 8007244:	607b      	str	r3, [r7, #4]
			if (j >= 2) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b01      	cmp	r3, #1
 800724a:	dd01      	ble.n	8007250 <sautorep+0x60>
				j = 1;
 800724c:	2301      	movs	r3, #1
 800724e:	607b      	str	r3, [r7, #4]
			}
			sautoui(j);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff ffa4 	bl	80071a0 <sautoui>

		}

		if (SW_ENTER == 0) {
 8007258:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <sautorep+0xb4>)
 800725a:	2102      	movs	r1, #2
 800725c:	0018      	movs	r0, r3
 800725e:	f7fb ff47 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d10d      	bne.n	8007282 <sautorep+0x92>
			st();
 8007266:	f7fe f98d 	bl	8005584 <st>
			oc();
 800726a:	f7fe fc29 	bl	8005ac0 <oc>
			if (j == 1) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d104      	bne.n	800727e <sautorep+0x8e>
				i = 0;
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <sautorep+0xb8>)
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
				return 0;
 800727a:	2300      	movs	r3, #0
 800727c:	e00e      	b.n	800729c <sautorep+0xac>

			} else {
				return 7;
 800727e:	2307      	movs	r3, #7
 8007280:	e00c      	b.n	800729c <sautorep+0xac>

			}

		}

		if (SW_BACK == 0) {
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <sautorep+0xb4>)
 8007284:	2108      	movs	r1, #8
 8007286:	0018      	movs	r0, r3
 8007288:	f7fb ff32 	bl	80030f0 <HAL_GPIO_ReadPin>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d1b8      	bne.n	8007202 <sautorep+0x12>

			st();
 8007290:	f7fe f978 	bl	8005584 <st>
			i = 0;
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <sautorep+0xb8>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
			return 0;
 800729a:	2300      	movs	r3, #0

		}

	}

}
 800729c:	0018      	movs	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	b002      	add	sp, #8
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	50000400 	.word	0x50000400
 80072a8:	200002f8 	.word	0x200002f8

080072ac <semiui>:

void semiui() {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
	OLED_ShowStringXY(0, 3, "-Wash     ", 0 != i);
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <semiui+0x4c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	1e5a      	subs	r2, r3, #1
 80072b6:	4193      	sbcs	r3, r2
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4a10      	ldr	r2, [pc, #64]	; (80072fc <semiui+0x50>)
 80072bc:	2103      	movs	r1, #3
 80072be:	2000      	movs	r0, #0
 80072c0:	f7fe f8e2 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 5, "-RINSE    ", 1 != i);
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <semiui+0x4c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	1e5a      	subs	r2, r3, #1
 80072cc:	4193      	sbcs	r3, r2
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <semiui+0x54>)
 80072d2:	2105      	movs	r1, #5
 80072d4:	2000      	movs	r0, #0
 80072d6:	f7fe f8d7 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 7, "-DRY      ", 2 != i);
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <semiui+0x4c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3b02      	subs	r3, #2
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	4193      	sbcs	r3, r2
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <semiui+0x58>)
 80072e8:	2107      	movs	r1, #7
 80072ea:	2000      	movs	r0, #0
 80072ec:	f7fe f8cc 	bl	8005488 <OLED_ShowStringXY>

}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	200002f8 	.word	0x200002f8
 80072fc:	0800bc14 	.word	0x0800bc14
 8007300:	0800bc20 	.word	0x0800bc20
 8007304:	0800bc2c 	.word	0x0800bc2c

08007308 <semi>:

int semi() {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0

	i = 0;
 800730c:	4b2b      	ldr	r3, [pc, #172]	; (80073bc <semi+0xb4>)
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(0, 1, "Semi", 1);
 8007312:	4a2b      	ldr	r2, [pc, #172]	; (80073c0 <semi+0xb8>)
 8007314:	2301      	movs	r3, #1
 8007316:	2101      	movs	r1, #1
 8007318:	2000      	movs	r0, #0
 800731a:	f7fe f8b5 	bl	8005488 <OLED_ShowStringXY>
	semiui();
 800731e:	f7ff ffc5 	bl	80072ac <semiui>

	while (1) {

		if (SW_UP == 0) {
 8007322:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <semi+0xbc>)
 8007324:	2120      	movs	r1, #32
 8007326:	0018      	movs	r0, r3
 8007328:	f7fb fee2 	bl	80030f0 <HAL_GPIO_ReadPin>
 800732c:	1e03      	subs	r3, r0, #0
 800732e:	d110      	bne.n	8007352 <semi+0x4a>
			st();
 8007330:	f7fe f928 	bl	8005584 <st>
			i--;
 8007334:	4b21      	ldr	r3, [pc, #132]	; (80073bc <semi+0xb4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <semi+0xb4>)
 800733c:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 800733e:	4b1f      	ldr	r3, [pc, #124]	; (80073bc <semi+0xb4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	da02      	bge.n	800734c <semi+0x44>
				i = 0;
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <semi+0xb4>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
			}
			semiui();
 800734c:	f7ff ffae 	bl	80072ac <semiui>
 8007350:	e016      	b.n	8007380 <semi+0x78>

		} else if (SW_DOWN == 0) {
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <semi+0xbc>)
 8007354:	2101      	movs	r1, #1
 8007356:	0018      	movs	r0, r3
 8007358:	f7fb feca 	bl	80030f0 <HAL_GPIO_ReadPin>
 800735c:	1e03      	subs	r3, r0, #0
 800735e:	d10f      	bne.n	8007380 <semi+0x78>
			st();
 8007360:	f7fe f910 	bl	8005584 <st>
			i++;
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <semi+0xb4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <semi+0xb4>)
 800736c:	601a      	str	r2, [r3, #0]
			if (i >= 3) {
 800736e:	4b13      	ldr	r3, [pc, #76]	; (80073bc <semi+0xb4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b02      	cmp	r3, #2
 8007374:	dd02      	ble.n	800737c <semi+0x74>
				i = 2;
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <semi+0xb4>)
 8007378:	2202      	movs	r2, #2
 800737a:	601a      	str	r2, [r3, #0]
			}
			semiui();
 800737c:	f7ff ff96 	bl	80072ac <semiui>

		}

		if (SW_ENTER == 0) {
 8007380:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <semi+0xbc>)
 8007382:	2102      	movs	r1, #2
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb feb3 	bl	80030f0 <HAL_GPIO_ReadPin>
 800738a:	1e03      	subs	r3, r0, #0
 800738c:	d103      	bne.n	8007396 <semi+0x8e>
			st();
 800738e:	f7fe f8f9 	bl	8005584 <st>
			return 5;
 8007392:	2305      	movs	r3, #5
 8007394:	e00e      	b.n	80073b4 <semi+0xac>

		}

		if (SW_BACK == 0) {
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <semi+0xbc>)
 8007398:	2108      	movs	r1, #8
 800739a:	0018      	movs	r0, r3
 800739c:	f7fb fea8 	bl	80030f0 <HAL_GPIO_ReadPin>
 80073a0:	1e03      	subs	r3, r0, #0
 80073a2:	d1be      	bne.n	8007322 <semi+0x1a>
			st();
 80073a4:	f7fe f8ee 	bl	8005584 <st>
			oc();
 80073a8:	f7fe fb8a 	bl	8005ac0 <oc>
			i = 0;
 80073ac:	4b03      	ldr	r3, [pc, #12]	; (80073bc <semi+0xb4>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
			return 3;
 80073b2:	2303      	movs	r3, #3
		}

	}

}
 80073b4:	0018      	movs	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	200002f8 	.word	0x200002f8
 80073c0:	0800bc38 	.word	0x0800bc38
 80073c4:	50000400 	.word	0x50000400

080073c8 <leds>:

void leds(int j) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

	switch (i) {
 80073d0:	4b49      	ldr	r3, [pc, #292]	; (80074f8 <leds+0x130>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d900      	bls.n	80073da <leds+0x12>
 80073d8:	e089      	b.n	80074ee <leds+0x126>
 80073da:	009a      	lsls	r2, r3, #2
 80073dc:	4b47      	ldr	r3, [pc, #284]	; (80074fc <leds+0x134>)
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	469f      	mov	pc, r3

	case 0:
		FWD(j != 1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	1e5a      	subs	r2, r3, #1
 80073ea:	4193      	sbcs	r3, r2
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	001a      	movs	r2, r3
 80073f0:	23a0      	movs	r3, #160	; 0xa0
 80073f2:	05db      	lsls	r3, r3, #23
 80073f4:	2120      	movs	r1, #32
 80073f6:	0018      	movs	r0, r3
 80073f8:	f7fb fe97 	bl	800312a <HAL_GPIO_WritePin>
		break;
 80073fc:	e077      	b.n	80074ee <leds+0x126>

	case 1:
		REV(j != 1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3b01      	subs	r3, #1
 8007402:	1e5a      	subs	r2, r3, #1
 8007404:	4193      	sbcs	r3, r2
 8007406:	b2db      	uxtb	r3, r3
 8007408:	001a      	movs	r2, r3
 800740a:	23a0      	movs	r3, #160	; 0xa0
 800740c:	05db      	lsls	r3, r3, #23
 800740e:	2108      	movs	r1, #8
 8007410:	0018      	movs	r0, r3
 8007412:	f7fb fe8a 	bl	800312a <HAL_GPIO_WritePin>
		break;
 8007416:	e06a      	b.n	80074ee <leds+0x126>

	case 2:
		DRYER(j != 1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3b01      	subs	r3, #1
 800741c:	1e5a      	subs	r2, r3, #1
 800741e:	4193      	sbcs	r3, r2
 8007420:	b2db      	uxtb	r3, r3
 8007422:	001a      	movs	r2, r3
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	00d9      	lsls	r1, r3, #3
 8007428:	23a0      	movs	r3, #160	; 0xa0
 800742a:	05db      	lsls	r3, r3, #23
 800742c:	0018      	movs	r0, r3
 800742e:	f7fb fe7c 	bl	800312a <HAL_GPIO_WritePin>
		break;
 8007432:	e05c      	b.n	80074ee <leds+0x126>

	case 3:
		HEATING(j != 1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	1e5a      	subs	r2, r3, #1
 800743a:	4193      	sbcs	r3, r2
 800743c:	b2db      	uxtb	r3, r3
 800743e:	001a      	movs	r2, r3
 8007440:	2380      	movs	r3, #128	; 0x80
 8007442:	0059      	lsls	r1, r3, #1
 8007444:	23a0      	movs	r3, #160	; 0xa0
 8007446:	05db      	lsls	r3, r3, #23
 8007448:	0018      	movs	r0, r3
 800744a:	f7fb fe6e 	bl	800312a <HAL_GPIO_WritePin>
		break;
 800744e:	e04e      	b.n	80074ee <leds+0x126>

	case 4:
		HI_SPEED(j != 1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3b01      	subs	r3, #1
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	4193      	sbcs	r3, r2
 8007458:	b2db      	uxtb	r3, r3
 800745a:	001a      	movs	r2, r3
 800745c:	2380      	movs	r3, #128	; 0x80
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	4827      	ldr	r0, [pc, #156]	; (8007500 <leds+0x138>)
 8007462:	0019      	movs	r1, r3
 8007464:	f7fb fe61 	bl	800312a <HAL_GPIO_WritePin>
		break;
 8007468:	e041      	b.n	80074ee <leds+0x126>

	case 5:
		SUPPLY(j != 1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	4193      	sbcs	r3, r2
 8007472:	b2db      	uxtb	r3, r3
 8007474:	001a      	movs	r2, r3
 8007476:	23a0      	movs	r3, #160	; 0xa0
 8007478:	05db      	lsls	r3, r3, #23
 800747a:	2180      	movs	r1, #128	; 0x80
 800747c:	0018      	movs	r0, r3
 800747e:	f7fb fe54 	bl	800312a <HAL_GPIO_WritePin>
		break;
 8007482:	e034      	b.n	80074ee <leds+0x126>

	case 6:
		DRAIN(j != 1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3b01      	subs	r3, #1
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	4193      	sbcs	r3, r2
 800748c:	b2db      	uxtb	r3, r3
 800748e:	001a      	movs	r2, r3
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	481a      	ldr	r0, [pc, #104]	; (8007500 <leds+0x138>)
 8007496:	0019      	movs	r1, r3
 8007498:	f7fb fe47 	bl	800312a <HAL_GPIO_WritePin>
		break;
 800749c:	e027      	b.n	80074ee <leds+0x126>

	case 7:
		LOCK(j != 1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	1e5a      	subs	r2, r3, #1
 80074a4:	4193      	sbcs	r3, r2
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	001a      	movs	r2, r3
 80074aa:	23a0      	movs	r3, #160	; 0xa0
 80074ac:	05db      	lsls	r3, r3, #23
 80074ae:	2110      	movs	r1, #16
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7fb fe3a 	bl	800312a <HAL_GPIO_WritePin>
		break;
 80074b6:	e01a      	b.n	80074ee <leds+0x126>

	case 8:
		DETERGENT(j != 1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	1e5a      	subs	r2, r3, #1
 80074be:	4193      	sbcs	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	001a      	movs	r2, r3
 80074c4:	23a0      	movs	r3, #160	; 0xa0
 80074c6:	05db      	lsls	r3, r3, #23
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7fb fe2d 	bl	800312a <HAL_GPIO_WritePin>
		break;
 80074d0:	e00d      	b.n	80074ee <leds+0x126>

	case 9:
		SOFT(j != 1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	4193      	sbcs	r3, r2
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	001a      	movs	r2, r3
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	0099      	lsls	r1, r3, #2
 80074e2:	23a0      	movs	r3, #160	; 0xa0
 80074e4:	05db      	lsls	r3, r3, #23
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7fb fe1f 	bl	800312a <HAL_GPIO_WritePin>
		break;
 80074ec:	46c0      	nop			; (mov r8, r8)

	}

}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	200002f8 	.word	0x200002f8
 80074fc:	0800c778 	.word	0x0800c778
 8007500:	50000800 	.word	0x50000800

08007504 <led>:

void led(int j) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

	OLED_ShowStringXY(0, 5, "-ON       ", 0 != j);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	4193      	sbcs	r3, r2
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4a09      	ldr	r2, [pc, #36]	; (800753c <led+0x38>)
 8007516:	2105      	movs	r1, #5
 8007518:	2000      	movs	r0, #0
 800751a:	f7fd ffb5 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 7, "-OFF      ", 1 != j);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	1e5a      	subs	r2, r3, #1
 8007524:	4193      	sbcs	r3, r2
 8007526:	b2db      	uxtb	r3, r3
 8007528:	4a05      	ldr	r2, [pc, #20]	; (8007540 <led+0x3c>)
 800752a:	2107      	movs	r1, #7
 800752c:	2000      	movs	r0, #0
 800752e:	f7fd ffab 	bl	8005488 <OLED_ShowStringXY>

}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b002      	add	sp, #8
 8007538:	bd80      	pop	{r7, pc}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	0800bc40 	.word	0x0800bc40
 8007540:	0800bc4c 	.word	0x0800bc4c

08007544 <manualleds>:

int manualleds() {
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
	int j = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	607b      	str	r3, [r7, #4]

	OLED_ShowStringXY(9, 3, "Run", 1);
 800754e:	4a35      	ldr	r2, [pc, #212]	; (8007624 <manualleds+0xe0>)
 8007550:	2301      	movs	r3, #1
 8007552:	2103      	movs	r1, #3
 8007554:	2009      	movs	r0, #9
 8007556:	f7fd ff97 	bl	8005488 <OLED_ShowStringXY>
	led(j);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	0018      	movs	r0, r3
 800755e:	f7ff ffd1 	bl	8007504 <led>

	while (1) {

		if (SW_UP == 0) {
 8007562:	4b31      	ldr	r3, [pc, #196]	; (8007628 <manualleds+0xe4>)
 8007564:	2120      	movs	r1, #32
 8007566:	0018      	movs	r0, r3
 8007568:	f7fb fdc2 	bl	80030f0 <HAL_GPIO_ReadPin>
 800756c:	1e03      	subs	r3, r0, #0
 800756e:	d10e      	bne.n	800758e <manualleds+0x4a>
			st();
 8007570:	f7fe f808 	bl	8005584 <st>
			j--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	607b      	str	r3, [r7, #4]
			if (j <= -1) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	da01      	bge.n	8007584 <manualleds+0x40>
				j = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	607b      	str	r3, [r7, #4]
			}
			led(j);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	0018      	movs	r0, r3
 8007588:	f7ff ffbc 	bl	8007504 <led>
 800758c:	e022      	b.n	80075d4 <manualleds+0x90>

		} else if (SW_DOWN == 0) {
 800758e:	4b26      	ldr	r3, [pc, #152]	; (8007628 <manualleds+0xe4>)
 8007590:	2101      	movs	r1, #1
 8007592:	0018      	movs	r0, r3
 8007594:	f7fb fdac 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007598:	1e03      	subs	r3, r0, #0
 800759a:	d10e      	bne.n	80075ba <manualleds+0x76>
			st();
 800759c:	f7fd fff2 	bl	8005584 <st>
			j++;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
			if (j >= 2) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	dd01      	ble.n	80075b0 <manualleds+0x6c>
				j = 1;
 80075ac:	2301      	movs	r3, #1
 80075ae:	607b      	str	r3, [r7, #4]
			}
			led(j);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7ff ffa6 	bl	8007504 <led>
 80075b8:	e00c      	b.n	80075d4 <manualleds+0x90>

		} else if (SW_BACK == 0) {
 80075ba:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <manualleds+0xe4>)
 80075bc:	2108      	movs	r1, #8
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fb fd96 	bl	80030f0 <HAL_GPIO_ReadPin>
 80075c4:	1e03      	subs	r3, r0, #0
 80075c6:	d105      	bne.n	80075d4 <manualleds+0x90>
			st();
 80075c8:	f7fd ffdc 	bl	8005584 <st>
			oc();
 80075cc:	f7fe fa78 	bl	8005ac0 <oc>
			return 4;
 80075d0:	2304      	movs	r3, #4
 80075d2:	e022      	b.n	800761a <manualleds+0xd6>
		}

		if (SW_ENTER == 0) {
 80075d4:	4b14      	ldr	r3, [pc, #80]	; (8007628 <manualleds+0xe4>)
 80075d6:	2102      	movs	r1, #2
 80075d8:	0018      	movs	r0, r3
 80075da:	f7fb fd89 	bl	80030f0 <HAL_GPIO_ReadPin>
 80075de:	1e03      	subs	r3, r0, #0
 80075e0:	d1bf      	bne.n	8007562 <manualleds+0x1e>
			st();
 80075e2:	f7fd ffcf 	bl	8005584 <st>
			leds(j);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	0018      	movs	r0, r3
 80075ea:	f7ff feed 	bl	80073c8 <leds>
			BUZZER(1);
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	0219      	lsls	r1, r3, #8
 80075f2:	23a0      	movs	r3, #160	; 0xa0
 80075f4:	05db      	lsls	r3, r3, #23
 80075f6:	2201      	movs	r2, #1
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7fb fd96 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80075fe:	2396      	movs	r3, #150	; 0x96
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	0018      	movs	r0, r3
 8007604:	f7fa fdb4 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	0219      	lsls	r1, r3, #8
 800760c:	23a0      	movs	r3, #160	; 0xa0
 800760e:	05db      	lsls	r3, r3, #23
 8007610:	2200      	movs	r2, #0
 8007612:	0018      	movs	r0, r3
 8007614:	f7fb fd89 	bl	800312a <HAL_GPIO_WritePin>
		if (SW_UP == 0) {
 8007618:	e7a3      	b.n	8007562 <manualleds+0x1e>

		}

	}

}
 800761a:	0018      	movs	r0, r3
 800761c:	46bd      	mov	sp, r7
 800761e:	b002      	add	sp, #8
 8007620:	bd80      	pop	{r7, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	0800bc58 	.word	0x0800bc58
 8007628:	50000400 	.word	0x50000400

0800762c <manuals>:

void manuals() {
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0

	if (i == 3 || i == 4 || i == 8 || i == 9) {
 8007630:	4b40      	ldr	r3, [pc, #256]	; (8007734 <manuals+0x108>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d00b      	beq.n	8007650 <manuals+0x24>
 8007638:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <manuals+0x108>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b04      	cmp	r3, #4
 800763e:	d007      	beq.n	8007650 <manuals+0x24>
 8007640:	4b3c      	ldr	r3, [pc, #240]	; (8007734 <manuals+0x108>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d003      	beq.n	8007650 <manuals+0x24>
 8007648:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <manuals+0x108>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b09      	cmp	r3, #9
 800764e:	d12c      	bne.n	80076aa <manuals+0x7e>
		OLED_ShowStringXY(0, 3, "-HEAT     ", 3 != i);
 8007650:	4b38      	ldr	r3, [pc, #224]	; (8007734 <manuals+0x108>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3b03      	subs	r3, #3
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	4193      	sbcs	r3, r2
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4a36      	ldr	r2, [pc, #216]	; (8007738 <manuals+0x10c>)
 800765e:	2103      	movs	r1, #3
 8007660:	2000      	movs	r0, #0
 8007662:	f7fd ff11 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(0, 5, "-HI-SPEED ", 4 != i);
 8007666:	4b33      	ldr	r3, [pc, #204]	; (8007734 <manuals+0x108>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3b04      	subs	r3, #4
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	4193      	sbcs	r3, r2
 8007670:	b2db      	uxtb	r3, r3
 8007672:	4a32      	ldr	r2, [pc, #200]	; (800773c <manuals+0x110>)
 8007674:	2105      	movs	r1, #5
 8007676:	2000      	movs	r0, #0
 8007678:	f7fd ff06 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(11, 3, "-DETE    ", 8 != i);
 800767c:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <manuals+0x108>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3b08      	subs	r3, #8
 8007682:	1e5a      	subs	r2, r3, #1
 8007684:	4193      	sbcs	r3, r2
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <manuals+0x114>)
 800768a:	2103      	movs	r1, #3
 800768c:	200b      	movs	r0, #11
 800768e:	f7fd fefb 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(11, 5, "-SOFT    ", 9 != i);
 8007692:	4b28      	ldr	r3, [pc, #160]	; (8007734 <manuals+0x108>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3b09      	subs	r3, #9
 8007698:	1e5a      	subs	r2, r3, #1
 800769a:	4193      	sbcs	r3, r2
 800769c:	b2db      	uxtb	r3, r3
 800769e:	4a29      	ldr	r2, [pc, #164]	; (8007744 <manuals+0x118>)
 80076a0:	2105      	movs	r1, #5
 80076a2:	200b      	movs	r0, #11
 80076a4:	f7fd fef0 	bl	8005488 <OLED_ShowStringXY>
 80076a8:	e041      	b.n	800772e <manuals+0x102>

	} else {

		OLED_ShowStringXY(0, 3, "-FWD      ", 0 != i);
 80076aa:	4b22      	ldr	r3, [pc, #136]	; (8007734 <manuals+0x108>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	4193      	sbcs	r3, r2
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	4a24      	ldr	r2, [pc, #144]	; (8007748 <manuals+0x11c>)
 80076b6:	2103      	movs	r1, #3
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7fd fee5 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(0, 5, "-REV      ", 1 != i);
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <manuals+0x108>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	4193      	sbcs	r3, r2
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	4a20      	ldr	r2, [pc, #128]	; (800774c <manuals+0x120>)
 80076cc:	2105      	movs	r1, #5
 80076ce:	2000      	movs	r0, #0
 80076d0:	f7fd feda 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(0, 7, "-DRYER    ", 2 != i);
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <manuals+0x108>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3b02      	subs	r3, #2
 80076da:	1e5a      	subs	r2, r3, #1
 80076dc:	4193      	sbcs	r3, r2
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <manuals+0x124>)
 80076e2:	2107      	movs	r1, #7
 80076e4:	2000      	movs	r0, #0
 80076e6:	f7fd fecf 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(11, 3, "-Win     ", 5 != i);
 80076ea:	4b12      	ldr	r3, [pc, #72]	; (8007734 <manuals+0x108>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3b05      	subs	r3, #5
 80076f0:	1e5a      	subs	r2, r3, #1
 80076f2:	4193      	sbcs	r3, r2
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4a17      	ldr	r2, [pc, #92]	; (8007754 <manuals+0x128>)
 80076f8:	2103      	movs	r1, #3
 80076fa:	200b      	movs	r0, #11
 80076fc:	f7fd fec4 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(11, 5, "-Wout    ", 6 != i);
 8007700:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <manuals+0x108>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3b06      	subs	r3, #6
 8007706:	1e5a      	subs	r2, r3, #1
 8007708:	4193      	sbcs	r3, r2
 800770a:	b2db      	uxtb	r3, r3
 800770c:	4a12      	ldr	r2, [pc, #72]	; (8007758 <manuals+0x12c>)
 800770e:	2105      	movs	r1, #5
 8007710:	200b      	movs	r0, #11
 8007712:	f7fd feb9 	bl	8005488 <OLED_ShowStringXY>
		OLED_ShowStringXY(11, 7, "-LOCK    ", 7 != i);
 8007716:	4b07      	ldr	r3, [pc, #28]	; (8007734 <manuals+0x108>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b07      	subs	r3, #7
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	4193      	sbcs	r3, r2
 8007720:	b2db      	uxtb	r3, r3
 8007722:	4a0e      	ldr	r2, [pc, #56]	; (800775c <manuals+0x130>)
 8007724:	2107      	movs	r1, #7
 8007726:	200b      	movs	r0, #11
 8007728:	f7fd feae 	bl	8005488 <OLED_ShowStringXY>

	}

}
 800772c:	46c0      	nop			; (mov r8, r8)
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200002f8 	.word	0x200002f8
 8007738:	0800bc5c 	.word	0x0800bc5c
 800773c:	0800bc68 	.word	0x0800bc68
 8007740:	0800bc74 	.word	0x0800bc74
 8007744:	0800bc80 	.word	0x0800bc80
 8007748:	0800bc8c 	.word	0x0800bc8c
 800774c:	0800bc98 	.word	0x0800bc98
 8007750:	0800bca4 	.word	0x0800bca4
 8007754:	0800bcb0 	.word	0x0800bcb0
 8007758:	0800bcbc 	.word	0x0800bcbc
 800775c:	0800bcc8 	.word	0x0800bcc8

08007760 <manual>:

int manual() {
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0

	i = 0;
 8007764:	4b3d      	ldr	r3, [pc, #244]	; (800785c <manual+0xfc>)
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(0, 1, "Manual", 1);
 800776a:	4a3d      	ldr	r2, [pc, #244]	; (8007860 <manual+0x100>)
 800776c:	2301      	movs	r3, #1
 800776e:	2101      	movs	r1, #1
 8007770:	2000      	movs	r0, #0
 8007772:	f7fd fe89 	bl	8005488 <OLED_ShowStringXY>
	manuals();
 8007776:	f7ff ff59 	bl	800762c <manuals>

	while (1) {

		if (SW_UP == 0) {
 800777a:	4b3a      	ldr	r3, [pc, #232]	; (8007864 <manual+0x104>)
 800777c:	2120      	movs	r1, #32
 800777e:	0018      	movs	r0, r3
 8007780:	f7fb fcb6 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007784:	1e03      	subs	r3, r0, #0
 8007786:	d124      	bne.n	80077d2 <manual+0x72>
			st();
 8007788:	f7fd fefc 	bl	8005584 <st>
			i--;
 800778c:	4b33      	ldr	r3, [pc, #204]	; (800785c <manual+0xfc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	1e5a      	subs	r2, r3, #1
 8007792:	4b32      	ldr	r3, [pc, #200]	; (800785c <manual+0xfc>)
 8007794:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 8007796:	4b31      	ldr	r3, [pc, #196]	; (800785c <manual+0xfc>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	da02      	bge.n	80077a4 <manual+0x44>
				i = 0;
 800779e:	4b2f      	ldr	r3, [pc, #188]	; (800785c <manual+0xfc>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
			}
			if (i == 2 || i == 4 || i == 7) {
 80077a4:	4b2d      	ldr	r3, [pc, #180]	; (800785c <manual+0xfc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d007      	beq.n	80077bc <manual+0x5c>
 80077ac:	4b2b      	ldr	r3, [pc, #172]	; (800785c <manual+0xfc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d003      	beq.n	80077bc <manual+0x5c>
 80077b4:	4b29      	ldr	r3, [pc, #164]	; (800785c <manual+0xfc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	d107      	bne.n	80077cc <manual+0x6c>
				oc();
 80077bc:	f7fe f980 	bl	8005ac0 <oc>
				OLED_ShowStringXY(0, 1, "Manual", 1);
 80077c0:	4a27      	ldr	r2, [pc, #156]	; (8007860 <manual+0x100>)
 80077c2:	2301      	movs	r3, #1
 80077c4:	2101      	movs	r1, #1
 80077c6:	2000      	movs	r0, #0
 80077c8:	f7fd fe5e 	bl	8005488 <OLED_ShowStringXY>

			}
			manuals();
 80077cc:	f7ff ff2e 	bl	800762c <manuals>
 80077d0:	e02a      	b.n	8007828 <manual+0xc8>

		} else if (SW_DOWN == 0) {
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <manual+0x104>)
 80077d4:	2101      	movs	r1, #1
 80077d6:	0018      	movs	r0, r3
 80077d8:	f7fb fc8a 	bl	80030f0 <HAL_GPIO_ReadPin>
 80077dc:	1e03      	subs	r3, r0, #0
 80077de:	d123      	bne.n	8007828 <manual+0xc8>
			st();
 80077e0:	f7fd fed0 	bl	8005584 <st>
			i++;
 80077e4:	4b1d      	ldr	r3, [pc, #116]	; (800785c <manual+0xfc>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <manual+0xfc>)
 80077ec:	601a      	str	r2, [r3, #0]
			if (i >= 10) {
 80077ee:	4b1b      	ldr	r3, [pc, #108]	; (800785c <manual+0xfc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	dd02      	ble.n	80077fc <manual+0x9c>
				i = 9;
 80077f6:	4b19      	ldr	r3, [pc, #100]	; (800785c <manual+0xfc>)
 80077f8:	2209      	movs	r2, #9
 80077fa:	601a      	str	r2, [r3, #0]
			}
			if (i == 3 || i == 5 || i == 8) {
 80077fc:	4b17      	ldr	r3, [pc, #92]	; (800785c <manual+0xfc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d007      	beq.n	8007814 <manual+0xb4>
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <manual+0xfc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b05      	cmp	r3, #5
 800780a:	d003      	beq.n	8007814 <manual+0xb4>
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <manual+0xfc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d107      	bne.n	8007824 <manual+0xc4>
				oc();
 8007814:	f7fe f954 	bl	8005ac0 <oc>
				OLED_ShowStringXY(0, 1, "Manual", 1);
 8007818:	4a11      	ldr	r2, [pc, #68]	; (8007860 <manual+0x100>)
 800781a:	2301      	movs	r3, #1
 800781c:	2101      	movs	r1, #1
 800781e:	2000      	movs	r0, #0
 8007820:	f7fd fe32 	bl	8005488 <OLED_ShowStringXY>

			}
			manuals();
 8007824:	f7ff ff02 	bl	800762c <manuals>

		}

		if (SW_ENTER == 0) {
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <manual+0x104>)
 800782a:	2102      	movs	r1, #2
 800782c:	0018      	movs	r0, r3
 800782e:	f7fb fc5f 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007832:	1e03      	subs	r3, r0, #0
 8007834:	d103      	bne.n	800783e <manual+0xde>
			st();
 8007836:	f7fd fea5 	bl	8005584 <st>
			return 2;
 800783a:	2302      	movs	r3, #2
 800783c:	e00b      	b.n	8007856 <manual+0xf6>

		}

		if (SW_BACK == 0) {
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <manual+0x104>)
 8007840:	2108      	movs	r1, #8
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb fc54 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007848:	1e03      	subs	r3, r0, #0
 800784a:	d196      	bne.n	800777a <manual+0x1a>
			st();
 800784c:	f7fd fe9a 	bl	8005584 <st>
			oc();
 8007850:	f7fe f936 	bl	8005ac0 <oc>
			return 3;
 8007854:	2303      	movs	r3, #3
		}

	}

}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200002f8 	.word	0x200002f8
 8007860:	0800bcd4 	.word	0x0800bcd4
 8007864:	50000400 	.word	0x50000400

08007868 <modes>:

int modes() {
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0

	OLED_ShowStringXY(0, 3, "-AUTO     ", 0 != i);
 800786c:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <modes+0x4c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1e5a      	subs	r2, r3, #1
 8007872:	4193      	sbcs	r3, r2
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <modes+0x50>)
 8007878:	2103      	movs	r1, #3
 800787a:	2000      	movs	r0, #0
 800787c:	f7fd fe04 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 5, "-SEMI-AUTO", 1 != i);
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <modes+0x4c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3b01      	subs	r3, #1
 8007886:	1e5a      	subs	r2, r3, #1
 8007888:	4193      	sbcs	r3, r2
 800788a:	b2db      	uxtb	r3, r3
 800788c:	4a0b      	ldr	r2, [pc, #44]	; (80078bc <modes+0x54>)
 800788e:	2105      	movs	r1, #5
 8007890:	2000      	movs	r0, #0
 8007892:	f7fd fdf9 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 7, "-MANUAL   ", 2 != i);
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <modes+0x4c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b02      	subs	r3, #2
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	4193      	sbcs	r3, r2
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <modes+0x58>)
 80078a4:	2107      	movs	r1, #7
 80078a6:	2000      	movs	r0, #0
 80078a8:	f7fd fdee 	bl	8005488 <OLED_ShowStringXY>

}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	0018      	movs	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200002f8 	.word	0x200002f8
 80078b8:	0800bcdc 	.word	0x0800bcdc
 80078bc:	0800bce8 	.word	0x0800bce8
 80078c0:	0800bcf4 	.word	0x0800bcf4

080078c4 <mode>:

int mode() {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0

	i = 0;
 80078c8:	4b2b      	ldr	r3, [pc, #172]	; (8007978 <mode+0xb4>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(0, 1, "Mode", 1);
 80078ce:	4a2b      	ldr	r2, [pc, #172]	; (800797c <mode+0xb8>)
 80078d0:	2301      	movs	r3, #1
 80078d2:	2101      	movs	r1, #1
 80078d4:	2000      	movs	r0, #0
 80078d6:	f7fd fdd7 	bl	8005488 <OLED_ShowStringXY>
	modes();
 80078da:	f7ff ffc5 	bl	8007868 <modes>

	while (1) {

		if (SW_UP == 0) {
 80078de:	4b28      	ldr	r3, [pc, #160]	; (8007980 <mode+0xbc>)
 80078e0:	2120      	movs	r1, #32
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7fb fc04 	bl	80030f0 <HAL_GPIO_ReadPin>
 80078e8:	1e03      	subs	r3, r0, #0
 80078ea:	d110      	bne.n	800790e <mode+0x4a>
			st();
 80078ec:	f7fd fe4a 	bl	8005584 <st>
			i--;
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <mode+0xb4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <mode+0xb4>)
 80078f8:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 80078fa:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <mode+0xb4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da02      	bge.n	8007908 <mode+0x44>
				i = 0;
 8007902:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <mode+0xb4>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
			}
			modes();
 8007908:	f7ff ffae 	bl	8007868 <modes>
 800790c:	e016      	b.n	800793c <mode+0x78>

		} else if (SW_DOWN == 0) {
 800790e:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <mode+0xbc>)
 8007910:	2101      	movs	r1, #1
 8007912:	0018      	movs	r0, r3
 8007914:	f7fb fbec 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007918:	1e03      	subs	r3, r0, #0
 800791a:	d10f      	bne.n	800793c <mode+0x78>
			st();
 800791c:	f7fd fe32 	bl	8005584 <st>
			i++;
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <mode+0xb4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <mode+0xb4>)
 8007928:	601a      	str	r2, [r3, #0]
			if (i >= 3) {
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <mode+0xb4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	dd02      	ble.n	8007938 <mode+0x74>
				i = 2;
 8007932:	4b11      	ldr	r3, [pc, #68]	; (8007978 <mode+0xb4>)
 8007934:	2202      	movs	r2, #2
 8007936:	601a      	str	r2, [r3, #0]
			}
			modes();
 8007938:	f7ff ff96 	bl	8007868 <modes>

		}

		if (SW_ENTER == 0) {
 800793c:	4b10      	ldr	r3, [pc, #64]	; (8007980 <mode+0xbc>)
 800793e:	2102      	movs	r1, #2
 8007940:	0018      	movs	r0, r3
 8007942:	f7fb fbd5 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007946:	1e03      	subs	r3, r0, #0
 8007948:	d103      	bne.n	8007952 <mode+0x8e>
			st();
 800794a:	f7fd fe1b 	bl	8005584 <st>
			return 1;
 800794e:	2301      	movs	r3, #1
 8007950:	e00f      	b.n	8007972 <mode+0xae>

		}

		if (SW_BACK == 0) {
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <mode+0xbc>)
 8007954:	2108      	movs	r1, #8
 8007956:	0018      	movs	r0, r3
 8007958:	f7fb fbca 	bl	80030f0 <HAL_GPIO_ReadPin>
 800795c:	1e03      	subs	r3, r0, #0
 800795e:	d1be      	bne.n	80078de <mode+0x1a>
			st();
 8007960:	f7fd fe10 	bl	8005584 <st>
			oc();
 8007964:	f7fe f8ac 	bl	8005ac0 <oc>
			i = 0;
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <mode+0xb4>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
			return -1;
 800796e:	2301      	movs	r3, #1
 8007970:	425b      	negs	r3, r3
		}

	}

}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	200002f8 	.word	0x200002f8
 800797c:	0800bd00 	.word	0x0800bd00
 8007980:	50000400 	.word	0x50000400

08007984 <alog>:

int alog() {
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0

	timeload = 0;
 8007988:	4b44      	ldr	r3, [pc, #272]	; (8007a9c <alog+0x118>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

	OLED_ShowStringXY(0, 0, "LOG:", 1);
 800798e:	4a44      	ldr	r2, [pc, #272]	; (8007aa0 <alog+0x11c>)
 8007990:	2301      	movs	r3, #1
 8007992:	2100      	movs	r1, #0
 8007994:	2000      	movs	r0, #0
 8007996:	f7fd fd77 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(4, 0, tida[i], 1);
 800799a:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <alog+0x120>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	0013      	movs	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	189b      	adds	r3, r3, r2
 80079a4:	009a      	lsls	r2, r3, #2
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <alog+0x124>)
 80079aa:	189a      	adds	r2, r3, r2
 80079ac:	2301      	movs	r3, #1
 80079ae:	2100      	movs	r1, #0
 80079b0:	2004      	movs	r0, #4
 80079b2:	f7fd fd69 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 1, mods[i], 1);
 80079b6:	4b3b      	ldr	r3, [pc, #236]	; (8007aa4 <alog+0x120>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	0013      	movs	r3, r2
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4a3a      	ldr	r2, [pc, #232]	; (8007aac <alog+0x128>)
 80079c4:	189a      	adds	r2, r3, r2
 80079c6:	2301      	movs	r3, #1
 80079c8:	2101      	movs	r1, #1
 80079ca:	2000      	movs	r0, #0
 80079cc:	f7fd fd5c 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 2, ltime[i], 1);
 80079d0:	4b34      	ldr	r3, [pc, #208]	; (8007aa4 <alog+0x120>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	0013      	movs	r3, r2
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4a34      	ldr	r2, [pc, #208]	; (8007ab0 <alog+0x12c>)
 80079de:	189a      	adds	r2, r3, r2
 80079e0:	2301      	movs	r3, #1
 80079e2:	2102      	movs	r1, #2
 80079e4:	2000      	movs	r0, #0
 80079e6:	f7fd fd4f 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(12, 2, lwe[i], 1);
 80079ea:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <alog+0x120>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	0013      	movs	r3, r2
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4a2f      	ldr	r2, [pc, #188]	; (8007ab4 <alog+0x130>)
 80079f8:	189a      	adds	r2, r3, r2
 80079fa:	2301      	movs	r3, #1
 80079fc:	2102      	movs	r1, #2
 80079fe:	200c      	movs	r0, #12
 8007a00:	f7fd fd42 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 4, lvel[i], 1);
 8007a04:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <alog+0x120>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	0013      	movs	r3, r2
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <alog+0x134>)
 8007a12:	189a      	adds	r2, r3, r2
 8007a14:	2301      	movs	r3, #1
 8007a16:	2104      	movs	r1, #4
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f7fd fd35 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 6, lpc[i], 1);
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <alog+0x120>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	0013      	movs	r3, r2
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4a24      	ldr	r2, [pc, #144]	; (8007abc <alog+0x138>)
 8007a2c:	189a      	adds	r2, r3, r2
 8007a2e:	2301      	movs	r3, #1
 8007a30:	2106      	movs	r1, #6
 8007a32:	2000      	movs	r0, #0
 8007a34:	f7fd fd28 	bl	8005488 <OLED_ShowStringXY>

	while (1) {

		if (SW_UP == 0) {
 8007a38:	4b21      	ldr	r3, [pc, #132]	; (8007ac0 <alog+0x13c>)
 8007a3a:	2120      	movs	r1, #32
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7fb fb57 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007a42:	1e03      	subs	r3, r0, #0
 8007a44:	d102      	bne.n	8007a4c <alog+0xc8>
			error();
 8007a46:	f7fd fde3 	bl	8005610 <error>
 8007a4a:	e008      	b.n	8007a5e <alog+0xda>

		} else if (SW_DOWN == 0) {
 8007a4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <alog+0x13c>)
 8007a4e:	2101      	movs	r1, #1
 8007a50:	0018      	movs	r0, r3
 8007a52:	f7fb fb4d 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007a56:	1e03      	subs	r3, r0, #0
 8007a58:	d101      	bne.n	8007a5e <alog+0xda>
			error();
 8007a5a:	f7fd fdd9 	bl	8005610 <error>

		}

		if (SW_ENTER == 0) {
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <alog+0x13c>)
 8007a60:	2102      	movs	r1, #2
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7fb fb44 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007a68:	1e03      	subs	r3, r0, #0
 8007a6a:	d101      	bne.n	8007a70 <alog+0xec>
			error();
 8007a6c:	f7fd fdd0 	bl	8005610 <error>

		}

		if (SW_BACK == 0) {
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <alog+0x13c>)
 8007a72:	2108      	movs	r1, #8
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7fb fb3b 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d1dc      	bne.n	8007a38 <alog+0xb4>
			st();
 8007a7e:	f7fd fd81 	bl	8005584 <st>
			OLED_Clear();
 8007a82:	f7fd fa83 	bl	8004f8c <OLED_Clear>
			i = 2;
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <alog+0x120>)
 8007a88:	2202      	movs	r2, #2
 8007a8a:	601a      	str	r2, [r3, #0]
			timeload = 1;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <alog+0x118>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
			return 0;
 8007a92:	2300      	movs	r3, #0
		}

	}

}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	20000000 	.word	0x20000000
 8007aa0:	0800bd08 	.word	0x0800bd08
 8007aa4:	200002f8 	.word	0x200002f8
 8007aa8:	2000039c 	.word	0x2000039c
 8007aac:	200003e8 	.word	0x200003e8
 8007ab0:	200004a0 	.word	0x200004a0
 8007ab4:	20000444 	.word	0x20000444
 8007ab8:	200004fc 	.word	0x200004fc
 8007abc:	20000558 	.word	0x20000558
 8007ac0:	50000400 	.word	0x50000400

08007ac4 <logsui>:

void logsui() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0

	OLED_ShowStringXY(0, 3, "1.", 0 != i);
 8007ac8:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <logsui+0x8c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	1e5a      	subs	r2, r3, #1
 8007ace:	4193      	sbcs	r3, r2
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	4a20      	ldr	r2, [pc, #128]	; (8007b54 <logsui+0x90>)
 8007ad4:	2103      	movs	r1, #3
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f7fd fcd6 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 5, "2.", 1 != i);
 8007adc:	4b1c      	ldr	r3, [pc, #112]	; (8007b50 <logsui+0x8c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	1e5a      	subs	r2, r3, #1
 8007ae4:	4193      	sbcs	r3, r2
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <logsui+0x94>)
 8007aea:	2105      	movs	r1, #5
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7fd fccb 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 7, "3.", 2 != i);
 8007af2:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <logsui+0x8c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3b02      	subs	r3, #2
 8007af8:	1e5a      	subs	r2, r3, #1
 8007afa:	4193      	sbcs	r3, r2
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <logsui+0x98>)
 8007b00:	2107      	movs	r1, #7
 8007b02:	2000      	movs	r0, #0
 8007b04:	f7fd fcc0 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(2, 3, tida[0], 0 != i);
 8007b08:	4b11      	ldr	r3, [pc, #68]	; (8007b50 <logsui+0x8c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	1e5a      	subs	r2, r3, #1
 8007b0e:	4193      	sbcs	r3, r2
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <logsui+0x9c>)
 8007b14:	2103      	movs	r1, #3
 8007b16:	2002      	movs	r0, #2
 8007b18:	f7fd fcb6 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(2, 5, tida[1], 1 != i);
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <logsui+0x8c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	1e5a      	subs	r2, r3, #1
 8007b24:	4193      	sbcs	r3, r2
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4a0e      	ldr	r2, [pc, #56]	; (8007b64 <logsui+0xa0>)
 8007b2a:	2105      	movs	r1, #5
 8007b2c:	2002      	movs	r0, #2
 8007b2e:	f7fd fcab 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(2, 7, tida[2], 2 != i);
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <logsui+0x8c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3b02      	subs	r3, #2
 8007b38:	1e5a      	subs	r2, r3, #1
 8007b3a:	4193      	sbcs	r3, r2
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4a0a      	ldr	r2, [pc, #40]	; (8007b68 <logsui+0xa4>)
 8007b40:	2107      	movs	r1, #7
 8007b42:	2002      	movs	r0, #2
 8007b44:	f7fd fca0 	bl	8005488 <OLED_ShowStringXY>

}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	200002f8 	.word	0x200002f8
 8007b54:	0800bd10 	.word	0x0800bd10
 8007b58:	0800bd14 	.word	0x0800bd14
 8007b5c:	0800bd18 	.word	0x0800bd18
 8007b60:	2000039c 	.word	0x2000039c
 8007b64:	200003b5 	.word	0x200003b5
 8007b68:	200003ce 	.word	0x200003ce

08007b6c <logs>:

//sprintf(tida[0], "%02ld-%02d-%02d %02d:%02d:%02d", yea, mon, day, h, m, s);
//sprintf(tida[1], "%02ld-%02d-%02d %02d:%02d:%02d", yea, mon, day, h, m, s);
//sprintf(tida[2], "%02ld-%02d-%02d %02d:%02d:%02d", yea, mon, day, h, m, s);

int logs() {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0

	i = 0;
 8007b70:	4b2e      	ldr	r3, [pc, #184]	; (8007c2c <logs+0xc0>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	timeload = 0;
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <logs+0xc4>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
	OLED_ShowStringXY(7, 0, "LOG MENU", 1);
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <logs+0xc8>)
 8007b7e:	2301      	movs	r3, #1
 8007b80:	2100      	movs	r1, #0
 8007b82:	2007      	movs	r0, #7
 8007b84:	f7fd fc80 	bl	8005488 <OLED_ShowStringXY>
	logsui();
 8007b88:	f7ff ff9c 	bl	8007ac4 <logsui>

	while (1) {

		if (SW_UP == 0) {
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <logs+0xcc>)
 8007b8e:	2120      	movs	r1, #32
 8007b90:	0018      	movs	r0, r3
 8007b92:	f7fb faad 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007b96:	1e03      	subs	r3, r0, #0
 8007b98:	d110      	bne.n	8007bbc <logs+0x50>
			st();
 8007b9a:	f7fd fcf3 	bl	8005584 <st>
			i--;
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <logs+0xc0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	1e5a      	subs	r2, r3, #1
 8007ba4:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <logs+0xc0>)
 8007ba6:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 8007ba8:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <logs+0xc0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da02      	bge.n	8007bb6 <logs+0x4a>
				i = 0;
 8007bb0:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <logs+0xc0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
			}
			logsui();
 8007bb6:	f7ff ff85 	bl	8007ac4 <logsui>
 8007bba:	e016      	b.n	8007bea <logs+0x7e>

		} else if (SW_DOWN == 0) {
 8007bbc:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <logs+0xcc>)
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f7fb fa95 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007bc6:	1e03      	subs	r3, r0, #0
 8007bc8:	d10f      	bne.n	8007bea <logs+0x7e>
			st();
 8007bca:	f7fd fcdb 	bl	8005584 <st>
			i++;
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <logs+0xc0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <logs+0xc0>)
 8007bd6:	601a      	str	r2, [r3, #0]
			if (i >= 3) {
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <logs+0xc0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	dd02      	ble.n	8007be6 <logs+0x7a>
				i = 2;
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <logs+0xc0>)
 8007be2:	2202      	movs	r2, #2
 8007be4:	601a      	str	r2, [r3, #0]
			}
			logsui();
 8007be6:	f7ff ff6d 	bl	8007ac4 <logsui>

		}

		if (SW_ENTER == 0) {
 8007bea:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <logs+0xcc>)
 8007bec:	2102      	movs	r1, #2
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f7fb fa7e 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d105      	bne.n	8007c04 <logs+0x98>
			st();
 8007bf8:	f7fd fcc4 	bl	8005584 <st>
			OLED_Clear();
 8007bfc:	f7fd f9c6 	bl	8004f8c <OLED_Clear>

			return 8;
 8007c00:	2308      	movs	r3, #8
 8007c02:	e00f      	b.n	8007c24 <logs+0xb8>

		}

		if (SW_BACK == 0) {
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <logs+0xcc>)
 8007c06:	2108      	movs	r1, #8
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f7fb fa71 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007c0e:	1e03      	subs	r3, r0, #0
 8007c10:	d1bc      	bne.n	8007b8c <logs+0x20>
			st();
 8007c12:	f7fd fcb7 	bl	8005584 <st>
			OLED_Clear();
 8007c16:	f7fd f9b9 	bl	8004f8c <OLED_Clear>
			i = 0;
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <logs+0xc0>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
			return -1;
 8007c20:	2301      	movs	r3, #1
 8007c22:	425b      	negs	r3, r3
		}

	}

}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	200002f8 	.word	0x200002f8
 8007c30:	20000000 	.word	0x20000000
 8007c34:	0800bd1c 	.word	0x0800bd1c
 8007c38:	50000400 	.word	0x50000400

08007c3c <wait>:

void wait() {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
	int a;
	a = 60000 * l;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <wait+0x14>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a03      	ldr	r2, [pc, #12]	; (8007c54 <wait+0x18>)
 8007c48:	4353      	muls	r3, r2
 8007c4a:	607b      	str	r3, [r7, #4]
	while (1) {
 8007c4c:	e7fe      	b.n	8007c4c <wait+0x10>
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	2000030c 	.word	0x2000030c
 8007c54:	0000ea60 	.word	0x0000ea60

08007c58 <revtiui>:

	}

}

void revtiui() {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0

	if (l == 0) {
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <revtiui+0x3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <revtiui+0x1a>
		sprintf(revtime, "TIME:NOW       ");
 8007c64:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <revtiui+0x40>)
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <revtiui+0x44>)
 8007c68:	0011      	movs	r1, r2
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f001 fc12 	bl	8009494 <siprintf>
 8007c70:	e006      	b.n	8007c80 <revtiui+0x28>
	} else {
		sprintf(revtime, "TIME:%02dminute", l);
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <revtiui+0x3c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	490a      	ldr	r1, [pc, #40]	; (8007ca0 <revtiui+0x48>)
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <revtiui+0x44>)
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f001 fc0a 	bl	8009494 <siprintf>
	}

	OLED_ShowBigStringXY(0, 4, revtime, 1);
 8007c80:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <revtiui+0x44>)
 8007c82:	2301      	movs	r3, #1
 8007c84:	2104      	movs	r1, #4
 8007c86:	2000      	movs	r0, #0
 8007c88:	f7fd fc17 	bl	80054ba <OLED_ShowBigStringXY>

}
 8007c8c:	46c0      	nop			; (mov r8, r8)
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	2000030c 	.word	0x2000030c
 8007c98:	0800bd28 	.word	0x0800bd28
 8007c9c:	20000320 	.word	0x20000320
 8007ca0:	0800bd38 	.word	0x0800bd38

08007ca4 <rev>:

void rev() {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
	timeload = 0;
 8007ca8:	4b2e      	ldr	r3, [pc, #184]	; (8007d64 <rev+0xc0>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
	OLED_Clear();
 8007cae:	f7fd f96d 	bl	8004f8c <OLED_Clear>
	OLED_ShowBigStringXY(2, 0, "RESERVATION", 1);
 8007cb2:	4a2d      	ldr	r2, [pc, #180]	; (8007d68 <rev+0xc4>)
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2002      	movs	r0, #2
 8007cba:	f7fd fbfe 	bl	80054ba <OLED_ShowBigStringXY>
	revtiui();
 8007cbe:	f7ff ffcb 	bl	8007c58 <revtiui>

	while (1) {

		if (SW_UP == 0) {
 8007cc2:	4b2a      	ldr	r3, [pc, #168]	; (8007d6c <rev+0xc8>)
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f7fb fa12 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007ccc:	1e03      	subs	r3, r0, #0
 8007cce:	d110      	bne.n	8007cf2 <rev+0x4e>
			st();
 8007cd0:	f7fd fc58 	bl	8005584 <st>
			l++;
 8007cd4:	4b26      	ldr	r3, [pc, #152]	; (8007d70 <rev+0xcc>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <rev+0xcc>)
 8007cdc:	601a      	str	r2, [r3, #0]
			if (l >= 11) {
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <rev+0xcc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b0a      	cmp	r3, #10
 8007ce4:	dd02      	ble.n	8007cec <rev+0x48>
				l = 10;
 8007ce6:	4b22      	ldr	r3, [pc, #136]	; (8007d70 <rev+0xcc>)
 8007ce8:	220a      	movs	r2, #10
 8007cea:	601a      	str	r2, [r3, #0]
			}
			revtiui();
 8007cec:	f7ff ffb4 	bl	8007c58 <revtiui>
 8007cf0:	e016      	b.n	8007d20 <rev+0x7c>

		} else if (SW_DOWN == 0) {
 8007cf2:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <rev+0xc8>)
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f7fb f9fa 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007cfc:	1e03      	subs	r3, r0, #0
 8007cfe:	d10f      	bne.n	8007d20 <rev+0x7c>
			st();
 8007d00:	f7fd fc40 	bl	8005584 <st>
			l--;
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <rev+0xcc>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	1e5a      	subs	r2, r3, #1
 8007d0a:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <rev+0xcc>)
 8007d0c:	601a      	str	r2, [r3, #0]
			if (l <= -1) {
 8007d0e:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <rev+0xcc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da02      	bge.n	8007d1c <rev+0x78>
				l = 0;
 8007d16:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <rev+0xcc>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
			}
			revtiui();
 8007d1c:	f7ff ff9c 	bl	8007c58 <revtiui>
		}

		if (SW_ENTER == 0) {
 8007d20:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <rev+0xc8>)
 8007d22:	2102      	movs	r1, #2
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7fb f9e3 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007d2a:	1e03      	subs	r3, r0, #0
 8007d2c:	d10d      	bne.n	8007d4a <rev+0xa6>
			st();
 8007d2e:	f7fd fc29 	bl	8005584 <st>
			if (l >= 1) {
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <rev+0xcc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dd01      	ble.n	8007d3e <rev+0x9a>
				wait();
 8007d3a:	f7ff ff7f 	bl	8007c3c <wait>
			}
			timeload = 1;
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <rev+0xc0>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
			OLED_Clear();
 8007d44:	f7fd f922 	bl	8004f8c <OLED_Clear>
			return;
 8007d48:	e009      	b.n	8007d5e <rev+0xba>
		}

		if (SW_BACK == 0) {
 8007d4a:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <rev+0xc8>)
 8007d4c:	2108      	movs	r1, #8
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f7fb f9ce 	bl	80030f0 <HAL_GPIO_ReadPin>
 8007d54:	1e03      	subs	r3, r0, #0
 8007d56:	d1b4      	bne.n	8007cc2 <rev+0x1e>
			error();
 8007d58:	f7fd fc5a 	bl	8005610 <error>
		if (SW_UP == 0) {
 8007d5c:	e7b1      	b.n	8007cc2 <rev+0x1e>
		}

	}

}
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	20000000 	.word	0x20000000
 8007d68:	0800bd48 	.word	0x0800bd48
 8007d6c:	50000400 	.word	0x50000400
 8007d70:	2000030c 	.word	0x2000030c

08007d74 <wg>:

void wg(int j) {
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	b089      	sub	sp, #36	; 0x24
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	6078      	str	r0, [r7, #4]

	int n;

	while (1) {

		if (j == -1) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	d12a      	bne.n	8007dd8 <wg+0x64>

			if (timeload == 1) {
 8007d82:	4bbc      	ldr	r3, [pc, #752]	; (8008074 <wg+0x300>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d113      	bne.n	8007db2 <wg+0x3e>
				OLED_Set_Pos(0, 1);
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f7fd f994 	bl	80050ba <OLED_Set_Pos>
				for (n = 0; n < 128; n++)
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e005      	b.n	8007da4 <wg+0x30>
					IIC_Writedata(1);
 8007d98:	2001      	movs	r0, #1
 8007d9a:	f7fd f8df 	bl	8004f5c <IIC_Writedata>
				for (n = 0; n < 128; n++)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b7f      	cmp	r3, #127	; 0x7f
 8007da8:	ddf6      	ble.n	8007d98 <wg+0x24>
				OLED_Set_Pos(0, 0);
 8007daa:	2100      	movs	r1, #0
 8007dac:	2000      	movs	r0, #0
 8007dae:	f7fd f984 	bl	80050ba <OLED_Set_Pos>
			}

			OLED_ShowStringXY(0, 2, "Menu", 1);
 8007db2:	4ab1      	ldr	r2, [pc, #708]	; (8008078 <wg+0x304>)
 8007db4:	2301      	movs	r3, #1
 8007db6:	2102      	movs	r1, #2
 8007db8:	2000      	movs	r0, #0
 8007dba:	f7fd fb65 	bl	8005488 <OLED_ShowStringXY>
			OLED_ShowStringXY(0, 4, "-ENTER    ", 0);
 8007dbe:	4aaf      	ldr	r2, [pc, #700]	; (800807c <wg+0x308>)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f7fd fb5f 	bl	8005488 <OLED_ShowStringXY>
			OLED_ShowStringXY(0, 6, "-LOG      ", 1);
 8007dca:	4aad      	ldr	r2, [pc, #692]	; (8008080 <wg+0x30c>)
 8007dcc:	2301      	movs	r3, #1
 8007dce:	2106      	movs	r1, #6
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f7fd fb59 	bl	8005488 <OLED_ShowStringXY>

			return;
 8007dd6:	e333      	b.n	8008440 <wg+0x6cc>
		}

		if (j == 0) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d113      	bne.n	8007e06 <wg+0x92>

			if (i == 0) {
 8007dde:	4ba9      	ldr	r3, [pc, #676]	; (8008084 <wg+0x310>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <wg+0x80>
				oc();
 8007de6:	f7fd fe6b 	bl	8005ac0 <oc>
				j = mode();
 8007dea:	f7ff fd6b 	bl	80078c4 <mode>
 8007dee:	0003      	movs	r3, r0
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	e008      	b.n	8007e06 <wg+0x92>

			} else {
				OLED_Clear();
 8007df4:	f7fd f8ca 	bl	8004f8c <OLED_Clear>
				j = logs();
 8007df8:	f7ff feb8 	bl	8007b6c <logs>
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	607b      	str	r3, [r7, #4]
				timeload = 1;
 8007e00:	4b9c      	ldr	r3, [pc, #624]	; (8008074 <wg+0x300>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

			}

		}

		if (j == 1) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11b      	bne.n	8007e44 <wg+0xd0>

			if (i == 0) {
 8007e0c:	4b9d      	ldr	r3, [pc, #628]	; (8008084 <wg+0x310>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d106      	bne.n	8007e22 <wg+0xae>
				oc();
 8007e14:	f7fd fe54 	bl	8005ac0 <oc>
				j = sautorep();
 8007e18:	f7ff f9ea 	bl	80071f0 <sautorep>
 8007e1c:	0003      	movs	r3, r0
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	e010      	b.n	8007e44 <wg+0xd0>

			} else if (i == 1) {
 8007e22:	4b98      	ldr	r3, [pc, #608]	; (8008084 <wg+0x310>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d106      	bne.n	8007e38 <wg+0xc4>
				oc();
 8007e2a:	f7fd fe49 	bl	8005ac0 <oc>
				j = semi();
 8007e2e:	f7ff fa6b 	bl	8007308 <semi>
 8007e32:	0003      	movs	r3, r0
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	e005      	b.n	8007e44 <wg+0xd0>

			} else {
				oc();
 8007e38:	f7fd fe42 	bl	8005ac0 <oc>
				j = manual();
 8007e3c:	f7ff fc90 	bl	8007760 <manual>
 8007e40:	0003      	movs	r3, r0
 8007e42:	607b      	str	r3, [r7, #4]

			}

		}

		if (j == 2) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d154      	bne.n	8007ef4 <wg+0x180>
			oc();
 8007e4a:	f7fd fe39 	bl	8005ac0 <oc>

			switch (i) {
 8007e4e:	4b8d      	ldr	r3, [pc, #564]	; (8008084 <wg+0x310>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d84a      	bhi.n	8007eec <wg+0x178>
 8007e56:	009a      	lsls	r2, r3, #2
 8007e58:	4b8b      	ldr	r3, [pc, #556]	; (8008088 <wg+0x314>)
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	469f      	mov	pc, r3

			case 0:
				OLED_ShowStringXY(0, 1, "Manual-FWD", 1);
 8007e60:	4a8a      	ldr	r2, [pc, #552]	; (800808c <wg+0x318>)
 8007e62:	2301      	movs	r3, #1
 8007e64:	2101      	movs	r1, #1
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7fd fb0e 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007e6c:	e03e      	b.n	8007eec <wg+0x178>

			case 1:
				OLED_ShowStringXY(0, 1, "Manual-REV", 1);
 8007e6e:	4a88      	ldr	r2, [pc, #544]	; (8008090 <wg+0x31c>)
 8007e70:	2301      	movs	r3, #1
 8007e72:	2101      	movs	r1, #1
 8007e74:	2000      	movs	r0, #0
 8007e76:	f7fd fb07 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007e7a:	e037      	b.n	8007eec <wg+0x178>

			case 2:
				OLED_ShowStringXY(0, 1, "Manual-DRYER", 1);
 8007e7c:	4a85      	ldr	r2, [pc, #532]	; (8008094 <wg+0x320>)
 8007e7e:	2301      	movs	r3, #1
 8007e80:	2101      	movs	r1, #1
 8007e82:	2000      	movs	r0, #0
 8007e84:	f7fd fb00 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007e88:	e030      	b.n	8007eec <wg+0x178>

			case 3:
				OLED_ShowStringXY(0, 1, "Manual-HEAT", 1);
 8007e8a:	4a83      	ldr	r2, [pc, #524]	; (8008098 <wg+0x324>)
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	2101      	movs	r1, #1
 8007e90:	2000      	movs	r0, #0
 8007e92:	f7fd faf9 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007e96:	e029      	b.n	8007eec <wg+0x178>

			case 4:
				OLED_ShowStringXY(0, 1, "Manual-HI-SPEED", 1);
 8007e98:	4a80      	ldr	r2, [pc, #512]	; (800809c <wg+0x328>)
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f7fd faf2 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007ea4:	e022      	b.n	8007eec <wg+0x178>

			case 5:
				OLED_ShowStringXY(0, 1, "Manual-Win", 1);
 8007ea6:	4a7e      	ldr	r2, [pc, #504]	; (80080a0 <wg+0x32c>)
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	2101      	movs	r1, #1
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7fd faeb 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007eb2:	e01b      	b.n	8007eec <wg+0x178>

			case 6:
				OLED_ShowStringXY(0, 1, "Manual-Wout", 1);
 8007eb4:	4a7b      	ldr	r2, [pc, #492]	; (80080a4 <wg+0x330>)
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	2101      	movs	r1, #1
 8007eba:	2000      	movs	r0, #0
 8007ebc:	f7fd fae4 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007ec0:	e014      	b.n	8007eec <wg+0x178>

			case 7:
				OLED_ShowStringXY(0, 1, "Manual-LOCK", 1);
 8007ec2:	4a79      	ldr	r2, [pc, #484]	; (80080a8 <wg+0x334>)
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f7fd fadd 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007ece:	e00d      	b.n	8007eec <wg+0x178>

			case 8:
				OLED_ShowStringXY(0, 1, "Manual-DETE", 1);
 8007ed0:	4a76      	ldr	r2, [pc, #472]	; (80080ac <wg+0x338>)
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f7fd fad6 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007edc:	e006      	b.n	8007eec <wg+0x178>

			case 9:
				OLED_ShowStringXY(0, 1, "Manual-SOFT", 1);
 8007ede:	4a74      	ldr	r2, [pc, #464]	; (80080b0 <wg+0x33c>)
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f7fd facf 	bl	8005488 <OLED_ShowStringXY>
				break;
 8007eea:	46c0      	nop			; (mov r8, r8)

			}
			j = manualleds();
 8007eec:	f7ff fb2a 	bl	8007544 <manualleds>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	607b      	str	r3, [r7, #4]

		}

		if (j == 3) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d103      	bne.n	8007f02 <wg+0x18e>

			j = mode();
 8007efa:	f7ff fce3 	bl	80078c4 <mode>
 8007efe:	0003      	movs	r3, r0
 8007f00:	607b      	str	r3, [r7, #4]

		}

		if (j == 4) {
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d103      	bne.n	8007f10 <wg+0x19c>

			j = manual();
 8007f08:	f7ff fc2a 	bl	8007760 <manual>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	607b      	str	r3, [r7, #4]

		}

		if (j == 5) {
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d124      	bne.n	8007f60 <wg+0x1ec>
			oc();
 8007f16:	f7fd fdd3 	bl	8005ac0 <oc>

			switch (i) {
 8007f1a:	4b5a      	ldr	r3, [pc, #360]	; (8008084 <wg+0x310>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d013      	beq.n	8007f4a <wg+0x1d6>
 8007f22:	dc19      	bgt.n	8007f58 <wg+0x1e4>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <wg+0x1ba>
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d007      	beq.n	8007f3c <wg+0x1c8>
 8007f2c:	e014      	b.n	8007f58 <wg+0x1e4>

			case 0:
				OLED_ShowStringXY(0, 1, "Semi-Wash", 1);
 8007f2e:	4a61      	ldr	r2, [pc, #388]	; (80080b4 <wg+0x340>)
 8007f30:	2301      	movs	r3, #1
 8007f32:	2101      	movs	r1, #1
 8007f34:	2000      	movs	r0, #0
 8007f36:	f7fd faa7 	bl	8005488 <OLED_ShowStringXY>

				break;
 8007f3a:	e00d      	b.n	8007f58 <wg+0x1e4>

			case 1:
				OLED_ShowStringXY(0, 1, "Semi-Rinse", 1);
 8007f3c:	4a5e      	ldr	r2, [pc, #376]	; (80080b8 <wg+0x344>)
 8007f3e:	2301      	movs	r3, #1
 8007f40:	2101      	movs	r1, #1
 8007f42:	2000      	movs	r0, #0
 8007f44:	f7fd faa0 	bl	8005488 <OLED_ShowStringXY>

				break;
 8007f48:	e006      	b.n	8007f58 <wg+0x1e4>

			case 2:
				OLED_ShowStringXY(0, 1, "Semi-Dry", 1);
 8007f4a:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <wg+0x348>)
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	2101      	movs	r1, #1
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7fd fa99 	bl	8005488 <OLED_ShowStringXY>

				break;
 8007f56:	46c0      	nop			; (mov r8, r8)

			}

			j = semirep();
 8007f58:	f7ff f898 	bl	800708c <semirep>
 8007f5c:	0003      	movs	r3, r0
 8007f5e:	607b      	str	r3, [r7, #4]

		}

		if (j == 6) {
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d000      	beq.n	8007f68 <wg+0x1f4>
 8007f66:	e170      	b.n	800824a <wg+0x4d6>

			oc();
 8007f68:	f7fd fdaa 	bl	8005ac0 <oc>
			rev();
 8007f6c:	f7ff fe9a 	bl	8007ca4 <rev>
			oc();
 8007f70:	f7fd fda6 	bl	8005ac0 <oc>
			sprintf(tida[2], "%s", tida[1]);
 8007f74:	4a52      	ldr	r2, [pc, #328]	; (80080c0 <wg+0x34c>)
 8007f76:	4953      	ldr	r1, [pc, #332]	; (80080c4 <wg+0x350>)
 8007f78:	4b53      	ldr	r3, [pc, #332]	; (80080c8 <wg+0x354>)
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f001 fa8a 	bl	8009494 <siprintf>
			sprintf(tida[1], "%s", tida[0]);
 8007f80:	4a52      	ldr	r2, [pc, #328]	; (80080cc <wg+0x358>)
 8007f82:	4950      	ldr	r1, [pc, #320]	; (80080c4 <wg+0x350>)
 8007f84:	4b4e      	ldr	r3, [pc, #312]	; (80080c0 <wg+0x34c>)
 8007f86:	0018      	movs	r0, r3
 8007f88:	f001 fa84 	bl	8009494 <siprintf>
			sprintf(tida[0], "%02ld-%02d-%02d %02d:%02d:%02d", yea, mon, day, h,
 8007f8c:	4b50      	ldr	r3, [pc, #320]	; (80080d0 <wg+0x35c>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b50      	ldr	r3, [pc, #320]	; (80080d4 <wg+0x360>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	469c      	mov	ip, r3
 8007f96:	4b50      	ldr	r3, [pc, #320]	; (80080d8 <wg+0x364>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	001c      	movs	r4, r3
 8007f9c:	4b4f      	ldr	r3, [pc, #316]	; (80080dc <wg+0x368>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	001d      	movs	r5, r3
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	; (80080e0 <wg+0x36c>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	001e      	movs	r6, r3
 8007fa8:	4b4e      	ldr	r3, [pc, #312]	; (80080e4 <wg+0x370>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	494e      	ldr	r1, [pc, #312]	; (80080e8 <wg+0x374>)
 8007fae:	4847      	ldr	r0, [pc, #284]	; (80080cc <wg+0x358>)
 8007fb0:	9303      	str	r3, [sp, #12]
 8007fb2:	9602      	str	r6, [sp, #8]
 8007fb4:	9501      	str	r5, [sp, #4]
 8007fb6:	9400      	str	r4, [sp, #0]
 8007fb8:	4663      	mov	r3, ip
 8007fba:	f001 fa6b 	bl	8009494 <siprintf>
					m, s);

			tc[4] = 0;
 8007fbe:	4b4b      	ldr	r3, [pc, #300]	; (80080ec <wg+0x378>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	611a      	str	r2, [r3, #16]

			switch (i) {
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <wg+0x310>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d100      	bne.n	8007fce <wg+0x25a>
 8007fcc:	e0a2      	b.n	8008114 <wg+0x3a0>
 8007fce:	dd00      	ble.n	8007fd2 <wg+0x25e>
 8007fd0:	e0cf      	b.n	8008172 <wg+0x3fe>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <wg+0x268>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d01d      	beq.n	8008016 <wg+0x2a2>
 8007fda:	e0ca      	b.n	8008172 <wg+0x3fe>

			case 0:
				OLED_ShowStringXY(0, 2, "Semi-Wash", 1);
 8007fdc:	4a35      	ldr	r2, [pc, #212]	; (80080b4 <wg+0x340>)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f7fd fa50 	bl	8005488 <OLED_ShowStringXY>
				sprintf(mods[2], "%s", mods[1]);
 8007fe8:	4a41      	ldr	r2, [pc, #260]	; (80080f0 <wg+0x37c>)
 8007fea:	4936      	ldr	r1, [pc, #216]	; (80080c4 <wg+0x350>)
 8007fec:	4b41      	ldr	r3, [pc, #260]	; (80080f4 <wg+0x380>)
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f001 fa50 	bl	8009494 <siprintf>
				sprintf(mods[1], "%s", mods[0]);
 8007ff4:	4a40      	ldr	r2, [pc, #256]	; (80080f8 <wg+0x384>)
 8007ff6:	4933      	ldr	r1, [pc, #204]	; (80080c4 <wg+0x350>)
 8007ff8:	4b3d      	ldr	r3, [pc, #244]	; (80080f0 <wg+0x37c>)
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f001 fa4a 	bl	8009494 <siprintf>
				sprintf(mods[0], "Semi-Wash");
 8008000:	4a2c      	ldr	r2, [pc, #176]	; (80080b4 <wg+0x340>)
 8008002:	4b3d      	ldr	r3, [pc, #244]	; (80080f8 <wg+0x384>)
 8008004:	0011      	movs	r1, r2
 8008006:	0018      	movs	r0, r3
 8008008:	f001 fa44 	bl	8009494 <siprintf>
				j = semiw();
 800800c:	f7fe fc2a 	bl	8006864 <semiw>
 8008010:	0003      	movs	r3, r0
 8008012:	607b      	str	r3, [r7, #4]

				break;
 8008014:	e0ad      	b.n	8008172 <wg+0x3fe>

			case 1:
				OLED_ShowStringXY(0, 2, "Semi-Rinse", 1);
 8008016:	4a28      	ldr	r2, [pc, #160]	; (80080b8 <wg+0x344>)
 8008018:	2301      	movs	r3, #1
 800801a:	2102      	movs	r1, #2
 800801c:	2000      	movs	r0, #0
 800801e:	f7fd fa33 	bl	8005488 <OLED_ShowStringXY>
				sprintf(mods[2], "%s", mods[1]);
 8008022:	4a33      	ldr	r2, [pc, #204]	; (80080f0 <wg+0x37c>)
 8008024:	4927      	ldr	r1, [pc, #156]	; (80080c4 <wg+0x350>)
 8008026:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <wg+0x380>)
 8008028:	0018      	movs	r0, r3
 800802a:	f001 fa33 	bl	8009494 <siprintf>
				sprintf(mods[1], "%s", mods[0]);
 800802e:	4a32      	ldr	r2, [pc, #200]	; (80080f8 <wg+0x384>)
 8008030:	4924      	ldr	r1, [pc, #144]	; (80080c4 <wg+0x350>)
 8008032:	4b2f      	ldr	r3, [pc, #188]	; (80080f0 <wg+0x37c>)
 8008034:	0018      	movs	r0, r3
 8008036:	f001 fa2d 	bl	8009494 <siprintf>
				sprintf(mods[0], "Semi-Rinse");
 800803a:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <wg+0x344>)
 800803c:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <wg+0x384>)
 800803e:	0011      	movs	r1, r2
 8008040:	0018      	movs	r0, r3
 8008042:	f001 fa27 	bl	8009494 <siprintf>
				j = semir();
 8008046:	f7fe fa9d 	bl	8006584 <semir>
 800804a:	0003      	movs	r3, r0
 800804c:	607b      	str	r3, [r7, #4]
				sprintf(lpc[2], "%s", lpc[1]);
 800804e:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <wg+0x388>)
 8008050:	491c      	ldr	r1, [pc, #112]	; (80080c4 <wg+0x350>)
 8008052:	4b2b      	ldr	r3, [pc, #172]	; (8008100 <wg+0x38c>)
 8008054:	0018      	movs	r0, r3
 8008056:	f001 fa1d 	bl	8009494 <siprintf>
				sprintf(lpc[1], "%s", lpc[0]);
 800805a:	4a2a      	ldr	r2, [pc, #168]	; (8008104 <wg+0x390>)
 800805c:	4919      	ldr	r1, [pc, #100]	; (80080c4 <wg+0x350>)
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <wg+0x388>)
 8008060:	0018      	movs	r0, r3
 8008062:	f001 fa17 	bl	8009494 <siprintf>
				sprintf(lpc[0], "Power cost:%.2lf kw.h", 8 * 0.05);
 8008066:	4a28      	ldr	r2, [pc, #160]	; (8008108 <wg+0x394>)
 8008068:	4b28      	ldr	r3, [pc, #160]	; (800810c <wg+0x398>)
 800806a:	4929      	ldr	r1, [pc, #164]	; (8008110 <wg+0x39c>)
 800806c:	4825      	ldr	r0, [pc, #148]	; (8008104 <wg+0x390>)
 800806e:	f001 fa11 	bl	8009494 <siprintf>

				break;
 8008072:	e07e      	b.n	8008172 <wg+0x3fe>
 8008074:	20000000 	.word	0x20000000
 8008078:	0800bd54 	.word	0x0800bd54
 800807c:	0800bd5c 	.word	0x0800bd5c
 8008080:	0800bd68 	.word	0x0800bd68
 8008084:	200002f8 	.word	0x200002f8
 8008088:	0800c7a0 	.word	0x0800c7a0
 800808c:	0800bd74 	.word	0x0800bd74
 8008090:	0800bd80 	.word	0x0800bd80
 8008094:	0800bd8c 	.word	0x0800bd8c
 8008098:	0800bd9c 	.word	0x0800bd9c
 800809c:	0800bda8 	.word	0x0800bda8
 80080a0:	0800bdb8 	.word	0x0800bdb8
 80080a4:	0800bdc4 	.word	0x0800bdc4
 80080a8:	0800bdd0 	.word	0x0800bdd0
 80080ac:	0800bddc 	.word	0x0800bddc
 80080b0:	0800bde8 	.word	0x0800bde8
 80080b4:	0800bdf4 	.word	0x0800bdf4
 80080b8:	0800be00 	.word	0x0800be00
 80080bc:	0800be0c 	.word	0x0800be0c
 80080c0:	200003b5 	.word	0x200003b5
 80080c4:	0800bb54 	.word	0x0800bb54
 80080c8:	200003ce 	.word	0x200003ce
 80080cc:	2000039c 	.word	0x2000039c
 80080d0:	20000004 	.word	0x20000004
 80080d4:	20000008 	.word	0x20000008
 80080d8:	20000009 	.word	0x20000009
 80080dc:	20000719 	.word	0x20000719
 80080e0:	20000718 	.word	0x20000718
 80080e4:	20000717 	.word	0x20000717
 80080e8:	0800be18 	.word	0x0800be18
 80080ec:	200006ec 	.word	0x200006ec
 80080f0:	20000406 	.word	0x20000406
 80080f4:	20000424 	.word	0x20000424
 80080f8:	200003e8 	.word	0x200003e8
 80080fc:	20000576 	.word	0x20000576
 8008100:	20000594 	.word	0x20000594
 8008104:	20000558 	.word	0x20000558
 8008108:	9999999a 	.word	0x9999999a
 800810c:	3fd99999 	.word	0x3fd99999
 8008110:	0800bbb0 	.word	0x0800bbb0

			case 2:
				OLED_ShowStringXY(0, 2, "Semi-Dry", 1);
 8008114:	4acc      	ldr	r2, [pc, #816]	; (8008448 <wg+0x6d4>)
 8008116:	2301      	movs	r3, #1
 8008118:	2102      	movs	r1, #2
 800811a:	2000      	movs	r0, #0
 800811c:	f7fd f9b4 	bl	8005488 <OLED_ShowStringXY>
				sprintf(mods[2], "%s", mods[1]);
 8008120:	4aca      	ldr	r2, [pc, #808]	; (800844c <wg+0x6d8>)
 8008122:	49cb      	ldr	r1, [pc, #812]	; (8008450 <wg+0x6dc>)
 8008124:	4bcb      	ldr	r3, [pc, #812]	; (8008454 <wg+0x6e0>)
 8008126:	0018      	movs	r0, r3
 8008128:	f001 f9b4 	bl	8009494 <siprintf>
				sprintf(mods[1], "%s", mods[0]);
 800812c:	4aca      	ldr	r2, [pc, #808]	; (8008458 <wg+0x6e4>)
 800812e:	49c8      	ldr	r1, [pc, #800]	; (8008450 <wg+0x6dc>)
 8008130:	4bc6      	ldr	r3, [pc, #792]	; (800844c <wg+0x6d8>)
 8008132:	0018      	movs	r0, r3
 8008134:	f001 f9ae 	bl	8009494 <siprintf>
				sprintf(mods[0], "Semi-Dry");
 8008138:	4ac3      	ldr	r2, [pc, #780]	; (8008448 <wg+0x6d4>)
 800813a:	4bc7      	ldr	r3, [pc, #796]	; (8008458 <wg+0x6e4>)
 800813c:	0011      	movs	r1, r2
 800813e:	0018      	movs	r0, r3
 8008140:	f001 f9a8 	bl	8009494 <siprintf>
				j = semid();
 8008144:	f7fe f8bc 	bl	80062c0 <semid>
 8008148:	0003      	movs	r3, r0
 800814a:	607b      	str	r3, [r7, #4]
				sprintf(lpc[2], "%s", lpc[1]);
 800814c:	4ac3      	ldr	r2, [pc, #780]	; (800845c <wg+0x6e8>)
 800814e:	49c0      	ldr	r1, [pc, #768]	; (8008450 <wg+0x6dc>)
 8008150:	4bc3      	ldr	r3, [pc, #780]	; (8008460 <wg+0x6ec>)
 8008152:	0018      	movs	r0, r3
 8008154:	f001 f99e 	bl	8009494 <siprintf>
				sprintf(lpc[1], "%s", lpc[0]);
 8008158:	4ac2      	ldr	r2, [pc, #776]	; (8008464 <wg+0x6f0>)
 800815a:	49bd      	ldr	r1, [pc, #756]	; (8008450 <wg+0x6dc>)
 800815c:	4bbf      	ldr	r3, [pc, #764]	; (800845c <wg+0x6e8>)
 800815e:	0018      	movs	r0, r3
 8008160:	f001 f998 	bl	8009494 <siprintf>
				sprintf(lpc[0], "Power cost:%.2lf kw.h", 15 * 0.05 + 5 * 0.08);
 8008164:	4ac0      	ldr	r2, [pc, #768]	; (8008468 <wg+0x6f4>)
 8008166:	4bc1      	ldr	r3, [pc, #772]	; (800846c <wg+0x6f8>)
 8008168:	49c1      	ldr	r1, [pc, #772]	; (8008470 <wg+0x6fc>)
 800816a:	48be      	ldr	r0, [pc, #760]	; (8008464 <wg+0x6f0>)
 800816c:	f001 f992 	bl	8009494 <siprintf>

				break;
 8008170:	46c0      	nop			; (mov r8, r8)

			}

			sprintf(ltime[2], "%s", ltime[1]);
 8008172:	4ac0      	ldr	r2, [pc, #768]	; (8008474 <wg+0x700>)
 8008174:	49b6      	ldr	r1, [pc, #728]	; (8008450 <wg+0x6dc>)
 8008176:	4bc0      	ldr	r3, [pc, #768]	; (8008478 <wg+0x704>)
 8008178:	0018      	movs	r0, r3
 800817a:	f001 f98b 	bl	8009494 <siprintf>
			sprintf(ltime[1], "%s", ltime[0]);
 800817e:	4abf      	ldr	r2, [pc, #764]	; (800847c <wg+0x708>)
 8008180:	49b3      	ldr	r1, [pc, #716]	; (8008450 <wg+0x6dc>)
 8008182:	4bbc      	ldr	r3, [pc, #752]	; (8008474 <wg+0x700>)
 8008184:	0018      	movs	r0, r3
 8008186:	f001 f985 	bl	8009494 <siprintf>
			sprintf(ltime[0], "DUR:%d", tc[4] / 1000);
 800818a:	4bbd      	ldr	r3, [pc, #756]	; (8008480 <wg+0x70c>)
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	22fa      	movs	r2, #250	; 0xfa
 8008190:	0091      	lsls	r1, r2, #2
 8008192:	0018      	movs	r0, r3
 8008194:	f7f7 ffd4 	bl	8000140 <__udivsi3>
 8008198:	0003      	movs	r3, r0
 800819a:	001a      	movs	r2, r3
 800819c:	49b9      	ldr	r1, [pc, #740]	; (8008484 <wg+0x710>)
 800819e:	4bb7      	ldr	r3, [pc, #732]	; (800847c <wg+0x708>)
 80081a0:	0018      	movs	r0, r3
 80081a2:	f001 f977 	bl	8009494 <siprintf>

			sprintf(lwe[2], "%s", lwe[1]);
 80081a6:	4ab8      	ldr	r2, [pc, #736]	; (8008488 <wg+0x714>)
 80081a8:	49a9      	ldr	r1, [pc, #676]	; (8008450 <wg+0x6dc>)
 80081aa:	4bb8      	ldr	r3, [pc, #736]	; (800848c <wg+0x718>)
 80081ac:	0018      	movs	r0, r3
 80081ae:	f001 f971 	bl	8009494 <siprintf>
			sprintf(lwe[1], "%s", lwe[0]);
 80081b2:	4ab7      	ldr	r2, [pc, #732]	; (8008490 <wg+0x71c>)
 80081b4:	49a6      	ldr	r1, [pc, #664]	; (8008450 <wg+0x6dc>)
 80081b6:	4bb4      	ldr	r3, [pc, #720]	; (8008488 <wg+0x714>)
 80081b8:	0018      	movs	r0, r3
 80081ba:	f001 f96b 	bl	8009494 <siprintf>
			sprintf(lwe[0], "W:%d kg", we);
 80081be:	4bb5      	ldr	r3, [pc, #724]	; (8008494 <wg+0x720>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	49b5      	ldr	r1, [pc, #724]	; (8008498 <wg+0x724>)
 80081c4:	4bb2      	ldr	r3, [pc, #712]	; (8008490 <wg+0x71c>)
 80081c6:	0018      	movs	r0, r3
 80081c8:	f001 f964 	bl	8009494 <siprintf>

			BUZZER(1);
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	0219      	lsls	r1, r3, #8
 80081d0:	23a0      	movs	r3, #160	; 0xa0
 80081d2:	05db      	lsls	r3, r3, #23
 80081d4:	2201      	movs	r2, #1
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7fa ffa7 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f7f9 ffc7 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	0219      	lsls	r1, r3, #8
 80081e6:	23a0      	movs	r3, #160	; 0xa0
 80081e8:	05db      	lsls	r3, r3, #23
 80081ea:	2200      	movs	r2, #0
 80081ec:	0018      	movs	r0, r3
 80081ee:	f7fa ff9c 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80081f2:	2064      	movs	r0, #100	; 0x64
 80081f4:	f7f9 ffbc 	bl	8002170 <HAL_Delay>
			BUZZER(1);
 80081f8:	2380      	movs	r3, #128	; 0x80
 80081fa:	0219      	lsls	r1, r3, #8
 80081fc:	23a0      	movs	r3, #160	; 0xa0
 80081fe:	05db      	lsls	r3, r3, #23
 8008200:	2201      	movs	r2, #1
 8008202:	0018      	movs	r0, r3
 8008204:	f7fa ff91 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8008208:	2064      	movs	r0, #100	; 0x64
 800820a:	f7f9 ffb1 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	0219      	lsls	r1, r3, #8
 8008212:	23a0      	movs	r3, #160	; 0xa0
 8008214:	05db      	lsls	r3, r3, #23
 8008216:	2200      	movs	r2, #0
 8008218:	0018      	movs	r0, r3
 800821a:	f7fa ff86 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800821e:	2064      	movs	r0, #100	; 0x64
 8008220:	f7f9 ffa6 	bl	8002170 <HAL_Delay>
			BUZZER(1);
 8008224:	2380      	movs	r3, #128	; 0x80
 8008226:	0219      	lsls	r1, r3, #8
 8008228:	23a0      	movs	r3, #160	; 0xa0
 800822a:	05db      	lsls	r3, r3, #23
 800822c:	2201      	movs	r2, #1
 800822e:	0018      	movs	r0, r3
 8008230:	f7fa ff7b 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8008234:	2064      	movs	r0, #100	; 0x64
 8008236:	f7f9 ff9b 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 800823a:	2380      	movs	r3, #128	; 0x80
 800823c:	0219      	lsls	r1, r3, #8
 800823e:	23a0      	movs	r3, #160	; 0xa0
 8008240:	05db      	lsls	r3, r3, #23
 8008242:	2200      	movs	r2, #0
 8008244:	0018      	movs	r0, r3
 8008246:	f7fa ff70 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (j == 7) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b07      	cmp	r3, #7
 800824e:	d000      	beq.n	8008252 <wg+0x4de>
 8008250:	e0e8      	b.n	8008424 <wg+0x6b0>
			oc();
 8008252:	f7fd fc35 	bl	8005ac0 <oc>
			rev();
 8008256:	f7ff fd25 	bl	8007ca4 <rev>
			oc();
 800825a:	f7fd fc31 	bl	8005ac0 <oc>
			sprintf(tida[2], "%s", tida[1]);
 800825e:	4a8f      	ldr	r2, [pc, #572]	; (800849c <wg+0x728>)
 8008260:	497b      	ldr	r1, [pc, #492]	; (8008450 <wg+0x6dc>)
 8008262:	4b8f      	ldr	r3, [pc, #572]	; (80084a0 <wg+0x72c>)
 8008264:	0018      	movs	r0, r3
 8008266:	f001 f915 	bl	8009494 <siprintf>
			sprintf(tida[1], "%s", tida[0]);
 800826a:	4a8e      	ldr	r2, [pc, #568]	; (80084a4 <wg+0x730>)
 800826c:	4978      	ldr	r1, [pc, #480]	; (8008450 <wg+0x6dc>)
 800826e:	4b8b      	ldr	r3, [pc, #556]	; (800849c <wg+0x728>)
 8008270:	0018      	movs	r0, r3
 8008272:	f001 f90f 	bl	8009494 <siprintf>
			sprintf(tida[0], "%02ld-%02d-%02d %02d:%02d:%02d", yea, mon, day, h,
 8008276:	4b8c      	ldr	r3, [pc, #560]	; (80084a8 <wg+0x734>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b8c      	ldr	r3, [pc, #560]	; (80084ac <wg+0x738>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	469c      	mov	ip, r3
 8008280:	4b8b      	ldr	r3, [pc, #556]	; (80084b0 <wg+0x73c>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	001c      	movs	r4, r3
 8008286:	4b8b      	ldr	r3, [pc, #556]	; (80084b4 <wg+0x740>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	001d      	movs	r5, r3
 800828c:	4b8a      	ldr	r3, [pc, #552]	; (80084b8 <wg+0x744>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	001e      	movs	r6, r3
 8008292:	4b8a      	ldr	r3, [pc, #552]	; (80084bc <wg+0x748>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	498a      	ldr	r1, [pc, #552]	; (80084c0 <wg+0x74c>)
 8008298:	4882      	ldr	r0, [pc, #520]	; (80084a4 <wg+0x730>)
 800829a:	9303      	str	r3, [sp, #12]
 800829c:	9602      	str	r6, [sp, #8]
 800829e:	9501      	str	r5, [sp, #4]
 80082a0:	9400      	str	r4, [sp, #0]
 80082a2:	4663      	mov	r3, ip
 80082a4:	f001 f8f6 	bl	8009494 <siprintf>
					m, s);
			sprintf(mods[2], "%s", mods[1]);
 80082a8:	4a68      	ldr	r2, [pc, #416]	; (800844c <wg+0x6d8>)
 80082aa:	4969      	ldr	r1, [pc, #420]	; (8008450 <wg+0x6dc>)
 80082ac:	4b69      	ldr	r3, [pc, #420]	; (8008454 <wg+0x6e0>)
 80082ae:	0018      	movs	r0, r3
 80082b0:	f001 f8f0 	bl	8009494 <siprintf>
			sprintf(mods[1], "%s", mods[0]);
 80082b4:	4a68      	ldr	r2, [pc, #416]	; (8008458 <wg+0x6e4>)
 80082b6:	4966      	ldr	r1, [pc, #408]	; (8008450 <wg+0x6dc>)
 80082b8:	4b64      	ldr	r3, [pc, #400]	; (800844c <wg+0x6d8>)
 80082ba:	0018      	movs	r0, r3
 80082bc:	f001 f8ea 	bl	8009494 <siprintf>
			sprintf(mods[0], "AUTO");
 80082c0:	4a80      	ldr	r2, [pc, #512]	; (80084c4 <wg+0x750>)
 80082c2:	4b65      	ldr	r3, [pc, #404]	; (8008458 <wg+0x6e4>)
 80082c4:	0011      	movs	r1, r2
 80082c6:	0018      	movs	r0, r3
 80082c8:	f001 f8e4 	bl	8009494 <siprintf>

			tc[4] = 0;
 80082cc:	4b6c      	ldr	r3, [pc, #432]	; (8008480 <wg+0x70c>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	611a      	str	r2, [r3, #16]
			j = sauto();
 80082d2:	f7fe ff39 	bl	8007148 <sauto>
 80082d6:	0003      	movs	r3, r0
 80082d8:	607b      	str	r3, [r7, #4]

			sprintf(ltime[2], "%s", ltime[1]);
 80082da:	4a66      	ldr	r2, [pc, #408]	; (8008474 <wg+0x700>)
 80082dc:	495c      	ldr	r1, [pc, #368]	; (8008450 <wg+0x6dc>)
 80082de:	4b66      	ldr	r3, [pc, #408]	; (8008478 <wg+0x704>)
 80082e0:	0018      	movs	r0, r3
 80082e2:	f001 f8d7 	bl	8009494 <siprintf>
			sprintf(ltime[1], "%s", ltime[0]);
 80082e6:	4a65      	ldr	r2, [pc, #404]	; (800847c <wg+0x708>)
 80082e8:	4959      	ldr	r1, [pc, #356]	; (8008450 <wg+0x6dc>)
 80082ea:	4b62      	ldr	r3, [pc, #392]	; (8008474 <wg+0x700>)
 80082ec:	0018      	movs	r0, r3
 80082ee:	f001 f8d1 	bl	8009494 <siprintf>
			sprintf(ltime[0], "DUR:%d", tc[4] / 1000);
 80082f2:	4b63      	ldr	r3, [pc, #396]	; (8008480 <wg+0x70c>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	22fa      	movs	r2, #250	; 0xfa
 80082f8:	0091      	lsls	r1, r2, #2
 80082fa:	0018      	movs	r0, r3
 80082fc:	f7f7 ff20 	bl	8000140 <__udivsi3>
 8008300:	0003      	movs	r3, r0
 8008302:	001a      	movs	r2, r3
 8008304:	495f      	ldr	r1, [pc, #380]	; (8008484 <wg+0x710>)
 8008306:	4b5d      	ldr	r3, [pc, #372]	; (800847c <wg+0x708>)
 8008308:	0018      	movs	r0, r3
 800830a:	f001 f8c3 	bl	8009494 <siprintf>

			sprintf(lwe[2], "%s", lwe[1]);
 800830e:	4a5e      	ldr	r2, [pc, #376]	; (8008488 <wg+0x714>)
 8008310:	494f      	ldr	r1, [pc, #316]	; (8008450 <wg+0x6dc>)
 8008312:	4b5e      	ldr	r3, [pc, #376]	; (800848c <wg+0x718>)
 8008314:	0018      	movs	r0, r3
 8008316:	f001 f8bd 	bl	8009494 <siprintf>
			sprintf(lwe[1], "%s", lwe[0]);
 800831a:	4a5d      	ldr	r2, [pc, #372]	; (8008490 <wg+0x71c>)
 800831c:	494c      	ldr	r1, [pc, #304]	; (8008450 <wg+0x6dc>)
 800831e:	4b5a      	ldr	r3, [pc, #360]	; (8008488 <wg+0x714>)
 8008320:	0018      	movs	r0, r3
 8008322:	f001 f8b7 	bl	8009494 <siprintf>
			sprintf(lwe[0], "W:%d kg", we);
 8008326:	4b5b      	ldr	r3, [pc, #364]	; (8008494 <wg+0x720>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	495b      	ldr	r1, [pc, #364]	; (8008498 <wg+0x724>)
 800832c:	4b58      	ldr	r3, [pc, #352]	; (8008490 <wg+0x71c>)
 800832e:	0018      	movs	r0, r3
 8008330:	f001 f8b0 	bl	8009494 <siprintf>

			sprintf(lpc[2], "%s", lpc[1]);
 8008334:	4a49      	ldr	r2, [pc, #292]	; (800845c <wg+0x6e8>)
 8008336:	4946      	ldr	r1, [pc, #280]	; (8008450 <wg+0x6dc>)
 8008338:	4b49      	ldr	r3, [pc, #292]	; (8008460 <wg+0x6ec>)
 800833a:	0018      	movs	r0, r3
 800833c:	f001 f8aa 	bl	8009494 <siprintf>
			sprintf(lpc[1], "%s", lpc[0]);
 8008340:	4a48      	ldr	r2, [pc, #288]	; (8008464 <wg+0x6f0>)
 8008342:	4943      	ldr	r1, [pc, #268]	; (8008450 <wg+0x6dc>)
 8008344:	4b45      	ldr	r3, [pc, #276]	; (800845c <wg+0x6e8>)
 8008346:	0018      	movs	r0, r3
 8008348:	f001 f8a4 	bl	8009494 <siprintf>
			sprintf(lpc[0], "Power cost:%.2lf kw.h",
					114 * 0.05 + ltem / 1000 * 0.2 + 15 * 0.08 + 9 * 0.15);
 800834c:	4b5e      	ldr	r3, [pc, #376]	; (80084c8 <wg+0x754>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	22fa      	movs	r2, #250	; 0xfa
 8008352:	0091      	lsls	r1, r2, #2
 8008354:	0018      	movs	r0, r3
 8008356:	f7f7 ff7d 	bl	8000254 <__divsi3>
 800835a:	0003      	movs	r3, r0
 800835c:	0018      	movs	r0, r3
 800835e:	f7f9 fe33 	bl	8001fc8 <__aeabi_i2d>
 8008362:	4a5a      	ldr	r2, [pc, #360]	; (80084cc <wg+0x758>)
 8008364:	4b5a      	ldr	r3, [pc, #360]	; (80084d0 <wg+0x75c>)
 8008366:	f7f8 ffdd 	bl	8001324 <__aeabi_dmul>
 800836a:	0002      	movs	r2, r0
 800836c:	000b      	movs	r3, r1
 800836e:	0010      	movs	r0, r2
 8008370:	0019      	movs	r1, r3
 8008372:	4a58      	ldr	r2, [pc, #352]	; (80084d4 <wg+0x760>)
 8008374:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <wg+0x764>)
 8008376:	f7f8 f897 	bl	80004a8 <__aeabi_dadd>
 800837a:	0002      	movs	r2, r0
 800837c:	000b      	movs	r3, r1
 800837e:	0010      	movs	r0, r2
 8008380:	0019      	movs	r1, r3
 8008382:	4a56      	ldr	r2, [pc, #344]	; (80084dc <wg+0x768>)
 8008384:	4b56      	ldr	r3, [pc, #344]	; (80084e0 <wg+0x76c>)
 8008386:	f7f8 f88f 	bl	80004a8 <__aeabi_dadd>
 800838a:	0002      	movs	r2, r0
 800838c:	000b      	movs	r3, r1
 800838e:	0010      	movs	r0, r2
 8008390:	0019      	movs	r1, r3
			sprintf(lpc[0], "Power cost:%.2lf kw.h",
 8008392:	4a54      	ldr	r2, [pc, #336]	; (80084e4 <wg+0x770>)
 8008394:	4b54      	ldr	r3, [pc, #336]	; (80084e8 <wg+0x774>)
 8008396:	f7f8 f887 	bl	80004a8 <__aeabi_dadd>
 800839a:	0002      	movs	r2, r0
 800839c:	000b      	movs	r3, r1
 800839e:	4934      	ldr	r1, [pc, #208]	; (8008470 <wg+0x6fc>)
 80083a0:	4830      	ldr	r0, [pc, #192]	; (8008464 <wg+0x6f0>)
 80083a2:	f001 f877 	bl	8009494 <siprintf>

			BUZZER(1);
 80083a6:	2380      	movs	r3, #128	; 0x80
 80083a8:	0219      	lsls	r1, r3, #8
 80083aa:	23a0      	movs	r3, #160	; 0xa0
 80083ac:	05db      	lsls	r3, r3, #23
 80083ae:	2201      	movs	r2, #1
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7fa feba 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80083b6:	2064      	movs	r0, #100	; 0x64
 80083b8:	f7f9 feda 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 80083bc:	2380      	movs	r3, #128	; 0x80
 80083be:	0219      	lsls	r1, r3, #8
 80083c0:	23a0      	movs	r3, #160	; 0xa0
 80083c2:	05db      	lsls	r3, r3, #23
 80083c4:	2200      	movs	r2, #0
 80083c6:	0018      	movs	r0, r3
 80083c8:	f7fa feaf 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80083cc:	2064      	movs	r0, #100	; 0x64
 80083ce:	f7f9 fecf 	bl	8002170 <HAL_Delay>
			BUZZER(1);
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	0219      	lsls	r1, r3, #8
 80083d6:	23a0      	movs	r3, #160	; 0xa0
 80083d8:	05db      	lsls	r3, r3, #23
 80083da:	2201      	movs	r2, #1
 80083dc:	0018      	movs	r0, r3
 80083de:	f7fa fea4 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80083e2:	2064      	movs	r0, #100	; 0x64
 80083e4:	f7f9 fec4 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	0219      	lsls	r1, r3, #8
 80083ec:	23a0      	movs	r3, #160	; 0xa0
 80083ee:	05db      	lsls	r3, r3, #23
 80083f0:	2200      	movs	r2, #0
 80083f2:	0018      	movs	r0, r3
 80083f4:	f7fa fe99 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80083f8:	2064      	movs	r0, #100	; 0x64
 80083fa:	f7f9 feb9 	bl	8002170 <HAL_Delay>
			BUZZER(1);
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	0219      	lsls	r1, r3, #8
 8008402:	23a0      	movs	r3, #160	; 0xa0
 8008404:	05db      	lsls	r3, r3, #23
 8008406:	2201      	movs	r2, #1
 8008408:	0018      	movs	r0, r3
 800840a:	f7fa fe8e 	bl	800312a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800840e:	2064      	movs	r0, #100	; 0x64
 8008410:	f7f9 feae 	bl	8002170 <HAL_Delay>
			BUZZER(0);
 8008414:	2380      	movs	r3, #128	; 0x80
 8008416:	0219      	lsls	r1, r3, #8
 8008418:	23a0      	movs	r3, #160	; 0xa0
 800841a:	05db      	lsls	r3, r3, #23
 800841c:	2200      	movs	r2, #0
 800841e:	0018      	movs	r0, r3
 8008420:	f7fa fe83 	bl	800312a <HAL_GPIO_WritePin>

		}

		if (j == 8) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b08      	cmp	r3, #8
 8008428:	d000      	beq.n	800842c <wg+0x6b8>
 800842a:	e4a7      	b.n	8007d7c <wg+0x8>
			OLED_Clear();
 800842c:	f7fc fdae 	bl	8004f8c <OLED_Clear>
			j = alog();
 8008430:	f7ff faa8 	bl	8007984 <alog>
 8008434:	0003      	movs	r3, r0
 8008436:	607b      	str	r3, [r7, #4]
			timeload = 1;
 8008438:	4b2c      	ldr	r3, [pc, #176]	; (80084ec <wg+0x778>)
 800843a:	2201      	movs	r2, #1
 800843c:	601a      	str	r2, [r3, #0]
		if (j == -1) {
 800843e:	e49d      	b.n	8007d7c <wg+0x8>

		}

	}

}
 8008440:	46bd      	mov	sp, r7
 8008442:	b005      	add	sp, #20
 8008444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	0800be0c 	.word	0x0800be0c
 800844c:	20000406 	.word	0x20000406
 8008450:	0800bb54 	.word	0x0800bb54
 8008454:	20000424 	.word	0x20000424
 8008458:	200003e8 	.word	0x200003e8
 800845c:	20000576 	.word	0x20000576
 8008460:	20000594 	.word	0x20000594
 8008464:	20000558 	.word	0x20000558
 8008468:	66666666 	.word	0x66666666
 800846c:	3ff26666 	.word	0x3ff26666
 8008470:	0800bbb0 	.word	0x0800bbb0
 8008474:	200004be 	.word	0x200004be
 8008478:	200004dc 	.word	0x200004dc
 800847c:	200004a0 	.word	0x200004a0
 8008480:	200006ec 	.word	0x200006ec
 8008484:	0800be38 	.word	0x0800be38
 8008488:	20000462 	.word	0x20000462
 800848c:	20000480 	.word	0x20000480
 8008490:	20000444 	.word	0x20000444
 8008494:	20000314 	.word	0x20000314
 8008498:	0800be40 	.word	0x0800be40
 800849c:	200003b5 	.word	0x200003b5
 80084a0:	200003ce 	.word	0x200003ce
 80084a4:	2000039c 	.word	0x2000039c
 80084a8:	20000004 	.word	0x20000004
 80084ac:	20000008 	.word	0x20000008
 80084b0:	20000009 	.word	0x20000009
 80084b4:	20000719 	.word	0x20000719
 80084b8:	20000718 	.word	0x20000718
 80084bc:	20000717 	.word	0x20000717
 80084c0:	0800be18 	.word	0x0800be18
 80084c4:	0800be48 	.word	0x0800be48
 80084c8:	2000031c 	.word	0x2000031c
 80084cc:	9999999a 	.word	0x9999999a
 80084d0:	3fc99999 	.word	0x3fc99999
 80084d4:	cccccccd 	.word	0xcccccccd
 80084d8:	4016cccc 	.word	0x4016cccc
 80084dc:	33333333 	.word	0x33333333
 80084e0:	3ff33333 	.word	0x3ff33333
 80084e4:	99999999 	.word	0x99999999
 80084e8:	3ff59999 	.word	0x3ff59999
 80084ec:	20000000 	.word	0x20000000

080084f0 <menu>:

int menu() {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0

	OLED_ShowStringXY(0, 4, "-ENTER    ", 0 != i);
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <menu+0x38>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	1e5a      	subs	r2, r3, #1
 80084fa:	4193      	sbcs	r3, r2
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	4a0b      	ldr	r2, [pc, #44]	; (800852c <menu+0x3c>)
 8008500:	2104      	movs	r1, #4
 8008502:	2000      	movs	r0, #0
 8008504:	f7fc ffc0 	bl	8005488 <OLED_ShowStringXY>
	OLED_ShowStringXY(0, 6, "-LOG      ", 1 != i);
 8008508:	4b07      	ldr	r3, [pc, #28]	; (8008528 <menu+0x38>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3b01      	subs	r3, #1
 800850e:	1e5a      	subs	r2, r3, #1
 8008510:	4193      	sbcs	r3, r2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	4a06      	ldr	r2, [pc, #24]	; (8008530 <menu+0x40>)
 8008516:	2106      	movs	r1, #6
 8008518:	2000      	movs	r0, #0
 800851a:	f7fc ffb5 	bl	8005488 <OLED_ShowStringXY>

}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	0018      	movs	r0, r3
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	200002f8 	.word	0x200002f8
 800852c:	0800bd5c 	.word	0x0800bd5c
 8008530:	0800bd68 	.word	0x0800bd68

08008534 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int n;
	i = 0;
 800853a:	4b5c      	ldr	r3, [pc, #368]	; (80086ac <main+0x178>)
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008540:	f7f9 fdb6 	bl	80020b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008544:	f000 f8d0 	bl	80086e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008548:	f7fc fbee 	bl	8004d28 <MX_GPIO_Init>
	MX_DMA_Init();
 800854c:	f7fc fbce 	bl	8004cec <MX_DMA_Init>
	MX_ADC_Init();
 8008550:	f7fc fade 	bl	8004b10 <MX_ADC_Init>
	MX_I2C1_Init();
 8008554:	f7fc fc66 	bl	8004e24 <MX_I2C1_Init>
	MX_TIM6_Init();
 8008558:	f000 fa76 	bl	8008a48 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	ledoff();
 800855c:	f7fc ffc2 	bl	80054e4 <ledoff>
	BUZZER(0);
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	0219      	lsls	r1, r3, #8
 8008564:	23a0      	movs	r3, #160	; 0xa0
 8008566:	05db      	lsls	r3, r3, #23
 8008568:	2200      	movs	r2, #0
 800856a:	0018      	movs	r0, r3
 800856c:	f7fa fddd 	bl	800312a <HAL_GPIO_WritePin>
	lcd_init(&hi2c1);
 8008570:	4b4f      	ldr	r3, [pc, #316]	; (80086b0 <main+0x17c>)
 8008572:	0018      	movs	r0, r3
 8008574:	f7fc fd40 	bl	8004ff8 <lcd_init>
//	OLED_ShowStringXY(7, 3, "\fWelcome\n\n   Washing Machine", 1);
	OLED_ShowBigStringXY(6, 2, "2021", 1);
 8008578:	4a4e      	ldr	r2, [pc, #312]	; (80086b4 <main+0x180>)
 800857a:	2301      	movs	r3, #1
 800857c:	2102      	movs	r1, #2
 800857e:	2006      	movs	r0, #6
 8008580:	f7fc ff9b 	bl	80054ba <OLED_ShowBigStringXY>
	OLED_ShowBigStringXY(2, 4, "World ", 1);
 8008584:	4a4c      	ldr	r2, [pc, #304]	; (80086b8 <main+0x184>)
 8008586:	2301      	movs	r3, #1
 8008588:	2104      	movs	r1, #4
 800858a:	2002      	movs	r0, #2
 800858c:	f7fc ff95 	bl	80054ba <OLED_ShowBigStringXY>
	OLED_ShowBigStringXY(8, 4, "Skill", 0);
 8008590:	4a4a      	ldr	r2, [pc, #296]	; (80086bc <main+0x188>)
 8008592:	2300      	movs	r3, #0
 8008594:	2104      	movs	r1, #4
 8008596:	2008      	movs	r0, #8
 8008598:	f7fc ff8f 	bl	80054ba <OLED_ShowBigStringXY>

	HAL_Delay(2000);
 800859c:	23fa      	movs	r3, #250	; 0xfa
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	0018      	movs	r0, r3
 80085a2:	f7f9 fde5 	bl	8002170 <HAL_Delay>
	OLED_Clear();
 80085a6:	f7fc fcf1 	bl	8004f8c <OLED_Clear>

	HAL_TIM_Base_Start_IT(&htim6);
 80085aa:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <main+0x18c>)
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7fc f8ed 	bl	800478c <HAL_TIM_Base_Start_IT>

	if (timeload == 1) {
 80085b2:	4b44      	ldr	r3, [pc, #272]	; (80086c4 <main+0x190>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d113      	bne.n	80085e2 <main+0xae>
		OLED_Set_Pos(0, 1);
 80085ba:	2101      	movs	r1, #1
 80085bc:	2000      	movs	r0, #0
 80085be:	f7fc fd7c 	bl	80050ba <OLED_Set_Pos>
		for (n = 0; n < 128; n++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
 80085c6:	e005      	b.n	80085d4 <main+0xa0>
			IIC_Writedata(1);
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7fc fcc7 	bl	8004f5c <IIC_Writedata>
		for (n = 0; n < 128; n++)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3301      	adds	r3, #1
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b7f      	cmp	r3, #127	; 0x7f
 80085d8:	ddf6      	ble.n	80085c8 <main+0x94>
		OLED_Set_Pos(0, 0);
 80085da:	2100      	movs	r1, #0
 80085dc:	2000      	movs	r0, #0
 80085de:	f7fc fd6c 	bl	80050ba <OLED_Set_Pos>
	}

	/* USER CODE END 2 */

	OLED_ShowStringXY(0, 2, "Menu", 1);
 80085e2:	4a39      	ldr	r2, [pc, #228]	; (80086c8 <main+0x194>)
 80085e4:	2301      	movs	r3, #1
 80085e6:	2102      	movs	r1, #2
 80085e8:	2000      	movs	r0, #0
 80085ea:	f7fc ff4d 	bl	8005488 <OLED_ShowStringXY>
	menu();
 80085ee:	f7ff ff7f 	bl	80084f0 <menu>

	sprintf(tida[0], "YY-MM-DD hh:mm:ss");
 80085f2:	4a36      	ldr	r2, [pc, #216]	; (80086cc <main+0x198>)
 80085f4:	4b36      	ldr	r3, [pc, #216]	; (80086d0 <main+0x19c>)
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 ff4b 	bl	8009494 <siprintf>
	sprintf(tida[1], "YY-MM-DD hh:mm:ss");
 80085fe:	4a33      	ldr	r2, [pc, #204]	; (80086cc <main+0x198>)
 8008600:	4b34      	ldr	r3, [pc, #208]	; (80086d4 <main+0x1a0>)
 8008602:	0011      	movs	r1, r2
 8008604:	0018      	movs	r0, r3
 8008606:	f000 ff45 	bl	8009494 <siprintf>
	sprintf(tida[2], "YY-MM-DD hh:mm:ss");
 800860a:	4a30      	ldr	r2, [pc, #192]	; (80086cc <main+0x198>)
 800860c:	4b32      	ldr	r3, [pc, #200]	; (80086d8 <main+0x1a4>)
 800860e:	0011      	movs	r1, r2
 8008610:	0018      	movs	r0, r3
 8008612:	f000 ff3f 	bl	8009494 <siprintf>
	sprintf(revtime, "TIME:NOW     ");
 8008616:	4a31      	ldr	r2, [pc, #196]	; (80086dc <main+0x1a8>)
 8008618:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <main+0x1ac>)
 800861a:	0011      	movs	r1, r2
 800861c:	0018      	movs	r0, r3
 800861e:	f000 ff39 	bl	8009494 <siprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (SW_UP == 0) {
 8008622:	4b30      	ldr	r3, [pc, #192]	; (80086e4 <main+0x1b0>)
 8008624:	2120      	movs	r1, #32
 8008626:	0018      	movs	r0, r3
 8008628:	f7fa fd62 	bl	80030f0 <HAL_GPIO_ReadPin>
 800862c:	1e03      	subs	r3, r0, #0
 800862e:	d110      	bne.n	8008652 <main+0x11e>
			st();
 8008630:	f7fc ffa8 	bl	8005584 <st>
			i--;
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <main+0x178>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	4b1c      	ldr	r3, [pc, #112]	; (80086ac <main+0x178>)
 800863c:	601a      	str	r2, [r3, #0]
			if (i <= -1) {
 800863e:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <main+0x178>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	da02      	bge.n	800864c <main+0x118>
				i = 0;
 8008646:	4b19      	ldr	r3, [pc, #100]	; (80086ac <main+0x178>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
			}
			menu();
 800864c:	f7ff ff50 	bl	80084f0 <menu>
 8008650:	e016      	b.n	8008680 <main+0x14c>

		} else if (SW_DOWN == 0) {
 8008652:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <main+0x1b0>)
 8008654:	2101      	movs	r1, #1
 8008656:	0018      	movs	r0, r3
 8008658:	f7fa fd4a 	bl	80030f0 <HAL_GPIO_ReadPin>
 800865c:	1e03      	subs	r3, r0, #0
 800865e:	d10f      	bne.n	8008680 <main+0x14c>
			st();
 8008660:	f7fc ff90 	bl	8005584 <st>
			i++;
 8008664:	4b11      	ldr	r3, [pc, #68]	; (80086ac <main+0x178>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	4b10      	ldr	r3, [pc, #64]	; (80086ac <main+0x178>)
 800866c:	601a      	str	r2, [r3, #0]
			if (i >= 2) {
 800866e:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <main+0x178>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b01      	cmp	r3, #1
 8008674:	dd02      	ble.n	800867c <main+0x148>
				i = 1;
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <main+0x178>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
			}
			menu();
 800867c:	f7ff ff38 	bl	80084f0 <menu>

		}

		if (SW_ENTER == 0) {
 8008680:	4b18      	ldr	r3, [pc, #96]	; (80086e4 <main+0x1b0>)
 8008682:	2102      	movs	r1, #2
 8008684:	0018      	movs	r0, r3
 8008686:	f7fa fd33 	bl	80030f0 <HAL_GPIO_ReadPin>
 800868a:	1e03      	subs	r3, r0, #0
 800868c:	d104      	bne.n	8008698 <main+0x164>
			st();
 800868e:	f7fc ff79 	bl	8005584 <st>
			wg(0);
 8008692:	2000      	movs	r0, #0
 8008694:	f7ff fb6e 	bl	8007d74 <wg>

		}

		if (SW_BACK == 0) {
 8008698:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <main+0x1b0>)
 800869a:	2108      	movs	r1, #8
 800869c:	0018      	movs	r0, r3
 800869e:	f7fa fd27 	bl	80030f0 <HAL_GPIO_ReadPin>
 80086a2:	1e03      	subs	r3, r0, #0
 80086a4:	d1bd      	bne.n	8008622 <main+0xee>

			error();
 80086a6:	f7fc ffb3 	bl	8005610 <error>
		if (SW_UP == 0) {
 80086aa:	e7ba      	b.n	8008622 <main+0xee>
 80086ac:	200002f8 	.word	0x200002f8
 80086b0:	200002ac 	.word	0x200002ac
 80086b4:	0800be50 	.word	0x0800be50
 80086b8:	0800be58 	.word	0x0800be58
 80086bc:	0800be60 	.word	0x0800be60
 80086c0:	20000720 	.word	0x20000720
 80086c4:	20000000 	.word	0x20000000
 80086c8:	0800bd54 	.word	0x0800bd54
 80086cc:	0800be68 	.word	0x0800be68
 80086d0:	2000039c 	.word	0x2000039c
 80086d4:	200003b5 	.word	0x200003b5
 80086d8:	200003ce 	.word	0x200003ce
 80086dc:	0800be7c 	.word	0x0800be7c
 80086e0:	20000320 	.word	0x20000320
 80086e4:	50000400 	.word	0x50000400

080086e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80086e8:	b590      	push	{r4, r7, lr}
 80086ea:	b09d      	sub	sp, #116	; 0x74
 80086ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80086ee:	2438      	movs	r4, #56	; 0x38
 80086f0:	193b      	adds	r3, r7, r4
 80086f2:	0018      	movs	r0, r3
 80086f4:	2338      	movs	r3, #56	; 0x38
 80086f6:	001a      	movs	r2, r3
 80086f8:	2100      	movs	r1, #0
 80086fa:	f000 fa55 	bl	8008ba8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80086fe:	2324      	movs	r3, #36	; 0x24
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	0018      	movs	r0, r3
 8008704:	2314      	movs	r3, #20
 8008706:	001a      	movs	r2, r3
 8008708:	2100      	movs	r1, #0
 800870a:	f000 fa4d 	bl	8008ba8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	0018      	movs	r0, r3
 8008712:	2320      	movs	r3, #32
 8008714:	001a      	movs	r2, r3
 8008716:	2100      	movs	r1, #0
 8008718:	f000 fa46 	bl	8008ba8 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800871c:	4b29      	ldr	r3, [pc, #164]	; (80087c4 <SystemClock_Config+0xdc>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a29      	ldr	r2, [pc, #164]	; (80087c8 <SystemClock_Config+0xe0>)
 8008722:	401a      	ands	r2, r3
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <SystemClock_Config+0xdc>)
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	0109      	lsls	r1, r1, #4
 800872a:	430a      	orrs	r2, r1
 800872c:	601a      	str	r2, [r3, #0]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800872e:	0021      	movs	r1, r4
 8008730:	187b      	adds	r3, r7, r1
 8008732:	2202      	movs	r2, #2
 8008734:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008736:	187b      	adds	r3, r7, r1
 8008738:	2201      	movs	r2, #1
 800873a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800873c:	187b      	adds	r3, r7, r1
 800873e:	2210      	movs	r2, #16
 8008740:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008742:	187b      	adds	r3, r7, r1
 8008744:	2202      	movs	r2, #2
 8008746:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008748:	187b      	adds	r3, r7, r1
 800874a:	2200      	movs	r2, #0
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800874e:	187b      	adds	r3, r7, r1
 8008750:	2280      	movs	r2, #128	; 0x80
 8008752:	02d2      	lsls	r2, r2, #11
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8008756:	187b      	adds	r3, r7, r1
 8008758:	2280      	movs	r2, #128	; 0x80
 800875a:	03d2      	lsls	r2, r2, #15
 800875c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800875e:	187b      	adds	r3, r7, r1
 8008760:	0018      	movs	r0, r3
 8008762:	f7fb f937 	bl	80039d4 <HAL_RCC_OscConfig>
 8008766:	1e03      	subs	r3, r0, #0
 8008768:	d001      	beq.n	800876e <SystemClock_Config+0x86>
		Error_Handler();
 800876a:	f000 f82f 	bl	80087cc <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800876e:	2124      	movs	r1, #36	; 0x24
 8008770:	187b      	adds	r3, r7, r1
 8008772:	220f      	movs	r2, #15
 8008774:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008776:	187b      	adds	r3, r7, r1
 8008778:	2203      	movs	r2, #3
 800877a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800877c:	187b      	adds	r3, r7, r1
 800877e:	2200      	movs	r2, #0
 8008780:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008782:	187b      	adds	r3, r7, r1
 8008784:	2200      	movs	r2, #0
 8008786:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008788:	187b      	adds	r3, r7, r1
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800878e:	187b      	adds	r3, r7, r1
 8008790:	2101      	movs	r1, #1
 8008792:	0018      	movs	r0, r3
 8008794:	f7fb fcd8 	bl	8004148 <HAL_RCC_ClockConfig>
 8008798:	1e03      	subs	r3, r0, #0
 800879a:	d001      	beq.n	80087a0 <SystemClock_Config+0xb8>
		Error_Handler();
 800879c:	f000 f816 	bl	80087cc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	2208      	movs	r2, #8
 80087a4:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80087a6:	1d3b      	adds	r3, r7, #4
 80087a8:	2200      	movs	r2, #0
 80087aa:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80087ac:	1d3b      	adds	r3, r7, #4
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7fb fe7a 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 80087b4:	1e03      	subs	r3, r0, #0
 80087b6:	d001      	beq.n	80087bc <SystemClock_Config+0xd4>
		Error_Handler();
 80087b8:	f000 f808 	bl	80087cc <Error_Handler>
	}
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	b01d      	add	sp, #116	; 0x74
 80087c2:	bd90      	pop	{r4, r7, pc}
 80087c4:	40007000 	.word	0x40007000
 80087c8:	ffffe7ff 	.word	0xffffe7ff

080087cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None9
 */
void Error_Handler(void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087dc:	4b07      	ldr	r3, [pc, #28]	; (80087fc <HAL_MspInit+0x24>)
 80087de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <HAL_MspInit+0x24>)
 80087e2:	2101      	movs	r1, #1
 80087e4:	430a      	orrs	r2, r1
 80087e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <HAL_MspInit+0x24>)
 80087ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <HAL_MspInit+0x24>)
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	0549      	lsls	r1, r1, #21
 80087f2:	430a      	orrs	r2, r1
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40021000 	.word	0x40021000

08008800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008804:	46c0      	nop			; (mov r8, r8)
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800880e:	e7fe      	b.n	800880e <HardFault_Handler+0x4>

08008810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008814:	46c0      	nop			; (mov r8, r8)
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008828:	f7f9 fc8c 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800882c:	46c0      	nop			; (mov r8, r8)
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8008838:	4b03      	ldr	r3, [pc, #12]	; (8008848 <DMA1_Channel1_IRQHandler+0x14>)
 800883a:	0018      	movs	r0, r3
 800883c:	f7fa fa06 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008840:	46c0      	nop			; (mov r8, r8)
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	20000264 	.word	0x20000264

0800884c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008850:	4b03      	ldr	r3, [pc, #12]	; (8008860 <TIM6_DAC_IRQHandler+0x14>)
 8008852:	0018      	movs	r0, r3
 8008854:	f7fb ffbc 	bl	80047d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008858:	46c0      	nop			; (mov r8, r8)
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	20000720 	.word	0x20000720

08008864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
	return 1;
 8008868:	2301      	movs	r3, #1
}
 800886a:	0018      	movs	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_kill>:

int _kill(int pid, int sig)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800887a:	f000 f96b 	bl	8008b54 <__errno>
 800887e:	0003      	movs	r3, r0
 8008880:	2216      	movs	r2, #22
 8008882:	601a      	str	r2, [r3, #0]
	return -1;
 8008884:	2301      	movs	r3, #1
 8008886:	425b      	negs	r3, r3
}
 8008888:	0018      	movs	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	b002      	add	sp, #8
 800888e:	bd80      	pop	{r7, pc}

08008890 <_exit>:

void _exit (int status)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008898:	2301      	movs	r3, #1
 800889a:	425a      	negs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0011      	movs	r1, r2
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7ff ffe5 	bl	8008870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80088a6:	e7fe      	b.n	80088a6 <_exit+0x16>

080088a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e00a      	b.n	80088d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80088ba:	e000      	b.n	80088be <_read+0x16>
 80088bc:	bf00      	nop
 80088be:	0001      	movs	r1, r0
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	60ba      	str	r2, [r7, #8]
 80088c6:	b2ca      	uxtb	r2, r1
 80088c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3301      	adds	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	dbf0      	blt.n	80088ba <_read+0x12>
	}

return len;
 80088d8:	687b      	ldr	r3, [r7, #4]
}
 80088da:	0018      	movs	r0, r3
 80088dc:	46bd      	mov	sp, r7
 80088de:	b006      	add	sp, #24
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b086      	sub	sp, #24
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e009      	b.n	8008908 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	60ba      	str	r2, [r7, #8]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	0018      	movs	r0, r3
 80088fe:	e000      	b.n	8008902 <_write+0x20>
 8008900:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	3301      	adds	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	429a      	cmp	r2, r3
 800890e:	dbf1      	blt.n	80088f4 <_write+0x12>
	}
	return len;
 8008910:	687b      	ldr	r3, [r7, #4]
}
 8008912:	0018      	movs	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	b006      	add	sp, #24
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008924:	4b11      	ldr	r3, [pc, #68]	; (800896c <_sbrk+0x50>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <_sbrk+0x16>
		heap_end = &end;
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <_sbrk+0x50>)
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <_sbrk+0x54>)
 8008930:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008932:	4b0e      	ldr	r3, [pc, #56]	; (800896c <_sbrk+0x50>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <_sbrk+0x50>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	18d2      	adds	r2, r2, r3
 8008940:	466b      	mov	r3, sp
 8008942:	429a      	cmp	r2, r3
 8008944:	d907      	bls.n	8008956 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008946:	f000 f905 	bl	8008b54 <__errno>
 800894a:	0003      	movs	r3, r0
 800894c:	220c      	movs	r2, #12
 800894e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8008950:	2301      	movs	r3, #1
 8008952:	425b      	negs	r3, r3
 8008954:	e006      	b.n	8008964 <_sbrk+0x48>
	}

	heap_end += incr;
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <_sbrk+0x50>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	18d2      	adds	r2, r2, r3
 800895e:	4b03      	ldr	r3, [pc, #12]	; (800896c <_sbrk+0x50>)
 8008960:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8008962:	68fb      	ldr	r3, [r7, #12]
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b004      	add	sp, #16
 800896a:	bd80      	pop	{r7, pc}
 800896c:	2000071c 	.word	0x2000071c
 8008970:	2000076c 	.word	0x2000076c

08008974 <_close>:

int _close(int file)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	return -1;
 800897c:	2301      	movs	r3, #1
 800897e:	425b      	negs	r3, r3
}
 8008980:	0018      	movs	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}

08008988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2280      	movs	r2, #128	; 0x80
 8008996:	0192      	lsls	r2, r2, #6
 8008998:	605a      	str	r2, [r3, #4]
	return 0;
 800899a:	2300      	movs	r3, #0
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b002      	add	sp, #8
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_isatty>:

int _isatty(int file)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	return 1;
 80089ac:	2301      	movs	r3, #1
}
 80089ae:	0018      	movs	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b002      	add	sp, #8
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
	return 0;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	0018      	movs	r0, r3
 80089c6:	46bd      	mov	sp, r7
 80089c8:	b004      	add	sp, #16
 80089ca:	bd80      	pop	{r7, pc}

080089cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80089d0:	4b17      	ldr	r3, [pc, #92]	; (8008a30 <SystemInit+0x64>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <SystemInit+0x64>)
 80089d6:	2180      	movs	r1, #128	; 0x80
 80089d8:	0049      	lsls	r1, r1, #1
 80089da:	430a      	orrs	r2, r1
 80089dc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <SystemInit+0x64>)
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <SystemInit+0x64>)
 80089e4:	4913      	ldr	r1, [pc, #76]	; (8008a34 <SystemInit+0x68>)
 80089e6:	400a      	ands	r2, r1
 80089e8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80089ea:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <SystemInit+0x64>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <SystemInit+0x64>)
 80089f0:	4911      	ldr	r1, [pc, #68]	; (8008a38 <SystemInit+0x6c>)
 80089f2:	400a      	ands	r2, r1
 80089f4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80089f6:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <SystemInit+0x64>)
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <SystemInit+0x64>)
 80089fc:	2101      	movs	r1, #1
 80089fe:	438a      	bics	r2, r1
 8008a00:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008a02:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <SystemInit+0x64>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <SystemInit+0x64>)
 8008a08:	490c      	ldr	r1, [pc, #48]	; (8008a3c <SystemInit+0x70>)
 8008a0a:	400a      	ands	r2, r1
 8008a0c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <SystemInit+0x64>)
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <SystemInit+0x64>)
 8008a14:	490a      	ldr	r1, [pc, #40]	; (8008a40 <SystemInit+0x74>)
 8008a16:	400a      	ands	r2, r1
 8008a18:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <SystemInit+0x64>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <SystemInit+0x78>)
 8008a22:	2280      	movs	r2, #128	; 0x80
 8008a24:	0512      	lsls	r2, r2, #20
 8008a26:	609a      	str	r2, [r3, #8]
#endif
}
 8008a28:	46c0      	nop			; (mov r8, r8)
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	40021000 	.word	0x40021000
 8008a34:	88ff400c 	.word	0x88ff400c
 8008a38:	fef6fff6 	.word	0xfef6fff6
 8008a3c:	fffbffff 	.word	0xfffbffff
 8008a40:	ff02ffff 	.word	0xff02ffff
 8008a44:	e000ed00 	.word	0xe000ed00

08008a48 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a4e:	003b      	movs	r3, r7
 8008a50:	0018      	movs	r0, r3
 8008a52:	2308      	movs	r3, #8
 8008a54:	001a      	movs	r2, r3
 8008a56:	2100      	movs	r1, #0
 8008a58:	f000 f8a6 	bl	8008ba8 <memset>

  htim6.Instance = TIM6;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a5e:	4a16      	ldr	r2, [pc, #88]	; (8008ab8 <MX_TIM6_Init+0x70>)
 8008a60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8008a62:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a64:	221f      	movs	r2, #31
 8008a66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a68:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a70:	4a12      	ldr	r2, [pc, #72]	; (8008abc <MX_TIM6_Init+0x74>)
 8008a72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008a7a:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7fb fe59 	bl	8004734 <HAL_TIM_Base_Init>
 8008a82:	1e03      	subs	r3, r0, #0
 8008a84:	d001      	beq.n	8008a8a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008a86:	f7ff fea1 	bl	80087cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a8a:	003b      	movs	r3, r7
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a90:	003b      	movs	r3, r7
 8008a92:	2200      	movs	r2, #0
 8008a94:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008a96:	003a      	movs	r2, r7
 8008a98:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <MX_TIM6_Init+0x6c>)
 8008a9a:	0011      	movs	r1, r2
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7fb fff3 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 8008aa2:	1e03      	subs	r3, r0, #0
 8008aa4:	d001      	beq.n	8008aaa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8008aa6:	f7ff fe91 	bl	80087cc <Error_Handler>
  }

}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b002      	add	sp, #8
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	20000720 	.word	0x20000720
 8008ab8:	40001000 	.word	0x40001000
 8008abc:	000003e7 	.word	0x000003e7

08008ac0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <HAL_TIM_Base_MspInit+0x38>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10d      	bne.n	8008aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <HAL_TIM_Base_MspInit+0x3c>)
 8008ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <HAL_TIM_Base_MspInit+0x3c>)
 8008ad8:	2110      	movs	r1, #16
 8008ada:	430a      	orrs	r2, r1
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	2011      	movs	r0, #17
 8008ae4:	f7f9 ffa2 	bl	8002a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008ae8:	2011      	movs	r0, #17
 8008aea:	f7f9 ffb4 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b002      	add	sp, #8
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	40001000 	.word	0x40001000
 8008afc:	40021000 	.word	0x40021000

08008b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008b00:	480d      	ldr	r0, [pc, #52]	; (8008b38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b06:	e003      	b.n	8008b10 <LoopCopyDataInit>

08008b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b0e:	3104      	adds	r1, #4

08008b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b10:	480b      	ldr	r0, [pc, #44]	; (8008b40 <LoopForever+0xa>)
  ldr  r3, =_edata
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b18:	d3f6      	bcc.n	8008b08 <CopyDataInit>
  ldr  r2, =_sbss
 8008b1a:	4a0b      	ldr	r2, [pc, #44]	; (8008b48 <LoopForever+0x12>)
  b  LoopFillZerobss
 8008b1c:	e002      	b.n	8008b24 <LoopFillZerobss>

08008b1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008b1e:	2300      	movs	r3, #0
  str  r3, [r2]
 8008b20:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b22:	3204      	adds	r2, #4

08008b24 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008b24:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <LoopForever+0x16>)
  cmp  r2, r3
 8008b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b28:	d3f9      	bcc.n	8008b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008b2a:	f7ff ff4f 	bl	80089cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b2e:	f000 f817 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b32:	f7ff fcff 	bl	8008534 <main>

08008b36 <LoopForever>:

LoopForever:
    b LoopForever
 8008b36:	e7fe      	b.n	8008b36 <LoopForever>
   ldr   r0, =_estack
 8008b38:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8008b3c:	0800cbc4 	.word	0x0800cbc4
  ldr  r0, =_sdata
 8008b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b44:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8008b48:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8008b4c:	2000076c 	.word	0x2000076c

08008b50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b50:	e7fe      	b.n	8008b50 <ADC1_COMP_IRQHandler>
	...

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	20000018 	.word	0x20000018

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	2600      	movs	r6, #0
 8008b64:	4d0c      	ldr	r5, [pc, #48]	; (8008b98 <__libc_init_array+0x38>)
 8008b66:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b68:	1b64      	subs	r4, r4, r5
 8008b6a:	10a4      	asrs	r4, r4, #2
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	2600      	movs	r6, #0
 8008b72:	f002 ffbb 	bl	800baec <_init>
 8008b76:	4d0a      	ldr	r5, [pc, #40]	; (8008ba0 <__libc_init_array+0x40>)
 8008b78:	4c0a      	ldr	r4, [pc, #40]	; (8008ba4 <__libc_init_array+0x44>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	00b3      	lsls	r3, r6, #2
 8008b86:	58eb      	ldr	r3, [r5, r3]
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	00b3      	lsls	r3, r6, #2
 8008b90:	58eb      	ldr	r3, [r5, r3]
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	0800cbbc 	.word	0x0800cbbc
 8008b9c:	0800cbbc 	.word	0x0800cbbc
 8008ba0:	0800cbbc 	.word	0x0800cbbc
 8008ba4:	0800cbc0 	.word	0x0800cbc0

08008ba8 <memset>:
 8008ba8:	0003      	movs	r3, r0
 8008baa:	1882      	adds	r2, r0, r2
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d100      	bne.n	8008bb2 <memset+0xa>
 8008bb0:	4770      	bx	lr
 8008bb2:	7019      	strb	r1, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	e7f9      	b.n	8008bac <memset+0x4>

08008bb8 <__cvt>:
 8008bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bba:	001e      	movs	r6, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	0014      	movs	r4, r2
 8008bc0:	b08b      	sub	sp, #44	; 0x2c
 8008bc2:	429e      	cmp	r6, r3
 8008bc4:	da04      	bge.n	8008bd0 <__cvt+0x18>
 8008bc6:	2180      	movs	r1, #128	; 0x80
 8008bc8:	0609      	lsls	r1, r1, #24
 8008bca:	1873      	adds	r3, r6, r1
 8008bcc:	001e      	movs	r6, r3
 8008bce:	232d      	movs	r3, #45	; 0x2d
 8008bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008bd4:	7013      	strb	r3, [r2, #0]
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	2203      	movs	r2, #3
 8008bda:	439f      	bics	r7, r3
 8008bdc:	2f46      	cmp	r7, #70	; 0x46
 8008bde:	d007      	beq.n	8008bf0 <__cvt+0x38>
 8008be0:	003b      	movs	r3, r7
 8008be2:	3b45      	subs	r3, #69	; 0x45
 8008be4:	4259      	negs	r1, r3
 8008be6:	414b      	adcs	r3, r1
 8008be8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008bea:	3a01      	subs	r2, #1
 8008bec:	18cb      	adds	r3, r1, r3
 8008bee:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf0:	ab09      	add	r3, sp, #36	; 0x24
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	ab08      	add	r3, sp, #32
 8008bf6:	9303      	str	r3, [sp, #12]
 8008bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bfa:	9200      	str	r2, [sp, #0]
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c00:	0022      	movs	r2, r4
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	0033      	movs	r3, r6
 8008c06:	f000 fcf1 	bl	80095ec <_dtoa_r>
 8008c0a:	0005      	movs	r5, r0
 8008c0c:	2f47      	cmp	r7, #71	; 0x47
 8008c0e:	d102      	bne.n	8008c16 <__cvt+0x5e>
 8008c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d528      	bpl.n	8008c68 <__cvt+0xb0>
 8008c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c18:	18eb      	adds	r3, r5, r3
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	2f46      	cmp	r7, #70	; 0x46
 8008c1e:	d114      	bne.n	8008c4a <__cvt+0x92>
 8008c20:	782b      	ldrb	r3, [r5, #0]
 8008c22:	2b30      	cmp	r3, #48	; 0x30
 8008c24:	d10c      	bne.n	8008c40 <__cvt+0x88>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	0020      	movs	r0, r4
 8008c2c:	0031      	movs	r1, r6
 8008c2e:	f7f7 fc0d 	bl	800044c <__aeabi_dcmpeq>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d104      	bne.n	8008c40 <__cvt+0x88>
 8008c36:	2301      	movs	r3, #1
 8008c38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c42:	9a07      	ldr	r2, [sp, #28]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	9307      	str	r3, [sp, #28]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	0020      	movs	r0, r4
 8008c50:	0031      	movs	r1, r6
 8008c52:	f7f7 fbfb 	bl	800044c <__aeabi_dcmpeq>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d001      	beq.n	8008c5e <__cvt+0xa6>
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5e:	2230      	movs	r2, #48	; 0x30
 8008c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c62:	9907      	ldr	r1, [sp, #28]
 8008c64:	428b      	cmp	r3, r1
 8008c66:	d306      	bcc.n	8008c76 <__cvt+0xbe>
 8008c68:	0028      	movs	r0, r5
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c6e:	1b5b      	subs	r3, r3, r5
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	b00b      	add	sp, #44	; 0x2c
 8008c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c76:	1c59      	adds	r1, r3, #1
 8008c78:	9109      	str	r1, [sp, #36]	; 0x24
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e7f0      	b.n	8008c60 <__cvt+0xa8>

08008c7e <__exponent>:
 8008c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c80:	1c83      	adds	r3, r0, #2
 8008c82:	b087      	sub	sp, #28
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	0005      	movs	r5, r0
 8008c88:	000c      	movs	r4, r1
 8008c8a:	232b      	movs	r3, #43	; 0x2b
 8008c8c:	7002      	strb	r2, [r0, #0]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	da01      	bge.n	8008c96 <__exponent+0x18>
 8008c92:	424c      	negs	r4, r1
 8008c94:	3302      	adds	r3, #2
 8008c96:	706b      	strb	r3, [r5, #1]
 8008c98:	2c09      	cmp	r4, #9
 8008c9a:	dd31      	ble.n	8008d00 <__exponent+0x82>
 8008c9c:	270a      	movs	r7, #10
 8008c9e:	ab04      	add	r3, sp, #16
 8008ca0:	1dde      	adds	r6, r3, #7
 8008ca2:	0020      	movs	r0, r4
 8008ca4:	0039      	movs	r1, r7
 8008ca6:	9601      	str	r6, [sp, #4]
 8008ca8:	f7f7 fbba 	bl	8000420 <__aeabi_idivmod>
 8008cac:	3e01      	subs	r6, #1
 8008cae:	3130      	adds	r1, #48	; 0x30
 8008cb0:	0020      	movs	r0, r4
 8008cb2:	7031      	strb	r1, [r6, #0]
 8008cb4:	0039      	movs	r1, r7
 8008cb6:	9402      	str	r4, [sp, #8]
 8008cb8:	f7f7 facc 	bl	8000254 <__divsi3>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	0004      	movs	r4, r0
 8008cc0:	2b63      	cmp	r3, #99	; 0x63
 8008cc2:	dcee      	bgt.n	8008ca2 <__exponent+0x24>
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	3430      	adds	r4, #48	; 0x30
 8008cc8:	1e9a      	subs	r2, r3, #2
 8008cca:	0013      	movs	r3, r2
 8008ccc:	9903      	ldr	r1, [sp, #12]
 8008cce:	7014      	strb	r4, [r2, #0]
 8008cd0:	a804      	add	r0, sp, #16
 8008cd2:	3007      	adds	r0, #7
 8008cd4:	4298      	cmp	r0, r3
 8008cd6:	d80e      	bhi.n	8008cf6 <__exponent+0x78>
 8008cd8:	ab04      	add	r3, sp, #16
 8008cda:	3307      	adds	r3, #7
 8008cdc:	2000      	movs	r0, #0
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d804      	bhi.n	8008cec <__exponent+0x6e>
 8008ce2:	ab04      	add	r3, sp, #16
 8008ce4:	3009      	adds	r0, #9
 8008ce6:	18c0      	adds	r0, r0, r3
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	1ac0      	subs	r0, r0, r3
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	1818      	adds	r0, r3, r0
 8008cf0:	1b40      	subs	r0, r0, r5
 8008cf2:	b007      	add	sp, #28
 8008cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf6:	7818      	ldrb	r0, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	7008      	strb	r0, [r1, #0]
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	e7e7      	b.n	8008cd0 <__exponent+0x52>
 8008d00:	2330      	movs	r3, #48	; 0x30
 8008d02:	18e4      	adds	r4, r4, r3
 8008d04:	70ab      	strb	r3, [r5, #2]
 8008d06:	1d28      	adds	r0, r5, #4
 8008d08:	70ec      	strb	r4, [r5, #3]
 8008d0a:	e7f1      	b.n	8008cf0 <__exponent+0x72>

08008d0c <_printf_float>:
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0e:	b095      	sub	sp, #84	; 0x54
 8008d10:	000c      	movs	r4, r1
 8008d12:	9209      	str	r2, [sp, #36]	; 0x24
 8008d14:	001e      	movs	r6, r3
 8008d16:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008d18:	0007      	movs	r7, r0
 8008d1a:	f001 fa81 	bl	800a220 <_localeconv_r>
 8008d1e:	6803      	ldr	r3, [r0, #0]
 8008d20:	0018      	movs	r0, r3
 8008d22:	930c      	str	r3, [sp, #48]	; 0x30
 8008d24:	f7f7 f9f0 	bl	8000108 <strlen>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d2c:	7e23      	ldrb	r3, [r4, #24]
 8008d2e:	2207      	movs	r2, #7
 8008d30:	930a      	str	r3, [sp, #40]	; 0x28
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	900e      	str	r0, [sp, #56]	; 0x38
 8008d36:	930d      	str	r3, [sp, #52]	; 0x34
 8008d38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	05c9      	lsls	r1, r1, #23
 8008d3e:	d547      	bpl.n	8008dd0 <_printf_float+0xc4>
 8008d40:	189b      	adds	r3, r3, r2
 8008d42:	4393      	bics	r3, r2
 8008d44:	001a      	movs	r2, r3
 8008d46:	3208      	adds	r2, #8
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008d50:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008d52:	2201      	movs	r2, #1
 8008d54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008d56:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d5a:	006b      	lsls	r3, r5, #1
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008d62:	4ba7      	ldr	r3, [pc, #668]	; (8009000 <_printf_float+0x2f4>)
 8008d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d66:	4252      	negs	r2, r2
 8008d68:	f7f9 f8da 	bl	8001f20 <__aeabi_dcmpun>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d131      	bne.n	8008dd4 <_printf_float+0xc8>
 8008d70:	2201      	movs	r2, #1
 8008d72:	4ba3      	ldr	r3, [pc, #652]	; (8009000 <_printf_float+0x2f4>)
 8008d74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008d76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d78:	4252      	negs	r2, r2
 8008d7a:	f7f7 fb77 	bl	800046c <__aeabi_dcmple>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d128      	bne.n	8008dd4 <_printf_float+0xc8>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	0029      	movs	r1, r5
 8008d88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008d8a:	f7f7 fb65 	bl	8000458 <__aeabi_dcmplt>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d003      	beq.n	8008d9a <_printf_float+0x8e>
 8008d92:	0023      	movs	r3, r4
 8008d94:	222d      	movs	r2, #45	; 0x2d
 8008d96:	3343      	adds	r3, #67	; 0x43
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9c:	4d99      	ldr	r5, [pc, #612]	; (8009004 <_printf_float+0x2f8>)
 8008d9e:	2b47      	cmp	r3, #71	; 0x47
 8008da0:	d900      	bls.n	8008da4 <_printf_float+0x98>
 8008da2:	4d99      	ldr	r5, [pc, #612]	; (8009008 <_printf_float+0x2fc>)
 8008da4:	2303      	movs	r3, #3
 8008da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	3301      	adds	r3, #1
 8008dac:	439a      	bics	r2, r3
 8008dae:	2300      	movs	r3, #0
 8008db0:	6022      	str	r2, [r4, #0]
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db6:	0021      	movs	r1, r4
 8008db8:	0038      	movs	r0, r7
 8008dba:	9600      	str	r6, [sp, #0]
 8008dbc:	aa13      	add	r2, sp, #76	; 0x4c
 8008dbe:	f000 f9e7 	bl	8009190 <_printf_common>
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	d000      	beq.n	8008dc8 <_printf_float+0xbc>
 8008dc6:	e0a2      	b.n	8008f0e <_printf_float+0x202>
 8008dc8:	2001      	movs	r0, #1
 8008dca:	4240      	negs	r0, r0
 8008dcc:	b015      	add	sp, #84	; 0x54
 8008dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd0:	3307      	adds	r3, #7
 8008dd2:	e7b6      	b.n	8008d42 <_printf_float+0x36>
 8008dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dd6:	002b      	movs	r3, r5
 8008dd8:	0010      	movs	r0, r2
 8008dda:	0029      	movs	r1, r5
 8008ddc:	f7f9 f8a0 	bl	8001f20 <__aeabi_dcmpun>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d00b      	beq.n	8008dfc <_printf_float+0xf0>
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	da03      	bge.n	8008df0 <_printf_float+0xe4>
 8008de8:	0023      	movs	r3, r4
 8008dea:	222d      	movs	r2, #45	; 0x2d
 8008dec:	3343      	adds	r3, #67	; 0x43
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df2:	4d86      	ldr	r5, [pc, #536]	; (800900c <_printf_float+0x300>)
 8008df4:	2b47      	cmp	r3, #71	; 0x47
 8008df6:	d9d5      	bls.n	8008da4 <_printf_float+0x98>
 8008df8:	4d85      	ldr	r5, [pc, #532]	; (8009010 <_printf_float+0x304>)
 8008dfa:	e7d3      	b.n	8008da4 <_printf_float+0x98>
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	4391      	bics	r1, r2
 8008e04:	910f      	str	r1, [sp, #60]	; 0x3c
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	d149      	bne.n	8008e9e <_printf_float+0x192>
 8008e0a:	3307      	adds	r3, #7
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	2380      	movs	r3, #128	; 0x80
 8008e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4313      	orrs	r3, r2
 8008e16:	2200      	movs	r2, #0
 8008e18:	9206      	str	r2, [sp, #24]
 8008e1a:	aa12      	add	r2, sp, #72	; 0x48
 8008e1c:	9205      	str	r2, [sp, #20]
 8008e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e20:	a908      	add	r1, sp, #32
 8008e22:	9204      	str	r2, [sp, #16]
 8008e24:	aa11      	add	r2, sp, #68	; 0x44
 8008e26:	9203      	str	r2, [sp, #12]
 8008e28:	2223      	movs	r2, #35	; 0x23
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	1852      	adds	r2, r2, r1
 8008e32:	9202      	str	r2, [sp, #8]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	0038      	movs	r0, r7
 8008e38:	002b      	movs	r3, r5
 8008e3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e3c:	f7ff febc 	bl	8008bb8 <__cvt>
 8008e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e42:	0005      	movs	r5, r0
 8008e44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e46:	2b47      	cmp	r3, #71	; 0x47
 8008e48:	d108      	bne.n	8008e5c <_printf_float+0x150>
 8008e4a:	1ccb      	adds	r3, r1, #3
 8008e4c:	db02      	blt.n	8008e54 <_printf_float+0x148>
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	4299      	cmp	r1, r3
 8008e52:	dd48      	ble.n	8008ee6 <_printf_float+0x1da>
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	3b02      	subs	r3, #2
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5e:	2b65      	cmp	r3, #101	; 0x65
 8008e60:	d824      	bhi.n	8008eac <_printf_float+0x1a0>
 8008e62:	0020      	movs	r0, r4
 8008e64:	001a      	movs	r2, r3
 8008e66:	3901      	subs	r1, #1
 8008e68:	3050      	adds	r0, #80	; 0x50
 8008e6a:	9111      	str	r1, [sp, #68]	; 0x44
 8008e6c:	f7ff ff07 	bl	8008c7e <__exponent>
 8008e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e74:	1813      	adds	r3, r2, r0
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2a01      	cmp	r2, #1
 8008e7a:	dc02      	bgt.n	8008e82 <_printf_float+0x176>
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	07d2      	lsls	r2, r2, #31
 8008e80:	d501      	bpl.n	8008e86 <_printf_float+0x17a>
 8008e82:	3301      	adds	r3, #1
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	2323      	movs	r3, #35	; 0x23
 8008e88:	aa08      	add	r2, sp, #32
 8008e8a:	189b      	adds	r3, r3, r2
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d100      	bne.n	8008e94 <_printf_float+0x188>
 8008e92:	e78f      	b.n	8008db4 <_printf_float+0xa8>
 8008e94:	0023      	movs	r3, r4
 8008e96:	222d      	movs	r2, #45	; 0x2d
 8008e98:	3343      	adds	r3, #67	; 0x43
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	e78a      	b.n	8008db4 <_printf_float+0xa8>
 8008e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ea0:	2a47      	cmp	r2, #71	; 0x47
 8008ea2:	d1b4      	bne.n	8008e0e <_printf_float+0x102>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1b2      	bne.n	8008e0e <_printf_float+0x102>
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	e7af      	b.n	8008e0c <_printf_float+0x100>
 8008eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eae:	2b66      	cmp	r3, #102	; 0x66
 8008eb0:	d11b      	bne.n	8008eea <_printf_float+0x1de>
 8008eb2:	6863      	ldr	r3, [r4, #4]
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	dd0d      	ble.n	8008ed4 <_printf_float+0x1c8>
 8008eb8:	6121      	str	r1, [r4, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d102      	bne.n	8008ec4 <_printf_float+0x1b8>
 8008ebe:	6822      	ldr	r2, [r4, #0]
 8008ec0:	07d2      	lsls	r2, r2, #31
 8008ec2:	d502      	bpl.n	8008eca <_printf_float+0x1be>
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	1859      	adds	r1, r3, r1
 8008ec8:	6121      	str	r1, [r4, #16]
 8008eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ecc:	65a3      	str	r3, [r4, #88]	; 0x58
 8008ece:	2300      	movs	r3, #0
 8008ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed2:	e7d8      	b.n	8008e86 <_printf_float+0x17a>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <_printf_float+0x1d4>
 8008ed8:	2201      	movs	r2, #1
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	4211      	tst	r1, r2
 8008ede:	d000      	beq.n	8008ee2 <_printf_float+0x1d6>
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	e7f1      	b.n	8008eca <_printf_float+0x1be>
 8008ee6:	2367      	movs	r3, #103	; 0x67
 8008ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8008eea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	db06      	blt.n	8008f00 <_printf_float+0x1f4>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	07d2      	lsls	r2, r2, #31
 8008ef8:	d5e7      	bpl.n	8008eca <_printf_float+0x1be>
 8008efa:	3301      	adds	r3, #1
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	e7e4      	b.n	8008eca <_printf_float+0x1be>
 8008f00:	2101      	movs	r1, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dc01      	bgt.n	8008f0a <_printf_float+0x1fe>
 8008f06:	1849      	adds	r1, r1, r1
 8008f08:	1ac9      	subs	r1, r1, r3
 8008f0a:	1852      	adds	r2, r2, r1
 8008f0c:	e7e9      	b.n	8008ee2 <_printf_float+0x1d6>
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	0553      	lsls	r3, r2, #21
 8008f12:	d407      	bmi.n	8008f24 <_printf_float+0x218>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	002a      	movs	r2, r5
 8008f18:	0038      	movs	r0, r7
 8008f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f1c:	47b0      	blx	r6
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d128      	bne.n	8008f74 <_printf_float+0x268>
 8008f22:	e751      	b.n	8008dc8 <_printf_float+0xbc>
 8008f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f26:	2b65      	cmp	r3, #101	; 0x65
 8008f28:	d800      	bhi.n	8008f2c <_printf_float+0x220>
 8008f2a:	e0e1      	b.n	80090f0 <_printf_float+0x3e4>
 8008f2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f30:	2200      	movs	r2, #0
 8008f32:	2300      	movs	r3, #0
 8008f34:	f7f7 fa8a 	bl	800044c <__aeabi_dcmpeq>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d031      	beq.n	8008fa0 <_printf_float+0x294>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	0038      	movs	r0, r7
 8008f40:	4a34      	ldr	r2, [pc, #208]	; (8009014 <_printf_float+0x308>)
 8008f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f44:	47b0      	blx	r6
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d100      	bne.n	8008f4c <_printf_float+0x240>
 8008f4a:	e73d      	b.n	8008dc8 <_printf_float+0xbc>
 8008f4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f50:	4293      	cmp	r3, r2
 8008f52:	db02      	blt.n	8008f5a <_printf_float+0x24e>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	07db      	lsls	r3, r3, #31
 8008f58:	d50c      	bpl.n	8008f74 <_printf_float+0x268>
 8008f5a:	0038      	movs	r0, r7
 8008f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f62:	47b0      	blx	r6
 8008f64:	2500      	movs	r5, #0
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d100      	bne.n	8008f6c <_printf_float+0x260>
 8008f6a:	e72d      	b.n	8008dc8 <_printf_float+0xbc>
 8008f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc0a      	bgt.n	8008f8a <_printf_float+0x27e>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	079b      	lsls	r3, r3, #30
 8008f78:	d500      	bpl.n	8008f7c <_printf_float+0x270>
 8008f7a:	e106      	b.n	800918a <_printf_float+0x47e>
 8008f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f7e:	68e0      	ldr	r0, [r4, #12]
 8008f80:	4298      	cmp	r0, r3
 8008f82:	db00      	blt.n	8008f86 <_printf_float+0x27a>
 8008f84:	e722      	b.n	8008dcc <_printf_float+0xc0>
 8008f86:	0018      	movs	r0, r3
 8008f88:	e720      	b.n	8008dcc <_printf_float+0xc0>
 8008f8a:	0022      	movs	r2, r4
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	0038      	movs	r0, r7
 8008f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f92:	321a      	adds	r2, #26
 8008f94:	47b0      	blx	r6
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d100      	bne.n	8008f9c <_printf_float+0x290>
 8008f9a:	e715      	b.n	8008dc8 <_printf_float+0xbc>
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	e7e5      	b.n	8008f6c <_printf_float+0x260>
 8008fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dc38      	bgt.n	8009018 <_printf_float+0x30c>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	0038      	movs	r0, r7
 8008faa:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <_printf_float+0x308>)
 8008fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fae:	47b0      	blx	r6
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d100      	bne.n	8008fb6 <_printf_float+0x2aa>
 8008fb4:	e708      	b.n	8008dc8 <_printf_float+0xbc>
 8008fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	d102      	bne.n	8008fc4 <_printf_float+0x2b8>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	07db      	lsls	r3, r3, #31
 8008fc2:	d5d7      	bpl.n	8008f74 <_printf_float+0x268>
 8008fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc6:	0038      	movs	r0, r7
 8008fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fcc:	47b0      	blx	r6
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d100      	bne.n	8008fd4 <_printf_float+0x2c8>
 8008fd2:	e6f9      	b.n	8008dc8 <_printf_float+0xbc>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fdc:	425b      	negs	r3, r3
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	dc01      	bgt.n	8008fe6 <_printf_float+0x2da>
 8008fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fe4:	e797      	b.n	8008f16 <_printf_float+0x20a>
 8008fe6:	0022      	movs	r2, r4
 8008fe8:	2301      	movs	r3, #1
 8008fea:	0038      	movs	r0, r7
 8008fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fee:	321a      	adds	r2, #26
 8008ff0:	47b0      	blx	r6
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d100      	bne.n	8008ff8 <_printf_float+0x2ec>
 8008ff6:	e6e7      	b.n	8008dc8 <_printf_float+0xbc>
 8008ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	e7eb      	b.n	8008fd6 <_printf_float+0x2ca>
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	0800c7e8 	.word	0x0800c7e8
 8009008:	0800c7ec 	.word	0x0800c7ec
 800900c:	0800c7f0 	.word	0x0800c7f0
 8009010:	0800c7f4 	.word	0x0800c7f4
 8009014:	0800c7f8 	.word	0x0800c7f8
 8009018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800901a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800901c:	920a      	str	r2, [sp, #40]	; 0x28
 800901e:	429a      	cmp	r2, r3
 8009020:	dd00      	ble.n	8009024 <_printf_float+0x318>
 8009022:	930a      	str	r3, [sp, #40]	; 0x28
 8009024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	dc3c      	bgt.n	80090a4 <_printf_float+0x398>
 800902a:	2300      	movs	r3, #0
 800902c:	930d      	str	r3, [sp, #52]	; 0x34
 800902e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009030:	43db      	mvns	r3, r3
 8009032:	17db      	asrs	r3, r3, #31
 8009034:	930f      	str	r3, [sp, #60]	; 0x3c
 8009036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800903a:	930b      	str	r3, [sp, #44]	; 0x2c
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	4013      	ands	r3, r2
 8009040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009046:	4293      	cmp	r3, r2
 8009048:	dc34      	bgt.n	80090b4 <_printf_float+0x3a8>
 800904a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800904c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800904e:	4293      	cmp	r3, r2
 8009050:	db3d      	blt.n	80090ce <_printf_float+0x3c2>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	07db      	lsls	r3, r3, #31
 8009056:	d43a      	bmi.n	80090ce <_printf_float+0x3c2>
 8009058:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800905a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800905c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	1a52      	subs	r2, r2, r1
 8009062:	920a      	str	r2, [sp, #40]	; 0x28
 8009064:	429a      	cmp	r2, r3
 8009066:	dd00      	ble.n	800906a <_printf_float+0x35e>
 8009068:	930a      	str	r3, [sp, #40]	; 0x28
 800906a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc36      	bgt.n	80090de <_printf_float+0x3d2>
 8009070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009072:	2500      	movs	r5, #0
 8009074:	43db      	mvns	r3, r3
 8009076:	17db      	asrs	r3, r3, #31
 8009078:	930b      	str	r3, [sp, #44]	; 0x2c
 800907a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800907c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800907e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009084:	400a      	ands	r2, r1
 8009086:	1a9b      	subs	r3, r3, r2
 8009088:	42ab      	cmp	r3, r5
 800908a:	dc00      	bgt.n	800908e <_printf_float+0x382>
 800908c:	e772      	b.n	8008f74 <_printf_float+0x268>
 800908e:	0022      	movs	r2, r4
 8009090:	2301      	movs	r3, #1
 8009092:	0038      	movs	r0, r7
 8009094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009096:	321a      	adds	r2, #26
 8009098:	47b0      	blx	r6
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d100      	bne.n	80090a0 <_printf_float+0x394>
 800909e:	e693      	b.n	8008dc8 <_printf_float+0xbc>
 80090a0:	3501      	adds	r5, #1
 80090a2:	e7ea      	b.n	800907a <_printf_float+0x36e>
 80090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a6:	002a      	movs	r2, r5
 80090a8:	0038      	movs	r0, r7
 80090aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ac:	47b0      	blx	r6
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d1bb      	bne.n	800902a <_printf_float+0x31e>
 80090b2:	e689      	b.n	8008dc8 <_printf_float+0xbc>
 80090b4:	0022      	movs	r2, r4
 80090b6:	2301      	movs	r3, #1
 80090b8:	0038      	movs	r0, r7
 80090ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090bc:	321a      	adds	r2, #26
 80090be:	47b0      	blx	r6
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d100      	bne.n	80090c6 <_printf_float+0x3ba>
 80090c4:	e680      	b.n	8008dc8 <_printf_float+0xbc>
 80090c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c8:	3301      	adds	r3, #1
 80090ca:	930d      	str	r3, [sp, #52]	; 0x34
 80090cc:	e7b3      	b.n	8009036 <_printf_float+0x32a>
 80090ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d0:	0038      	movs	r0, r7
 80090d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	47b0      	blx	r6
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d1bd      	bne.n	8009058 <_printf_float+0x34c>
 80090dc:	e674      	b.n	8008dc8 <_printf_float+0xbc>
 80090de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e0:	0038      	movs	r0, r7
 80090e2:	18ea      	adds	r2, r5, r3
 80090e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e8:	47b0      	blx	r6
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	d1c0      	bne.n	8009070 <_printf_float+0x364>
 80090ee:	e66b      	b.n	8008dc8 <_printf_float+0xbc>
 80090f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	dc02      	bgt.n	80090fc <_printf_float+0x3f0>
 80090f6:	2301      	movs	r3, #1
 80090f8:	421a      	tst	r2, r3
 80090fa:	d034      	beq.n	8009166 <_printf_float+0x45a>
 80090fc:	2301      	movs	r3, #1
 80090fe:	002a      	movs	r2, r5
 8009100:	0038      	movs	r0, r7
 8009102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009104:	47b0      	blx	r6
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d100      	bne.n	800910c <_printf_float+0x400>
 800910a:	e65d      	b.n	8008dc8 <_printf_float+0xbc>
 800910c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800910e:	0038      	movs	r0, r7
 8009110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009114:	47b0      	blx	r6
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	d100      	bne.n	800911c <_printf_float+0x410>
 800911a:	e655      	b.n	8008dc8 <_printf_float+0xbc>
 800911c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800911e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	f7f7 f992 	bl	800044c <__aeabi_dcmpeq>
 8009128:	2800      	cmp	r0, #0
 800912a:	d11a      	bne.n	8009162 <_printf_float+0x456>
 800912c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800912e:	1c6a      	adds	r2, r5, #1
 8009130:	3b01      	subs	r3, #1
 8009132:	0038      	movs	r0, r7
 8009134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009136:	47b0      	blx	r6
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d10e      	bne.n	800915a <_printf_float+0x44e>
 800913c:	e644      	b.n	8008dc8 <_printf_float+0xbc>
 800913e:	0022      	movs	r2, r4
 8009140:	2301      	movs	r3, #1
 8009142:	0038      	movs	r0, r7
 8009144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009146:	321a      	adds	r2, #26
 8009148:	47b0      	blx	r6
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d100      	bne.n	8009150 <_printf_float+0x444>
 800914e:	e63b      	b.n	8008dc8 <_printf_float+0xbc>
 8009150:	3501      	adds	r5, #1
 8009152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009154:	3b01      	subs	r3, #1
 8009156:	42ab      	cmp	r3, r5
 8009158:	dcf1      	bgt.n	800913e <_printf_float+0x432>
 800915a:	0022      	movs	r2, r4
 800915c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915e:	3250      	adds	r2, #80	; 0x50
 8009160:	e6da      	b.n	8008f18 <_printf_float+0x20c>
 8009162:	2500      	movs	r5, #0
 8009164:	e7f5      	b.n	8009152 <_printf_float+0x446>
 8009166:	002a      	movs	r2, r5
 8009168:	e7e3      	b.n	8009132 <_printf_float+0x426>
 800916a:	0022      	movs	r2, r4
 800916c:	2301      	movs	r3, #1
 800916e:	0038      	movs	r0, r7
 8009170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009172:	3219      	adds	r2, #25
 8009174:	47b0      	blx	r6
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d100      	bne.n	800917c <_printf_float+0x470>
 800917a:	e625      	b.n	8008dc8 <_printf_float+0xbc>
 800917c:	3501      	adds	r5, #1
 800917e:	68e3      	ldr	r3, [r4, #12]
 8009180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	42ab      	cmp	r3, r5
 8009186:	dcf0      	bgt.n	800916a <_printf_float+0x45e>
 8009188:	e6f8      	b.n	8008f7c <_printf_float+0x270>
 800918a:	2500      	movs	r5, #0
 800918c:	e7f7      	b.n	800917e <_printf_float+0x472>
 800918e:	46c0      	nop			; (mov r8, r8)

08009190 <_printf_common>:
 8009190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009192:	0015      	movs	r5, r2
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	688a      	ldr	r2, [r1, #8]
 8009198:	690b      	ldr	r3, [r1, #16]
 800919a:	000c      	movs	r4, r1
 800919c:	9000      	str	r0, [sp, #0]
 800919e:	4293      	cmp	r3, r2
 80091a0:	da00      	bge.n	80091a4 <_printf_common+0x14>
 80091a2:	0013      	movs	r3, r2
 80091a4:	0022      	movs	r2, r4
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	3243      	adds	r2, #67	; 0x43
 80091aa:	7812      	ldrb	r2, [r2, #0]
 80091ac:	2a00      	cmp	r2, #0
 80091ae:	d001      	beq.n	80091b4 <_printf_common+0x24>
 80091b0:	3301      	adds	r3, #1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	069b      	lsls	r3, r3, #26
 80091b8:	d502      	bpl.n	80091c0 <_printf_common+0x30>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	3302      	adds	r3, #2
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	2306      	movs	r3, #6
 80091c4:	0017      	movs	r7, r2
 80091c6:	401f      	ands	r7, r3
 80091c8:	421a      	tst	r2, r3
 80091ca:	d027      	beq.n	800921c <_printf_common+0x8c>
 80091cc:	0023      	movs	r3, r4
 80091ce:	3343      	adds	r3, #67	; 0x43
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	4193      	sbcs	r3, r2
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	0692      	lsls	r2, r2, #26
 80091da:	d430      	bmi.n	800923e <_printf_common+0xae>
 80091dc:	0022      	movs	r2, r4
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	9800      	ldr	r0, [sp, #0]
 80091e2:	9e08      	ldr	r6, [sp, #32]
 80091e4:	3243      	adds	r2, #67	; 0x43
 80091e6:	47b0      	blx	r6
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d025      	beq.n	8009238 <_printf_common+0xa8>
 80091ec:	2306      	movs	r3, #6
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	682a      	ldr	r2, [r5, #0]
 80091f2:	68e1      	ldr	r1, [r4, #12]
 80091f4:	2500      	movs	r5, #0
 80091f6:	4003      	ands	r3, r0
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d103      	bne.n	8009204 <_printf_common+0x74>
 80091fc:	1a8d      	subs	r5, r1, r2
 80091fe:	43eb      	mvns	r3, r5
 8009200:	17db      	asrs	r3, r3, #31
 8009202:	401d      	ands	r5, r3
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	4293      	cmp	r3, r2
 800920a:	dd01      	ble.n	8009210 <_printf_common+0x80>
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	18ed      	adds	r5, r5, r3
 8009210:	2700      	movs	r7, #0
 8009212:	42bd      	cmp	r5, r7
 8009214:	d120      	bne.n	8009258 <_printf_common+0xc8>
 8009216:	2000      	movs	r0, #0
 8009218:	e010      	b.n	800923c <_printf_common+0xac>
 800921a:	3701      	adds	r7, #1
 800921c:	68e3      	ldr	r3, [r4, #12]
 800921e:	682a      	ldr	r2, [r5, #0]
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	42bb      	cmp	r3, r7
 8009224:	ddd2      	ble.n	80091cc <_printf_common+0x3c>
 8009226:	0022      	movs	r2, r4
 8009228:	2301      	movs	r3, #1
 800922a:	9901      	ldr	r1, [sp, #4]
 800922c:	9800      	ldr	r0, [sp, #0]
 800922e:	9e08      	ldr	r6, [sp, #32]
 8009230:	3219      	adds	r2, #25
 8009232:	47b0      	blx	r6
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d1f0      	bne.n	800921a <_printf_common+0x8a>
 8009238:	2001      	movs	r0, #1
 800923a:	4240      	negs	r0, r0
 800923c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800923e:	2030      	movs	r0, #48	; 0x30
 8009240:	18e1      	adds	r1, r4, r3
 8009242:	3143      	adds	r1, #67	; 0x43
 8009244:	7008      	strb	r0, [r1, #0]
 8009246:	0021      	movs	r1, r4
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	3145      	adds	r1, #69	; 0x45
 800924c:	7809      	ldrb	r1, [r1, #0]
 800924e:	18a2      	adds	r2, r4, r2
 8009250:	3243      	adds	r2, #67	; 0x43
 8009252:	3302      	adds	r3, #2
 8009254:	7011      	strb	r1, [r2, #0]
 8009256:	e7c1      	b.n	80091dc <_printf_common+0x4c>
 8009258:	0022      	movs	r2, r4
 800925a:	2301      	movs	r3, #1
 800925c:	9901      	ldr	r1, [sp, #4]
 800925e:	9800      	ldr	r0, [sp, #0]
 8009260:	9e08      	ldr	r6, [sp, #32]
 8009262:	321a      	adds	r2, #26
 8009264:	47b0      	blx	r6
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d0e6      	beq.n	8009238 <_printf_common+0xa8>
 800926a:	3701      	adds	r7, #1
 800926c:	e7d1      	b.n	8009212 <_printf_common+0x82>
	...

08009270 <_printf_i>:
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	b08b      	sub	sp, #44	; 0x2c
 8009274:	9206      	str	r2, [sp, #24]
 8009276:	000a      	movs	r2, r1
 8009278:	3243      	adds	r2, #67	; 0x43
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	9005      	str	r0, [sp, #20]
 800927e:	9204      	str	r2, [sp, #16]
 8009280:	7e0a      	ldrb	r2, [r1, #24]
 8009282:	000c      	movs	r4, r1
 8009284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009286:	2a78      	cmp	r2, #120	; 0x78
 8009288:	d807      	bhi.n	800929a <_printf_i+0x2a>
 800928a:	2a62      	cmp	r2, #98	; 0x62
 800928c:	d809      	bhi.n	80092a2 <_printf_i+0x32>
 800928e:	2a00      	cmp	r2, #0
 8009290:	d100      	bne.n	8009294 <_printf_i+0x24>
 8009292:	e0c1      	b.n	8009418 <_printf_i+0x1a8>
 8009294:	2a58      	cmp	r2, #88	; 0x58
 8009296:	d100      	bne.n	800929a <_printf_i+0x2a>
 8009298:	e08c      	b.n	80093b4 <_printf_i+0x144>
 800929a:	0026      	movs	r6, r4
 800929c:	3642      	adds	r6, #66	; 0x42
 800929e:	7032      	strb	r2, [r6, #0]
 80092a0:	e022      	b.n	80092e8 <_printf_i+0x78>
 80092a2:	0010      	movs	r0, r2
 80092a4:	3863      	subs	r0, #99	; 0x63
 80092a6:	2815      	cmp	r0, #21
 80092a8:	d8f7      	bhi.n	800929a <_printf_i+0x2a>
 80092aa:	f7f6 ff3f 	bl	800012c <__gnu_thumb1_case_shi>
 80092ae:	0016      	.short	0x0016
 80092b0:	fff6001f 	.word	0xfff6001f
 80092b4:	fff6fff6 	.word	0xfff6fff6
 80092b8:	001ffff6 	.word	0x001ffff6
 80092bc:	fff6fff6 	.word	0xfff6fff6
 80092c0:	fff6fff6 	.word	0xfff6fff6
 80092c4:	003600a8 	.word	0x003600a8
 80092c8:	fff6009a 	.word	0xfff6009a
 80092cc:	00b9fff6 	.word	0x00b9fff6
 80092d0:	0036fff6 	.word	0x0036fff6
 80092d4:	fff6fff6 	.word	0xfff6fff6
 80092d8:	009e      	.short	0x009e
 80092da:	0026      	movs	r6, r4
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	3642      	adds	r6, #66	; 0x42
 80092e0:	1d11      	adds	r1, r2, #4
 80092e2:	6019      	str	r1, [r3, #0]
 80092e4:	6813      	ldr	r3, [r2, #0]
 80092e6:	7033      	strb	r3, [r6, #0]
 80092e8:	2301      	movs	r3, #1
 80092ea:	e0a7      	b.n	800943c <_printf_i+0x1cc>
 80092ec:	6808      	ldr	r0, [r1, #0]
 80092ee:	6819      	ldr	r1, [r3, #0]
 80092f0:	1d0a      	adds	r2, r1, #4
 80092f2:	0605      	lsls	r5, r0, #24
 80092f4:	d50b      	bpl.n	800930e <_printf_i+0x9e>
 80092f6:	680d      	ldr	r5, [r1, #0]
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	2d00      	cmp	r5, #0
 80092fc:	da03      	bge.n	8009306 <_printf_i+0x96>
 80092fe:	232d      	movs	r3, #45	; 0x2d
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	426d      	negs	r5, r5
 8009304:	7013      	strb	r3, [r2, #0]
 8009306:	4b61      	ldr	r3, [pc, #388]	; (800948c <_printf_i+0x21c>)
 8009308:	270a      	movs	r7, #10
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	e01b      	b.n	8009346 <_printf_i+0xd6>
 800930e:	680d      	ldr	r5, [r1, #0]
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	0641      	lsls	r1, r0, #25
 8009314:	d5f1      	bpl.n	80092fa <_printf_i+0x8a>
 8009316:	b22d      	sxth	r5, r5
 8009318:	e7ef      	b.n	80092fa <_printf_i+0x8a>
 800931a:	680d      	ldr	r5, [r1, #0]
 800931c:	6819      	ldr	r1, [r3, #0]
 800931e:	1d08      	adds	r0, r1, #4
 8009320:	6018      	str	r0, [r3, #0]
 8009322:	062e      	lsls	r6, r5, #24
 8009324:	d501      	bpl.n	800932a <_printf_i+0xba>
 8009326:	680d      	ldr	r5, [r1, #0]
 8009328:	e003      	b.n	8009332 <_printf_i+0xc2>
 800932a:	066d      	lsls	r5, r5, #25
 800932c:	d5fb      	bpl.n	8009326 <_printf_i+0xb6>
 800932e:	680d      	ldr	r5, [r1, #0]
 8009330:	b2ad      	uxth	r5, r5
 8009332:	4b56      	ldr	r3, [pc, #344]	; (800948c <_printf_i+0x21c>)
 8009334:	2708      	movs	r7, #8
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	2a6f      	cmp	r2, #111	; 0x6f
 800933a:	d000      	beq.n	800933e <_printf_i+0xce>
 800933c:	3702      	adds	r7, #2
 800933e:	0023      	movs	r3, r4
 8009340:	2200      	movs	r2, #0
 8009342:	3343      	adds	r3, #67	; 0x43
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	db03      	blt.n	8009356 <_printf_i+0xe6>
 800934e:	2204      	movs	r2, #4
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	4391      	bics	r1, r2
 8009354:	6021      	str	r1, [r4, #0]
 8009356:	2d00      	cmp	r5, #0
 8009358:	d102      	bne.n	8009360 <_printf_i+0xf0>
 800935a:	9e04      	ldr	r6, [sp, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <_printf_i+0x10a>
 8009360:	9e04      	ldr	r6, [sp, #16]
 8009362:	0028      	movs	r0, r5
 8009364:	0039      	movs	r1, r7
 8009366:	f7f6 ff71 	bl	800024c <__aeabi_uidivmod>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	3e01      	subs	r6, #1
 800936e:	5c5b      	ldrb	r3, [r3, r1]
 8009370:	7033      	strb	r3, [r6, #0]
 8009372:	002b      	movs	r3, r5
 8009374:	0005      	movs	r5, r0
 8009376:	429f      	cmp	r7, r3
 8009378:	d9f3      	bls.n	8009362 <_printf_i+0xf2>
 800937a:	2f08      	cmp	r7, #8
 800937c:	d109      	bne.n	8009392 <_printf_i+0x122>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d506      	bpl.n	8009392 <_printf_i+0x122>
 8009384:	6863      	ldr	r3, [r4, #4]
 8009386:	6922      	ldr	r2, [r4, #16]
 8009388:	4293      	cmp	r3, r2
 800938a:	dc02      	bgt.n	8009392 <_printf_i+0x122>
 800938c:	2330      	movs	r3, #48	; 0x30
 800938e:	3e01      	subs	r6, #1
 8009390:	7033      	strb	r3, [r6, #0]
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	1b9b      	subs	r3, r3, r6
 8009396:	6123      	str	r3, [r4, #16]
 8009398:	9b07      	ldr	r3, [sp, #28]
 800939a:	0021      	movs	r1, r4
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	aa09      	add	r2, sp, #36	; 0x24
 80093a4:	f7ff fef4 	bl	8009190 <_printf_common>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d14c      	bne.n	8009446 <_printf_i+0x1d6>
 80093ac:	2001      	movs	r0, #1
 80093ae:	4240      	negs	r0, r0
 80093b0:	b00b      	add	sp, #44	; 0x2c
 80093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b4:	3145      	adds	r1, #69	; 0x45
 80093b6:	700a      	strb	r2, [r1, #0]
 80093b8:	4a34      	ldr	r2, [pc, #208]	; (800948c <_printf_i+0x21c>)
 80093ba:	9203      	str	r2, [sp, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	ca20      	ldmia	r2!, {r5}
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	0608      	lsls	r0, r1, #24
 80093c6:	d516      	bpl.n	80093f6 <_printf_i+0x186>
 80093c8:	07cb      	lsls	r3, r1, #31
 80093ca:	d502      	bpl.n	80093d2 <_printf_i+0x162>
 80093cc:	2320      	movs	r3, #32
 80093ce:	4319      	orrs	r1, r3
 80093d0:	6021      	str	r1, [r4, #0]
 80093d2:	2710      	movs	r7, #16
 80093d4:	2d00      	cmp	r5, #0
 80093d6:	d1b2      	bne.n	800933e <_printf_i+0xce>
 80093d8:	2320      	movs	r3, #32
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	439a      	bics	r2, r3
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	e7ad      	b.n	800933e <_printf_i+0xce>
 80093e2:	2220      	movs	r2, #32
 80093e4:	6809      	ldr	r1, [r1, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	0022      	movs	r2, r4
 80093ec:	2178      	movs	r1, #120	; 0x78
 80093ee:	3245      	adds	r2, #69	; 0x45
 80093f0:	7011      	strb	r1, [r2, #0]
 80093f2:	4a27      	ldr	r2, [pc, #156]	; (8009490 <_printf_i+0x220>)
 80093f4:	e7e1      	b.n	80093ba <_printf_i+0x14a>
 80093f6:	0648      	lsls	r0, r1, #25
 80093f8:	d5e6      	bpl.n	80093c8 <_printf_i+0x158>
 80093fa:	b2ad      	uxth	r5, r5
 80093fc:	e7e4      	b.n	80093c8 <_printf_i+0x158>
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	680d      	ldr	r5, [r1, #0]
 8009402:	1d10      	adds	r0, r2, #4
 8009404:	6949      	ldr	r1, [r1, #20]
 8009406:	6018      	str	r0, [r3, #0]
 8009408:	6813      	ldr	r3, [r2, #0]
 800940a:	062e      	lsls	r6, r5, #24
 800940c:	d501      	bpl.n	8009412 <_printf_i+0x1a2>
 800940e:	6019      	str	r1, [r3, #0]
 8009410:	e002      	b.n	8009418 <_printf_i+0x1a8>
 8009412:	066d      	lsls	r5, r5, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0x19e>
 8009416:	8019      	strh	r1, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	9e04      	ldr	r6, [sp, #16]
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	e7bb      	b.n	8009398 <_printf_i+0x128>
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	1d11      	adds	r1, r2, #4
 8009424:	6019      	str	r1, [r3, #0]
 8009426:	6816      	ldr	r6, [r2, #0]
 8009428:	2100      	movs	r1, #0
 800942a:	0030      	movs	r0, r6
 800942c:	6862      	ldr	r2, [r4, #4]
 800942e:	f000 ff05 	bl	800a23c <memchr>
 8009432:	2800      	cmp	r0, #0
 8009434:	d001      	beq.n	800943a <_printf_i+0x1ca>
 8009436:	1b80      	subs	r0, r0, r6
 8009438:	6060      	str	r0, [r4, #4]
 800943a:	6863      	ldr	r3, [r4, #4]
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	2300      	movs	r3, #0
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	7013      	strb	r3, [r2, #0]
 8009444:	e7a8      	b.n	8009398 <_printf_i+0x128>
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	0032      	movs	r2, r6
 800944a:	9906      	ldr	r1, [sp, #24]
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	9d07      	ldr	r5, [sp, #28]
 8009450:	47a8      	blx	r5
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d0aa      	beq.n	80093ac <_printf_i+0x13c>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	079b      	lsls	r3, r3, #30
 800945a:	d415      	bmi.n	8009488 <_printf_i+0x218>
 800945c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945e:	68e0      	ldr	r0, [r4, #12]
 8009460:	4298      	cmp	r0, r3
 8009462:	daa5      	bge.n	80093b0 <_printf_i+0x140>
 8009464:	0018      	movs	r0, r3
 8009466:	e7a3      	b.n	80093b0 <_printf_i+0x140>
 8009468:	0022      	movs	r2, r4
 800946a:	2301      	movs	r3, #1
 800946c:	9906      	ldr	r1, [sp, #24]
 800946e:	9805      	ldr	r0, [sp, #20]
 8009470:	9e07      	ldr	r6, [sp, #28]
 8009472:	3219      	adds	r2, #25
 8009474:	47b0      	blx	r6
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d098      	beq.n	80093ac <_printf_i+0x13c>
 800947a:	3501      	adds	r5, #1
 800947c:	68e3      	ldr	r3, [r4, #12]
 800947e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	42ab      	cmp	r3, r5
 8009484:	dcf0      	bgt.n	8009468 <_printf_i+0x1f8>
 8009486:	e7e9      	b.n	800945c <_printf_i+0x1ec>
 8009488:	2500      	movs	r5, #0
 800948a:	e7f7      	b.n	800947c <_printf_i+0x20c>
 800948c:	0800c7fa 	.word	0x0800c7fa
 8009490:	0800c80b 	.word	0x0800c80b

08009494 <siprintf>:
 8009494:	b40e      	push	{r1, r2, r3}
 8009496:	b500      	push	{lr}
 8009498:	490b      	ldr	r1, [pc, #44]	; (80094c8 <siprintf+0x34>)
 800949a:	b09c      	sub	sp, #112	; 0x70
 800949c:	ab1d      	add	r3, sp, #116	; 0x74
 800949e:	9002      	str	r0, [sp, #8]
 80094a0:	9006      	str	r0, [sp, #24]
 80094a2:	9107      	str	r1, [sp, #28]
 80094a4:	9104      	str	r1, [sp, #16]
 80094a6:	4809      	ldr	r0, [pc, #36]	; (80094cc <siprintf+0x38>)
 80094a8:	4909      	ldr	r1, [pc, #36]	; (80094d0 <siprintf+0x3c>)
 80094aa:	cb04      	ldmia	r3!, {r2}
 80094ac:	9105      	str	r1, [sp, #20]
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	a902      	add	r1, sp, #8
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	f001 fbe2 	bl	800ac7c <_svfiprintf_r>
 80094b8:	2300      	movs	r3, #0
 80094ba:	9a02      	ldr	r2, [sp, #8]
 80094bc:	7013      	strb	r3, [r2, #0]
 80094be:	b01c      	add	sp, #112	; 0x70
 80094c0:	bc08      	pop	{r3}
 80094c2:	b003      	add	sp, #12
 80094c4:	4718      	bx	r3
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	7fffffff 	.word	0x7fffffff
 80094cc:	20000018 	.word	0x20000018
 80094d0:	ffff0208 	.word	0xffff0208

080094d4 <quorem>:
 80094d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d6:	0006      	movs	r6, r0
 80094d8:	690b      	ldr	r3, [r1, #16]
 80094da:	6932      	ldr	r2, [r6, #16]
 80094dc:	b087      	sub	sp, #28
 80094de:	2000      	movs	r0, #0
 80094e0:	9103      	str	r1, [sp, #12]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	db65      	blt.n	80095b2 <quorem+0xde>
 80094e6:	3b01      	subs	r3, #1
 80094e8:	009c      	lsls	r4, r3, #2
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	000b      	movs	r3, r1
 80094ee:	3314      	adds	r3, #20
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	191b      	adds	r3, r3, r4
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	0033      	movs	r3, r6
 80094f8:	3314      	adds	r3, #20
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	191c      	adds	r4, r3, r4
 80094fe:	9b04      	ldr	r3, [sp, #16]
 8009500:	6827      	ldr	r7, [r4, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	0038      	movs	r0, r7
 8009506:	1c5d      	adds	r5, r3, #1
 8009508:	0029      	movs	r1, r5
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	f7f6 fe18 	bl	8000140 <__udivsi3>
 8009510:	9001      	str	r0, [sp, #4]
 8009512:	42af      	cmp	r7, r5
 8009514:	d324      	bcc.n	8009560 <quorem+0x8c>
 8009516:	2500      	movs	r5, #0
 8009518:	46ac      	mov	ip, r5
 800951a:	9802      	ldr	r0, [sp, #8]
 800951c:	9f05      	ldr	r7, [sp, #20]
 800951e:	cf08      	ldmia	r7!, {r3}
 8009520:	9a01      	ldr	r2, [sp, #4]
 8009522:	b299      	uxth	r1, r3
 8009524:	4351      	muls	r1, r2
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	4353      	muls	r3, r2
 800952a:	1949      	adds	r1, r1, r5
 800952c:	0c0a      	lsrs	r2, r1, #16
 800952e:	189b      	adds	r3, r3, r2
 8009530:	6802      	ldr	r2, [r0, #0]
 8009532:	b289      	uxth	r1, r1
 8009534:	b292      	uxth	r2, r2
 8009536:	4462      	add	r2, ip
 8009538:	1a52      	subs	r2, r2, r1
 800953a:	6801      	ldr	r1, [r0, #0]
 800953c:	0c1d      	lsrs	r5, r3, #16
 800953e:	0c09      	lsrs	r1, r1, #16
 8009540:	b29b      	uxth	r3, r3
 8009542:	1acb      	subs	r3, r1, r3
 8009544:	1411      	asrs	r1, r2, #16
 8009546:	185b      	adds	r3, r3, r1
 8009548:	1419      	asrs	r1, r3, #16
 800954a:	b292      	uxth	r2, r2
 800954c:	041b      	lsls	r3, r3, #16
 800954e:	431a      	orrs	r2, r3
 8009550:	9b04      	ldr	r3, [sp, #16]
 8009552:	468c      	mov	ip, r1
 8009554:	c004      	stmia	r0!, {r2}
 8009556:	42bb      	cmp	r3, r7
 8009558:	d2e1      	bcs.n	800951e <quorem+0x4a>
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d030      	beq.n	80095c2 <quorem+0xee>
 8009560:	0030      	movs	r0, r6
 8009562:	9903      	ldr	r1, [sp, #12]
 8009564:	f001 f902 	bl	800a76c <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	db21      	blt.n	80095b0 <quorem+0xdc>
 800956c:	0030      	movs	r0, r6
 800956e:	2400      	movs	r4, #0
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	9903      	ldr	r1, [sp, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	3014      	adds	r0, #20
 800957a:	3114      	adds	r1, #20
 800957c:	6803      	ldr	r3, [r0, #0]
 800957e:	c920      	ldmia	r1!, {r5}
 8009580:	b29a      	uxth	r2, r3
 8009582:	1914      	adds	r4, r2, r4
 8009584:	b2aa      	uxth	r2, r5
 8009586:	1aa2      	subs	r2, r4, r2
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	0c2d      	lsrs	r5, r5, #16
 800958c:	1414      	asrs	r4, r2, #16
 800958e:	1b5b      	subs	r3, r3, r5
 8009590:	191b      	adds	r3, r3, r4
 8009592:	141c      	asrs	r4, r3, #16
 8009594:	b292      	uxth	r2, r2
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	4313      	orrs	r3, r2
 800959a:	c008      	stmia	r0!, {r3}
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	428b      	cmp	r3, r1
 80095a0:	d2ec      	bcs.n	800957c <quorem+0xa8>
 80095a2:	9b00      	ldr	r3, [sp, #0]
 80095a4:	9a02      	ldr	r2, [sp, #8]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	18d3      	adds	r3, r2, r3
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	d015      	beq.n	80095dc <quorem+0x108>
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	b007      	add	sp, #28
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <quorem+0xf6>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	9b02      	ldr	r3, [sp, #8]
 80095c4:	3c04      	subs	r4, #4
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	d3f5      	bcc.n	80095b6 <quorem+0xe2>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	6133      	str	r3, [r6, #16]
 80095ce:	e7c7      	b.n	8009560 <quorem+0x8c>
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	d106      	bne.n	80095e4 <quorem+0x110>
 80095d6:	9a00      	ldr	r2, [sp, #0]
 80095d8:	3a01      	subs	r2, #1
 80095da:	9200      	str	r2, [sp, #0]
 80095dc:	9a02      	ldr	r2, [sp, #8]
 80095de:	3b04      	subs	r3, #4
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3f5      	bcc.n	80095d0 <quorem+0xfc>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	6133      	str	r3, [r6, #16]
 80095e8:	e7e2      	b.n	80095b0 <quorem+0xdc>
	...

080095ec <_dtoa_r>:
 80095ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ee:	b09d      	sub	sp, #116	; 0x74
 80095f0:	9202      	str	r2, [sp, #8]
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	9b02      	ldr	r3, [sp, #8]
 80095f6:	9c03      	ldr	r4, [sp, #12]
 80095f8:	9308      	str	r3, [sp, #32]
 80095fa:	9409      	str	r4, [sp, #36]	; 0x24
 80095fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80095fe:	0007      	movs	r7, r0
 8009600:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009602:	2c00      	cmp	r4, #0
 8009604:	d10e      	bne.n	8009624 <_dtoa_r+0x38>
 8009606:	2010      	movs	r0, #16
 8009608:	f000 fe0e 	bl	800a228 <malloc>
 800960c:	1e02      	subs	r2, r0, #0
 800960e:	6278      	str	r0, [r7, #36]	; 0x24
 8009610:	d104      	bne.n	800961c <_dtoa_r+0x30>
 8009612:	21ea      	movs	r1, #234	; 0xea
 8009614:	4bc7      	ldr	r3, [pc, #796]	; (8009934 <_dtoa_r+0x348>)
 8009616:	48c8      	ldr	r0, [pc, #800]	; (8009938 <_dtoa_r+0x34c>)
 8009618:	f001 fc42 	bl	800aea0 <__assert_func>
 800961c:	6044      	str	r4, [r0, #4]
 800961e:	6084      	str	r4, [r0, #8]
 8009620:	6004      	str	r4, [r0, #0]
 8009622:	60c4      	str	r4, [r0, #12]
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	6819      	ldr	r1, [r3, #0]
 8009628:	2900      	cmp	r1, #0
 800962a:	d00a      	beq.n	8009642 <_dtoa_r+0x56>
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	2301      	movs	r3, #1
 8009630:	4093      	lsls	r3, r2
 8009632:	604a      	str	r2, [r1, #4]
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	0038      	movs	r0, r7
 8009638:	f000 fe58 	bl	800a2ec <_Bfree>
 800963c:	2200      	movs	r2, #0
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da20      	bge.n	800968a <_dtoa_r+0x9e>
 8009648:	2301      	movs	r3, #1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	085b      	lsrs	r3, r3, #1
 8009652:	9309      	str	r3, [sp, #36]	; 0x24
 8009654:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009656:	4bb9      	ldr	r3, [pc, #740]	; (800993c <_dtoa_r+0x350>)
 8009658:	4ab8      	ldr	r2, [pc, #736]	; (800993c <_dtoa_r+0x350>)
 800965a:	402b      	ands	r3, r5
 800965c:	4293      	cmp	r3, r2
 800965e:	d117      	bne.n	8009690 <_dtoa_r+0xa4>
 8009660:	4bb7      	ldr	r3, [pc, #732]	; (8009940 <_dtoa_r+0x354>)
 8009662:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009664:	0328      	lsls	r0, r5, #12
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	9b02      	ldr	r3, [sp, #8]
 800966a:	0b00      	lsrs	r0, r0, #12
 800966c:	4318      	orrs	r0, r3
 800966e:	d101      	bne.n	8009674 <_dtoa_r+0x88>
 8009670:	f000 fdbf 	bl	800a1f2 <_dtoa_r+0xc06>
 8009674:	48b3      	ldr	r0, [pc, #716]	; (8009944 <_dtoa_r+0x358>)
 8009676:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009678:	9006      	str	r0, [sp, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <_dtoa_r+0x98>
 800967e:	4bb2      	ldr	r3, [pc, #712]	; (8009948 <_dtoa_r+0x35c>)
 8009680:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	9806      	ldr	r0, [sp, #24]
 8009686:	b01d      	add	sp, #116	; 0x74
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968a:	2300      	movs	r3, #0
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	e7e1      	b.n	8009654 <_dtoa_r+0x68>
 8009690:	9b08      	ldr	r3, [sp, #32]
 8009692:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009694:	9312      	str	r3, [sp, #72]	; 0x48
 8009696:	9413      	str	r4, [sp, #76]	; 0x4c
 8009698:	9812      	ldr	r0, [sp, #72]	; 0x48
 800969a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800969c:	2200      	movs	r2, #0
 800969e:	2300      	movs	r3, #0
 80096a0:	f7f6 fed4 	bl	800044c <__aeabi_dcmpeq>
 80096a4:	1e04      	subs	r4, r0, #0
 80096a6:	d009      	beq.n	80096bc <_dtoa_r+0xd0>
 80096a8:	2301      	movs	r3, #1
 80096aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	4ba7      	ldr	r3, [pc, #668]	; (800994c <_dtoa_r+0x360>)
 80096b0:	9306      	str	r3, [sp, #24]
 80096b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0e5      	beq.n	8009684 <_dtoa_r+0x98>
 80096b8:	4ba5      	ldr	r3, [pc, #660]	; (8009950 <_dtoa_r+0x364>)
 80096ba:	e7e1      	b.n	8009680 <_dtoa_r+0x94>
 80096bc:	ab1a      	add	r3, sp, #104	; 0x68
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	ab1b      	add	r3, sp, #108	; 0x6c
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	0038      	movs	r0, r7
 80096c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ca:	f001 f903 	bl	800a8d4 <__d2b>
 80096ce:	006e      	lsls	r6, r5, #1
 80096d0:	9005      	str	r0, [sp, #20]
 80096d2:	0d76      	lsrs	r6, r6, #21
 80096d4:	d100      	bne.n	80096d8 <_dtoa_r+0xec>
 80096d6:	e07c      	b.n	80097d2 <_dtoa_r+0x1e6>
 80096d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80096dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096de:	4a9d      	ldr	r2, [pc, #628]	; (8009954 <_dtoa_r+0x368>)
 80096e0:	031b      	lsls	r3, r3, #12
 80096e2:	0b1b      	lsrs	r3, r3, #12
 80096e4:	431a      	orrs	r2, r3
 80096e6:	0011      	movs	r1, r2
 80096e8:	4b9b      	ldr	r3, [pc, #620]	; (8009958 <_dtoa_r+0x36c>)
 80096ea:	9418      	str	r4, [sp, #96]	; 0x60
 80096ec:	18f6      	adds	r6, r6, r3
 80096ee:	2200      	movs	r2, #0
 80096f0:	4b9a      	ldr	r3, [pc, #616]	; (800995c <_dtoa_r+0x370>)
 80096f2:	f7f8 f883 	bl	80017fc <__aeabi_dsub>
 80096f6:	4a9a      	ldr	r2, [pc, #616]	; (8009960 <_dtoa_r+0x374>)
 80096f8:	4b9a      	ldr	r3, [pc, #616]	; (8009964 <_dtoa_r+0x378>)
 80096fa:	f7f7 fe13 	bl	8001324 <__aeabi_dmul>
 80096fe:	4a9a      	ldr	r2, [pc, #616]	; (8009968 <_dtoa_r+0x37c>)
 8009700:	4b9a      	ldr	r3, [pc, #616]	; (800996c <_dtoa_r+0x380>)
 8009702:	f7f6 fed1 	bl	80004a8 <__aeabi_dadd>
 8009706:	0004      	movs	r4, r0
 8009708:	0030      	movs	r0, r6
 800970a:	000d      	movs	r5, r1
 800970c:	f7f8 fc5c 	bl	8001fc8 <__aeabi_i2d>
 8009710:	4a97      	ldr	r2, [pc, #604]	; (8009970 <_dtoa_r+0x384>)
 8009712:	4b98      	ldr	r3, [pc, #608]	; (8009974 <_dtoa_r+0x388>)
 8009714:	f7f7 fe06 	bl	8001324 <__aeabi_dmul>
 8009718:	0002      	movs	r2, r0
 800971a:	000b      	movs	r3, r1
 800971c:	0020      	movs	r0, r4
 800971e:	0029      	movs	r1, r5
 8009720:	f7f6 fec2 	bl	80004a8 <__aeabi_dadd>
 8009724:	0004      	movs	r4, r0
 8009726:	000d      	movs	r5, r1
 8009728:	f7f8 fc18 	bl	8001f5c <__aeabi_d2iz>
 800972c:	2200      	movs	r2, #0
 800972e:	9002      	str	r0, [sp, #8]
 8009730:	2300      	movs	r3, #0
 8009732:	0020      	movs	r0, r4
 8009734:	0029      	movs	r1, r5
 8009736:	f7f6 fe8f 	bl	8000458 <__aeabi_dcmplt>
 800973a:	2800      	cmp	r0, #0
 800973c:	d00b      	beq.n	8009756 <_dtoa_r+0x16a>
 800973e:	9802      	ldr	r0, [sp, #8]
 8009740:	f7f8 fc42 	bl	8001fc8 <__aeabi_i2d>
 8009744:	002b      	movs	r3, r5
 8009746:	0022      	movs	r2, r4
 8009748:	f7f6 fe80 	bl	800044c <__aeabi_dcmpeq>
 800974c:	4243      	negs	r3, r0
 800974e:	4158      	adcs	r0, r3
 8009750:	9b02      	ldr	r3, [sp, #8]
 8009752:	1a1b      	subs	r3, r3, r0
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	2301      	movs	r3, #1
 8009758:	9316      	str	r3, [sp, #88]	; 0x58
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	2b16      	cmp	r3, #22
 800975e:	d80f      	bhi.n	8009780 <_dtoa_r+0x194>
 8009760:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009762:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009764:	00da      	lsls	r2, r3, #3
 8009766:	4b84      	ldr	r3, [pc, #528]	; (8009978 <_dtoa_r+0x38c>)
 8009768:	189b      	adds	r3, r3, r2
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f7f6 fe73 	bl	8000458 <__aeabi_dcmplt>
 8009772:	2800      	cmp	r0, #0
 8009774:	d049      	beq.n	800980a <_dtoa_r+0x21e>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	3b01      	subs	r3, #1
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	2300      	movs	r3, #0
 800977e:	9316      	str	r3, [sp, #88]	; 0x58
 8009780:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009782:	1b9e      	subs	r6, r3, r6
 8009784:	2300      	movs	r3, #0
 8009786:	930a      	str	r3, [sp, #40]	; 0x28
 8009788:	0033      	movs	r3, r6
 800978a:	3b01      	subs	r3, #1
 800978c:	930d      	str	r3, [sp, #52]	; 0x34
 800978e:	d504      	bpl.n	800979a <_dtoa_r+0x1ae>
 8009790:	2301      	movs	r3, #1
 8009792:	1b9b      	subs	r3, r3, r6
 8009794:	930a      	str	r3, [sp, #40]	; 0x28
 8009796:	2300      	movs	r3, #0
 8009798:	930d      	str	r3, [sp, #52]	; 0x34
 800979a:	9b02      	ldr	r3, [sp, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	db36      	blt.n	800980e <_dtoa_r+0x222>
 80097a0:	9a02      	ldr	r2, [sp, #8]
 80097a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a4:	4694      	mov	ip, r2
 80097a6:	4463      	add	r3, ip
 80097a8:	930d      	str	r3, [sp, #52]	; 0x34
 80097aa:	2300      	movs	r3, #0
 80097ac:	9215      	str	r2, [sp, #84]	; 0x54
 80097ae:	930e      	str	r3, [sp, #56]	; 0x38
 80097b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097b2:	2401      	movs	r4, #1
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d864      	bhi.n	8009882 <_dtoa_r+0x296>
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	dd02      	ble.n	80097c2 <_dtoa_r+0x1d6>
 80097bc:	2400      	movs	r4, #0
 80097be:	3b04      	subs	r3, #4
 80097c0:	9322      	str	r3, [sp, #136]	; 0x88
 80097c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097c4:	1e98      	subs	r0, r3, #2
 80097c6:	2803      	cmp	r0, #3
 80097c8:	d864      	bhi.n	8009894 <_dtoa_r+0x2a8>
 80097ca:	f7f6 fca5 	bl	8000118 <__gnu_thumb1_case_uqi>
 80097ce:	3829      	.short	0x3829
 80097d0:	5836      	.short	0x5836
 80097d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80097d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097d6:	189e      	adds	r6, r3, r2
 80097d8:	4b68      	ldr	r3, [pc, #416]	; (800997c <_dtoa_r+0x390>)
 80097da:	18f2      	adds	r2, r6, r3
 80097dc:	2a20      	cmp	r2, #32
 80097de:	dd0f      	ble.n	8009800 <_dtoa_r+0x214>
 80097e0:	2340      	movs	r3, #64	; 0x40
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	409d      	lsls	r5, r3
 80097e6:	4b66      	ldr	r3, [pc, #408]	; (8009980 <_dtoa_r+0x394>)
 80097e8:	9802      	ldr	r0, [sp, #8]
 80097ea:	18f3      	adds	r3, r6, r3
 80097ec:	40d8      	lsrs	r0, r3
 80097ee:	4328      	orrs	r0, r5
 80097f0:	f7f8 fc1a 	bl	8002028 <__aeabi_ui2d>
 80097f4:	2301      	movs	r3, #1
 80097f6:	4c63      	ldr	r4, [pc, #396]	; (8009984 <_dtoa_r+0x398>)
 80097f8:	3e01      	subs	r6, #1
 80097fa:	1909      	adds	r1, r1, r4
 80097fc:	9318      	str	r3, [sp, #96]	; 0x60
 80097fe:	e776      	b.n	80096ee <_dtoa_r+0x102>
 8009800:	2320      	movs	r3, #32
 8009802:	9802      	ldr	r0, [sp, #8]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	4098      	lsls	r0, r3
 8009808:	e7f2      	b.n	80097f0 <_dtoa_r+0x204>
 800980a:	9016      	str	r0, [sp, #88]	; 0x58
 800980c:	e7b8      	b.n	8009780 <_dtoa_r+0x194>
 800980e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009810:	9a02      	ldr	r2, [sp, #8]
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	930a      	str	r3, [sp, #40]	; 0x28
 8009816:	4253      	negs	r3, r2
 8009818:	930e      	str	r3, [sp, #56]	; 0x38
 800981a:	2300      	movs	r3, #0
 800981c:	9315      	str	r3, [sp, #84]	; 0x54
 800981e:	e7c7      	b.n	80097b0 <_dtoa_r+0x1c4>
 8009820:	2300      	movs	r3, #0
 8009822:	930f      	str	r3, [sp, #60]	; 0x3c
 8009824:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009826:	930c      	str	r3, [sp, #48]	; 0x30
 8009828:	9307      	str	r3, [sp, #28]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc13      	bgt.n	8009856 <_dtoa_r+0x26a>
 800982e:	2301      	movs	r3, #1
 8009830:	001a      	movs	r2, r3
 8009832:	930c      	str	r3, [sp, #48]	; 0x30
 8009834:	9307      	str	r3, [sp, #28]
 8009836:	9223      	str	r2, [sp, #140]	; 0x8c
 8009838:	e00d      	b.n	8009856 <_dtoa_r+0x26a>
 800983a:	2301      	movs	r3, #1
 800983c:	e7f1      	b.n	8009822 <_dtoa_r+0x236>
 800983e:	2300      	movs	r3, #0
 8009840:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009842:	930f      	str	r3, [sp, #60]	; 0x3c
 8009844:	4694      	mov	ip, r2
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	4463      	add	r3, ip
 800984a:	930c      	str	r3, [sp, #48]	; 0x30
 800984c:	3301      	adds	r3, #1
 800984e:	9307      	str	r3, [sp, #28]
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc00      	bgt.n	8009856 <_dtoa_r+0x26a>
 8009854:	2301      	movs	r3, #1
 8009856:	2200      	movs	r2, #0
 8009858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985a:	6042      	str	r2, [r0, #4]
 800985c:	3204      	adds	r2, #4
 800985e:	0015      	movs	r5, r2
 8009860:	3514      	adds	r5, #20
 8009862:	6841      	ldr	r1, [r0, #4]
 8009864:	429d      	cmp	r5, r3
 8009866:	d919      	bls.n	800989c <_dtoa_r+0x2b0>
 8009868:	0038      	movs	r0, r7
 800986a:	f000 fcfb 	bl	800a264 <_Balloc>
 800986e:	9006      	str	r0, [sp, #24]
 8009870:	2800      	cmp	r0, #0
 8009872:	d117      	bne.n	80098a4 <_dtoa_r+0x2b8>
 8009874:	21d5      	movs	r1, #213	; 0xd5
 8009876:	0002      	movs	r2, r0
 8009878:	4b43      	ldr	r3, [pc, #268]	; (8009988 <_dtoa_r+0x39c>)
 800987a:	0049      	lsls	r1, r1, #1
 800987c:	e6cb      	b.n	8009616 <_dtoa_r+0x2a>
 800987e:	2301      	movs	r3, #1
 8009880:	e7de      	b.n	8009840 <_dtoa_r+0x254>
 8009882:	2300      	movs	r3, #0
 8009884:	940f      	str	r4, [sp, #60]	; 0x3c
 8009886:	9322      	str	r3, [sp, #136]	; 0x88
 8009888:	3b01      	subs	r3, #1
 800988a:	930c      	str	r3, [sp, #48]	; 0x30
 800988c:	9307      	str	r3, [sp, #28]
 800988e:	2200      	movs	r2, #0
 8009890:	3313      	adds	r3, #19
 8009892:	e7d0      	b.n	8009836 <_dtoa_r+0x24a>
 8009894:	2301      	movs	r3, #1
 8009896:	930f      	str	r3, [sp, #60]	; 0x3c
 8009898:	3b02      	subs	r3, #2
 800989a:	e7f6      	b.n	800988a <_dtoa_r+0x29e>
 800989c:	3101      	adds	r1, #1
 800989e:	6041      	str	r1, [r0, #4]
 80098a0:	0052      	lsls	r2, r2, #1
 80098a2:	e7dc      	b.n	800985e <_dtoa_r+0x272>
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	9a06      	ldr	r2, [sp, #24]
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	2b0e      	cmp	r3, #14
 80098ae:	d900      	bls.n	80098b2 <_dtoa_r+0x2c6>
 80098b0:	e0eb      	b.n	8009a8a <_dtoa_r+0x49e>
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	d100      	bne.n	80098b8 <_dtoa_r+0x2cc>
 80098b6:	e0e8      	b.n	8009a8a <_dtoa_r+0x49e>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dd68      	ble.n	8009990 <_dtoa_r+0x3a4>
 80098be:	001a      	movs	r2, r3
 80098c0:	210f      	movs	r1, #15
 80098c2:	4b2d      	ldr	r3, [pc, #180]	; (8009978 <_dtoa_r+0x38c>)
 80098c4:	400a      	ands	r2, r1
 80098c6:	00d2      	lsls	r2, r2, #3
 80098c8:	189b      	adds	r3, r3, r2
 80098ca:	681d      	ldr	r5, [r3, #0]
 80098cc:	685e      	ldr	r6, [r3, #4]
 80098ce:	9b02      	ldr	r3, [sp, #8]
 80098d0:	111c      	asrs	r4, r3, #4
 80098d2:	2302      	movs	r3, #2
 80098d4:	9310      	str	r3, [sp, #64]	; 0x40
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	05db      	lsls	r3, r3, #23
 80098da:	d50b      	bpl.n	80098f4 <_dtoa_r+0x308>
 80098dc:	4b2b      	ldr	r3, [pc, #172]	; (800998c <_dtoa_r+0x3a0>)
 80098de:	400c      	ands	r4, r1
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80098e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098e8:	f7f7 f91a 	bl	8000b20 <__aeabi_ddiv>
 80098ec:	2303      	movs	r3, #3
 80098ee:	9008      	str	r0, [sp, #32]
 80098f0:	9109      	str	r1, [sp, #36]	; 0x24
 80098f2:	9310      	str	r3, [sp, #64]	; 0x40
 80098f4:	4b25      	ldr	r3, [pc, #148]	; (800998c <_dtoa_r+0x3a0>)
 80098f6:	9314      	str	r3, [sp, #80]	; 0x50
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	d108      	bne.n	800990e <_dtoa_r+0x322>
 80098fc:	9808      	ldr	r0, [sp, #32]
 80098fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009900:	002a      	movs	r2, r5
 8009902:	0033      	movs	r3, r6
 8009904:	f7f7 f90c 	bl	8000b20 <__aeabi_ddiv>
 8009908:	9008      	str	r0, [sp, #32]
 800990a:	9109      	str	r1, [sp, #36]	; 0x24
 800990c:	e05c      	b.n	80099c8 <_dtoa_r+0x3dc>
 800990e:	2301      	movs	r3, #1
 8009910:	421c      	tst	r4, r3
 8009912:	d00b      	beq.n	800992c <_dtoa_r+0x340>
 8009914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009916:	0028      	movs	r0, r5
 8009918:	3301      	adds	r3, #1
 800991a:	9310      	str	r3, [sp, #64]	; 0x40
 800991c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800991e:	0031      	movs	r1, r6
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f7f7 fcfe 	bl	8001324 <__aeabi_dmul>
 8009928:	0005      	movs	r5, r0
 800992a:	000e      	movs	r6, r1
 800992c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800992e:	1064      	asrs	r4, r4, #1
 8009930:	3308      	adds	r3, #8
 8009932:	e7e0      	b.n	80098f6 <_dtoa_r+0x30a>
 8009934:	0800c829 	.word	0x0800c829
 8009938:	0800c840 	.word	0x0800c840
 800993c:	7ff00000 	.word	0x7ff00000
 8009940:	0000270f 	.word	0x0000270f
 8009944:	0800c825 	.word	0x0800c825
 8009948:	0800c828 	.word	0x0800c828
 800994c:	0800c7f8 	.word	0x0800c7f8
 8009950:	0800c7f9 	.word	0x0800c7f9
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	fffffc01 	.word	0xfffffc01
 800995c:	3ff80000 	.word	0x3ff80000
 8009960:	636f4361 	.word	0x636f4361
 8009964:	3fd287a7 	.word	0x3fd287a7
 8009968:	8b60c8b3 	.word	0x8b60c8b3
 800996c:	3fc68a28 	.word	0x3fc68a28
 8009970:	509f79fb 	.word	0x509f79fb
 8009974:	3fd34413 	.word	0x3fd34413
 8009978:	0800c930 	.word	0x0800c930
 800997c:	00000432 	.word	0x00000432
 8009980:	00000412 	.word	0x00000412
 8009984:	fe100000 	.word	0xfe100000
 8009988:	0800c89b 	.word	0x0800c89b
 800998c:	0800c908 	.word	0x0800c908
 8009990:	2302      	movs	r3, #2
 8009992:	9310      	str	r3, [sp, #64]	; 0x40
 8009994:	9b02      	ldr	r3, [sp, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d016      	beq.n	80099c8 <_dtoa_r+0x3dc>
 800999a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800999c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800999e:	425c      	negs	r4, r3
 80099a0:	230f      	movs	r3, #15
 80099a2:	4ab6      	ldr	r2, [pc, #728]	; (8009c7c <_dtoa_r+0x690>)
 80099a4:	4023      	ands	r3, r4
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f7f7 fcb9 	bl	8001324 <__aeabi_dmul>
 80099b2:	2601      	movs	r6, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	9008      	str	r0, [sp, #32]
 80099b8:	9109      	str	r1, [sp, #36]	; 0x24
 80099ba:	4db1      	ldr	r5, [pc, #708]	; (8009c80 <_dtoa_r+0x694>)
 80099bc:	1124      	asrs	r4, r4, #4
 80099be:	2c00      	cmp	r4, #0
 80099c0:	d000      	beq.n	80099c4 <_dtoa_r+0x3d8>
 80099c2:	e094      	b.n	8009aee <_dtoa_r+0x502>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d19f      	bne.n	8009908 <_dtoa_r+0x31c>
 80099c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d100      	bne.n	80099d0 <_dtoa_r+0x3e4>
 80099ce:	e09b      	b.n	8009b08 <_dtoa_r+0x51c>
 80099d0:	9c08      	ldr	r4, [sp, #32]
 80099d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099d4:	2200      	movs	r2, #0
 80099d6:	0020      	movs	r0, r4
 80099d8:	0029      	movs	r1, r5
 80099da:	4baa      	ldr	r3, [pc, #680]	; (8009c84 <_dtoa_r+0x698>)
 80099dc:	f7f6 fd3c 	bl	8000458 <__aeabi_dcmplt>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d100      	bne.n	80099e6 <_dtoa_r+0x3fa>
 80099e4:	e090      	b.n	8009b08 <_dtoa_r+0x51c>
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d100      	bne.n	80099ee <_dtoa_r+0x402>
 80099ec:	e08c      	b.n	8009b08 <_dtoa_r+0x51c>
 80099ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dd46      	ble.n	8009a82 <_dtoa_r+0x496>
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	2200      	movs	r2, #0
 80099f8:	0020      	movs	r0, r4
 80099fa:	0029      	movs	r1, r5
 80099fc:	1e5e      	subs	r6, r3, #1
 80099fe:	4ba2      	ldr	r3, [pc, #648]	; (8009c88 <_dtoa_r+0x69c>)
 8009a00:	f7f7 fc90 	bl	8001324 <__aeabi_dmul>
 8009a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a06:	9008      	str	r0, [sp, #32]
 8009a08:	9109      	str	r1, [sp, #36]	; 0x24
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	9310      	str	r3, [sp, #64]	; 0x40
 8009a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a12:	9c08      	ldr	r4, [sp, #32]
 8009a14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a16:	9314      	str	r3, [sp, #80]	; 0x50
 8009a18:	f7f8 fad6 	bl	8001fc8 <__aeabi_i2d>
 8009a1c:	0022      	movs	r2, r4
 8009a1e:	002b      	movs	r3, r5
 8009a20:	f7f7 fc80 	bl	8001324 <__aeabi_dmul>
 8009a24:	2200      	movs	r2, #0
 8009a26:	4b99      	ldr	r3, [pc, #612]	; (8009c8c <_dtoa_r+0x6a0>)
 8009a28:	f7f6 fd3e 	bl	80004a8 <__aeabi_dadd>
 8009a2c:	9010      	str	r0, [sp, #64]	; 0x40
 8009a2e:	9111      	str	r1, [sp, #68]	; 0x44
 8009a30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a34:	9208      	str	r2, [sp, #32]
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	4a95      	ldr	r2, [pc, #596]	; (8009c90 <_dtoa_r+0x6a4>)
 8009a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a3c:	4694      	mov	ip, r2
 8009a3e:	4463      	add	r3, ip
 8009a40:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d161      	bne.n	8009b0e <_dtoa_r+0x522>
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	0020      	movs	r0, r4
 8009a4e:	0029      	movs	r1, r5
 8009a50:	4b90      	ldr	r3, [pc, #576]	; (8009c94 <_dtoa_r+0x6a8>)
 8009a52:	f7f7 fed3 	bl	80017fc <__aeabi_dsub>
 8009a56:	9a08      	ldr	r2, [sp, #32]
 8009a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a5a:	0004      	movs	r4, r0
 8009a5c:	000d      	movs	r5, r1
 8009a5e:	f7f6 fd0f 	bl	8000480 <__aeabi_dcmpgt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d000      	beq.n	8009a68 <_dtoa_r+0x47c>
 8009a66:	e2af      	b.n	8009fc8 <_dtoa_r+0x9dc>
 8009a68:	488b      	ldr	r0, [pc, #556]	; (8009c98 <_dtoa_r+0x6ac>)
 8009a6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a6c:	4684      	mov	ip, r0
 8009a6e:	4461      	add	r1, ip
 8009a70:	000b      	movs	r3, r1
 8009a72:	0020      	movs	r0, r4
 8009a74:	0029      	movs	r1, r5
 8009a76:	9a08      	ldr	r2, [sp, #32]
 8009a78:	f7f6 fcee 	bl	8000458 <__aeabi_dcmplt>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d000      	beq.n	8009a82 <_dtoa_r+0x496>
 8009a80:	e29f      	b.n	8009fc2 <_dtoa_r+0x9d6>
 8009a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009a86:	9308      	str	r3, [sp, #32]
 8009a88:	9409      	str	r4, [sp, #36]	; 0x24
 8009a8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da00      	bge.n	8009a92 <_dtoa_r+0x4a6>
 8009a90:	e172      	b.n	8009d78 <_dtoa_r+0x78c>
 8009a92:	9a02      	ldr	r2, [sp, #8]
 8009a94:	2a0e      	cmp	r2, #14
 8009a96:	dd00      	ble.n	8009a9a <_dtoa_r+0x4ae>
 8009a98:	e16e      	b.n	8009d78 <_dtoa_r+0x78c>
 8009a9a:	4b78      	ldr	r3, [pc, #480]	; (8009c7c <_dtoa_r+0x690>)
 8009a9c:	00d2      	lsls	r2, r2, #3
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	685c      	ldr	r4, [r3, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa6:	940b      	str	r4, [sp, #44]	; 0x2c
 8009aa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	db00      	blt.n	8009ab0 <_dtoa_r+0x4c4>
 8009aae:	e0f7      	b.n	8009ca0 <_dtoa_r+0x6b4>
 8009ab0:	9b07      	ldr	r3, [sp, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dd00      	ble.n	8009ab8 <_dtoa_r+0x4cc>
 8009ab6:	e0f3      	b.n	8009ca0 <_dtoa_r+0x6b4>
 8009ab8:	d000      	beq.n	8009abc <_dtoa_r+0x4d0>
 8009aba:	e282      	b.n	8009fc2 <_dtoa_r+0x9d6>
 8009abc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4b74      	ldr	r3, [pc, #464]	; (8009c94 <_dtoa_r+0x6a8>)
 8009ac4:	f7f7 fc2e 	bl	8001324 <__aeabi_dmul>
 8009ac8:	9a08      	ldr	r2, [sp, #32]
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	f7f6 fce2 	bl	8000494 <__aeabi_dcmpge>
 8009ad0:	9e07      	ldr	r6, [sp, #28]
 8009ad2:	0035      	movs	r5, r6
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d000      	beq.n	8009ada <_dtoa_r+0x4ee>
 8009ad8:	e259      	b.n	8009f8e <_dtoa_r+0x9a2>
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	9a06      	ldr	r2, [sp, #24]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	9308      	str	r3, [sp, #32]
 8009ae2:	2331      	movs	r3, #49	; 0x31
 8009ae4:	7013      	strb	r3, [r2, #0]
 8009ae6:	9b02      	ldr	r3, [sp, #8]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	9302      	str	r3, [sp, #8]
 8009aec:	e254      	b.n	8009f98 <_dtoa_r+0x9ac>
 8009aee:	4234      	tst	r4, r6
 8009af0:	d007      	beq.n	8009b02 <_dtoa_r+0x516>
 8009af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009af4:	3301      	adds	r3, #1
 8009af6:	9310      	str	r3, [sp, #64]	; 0x40
 8009af8:	682a      	ldr	r2, [r5, #0]
 8009afa:	686b      	ldr	r3, [r5, #4]
 8009afc:	f7f7 fc12 	bl	8001324 <__aeabi_dmul>
 8009b00:	0033      	movs	r3, r6
 8009b02:	1064      	asrs	r4, r4, #1
 8009b04:	3508      	adds	r5, #8
 8009b06:	e75a      	b.n	80099be <_dtoa_r+0x3d2>
 8009b08:	9e02      	ldr	r6, [sp, #8]
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	e780      	b.n	8009a10 <_dtoa_r+0x424>
 8009b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b12:	1e5a      	subs	r2, r3, #1
 8009b14:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <_dtoa_r+0x690>)
 8009b16:	00d2      	lsls	r2, r2, #3
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	d051      	beq.n	8009bc6 <_dtoa_r+0x5da>
 8009b22:	2000      	movs	r0, #0
 8009b24:	495d      	ldr	r1, [pc, #372]	; (8009c9c <_dtoa_r+0x6b0>)
 8009b26:	f7f6 fffb 	bl	8000b20 <__aeabi_ddiv>
 8009b2a:	9a08      	ldr	r2, [sp, #32]
 8009b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2e:	f7f7 fe65 	bl	80017fc <__aeabi_dsub>
 8009b32:	9a06      	ldr	r2, [sp, #24]
 8009b34:	9b06      	ldr	r3, [sp, #24]
 8009b36:	4694      	mov	ip, r2
 8009b38:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b3c:	9010      	str	r0, [sp, #64]	; 0x40
 8009b3e:	9111      	str	r1, [sp, #68]	; 0x44
 8009b40:	4463      	add	r3, ip
 8009b42:	9319      	str	r3, [sp, #100]	; 0x64
 8009b44:	0029      	movs	r1, r5
 8009b46:	0020      	movs	r0, r4
 8009b48:	f7f8 fa08 	bl	8001f5c <__aeabi_d2iz>
 8009b4c:	9014      	str	r0, [sp, #80]	; 0x50
 8009b4e:	f7f8 fa3b 	bl	8001fc8 <__aeabi_i2d>
 8009b52:	0002      	movs	r2, r0
 8009b54:	000b      	movs	r3, r1
 8009b56:	0020      	movs	r0, r4
 8009b58:	0029      	movs	r1, r5
 8009b5a:	f7f7 fe4f 	bl	80017fc <__aeabi_dsub>
 8009b5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b62:	3301      	adds	r3, #1
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b68:	0004      	movs	r4, r0
 8009b6a:	3330      	adds	r3, #48	; 0x30
 8009b6c:	7013      	strb	r3, [r2, #0]
 8009b6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b72:	000d      	movs	r5, r1
 8009b74:	f7f6 fc70 	bl	8000458 <__aeabi_dcmplt>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d175      	bne.n	8009c68 <_dtoa_r+0x67c>
 8009b7c:	0022      	movs	r2, r4
 8009b7e:	002b      	movs	r3, r5
 8009b80:	2000      	movs	r0, #0
 8009b82:	4940      	ldr	r1, [pc, #256]	; (8009c84 <_dtoa_r+0x698>)
 8009b84:	f7f7 fe3a 	bl	80017fc <__aeabi_dsub>
 8009b88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b8c:	f7f6 fc64 	bl	8000458 <__aeabi_dcmplt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d000      	beq.n	8009b96 <_dtoa_r+0x5aa>
 8009b94:	e0d2      	b.n	8009d3c <_dtoa_r+0x750>
 8009b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b98:	9a08      	ldr	r2, [sp, #32]
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d100      	bne.n	8009ba0 <_dtoa_r+0x5b4>
 8009b9e:	e770      	b.n	8009a82 <_dtoa_r+0x496>
 8009ba0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ba2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4b38      	ldr	r3, [pc, #224]	; (8009c88 <_dtoa_r+0x69c>)
 8009ba8:	f7f7 fbbc 	bl	8001324 <__aeabi_dmul>
 8009bac:	4b36      	ldr	r3, [pc, #216]	; (8009c88 <_dtoa_r+0x69c>)
 8009bae:	9010      	str	r0, [sp, #64]	; 0x40
 8009bb0:	9111      	str	r1, [sp, #68]	; 0x44
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	0020      	movs	r0, r4
 8009bb6:	0029      	movs	r1, r5
 8009bb8:	f7f7 fbb4 	bl	8001324 <__aeabi_dmul>
 8009bbc:	9b08      	ldr	r3, [sp, #32]
 8009bbe:	0004      	movs	r4, r0
 8009bc0:	000d      	movs	r5, r1
 8009bc2:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bc4:	e7be      	b.n	8009b44 <_dtoa_r+0x558>
 8009bc6:	9808      	ldr	r0, [sp, #32]
 8009bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bca:	f7f7 fbab 	bl	8001324 <__aeabi_dmul>
 8009bce:	9a06      	ldr	r2, [sp, #24]
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	4694      	mov	ip, r2
 8009bd4:	9308      	str	r3, [sp, #32]
 8009bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bd8:	9010      	str	r0, [sp, #64]	; 0x40
 8009bda:	9111      	str	r1, [sp, #68]	; 0x44
 8009bdc:	4463      	add	r3, ip
 8009bde:	9319      	str	r3, [sp, #100]	; 0x64
 8009be0:	0029      	movs	r1, r5
 8009be2:	0020      	movs	r0, r4
 8009be4:	f7f8 f9ba 	bl	8001f5c <__aeabi_d2iz>
 8009be8:	9017      	str	r0, [sp, #92]	; 0x5c
 8009bea:	f7f8 f9ed 	bl	8001fc8 <__aeabi_i2d>
 8009bee:	0002      	movs	r2, r0
 8009bf0:	000b      	movs	r3, r1
 8009bf2:	0020      	movs	r0, r4
 8009bf4:	0029      	movs	r1, r5
 8009bf6:	f7f7 fe01 	bl	80017fc <__aeabi_dsub>
 8009bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bfc:	9a08      	ldr	r2, [sp, #32]
 8009bfe:	3330      	adds	r3, #48	; 0x30
 8009c00:	7013      	strb	r3, [r2, #0]
 8009c02:	0013      	movs	r3, r2
 8009c04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c06:	3301      	adds	r3, #1
 8009c08:	0004      	movs	r4, r0
 8009c0a:	000d      	movs	r5, r1
 8009c0c:	9308      	str	r3, [sp, #32]
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d12c      	bne.n	8009c6c <_dtoa_r+0x680>
 8009c12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c16:	9a06      	ldr	r2, [sp, #24]
 8009c18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c1a:	4694      	mov	ip, r2
 8009c1c:	4463      	add	r3, ip
 8009c1e:	2200      	movs	r2, #0
 8009c20:	9308      	str	r3, [sp, #32]
 8009c22:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <_dtoa_r+0x6b0>)
 8009c24:	f7f6 fc40 	bl	80004a8 <__aeabi_dadd>
 8009c28:	0002      	movs	r2, r0
 8009c2a:	000b      	movs	r3, r1
 8009c2c:	0020      	movs	r0, r4
 8009c2e:	0029      	movs	r1, r5
 8009c30:	f7f6 fc26 	bl	8000480 <__aeabi_dcmpgt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d000      	beq.n	8009c3a <_dtoa_r+0x64e>
 8009c38:	e080      	b.n	8009d3c <_dtoa_r+0x750>
 8009c3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c3e:	2000      	movs	r0, #0
 8009c40:	4916      	ldr	r1, [pc, #88]	; (8009c9c <_dtoa_r+0x6b0>)
 8009c42:	f7f7 fddb 	bl	80017fc <__aeabi_dsub>
 8009c46:	0002      	movs	r2, r0
 8009c48:	000b      	movs	r3, r1
 8009c4a:	0020      	movs	r0, r4
 8009c4c:	0029      	movs	r1, r5
 8009c4e:	f7f6 fc03 	bl	8000458 <__aeabi_dcmplt>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d100      	bne.n	8009c58 <_dtoa_r+0x66c>
 8009c56:	e714      	b.n	8009a82 <_dtoa_r+0x496>
 8009c58:	9b08      	ldr	r3, [sp, #32]
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	3a01      	subs	r2, #1
 8009c5e:	9208      	str	r2, [sp, #32]
 8009c60:	7812      	ldrb	r2, [r2, #0]
 8009c62:	2a30      	cmp	r2, #48	; 0x30
 8009c64:	d0f8      	beq.n	8009c58 <_dtoa_r+0x66c>
 8009c66:	9308      	str	r3, [sp, #32]
 8009c68:	9602      	str	r6, [sp, #8]
 8009c6a:	e055      	b.n	8009d18 <_dtoa_r+0x72c>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <_dtoa_r+0x69c>)
 8009c70:	f7f7 fb58 	bl	8001324 <__aeabi_dmul>
 8009c74:	0004      	movs	r4, r0
 8009c76:	000d      	movs	r5, r1
 8009c78:	e7b2      	b.n	8009be0 <_dtoa_r+0x5f4>
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	0800c930 	.word	0x0800c930
 8009c80:	0800c908 	.word	0x0800c908
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	40240000 	.word	0x40240000
 8009c8c:	401c0000 	.word	0x401c0000
 8009c90:	fcc00000 	.word	0xfcc00000
 8009c94:	40140000 	.word	0x40140000
 8009c98:	7cc00000 	.word	0x7cc00000
 8009c9c:	3fe00000 	.word	0x3fe00000
 8009ca0:	9b07      	ldr	r3, [sp, #28]
 8009ca2:	9e06      	ldr	r6, [sp, #24]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	199b      	adds	r3, r3, r6
 8009ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8009caa:	9c08      	ldr	r4, [sp, #32]
 8009cac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb2:	0020      	movs	r0, r4
 8009cb4:	0029      	movs	r1, r5
 8009cb6:	f7f6 ff33 	bl	8000b20 <__aeabi_ddiv>
 8009cba:	f7f8 f94f 	bl	8001f5c <__aeabi_d2iz>
 8009cbe:	9007      	str	r0, [sp, #28]
 8009cc0:	f7f8 f982 	bl	8001fc8 <__aeabi_i2d>
 8009cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc8:	f7f7 fb2c 	bl	8001324 <__aeabi_dmul>
 8009ccc:	0002      	movs	r2, r0
 8009cce:	000b      	movs	r3, r1
 8009cd0:	0020      	movs	r0, r4
 8009cd2:	0029      	movs	r1, r5
 8009cd4:	f7f7 fd92 	bl	80017fc <__aeabi_dsub>
 8009cd8:	0033      	movs	r3, r6
 8009cda:	9a07      	ldr	r2, [sp, #28]
 8009cdc:	3601      	adds	r6, #1
 8009cde:	3230      	adds	r2, #48	; 0x30
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce4:	9608      	str	r6, [sp, #32]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d139      	bne.n	8009d5e <_dtoa_r+0x772>
 8009cea:	0002      	movs	r2, r0
 8009cec:	000b      	movs	r3, r1
 8009cee:	f7f6 fbdb 	bl	80004a8 <__aeabi_dadd>
 8009cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cf6:	0004      	movs	r4, r0
 8009cf8:	000d      	movs	r5, r1
 8009cfa:	f7f6 fbc1 	bl	8000480 <__aeabi_dcmpgt>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d11b      	bne.n	8009d3a <_dtoa_r+0x74e>
 8009d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d06:	0020      	movs	r0, r4
 8009d08:	0029      	movs	r1, r5
 8009d0a:	f7f6 fb9f 	bl	800044c <__aeabi_dcmpeq>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d002      	beq.n	8009d18 <_dtoa_r+0x72c>
 8009d12:	9b07      	ldr	r3, [sp, #28]
 8009d14:	07db      	lsls	r3, r3, #31
 8009d16:	d410      	bmi.n	8009d3a <_dtoa_r+0x74e>
 8009d18:	0038      	movs	r0, r7
 8009d1a:	9905      	ldr	r1, [sp, #20]
 8009d1c:	f000 fae6 	bl	800a2ec <_Bfree>
 8009d20:	2300      	movs	r3, #0
 8009d22:	9a08      	ldr	r2, [sp, #32]
 8009d24:	9802      	ldr	r0, [sp, #8]
 8009d26:	7013      	strb	r3, [r2, #0]
 8009d28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	6018      	str	r0, [r3, #0]
 8009d2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d100      	bne.n	8009d36 <_dtoa_r+0x74a>
 8009d34:	e4a6      	b.n	8009684 <_dtoa_r+0x98>
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e4a4      	b.n	8009684 <_dtoa_r+0x98>
 8009d3a:	9e02      	ldr	r6, [sp, #8]
 8009d3c:	9b08      	ldr	r3, [sp, #32]
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	2a39      	cmp	r2, #57	; 0x39
 8009d46:	d106      	bne.n	8009d56 <_dtoa_r+0x76a>
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d1f7      	bne.n	8009d3e <_dtoa_r+0x752>
 8009d4e:	2230      	movs	r2, #48	; 0x30
 8009d50:	9906      	ldr	r1, [sp, #24]
 8009d52:	3601      	adds	r6, #1
 8009d54:	700a      	strb	r2, [r1, #0]
 8009d56:	781a      	ldrb	r2, [r3, #0]
 8009d58:	3201      	adds	r2, #1
 8009d5a:	701a      	strb	r2, [r3, #0]
 8009d5c:	e784      	b.n	8009c68 <_dtoa_r+0x67c>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4baa      	ldr	r3, [pc, #680]	; (800a00c <_dtoa_r+0xa20>)
 8009d62:	f7f7 fadf 	bl	8001324 <__aeabi_dmul>
 8009d66:	2200      	movs	r2, #0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	0004      	movs	r4, r0
 8009d6c:	000d      	movs	r5, r1
 8009d6e:	f7f6 fb6d 	bl	800044c <__aeabi_dcmpeq>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d09b      	beq.n	8009cae <_dtoa_r+0x6c2>
 8009d76:	e7cf      	b.n	8009d18 <_dtoa_r+0x72c>
 8009d78:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009d7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	d012      	beq.n	8009da8 <_dtoa_r+0x7bc>
 8009d82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d84:	2a01      	cmp	r2, #1
 8009d86:	dc66      	bgt.n	8009e56 <_dtoa_r+0x86a>
 8009d88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	d05d      	beq.n	8009e4a <_dtoa_r+0x85e>
 8009d8e:	4aa0      	ldr	r2, [pc, #640]	; (800a010 <_dtoa_r+0xa24>)
 8009d90:	189b      	adds	r3, r3, r2
 8009d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d94:	2101      	movs	r1, #1
 8009d96:	18d2      	adds	r2, r2, r3
 8009d98:	920a      	str	r2, [sp, #40]	; 0x28
 8009d9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d9c:	0038      	movs	r0, r7
 8009d9e:	18d3      	adds	r3, r2, r3
 8009da0:	930d      	str	r3, [sp, #52]	; 0x34
 8009da2:	f000 fb53 	bl	800a44c <__i2b>
 8009da6:	0005      	movs	r5, r0
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	dd0e      	ble.n	8009dca <_dtoa_r+0x7de>
 8009dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	dd0b      	ble.n	8009dca <_dtoa_r+0x7de>
 8009db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db4:	0023      	movs	r3, r4
 8009db6:	4294      	cmp	r4, r2
 8009db8:	dd00      	ble.n	8009dbc <_dtoa_r+0x7d0>
 8009dba:	0013      	movs	r3, r2
 8009dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dbe:	1ae4      	subs	r4, r4, r3
 8009dc0:	1ad2      	subs	r2, r2, r3
 8009dc2:	920a      	str	r2, [sp, #40]	; 0x28
 8009dc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8009dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01f      	beq.n	8009e10 <_dtoa_r+0x824>
 8009dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d054      	beq.n	8009e80 <_dtoa_r+0x894>
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	dd11      	ble.n	8009dfe <_dtoa_r+0x812>
 8009dda:	0029      	movs	r1, r5
 8009ddc:	0032      	movs	r2, r6
 8009dde:	0038      	movs	r0, r7
 8009de0:	f000 fbfa 	bl	800a5d8 <__pow5mult>
 8009de4:	9a05      	ldr	r2, [sp, #20]
 8009de6:	0001      	movs	r1, r0
 8009de8:	0005      	movs	r5, r0
 8009dea:	0038      	movs	r0, r7
 8009dec:	f000 fb44 	bl	800a478 <__multiply>
 8009df0:	9905      	ldr	r1, [sp, #20]
 8009df2:	9014      	str	r0, [sp, #80]	; 0x50
 8009df4:	0038      	movs	r0, r7
 8009df6:	f000 fa79 	bl	800a2ec <_Bfree>
 8009dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e00:	1b9a      	subs	r2, r3, r6
 8009e02:	42b3      	cmp	r3, r6
 8009e04:	d004      	beq.n	8009e10 <_dtoa_r+0x824>
 8009e06:	0038      	movs	r0, r7
 8009e08:	9905      	ldr	r1, [sp, #20]
 8009e0a:	f000 fbe5 	bl	800a5d8 <__pow5mult>
 8009e0e:	9005      	str	r0, [sp, #20]
 8009e10:	2101      	movs	r1, #1
 8009e12:	0038      	movs	r0, r7
 8009e14:	f000 fb1a 	bl	800a44c <__i2b>
 8009e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e1a:	0006      	movs	r6, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd31      	ble.n	8009e84 <_dtoa_r+0x898>
 8009e20:	001a      	movs	r2, r3
 8009e22:	0001      	movs	r1, r0
 8009e24:	0038      	movs	r0, r7
 8009e26:	f000 fbd7 	bl	800a5d8 <__pow5mult>
 8009e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e2c:	0006      	movs	r6, r0
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	dd2d      	ble.n	8009e8e <_dtoa_r+0x8a2>
 8009e32:	2300      	movs	r3, #0
 8009e34:	930e      	str	r3, [sp, #56]	; 0x38
 8009e36:	6933      	ldr	r3, [r6, #16]
 8009e38:	3303      	adds	r3, #3
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	18f3      	adds	r3, r6, r3
 8009e3e:	6858      	ldr	r0, [r3, #4]
 8009e40:	f000 fabc 	bl	800a3bc <__hi0bits>
 8009e44:	2320      	movs	r3, #32
 8009e46:	1a18      	subs	r0, r3, r0
 8009e48:	e039      	b.n	8009ebe <_dtoa_r+0x8d2>
 8009e4a:	2336      	movs	r3, #54	; 0x36
 8009e4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e4e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009e50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	e79d      	b.n	8009d92 <_dtoa_r+0x7a6>
 8009e56:	9b07      	ldr	r3, [sp, #28]
 8009e58:	1e5e      	subs	r6, r3, #1
 8009e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e5c:	42b3      	cmp	r3, r6
 8009e5e:	db07      	blt.n	8009e70 <_dtoa_r+0x884>
 8009e60:	1b9e      	subs	r6, r3, r6
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da93      	bge.n	8009d92 <_dtoa_r+0x7a6>
 8009e6a:	1ae4      	subs	r4, r4, r3
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e790      	b.n	8009d92 <_dtoa_r+0x7a6>
 8009e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e74:	1af3      	subs	r3, r6, r3
 8009e76:	18d3      	adds	r3, r2, r3
 8009e78:	960e      	str	r6, [sp, #56]	; 0x38
 8009e7a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	e7f0      	b.n	8009e62 <_dtoa_r+0x876>
 8009e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e82:	e7c0      	b.n	8009e06 <_dtoa_r+0x81a>
 8009e84:	2300      	movs	r3, #0
 8009e86:	930e      	str	r3, [sp, #56]	; 0x38
 8009e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	dc13      	bgt.n	8009eb6 <_dtoa_r+0x8ca>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	930e      	str	r3, [sp, #56]	; 0x38
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10e      	bne.n	8009eb6 <_dtoa_r+0x8ca>
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	031b      	lsls	r3, r3, #12
 8009e9c:	d10b      	bne.n	8009eb6 <_dtoa_r+0x8ca>
 8009e9e:	4b5d      	ldr	r3, [pc, #372]	; (800a014 <_dtoa_r+0xa28>)
 8009ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea2:	4213      	tst	r3, r2
 8009ea4:	d007      	beq.n	8009eb6 <_dtoa_r+0x8ca>
 8009ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eae:	3301      	adds	r3, #1
 8009eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb8:	2001      	movs	r0, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1bb      	bne.n	8009e36 <_dtoa_r+0x84a>
 8009ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec0:	221f      	movs	r2, #31
 8009ec2:	1818      	adds	r0, r3, r0
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	4210      	tst	r0, r2
 8009eca:	d046      	beq.n	8009f5a <_dtoa_r+0x96e>
 8009ecc:	3201      	adds	r2, #1
 8009ece:	1ad2      	subs	r2, r2, r3
 8009ed0:	2a04      	cmp	r2, #4
 8009ed2:	dd3f      	ble.n	8009f54 <_dtoa_r+0x968>
 8009ed4:	221c      	movs	r2, #28
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eda:	18e4      	adds	r4, r4, r3
 8009edc:	18d2      	adds	r2, r2, r3
 8009ede:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ee2:	18d3      	adds	r3, r2, r3
 8009ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dd05      	ble.n	8009ef8 <_dtoa_r+0x90c>
 8009eec:	001a      	movs	r2, r3
 8009eee:	0038      	movs	r0, r7
 8009ef0:	9905      	ldr	r1, [sp, #20]
 8009ef2:	f000 fbcd 	bl	800a690 <__lshift>
 8009ef6:	9005      	str	r0, [sp, #20]
 8009ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	dd05      	ble.n	8009f0a <_dtoa_r+0x91e>
 8009efe:	0031      	movs	r1, r6
 8009f00:	001a      	movs	r2, r3
 8009f02:	0038      	movs	r0, r7
 8009f04:	f000 fbc4 	bl	800a690 <__lshift>
 8009f08:	0006      	movs	r6, r0
 8009f0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d026      	beq.n	8009f5e <_dtoa_r+0x972>
 8009f10:	0031      	movs	r1, r6
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	f000 fc2a 	bl	800a76c <__mcmp>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	da20      	bge.n	8009f5e <_dtoa_r+0x972>
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	220a      	movs	r2, #10
 8009f20:	3b01      	subs	r3, #1
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	0038      	movs	r0, r7
 8009f26:	2300      	movs	r3, #0
 8009f28:	9905      	ldr	r1, [sp, #20]
 8009f2a:	f000 fa03 	bl	800a334 <__multadd>
 8009f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f30:	9005      	str	r0, [sp, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d100      	bne.n	8009f38 <_dtoa_r+0x94c>
 8009f36:	e166      	b.n	800a206 <_dtoa_r+0xc1a>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	0029      	movs	r1, r5
 8009f3c:	220a      	movs	r2, #10
 8009f3e:	0038      	movs	r0, r7
 8009f40:	f000 f9f8 	bl	800a334 <__multadd>
 8009f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f46:	0005      	movs	r5, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	dc47      	bgt.n	8009fdc <_dtoa_r+0x9f0>
 8009f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	dc0d      	bgt.n	8009f6e <_dtoa_r+0x982>
 8009f52:	e043      	b.n	8009fdc <_dtoa_r+0x9f0>
 8009f54:	2a04      	cmp	r2, #4
 8009f56:	d0c6      	beq.n	8009ee6 <_dtoa_r+0x8fa>
 8009f58:	0013      	movs	r3, r2
 8009f5a:	331c      	adds	r3, #28
 8009f5c:	e7bc      	b.n	8009ed8 <_dtoa_r+0x8ec>
 8009f5e:	9b07      	ldr	r3, [sp, #28]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc35      	bgt.n	8009fd0 <_dtoa_r+0x9e4>
 8009f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dd32      	ble.n	8009fd0 <_dtoa_r+0x9e4>
 8009f6a:	9b07      	ldr	r3, [sp, #28]
 8009f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10c      	bne.n	8009f8e <_dtoa_r+0x9a2>
 8009f74:	0031      	movs	r1, r6
 8009f76:	2205      	movs	r2, #5
 8009f78:	0038      	movs	r0, r7
 8009f7a:	f000 f9db 	bl	800a334 <__multadd>
 8009f7e:	0006      	movs	r6, r0
 8009f80:	0001      	movs	r1, r0
 8009f82:	9805      	ldr	r0, [sp, #20]
 8009f84:	f000 fbf2 	bl	800a76c <__mcmp>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	dd00      	ble.n	8009f8e <_dtoa_r+0x9a2>
 8009f8c:	e5a5      	b.n	8009ada <_dtoa_r+0x4ee>
 8009f8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f90:	43db      	mvns	r3, r3
 8009f92:	9302      	str	r3, [sp, #8]
 8009f94:	9b06      	ldr	r3, [sp, #24]
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	2400      	movs	r4, #0
 8009f9a:	0031      	movs	r1, r6
 8009f9c:	0038      	movs	r0, r7
 8009f9e:	f000 f9a5 	bl	800a2ec <_Bfree>
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	d100      	bne.n	8009fa8 <_dtoa_r+0x9bc>
 8009fa6:	e6b7      	b.n	8009d18 <_dtoa_r+0x72c>
 8009fa8:	2c00      	cmp	r4, #0
 8009faa:	d005      	beq.n	8009fb8 <_dtoa_r+0x9cc>
 8009fac:	42ac      	cmp	r4, r5
 8009fae:	d003      	beq.n	8009fb8 <_dtoa_r+0x9cc>
 8009fb0:	0021      	movs	r1, r4
 8009fb2:	0038      	movs	r0, r7
 8009fb4:	f000 f99a 	bl	800a2ec <_Bfree>
 8009fb8:	0029      	movs	r1, r5
 8009fba:	0038      	movs	r0, r7
 8009fbc:	f000 f996 	bl	800a2ec <_Bfree>
 8009fc0:	e6aa      	b.n	8009d18 <_dtoa_r+0x72c>
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	0035      	movs	r5, r6
 8009fc6:	e7e2      	b.n	8009f8e <_dtoa_r+0x9a2>
 8009fc8:	9602      	str	r6, [sp, #8]
 8009fca:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009fcc:	0035      	movs	r5, r6
 8009fce:	e584      	b.n	8009ada <_dtoa_r+0x4ee>
 8009fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d100      	bne.n	8009fd8 <_dtoa_r+0x9ec>
 8009fd6:	e0ce      	b.n	800a176 <_dtoa_r+0xb8a>
 8009fd8:	9b07      	ldr	r3, [sp, #28]
 8009fda:	930c      	str	r3, [sp, #48]	; 0x30
 8009fdc:	2c00      	cmp	r4, #0
 8009fde:	dd05      	ble.n	8009fec <_dtoa_r+0xa00>
 8009fe0:	0029      	movs	r1, r5
 8009fe2:	0022      	movs	r2, r4
 8009fe4:	0038      	movs	r0, r7
 8009fe6:	f000 fb53 	bl	800a690 <__lshift>
 8009fea:	0005      	movs	r5, r0
 8009fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fee:	0028      	movs	r0, r5
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d022      	beq.n	800a03a <_dtoa_r+0xa4e>
 8009ff4:	0038      	movs	r0, r7
 8009ff6:	6869      	ldr	r1, [r5, #4]
 8009ff8:	f000 f934 	bl	800a264 <_Balloc>
 8009ffc:	1e04      	subs	r4, r0, #0
 8009ffe:	d10f      	bne.n	800a020 <_dtoa_r+0xa34>
 800a000:	0002      	movs	r2, r0
 800a002:	4b05      	ldr	r3, [pc, #20]	; (800a018 <_dtoa_r+0xa2c>)
 800a004:	4905      	ldr	r1, [pc, #20]	; (800a01c <_dtoa_r+0xa30>)
 800a006:	f7ff fb06 	bl	8009616 <_dtoa_r+0x2a>
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	40240000 	.word	0x40240000
 800a010:	00000433 	.word	0x00000433
 800a014:	7ff00000 	.word	0x7ff00000
 800a018:	0800c89b 	.word	0x0800c89b
 800a01c:	000002ea 	.word	0x000002ea
 800a020:	0029      	movs	r1, r5
 800a022:	692b      	ldr	r3, [r5, #16]
 800a024:	310c      	adds	r1, #12
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	0092      	lsls	r2, r2, #2
 800a02a:	300c      	adds	r0, #12
 800a02c:	f000 f911 	bl	800a252 <memcpy>
 800a030:	2201      	movs	r2, #1
 800a032:	0021      	movs	r1, r4
 800a034:	0038      	movs	r0, r7
 800a036:	f000 fb2b 	bl	800a690 <__lshift>
 800a03a:	9b06      	ldr	r3, [sp, #24]
 800a03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a03e:	930a      	str	r3, [sp, #40]	; 0x28
 800a040:	3b01      	subs	r3, #1
 800a042:	189b      	adds	r3, r3, r2
 800a044:	2201      	movs	r2, #1
 800a046:	002c      	movs	r4, r5
 800a048:	0005      	movs	r5, r0
 800a04a:	9314      	str	r3, [sp, #80]	; 0x50
 800a04c:	9b08      	ldr	r3, [sp, #32]
 800a04e:	4013      	ands	r3, r2
 800a050:	930f      	str	r3, [sp, #60]	; 0x3c
 800a052:	0031      	movs	r1, r6
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	f7ff fa3d 	bl	80094d4 <quorem>
 800a05a:	0003      	movs	r3, r0
 800a05c:	0021      	movs	r1, r4
 800a05e:	3330      	adds	r3, #48	; 0x30
 800a060:	900d      	str	r0, [sp, #52]	; 0x34
 800a062:	9805      	ldr	r0, [sp, #20]
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	f000 fb81 	bl	800a76c <__mcmp>
 800a06a:	002a      	movs	r2, r5
 800a06c:	900e      	str	r0, [sp, #56]	; 0x38
 800a06e:	0031      	movs	r1, r6
 800a070:	0038      	movs	r0, r7
 800a072:	f000 fb97 	bl	800a7a4 <__mdiff>
 800a076:	68c3      	ldr	r3, [r0, #12]
 800a078:	9008      	str	r0, [sp, #32]
 800a07a:	9310      	str	r3, [sp, #64]	; 0x40
 800a07c:	2301      	movs	r3, #1
 800a07e:	930c      	str	r3, [sp, #48]	; 0x30
 800a080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d104      	bne.n	800a090 <_dtoa_r+0xaa4>
 800a086:	0001      	movs	r1, r0
 800a088:	9805      	ldr	r0, [sp, #20]
 800a08a:	f000 fb6f 	bl	800a76c <__mcmp>
 800a08e:	900c      	str	r0, [sp, #48]	; 0x30
 800a090:	0038      	movs	r0, r7
 800a092:	9908      	ldr	r1, [sp, #32]
 800a094:	f000 f92a 	bl	800a2ec <_Bfree>
 800a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a09c:	3301      	adds	r3, #1
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	d10c      	bne.n	800a0c4 <_dtoa_r+0xad8>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	2b39      	cmp	r3, #57	; 0x39
 800a0ae:	d026      	beq.n	800a0fe <_dtoa_r+0xb12>
 800a0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd02      	ble.n	800a0bc <_dtoa_r+0xad0>
 800a0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b8:	3331      	adds	r3, #49	; 0x31
 800a0ba:	9307      	str	r3, [sp, #28]
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	9a07      	ldr	r2, [sp, #28]
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e76a      	b.n	8009f9a <_dtoa_r+0x9ae>
 800a0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	db04      	blt.n	800a0d4 <_dtoa_r+0xae8>
 800a0ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	d11f      	bne.n	800a114 <_dtoa_r+0xb28>
 800a0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	ddf0      	ble.n	800a0bc <_dtoa_r+0xad0>
 800a0da:	9905      	ldr	r1, [sp, #20]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	0038      	movs	r0, r7
 800a0e0:	f000 fad6 	bl	800a690 <__lshift>
 800a0e4:	0031      	movs	r1, r6
 800a0e6:	9005      	str	r0, [sp, #20]
 800a0e8:	f000 fb40 	bl	800a76c <__mcmp>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	dc03      	bgt.n	800a0f8 <_dtoa_r+0xb0c>
 800a0f0:	d1e4      	bne.n	800a0bc <_dtoa_r+0xad0>
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	07db      	lsls	r3, r3, #31
 800a0f6:	d5e1      	bpl.n	800a0bc <_dtoa_r+0xad0>
 800a0f8:	9b07      	ldr	r3, [sp, #28]
 800a0fa:	2b39      	cmp	r3, #57	; 0x39
 800a0fc:	d1db      	bne.n	800a0b6 <_dtoa_r+0xaca>
 800a0fe:	2339      	movs	r3, #57	; 0x39
 800a100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a102:	7013      	strb	r3, [r2, #0]
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	9308      	str	r3, [sp, #32]
 800a108:	3b01      	subs	r3, #1
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	2a39      	cmp	r2, #57	; 0x39
 800a10e:	d068      	beq.n	800a1e2 <_dtoa_r+0xbf6>
 800a110:	3201      	adds	r2, #1
 800a112:	e7d5      	b.n	800a0c0 <_dtoa_r+0xad4>
 800a114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a116:	2b00      	cmp	r3, #0
 800a118:	dd07      	ble.n	800a12a <_dtoa_r+0xb3e>
 800a11a:	9b07      	ldr	r3, [sp, #28]
 800a11c:	2b39      	cmp	r3, #57	; 0x39
 800a11e:	d0ee      	beq.n	800a0fe <_dtoa_r+0xb12>
 800a120:	9b07      	ldr	r3, [sp, #28]
 800a122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a124:	3301      	adds	r3, #1
 800a126:	7013      	strb	r3, [r2, #0]
 800a128:	e737      	b.n	8009f9a <_dtoa_r+0x9ae>
 800a12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12c:	9a07      	ldr	r2, [sp, #28]
 800a12e:	701a      	strb	r2, [r3, #0]
 800a130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a134:	4293      	cmp	r3, r2
 800a136:	d03e      	beq.n	800a1b6 <_dtoa_r+0xbca>
 800a138:	2300      	movs	r3, #0
 800a13a:	220a      	movs	r2, #10
 800a13c:	9905      	ldr	r1, [sp, #20]
 800a13e:	0038      	movs	r0, r7
 800a140:	f000 f8f8 	bl	800a334 <__multadd>
 800a144:	2300      	movs	r3, #0
 800a146:	9005      	str	r0, [sp, #20]
 800a148:	220a      	movs	r2, #10
 800a14a:	0021      	movs	r1, r4
 800a14c:	0038      	movs	r0, r7
 800a14e:	42ac      	cmp	r4, r5
 800a150:	d106      	bne.n	800a160 <_dtoa_r+0xb74>
 800a152:	f000 f8ef 	bl	800a334 <__multadd>
 800a156:	0004      	movs	r4, r0
 800a158:	0005      	movs	r5, r0
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	930a      	str	r3, [sp, #40]	; 0x28
 800a15e:	e778      	b.n	800a052 <_dtoa_r+0xa66>
 800a160:	f000 f8e8 	bl	800a334 <__multadd>
 800a164:	0029      	movs	r1, r5
 800a166:	0004      	movs	r4, r0
 800a168:	2300      	movs	r3, #0
 800a16a:	220a      	movs	r2, #10
 800a16c:	0038      	movs	r0, r7
 800a16e:	f000 f8e1 	bl	800a334 <__multadd>
 800a172:	0005      	movs	r5, r0
 800a174:	e7f1      	b.n	800a15a <_dtoa_r+0xb6e>
 800a176:	9b07      	ldr	r3, [sp, #28]
 800a178:	930c      	str	r3, [sp, #48]	; 0x30
 800a17a:	2400      	movs	r4, #0
 800a17c:	0031      	movs	r1, r6
 800a17e:	9805      	ldr	r0, [sp, #20]
 800a180:	f7ff f9a8 	bl	80094d4 <quorem>
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	3030      	adds	r0, #48	; 0x30
 800a188:	5518      	strb	r0, [r3, r4]
 800a18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18c:	3401      	adds	r4, #1
 800a18e:	9007      	str	r0, [sp, #28]
 800a190:	42a3      	cmp	r3, r4
 800a192:	dd07      	ble.n	800a1a4 <_dtoa_r+0xbb8>
 800a194:	2300      	movs	r3, #0
 800a196:	220a      	movs	r2, #10
 800a198:	0038      	movs	r0, r7
 800a19a:	9905      	ldr	r1, [sp, #20]
 800a19c:	f000 f8ca 	bl	800a334 <__multadd>
 800a1a0:	9005      	str	r0, [sp, #20]
 800a1a2:	e7eb      	b.n	800a17c <_dtoa_r+0xb90>
 800a1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd00      	ble.n	800a1ae <_dtoa_r+0xbc2>
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	181b      	adds	r3, r3, r0
 800a1b4:	9308      	str	r3, [sp, #32]
 800a1b6:	9905      	ldr	r1, [sp, #20]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	0038      	movs	r0, r7
 800a1bc:	f000 fa68 	bl	800a690 <__lshift>
 800a1c0:	0031      	movs	r1, r6
 800a1c2:	9005      	str	r0, [sp, #20]
 800a1c4:	f000 fad2 	bl	800a76c <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	dc9b      	bgt.n	800a104 <_dtoa_r+0xb18>
 800a1cc:	d102      	bne.n	800a1d4 <_dtoa_r+0xbe8>
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	07db      	lsls	r3, r3, #31
 800a1d2:	d497      	bmi.n	800a104 <_dtoa_r+0xb18>
 800a1d4:	9b08      	ldr	r3, [sp, #32]
 800a1d6:	9308      	str	r3, [sp, #32]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	2a30      	cmp	r2, #48	; 0x30
 800a1de:	d0fa      	beq.n	800a1d6 <_dtoa_r+0xbea>
 800a1e0:	e6db      	b.n	8009f9a <_dtoa_r+0x9ae>
 800a1e2:	9a06      	ldr	r2, [sp, #24]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d18e      	bne.n	800a106 <_dtoa_r+0xb1a>
 800a1e8:	9b02      	ldr	r3, [sp, #8]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9302      	str	r3, [sp, #8]
 800a1ee:	2331      	movs	r3, #49	; 0x31
 800a1f0:	e799      	b.n	800a126 <_dtoa_r+0xb3a>
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <_dtoa_r+0xc2c>)
 800a1f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1f6:	9306      	str	r3, [sp, #24]
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <_dtoa_r+0xc30>)
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	d001      	beq.n	800a202 <_dtoa_r+0xc16>
 800a1fe:	f7ff fa3f 	bl	8009680 <_dtoa_r+0x94>
 800a202:	f7ff fa3f 	bl	8009684 <_dtoa_r+0x98>
 800a206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dcb6      	bgt.n	800a17a <_dtoa_r+0xb8e>
 800a20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a20e:	2b02      	cmp	r3, #2
 800a210:	dd00      	ble.n	800a214 <_dtoa_r+0xc28>
 800a212:	e6ac      	b.n	8009f6e <_dtoa_r+0x982>
 800a214:	e7b1      	b.n	800a17a <_dtoa_r+0xb8e>
 800a216:	46c0      	nop			; (mov r8, r8)
 800a218:	0800c81c 	.word	0x0800c81c
 800a21c:	0800c824 	.word	0x0800c824

0800a220 <_localeconv_r>:
 800a220:	4800      	ldr	r0, [pc, #0]	; (800a224 <_localeconv_r+0x4>)
 800a222:	4770      	bx	lr
 800a224:	2000016c 	.word	0x2000016c

0800a228 <malloc>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <malloc+0x10>)
 800a22c:	0001      	movs	r1, r0
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	f000 fc4c 	bl	800aacc <_malloc_r>
 800a234:	bd10      	pop	{r4, pc}
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	20000018 	.word	0x20000018

0800a23c <memchr>:
 800a23c:	b2c9      	uxtb	r1, r1
 800a23e:	1882      	adds	r2, r0, r2
 800a240:	4290      	cmp	r0, r2
 800a242:	d101      	bne.n	800a248 <memchr+0xc>
 800a244:	2000      	movs	r0, #0
 800a246:	4770      	bx	lr
 800a248:	7803      	ldrb	r3, [r0, #0]
 800a24a:	428b      	cmp	r3, r1
 800a24c:	d0fb      	beq.n	800a246 <memchr+0xa>
 800a24e:	3001      	adds	r0, #1
 800a250:	e7f6      	b.n	800a240 <memchr+0x4>

0800a252 <memcpy>:
 800a252:	2300      	movs	r3, #0
 800a254:	b510      	push	{r4, lr}
 800a256:	429a      	cmp	r2, r3
 800a258:	d100      	bne.n	800a25c <memcpy+0xa>
 800a25a:	bd10      	pop	{r4, pc}
 800a25c:	5ccc      	ldrb	r4, [r1, r3]
 800a25e:	54c4      	strb	r4, [r0, r3]
 800a260:	3301      	adds	r3, #1
 800a262:	e7f8      	b.n	800a256 <memcpy+0x4>

0800a264 <_Balloc>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a268:	0006      	movs	r6, r0
 800a26a:	000c      	movs	r4, r1
 800a26c:	2d00      	cmp	r5, #0
 800a26e:	d10e      	bne.n	800a28e <_Balloc+0x2a>
 800a270:	2010      	movs	r0, #16
 800a272:	f7ff ffd9 	bl	800a228 <malloc>
 800a276:	1e02      	subs	r2, r0, #0
 800a278:	6270      	str	r0, [r6, #36]	; 0x24
 800a27a:	d104      	bne.n	800a286 <_Balloc+0x22>
 800a27c:	2166      	movs	r1, #102	; 0x66
 800a27e:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <_Balloc+0x80>)
 800a280:	4819      	ldr	r0, [pc, #100]	; (800a2e8 <_Balloc+0x84>)
 800a282:	f000 fe0d 	bl	800aea0 <__assert_func>
 800a286:	6045      	str	r5, [r0, #4]
 800a288:	6085      	str	r5, [r0, #8]
 800a28a:	6005      	str	r5, [r0, #0]
 800a28c:	60c5      	str	r5, [r0, #12]
 800a28e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a290:	68eb      	ldr	r3, [r5, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d013      	beq.n	800a2be <_Balloc+0x5a>
 800a296:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a298:	00a2      	lsls	r2, r4, #2
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	189b      	adds	r3, r3, r2
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d118      	bne.n	800a2d6 <_Balloc+0x72>
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	000d      	movs	r5, r1
 800a2a8:	40a5      	lsls	r5, r4
 800a2aa:	1d6a      	adds	r2, r5, #5
 800a2ac:	0030      	movs	r0, r6
 800a2ae:	0092      	lsls	r2, r2, #2
 800a2b0:	f000 fb74 	bl	800a99c <_calloc_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d00c      	beq.n	800a2d2 <_Balloc+0x6e>
 800a2b8:	6044      	str	r4, [r0, #4]
 800a2ba:	6085      	str	r5, [r0, #8]
 800a2bc:	e00d      	b.n	800a2da <_Balloc+0x76>
 800a2be:	2221      	movs	r2, #33	; 0x21
 800a2c0:	2104      	movs	r1, #4
 800a2c2:	0030      	movs	r0, r6
 800a2c4:	f000 fb6a 	bl	800a99c <_calloc_r>
 800a2c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2ca:	60e8      	str	r0, [r5, #12]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e1      	bne.n	800a296 <_Balloc+0x32>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
 800a2d6:	6802      	ldr	r2, [r0, #0]
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6103      	str	r3, [r0, #16]
 800a2de:	60c3      	str	r3, [r0, #12]
 800a2e0:	e7f8      	b.n	800a2d4 <_Balloc+0x70>
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	0800c829 	.word	0x0800c829
 800a2e8:	0800c8ac 	.word	0x0800c8ac

0800a2ec <_Bfree>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2f0:	0005      	movs	r5, r0
 800a2f2:	000c      	movs	r4, r1
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	d10e      	bne.n	800a316 <_Bfree+0x2a>
 800a2f8:	2010      	movs	r0, #16
 800a2fa:	f7ff ff95 	bl	800a228 <malloc>
 800a2fe:	1e02      	subs	r2, r0, #0
 800a300:	6268      	str	r0, [r5, #36]	; 0x24
 800a302:	d104      	bne.n	800a30e <_Bfree+0x22>
 800a304:	218a      	movs	r1, #138	; 0x8a
 800a306:	4b09      	ldr	r3, [pc, #36]	; (800a32c <_Bfree+0x40>)
 800a308:	4809      	ldr	r0, [pc, #36]	; (800a330 <_Bfree+0x44>)
 800a30a:	f000 fdc9 	bl	800aea0 <__assert_func>
 800a30e:	6046      	str	r6, [r0, #4]
 800a310:	6086      	str	r6, [r0, #8]
 800a312:	6006      	str	r6, [r0, #0]
 800a314:	60c6      	str	r6, [r0, #12]
 800a316:	2c00      	cmp	r4, #0
 800a318:	d007      	beq.n	800a32a <_Bfree+0x3e>
 800a31a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a31c:	6862      	ldr	r2, [r4, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	189b      	adds	r3, r3, r2
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	601c      	str	r4, [r3, #0]
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	0800c829 	.word	0x0800c829
 800a330:	0800c8ac 	.word	0x0800c8ac

0800a334 <__multadd>:
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a336:	000e      	movs	r6, r1
 800a338:	9001      	str	r0, [sp, #4]
 800a33a:	000c      	movs	r4, r1
 800a33c:	001d      	movs	r5, r3
 800a33e:	2000      	movs	r0, #0
 800a340:	690f      	ldr	r7, [r1, #16]
 800a342:	3614      	adds	r6, #20
 800a344:	6833      	ldr	r3, [r6, #0]
 800a346:	3001      	adds	r0, #1
 800a348:	b299      	uxth	r1, r3
 800a34a:	4351      	muls	r1, r2
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	4353      	muls	r3, r2
 800a350:	1949      	adds	r1, r1, r5
 800a352:	0c0d      	lsrs	r5, r1, #16
 800a354:	195b      	adds	r3, r3, r5
 800a356:	0c1d      	lsrs	r5, r3, #16
 800a358:	b289      	uxth	r1, r1
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	185b      	adds	r3, r3, r1
 800a35e:	c608      	stmia	r6!, {r3}
 800a360:	4287      	cmp	r7, r0
 800a362:	dcef      	bgt.n	800a344 <__multadd+0x10>
 800a364:	2d00      	cmp	r5, #0
 800a366:	d022      	beq.n	800a3ae <__multadd+0x7a>
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	42bb      	cmp	r3, r7
 800a36c:	dc19      	bgt.n	800a3a2 <__multadd+0x6e>
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	f7ff ff76 	bl	800a264 <_Balloc>
 800a378:	1e06      	subs	r6, r0, #0
 800a37a:	d105      	bne.n	800a388 <__multadd+0x54>
 800a37c:	0002      	movs	r2, r0
 800a37e:	21b5      	movs	r1, #181	; 0xb5
 800a380:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <__multadd+0x80>)
 800a382:	480d      	ldr	r0, [pc, #52]	; (800a3b8 <__multadd+0x84>)
 800a384:	f000 fd8c 	bl	800aea0 <__assert_func>
 800a388:	0021      	movs	r1, r4
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	310c      	adds	r1, #12
 800a38e:	1c9a      	adds	r2, r3, #2
 800a390:	0092      	lsls	r2, r2, #2
 800a392:	300c      	adds	r0, #12
 800a394:	f7ff ff5d 	bl	800a252 <memcpy>
 800a398:	0021      	movs	r1, r4
 800a39a:	9801      	ldr	r0, [sp, #4]
 800a39c:	f7ff ffa6 	bl	800a2ec <_Bfree>
 800a3a0:	0034      	movs	r4, r6
 800a3a2:	1d3b      	adds	r3, r7, #4
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	18e3      	adds	r3, r4, r3
 800a3a8:	605d      	str	r5, [r3, #4]
 800a3aa:	1c7b      	adds	r3, r7, #1
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	0020      	movs	r0, r4
 800a3b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	0800c89b 	.word	0x0800c89b
 800a3b8:	0800c8ac 	.word	0x0800c8ac

0800a3bc <__hi0bits>:
 800a3bc:	0003      	movs	r3, r0
 800a3be:	0c02      	lsrs	r2, r0, #16
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4282      	cmp	r2, r0
 800a3c4:	d101      	bne.n	800a3ca <__hi0bits+0xe>
 800a3c6:	041b      	lsls	r3, r3, #16
 800a3c8:	3010      	adds	r0, #16
 800a3ca:	0e1a      	lsrs	r2, r3, #24
 800a3cc:	d101      	bne.n	800a3d2 <__hi0bits+0x16>
 800a3ce:	3008      	adds	r0, #8
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	0f1a      	lsrs	r2, r3, #28
 800a3d4:	d101      	bne.n	800a3da <__hi0bits+0x1e>
 800a3d6:	3004      	adds	r0, #4
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	0f9a      	lsrs	r2, r3, #30
 800a3dc:	d101      	bne.n	800a3e2 <__hi0bits+0x26>
 800a3de:	3002      	adds	r0, #2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	db03      	blt.n	800a3ee <__hi0bits+0x32>
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	d400      	bmi.n	800a3ee <__hi0bits+0x32>
 800a3ec:	2020      	movs	r0, #32
 800a3ee:	4770      	bx	lr

0800a3f0 <__lo0bits>:
 800a3f0:	6803      	ldr	r3, [r0, #0]
 800a3f2:	0002      	movs	r2, r0
 800a3f4:	2107      	movs	r1, #7
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	4008      	ands	r0, r1
 800a3fa:	420b      	tst	r3, r1
 800a3fc:	d00d      	beq.n	800a41a <__lo0bits+0x2a>
 800a3fe:	3906      	subs	r1, #6
 800a400:	2000      	movs	r0, #0
 800a402:	420b      	tst	r3, r1
 800a404:	d105      	bne.n	800a412 <__lo0bits+0x22>
 800a406:	3002      	adds	r0, #2
 800a408:	4203      	tst	r3, r0
 800a40a:	d003      	beq.n	800a414 <__lo0bits+0x24>
 800a40c:	40cb      	lsrs	r3, r1
 800a40e:	0008      	movs	r0, r1
 800a410:	6013      	str	r3, [r2, #0]
 800a412:	4770      	bx	lr
 800a414:	089b      	lsrs	r3, r3, #2
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	e7fb      	b.n	800a412 <__lo0bits+0x22>
 800a41a:	b299      	uxth	r1, r3
 800a41c:	2900      	cmp	r1, #0
 800a41e:	d101      	bne.n	800a424 <__lo0bits+0x34>
 800a420:	2010      	movs	r0, #16
 800a422:	0c1b      	lsrs	r3, r3, #16
 800a424:	b2d9      	uxtb	r1, r3
 800a426:	2900      	cmp	r1, #0
 800a428:	d101      	bne.n	800a42e <__lo0bits+0x3e>
 800a42a:	3008      	adds	r0, #8
 800a42c:	0a1b      	lsrs	r3, r3, #8
 800a42e:	0719      	lsls	r1, r3, #28
 800a430:	d101      	bne.n	800a436 <__lo0bits+0x46>
 800a432:	3004      	adds	r0, #4
 800a434:	091b      	lsrs	r3, r3, #4
 800a436:	0799      	lsls	r1, r3, #30
 800a438:	d101      	bne.n	800a43e <__lo0bits+0x4e>
 800a43a:	3002      	adds	r0, #2
 800a43c:	089b      	lsrs	r3, r3, #2
 800a43e:	07d9      	lsls	r1, r3, #31
 800a440:	d4e9      	bmi.n	800a416 <__lo0bits+0x26>
 800a442:	3001      	adds	r0, #1
 800a444:	085b      	lsrs	r3, r3, #1
 800a446:	d1e6      	bne.n	800a416 <__lo0bits+0x26>
 800a448:	2020      	movs	r0, #32
 800a44a:	e7e2      	b.n	800a412 <__lo0bits+0x22>

0800a44c <__i2b>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	000c      	movs	r4, r1
 800a450:	2101      	movs	r1, #1
 800a452:	f7ff ff07 	bl	800a264 <_Balloc>
 800a456:	2800      	cmp	r0, #0
 800a458:	d106      	bne.n	800a468 <__i2b+0x1c>
 800a45a:	21a0      	movs	r1, #160	; 0xa0
 800a45c:	0002      	movs	r2, r0
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <__i2b+0x24>)
 800a460:	4804      	ldr	r0, [pc, #16]	; (800a474 <__i2b+0x28>)
 800a462:	0049      	lsls	r1, r1, #1
 800a464:	f000 fd1c 	bl	800aea0 <__assert_func>
 800a468:	2301      	movs	r3, #1
 800a46a:	6144      	str	r4, [r0, #20]
 800a46c:	6103      	str	r3, [r0, #16]
 800a46e:	bd10      	pop	{r4, pc}
 800a470:	0800c89b 	.word	0x0800c89b
 800a474:	0800c8ac 	.word	0x0800c8ac

0800a478 <__multiply>:
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	690b      	ldr	r3, [r1, #16]
 800a47c:	0014      	movs	r4, r2
 800a47e:	6912      	ldr	r2, [r2, #16]
 800a480:	000d      	movs	r5, r1
 800a482:	b089      	sub	sp, #36	; 0x24
 800a484:	4293      	cmp	r3, r2
 800a486:	da01      	bge.n	800a48c <__multiply+0x14>
 800a488:	0025      	movs	r5, r4
 800a48a:	000c      	movs	r4, r1
 800a48c:	692f      	ldr	r7, [r5, #16]
 800a48e:	6926      	ldr	r6, [r4, #16]
 800a490:	6869      	ldr	r1, [r5, #4]
 800a492:	19bb      	adds	r3, r7, r6
 800a494:	9302      	str	r3, [sp, #8]
 800a496:	68ab      	ldr	r3, [r5, #8]
 800a498:	19ba      	adds	r2, r7, r6
 800a49a:	4293      	cmp	r3, r2
 800a49c:	da00      	bge.n	800a4a0 <__multiply+0x28>
 800a49e:	3101      	adds	r1, #1
 800a4a0:	f7ff fee0 	bl	800a264 <_Balloc>
 800a4a4:	9001      	str	r0, [sp, #4]
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d106      	bne.n	800a4b8 <__multiply+0x40>
 800a4aa:	215e      	movs	r1, #94	; 0x5e
 800a4ac:	0002      	movs	r2, r0
 800a4ae:	4b48      	ldr	r3, [pc, #288]	; (800a5d0 <__multiply+0x158>)
 800a4b0:	4848      	ldr	r0, [pc, #288]	; (800a5d4 <__multiply+0x15c>)
 800a4b2:	31ff      	adds	r1, #255	; 0xff
 800a4b4:	f000 fcf4 	bl	800aea0 <__assert_func>
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	3314      	adds	r3, #20
 800a4be:	469c      	mov	ip, r3
 800a4c0:	19bb      	adds	r3, r7, r6
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4463      	add	r3, ip
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	4663      	mov	r3, ip
 800a4ca:	9903      	ldr	r1, [sp, #12]
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	d32c      	bcc.n	800a52a <__multiply+0xb2>
 800a4d0:	002b      	movs	r3, r5
 800a4d2:	0022      	movs	r2, r4
 800a4d4:	3314      	adds	r3, #20
 800a4d6:	00bf      	lsls	r7, r7, #2
 800a4d8:	3214      	adds	r2, #20
 800a4da:	9306      	str	r3, [sp, #24]
 800a4dc:	00b6      	lsls	r6, r6, #2
 800a4de:	19db      	adds	r3, r3, r7
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	1993      	adds	r3, r2, r6
 800a4e4:	9307      	str	r3, [sp, #28]
 800a4e6:	2304      	movs	r3, #4
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	002b      	movs	r3, r5
 800a4ec:	9904      	ldr	r1, [sp, #16]
 800a4ee:	3315      	adds	r3, #21
 800a4f0:	9200      	str	r2, [sp, #0]
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	d305      	bcc.n	800a502 <__multiply+0x8a>
 800a4f6:	1b4b      	subs	r3, r1, r5
 800a4f8:	3b15      	subs	r3, #21
 800a4fa:	089b      	lsrs	r3, r3, #2
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	9b07      	ldr	r3, [sp, #28]
 800a504:	9a00      	ldr	r2, [sp, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d311      	bcc.n	800a52e <__multiply+0xb6>
 800a50a:	9b02      	ldr	r3, [sp, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	dd06      	ble.n	800a51e <__multiply+0xa6>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	3b04      	subs	r3, #4
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d053      	beq.n	800a5c6 <__multiply+0x14e>
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	9a02      	ldr	r2, [sp, #8]
 800a522:	0018      	movs	r0, r3
 800a524:	611a      	str	r2, [r3, #16]
 800a526:	b009      	add	sp, #36	; 0x24
 800a528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a52a:	c304      	stmia	r3!, {r2}
 800a52c:	e7cd      	b.n	800a4ca <__multiply+0x52>
 800a52e:	9b00      	ldr	r3, [sp, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	b298      	uxth	r0, r3
 800a534:	2800      	cmp	r0, #0
 800a536:	d01b      	beq.n	800a570 <__multiply+0xf8>
 800a538:	4667      	mov	r7, ip
 800a53a:	2400      	movs	r4, #0
 800a53c:	9e06      	ldr	r6, [sp, #24]
 800a53e:	ce02      	ldmia	r6!, {r1}
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	b28b      	uxth	r3, r1
 800a544:	4343      	muls	r3, r0
 800a546:	b292      	uxth	r2, r2
 800a548:	189b      	adds	r3, r3, r2
 800a54a:	191b      	adds	r3, r3, r4
 800a54c:	0c0c      	lsrs	r4, r1, #16
 800a54e:	4344      	muls	r4, r0
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	0c11      	lsrs	r1, r2, #16
 800a554:	1861      	adds	r1, r4, r1
 800a556:	0c1c      	lsrs	r4, r3, #16
 800a558:	1909      	adds	r1, r1, r4
 800a55a:	0c0c      	lsrs	r4, r1, #16
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	0409      	lsls	r1, r1, #16
 800a560:	430b      	orrs	r3, r1
 800a562:	c708      	stmia	r7!, {r3}
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	42b3      	cmp	r3, r6
 800a568:	d8e9      	bhi.n	800a53e <__multiply+0xc6>
 800a56a:	4663      	mov	r3, ip
 800a56c:	9a05      	ldr	r2, [sp, #20]
 800a56e:	509c      	str	r4, [r3, r2]
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	0c1e      	lsrs	r6, r3, #16
 800a576:	d020      	beq.n	800a5ba <__multiply+0x142>
 800a578:	4663      	mov	r3, ip
 800a57a:	002c      	movs	r4, r5
 800a57c:	4660      	mov	r0, ip
 800a57e:	2700      	movs	r7, #0
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3414      	adds	r4, #20
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	b29b      	uxth	r3, r3
 800a588:	b291      	uxth	r1, r2
 800a58a:	4371      	muls	r1, r6
 800a58c:	6802      	ldr	r2, [r0, #0]
 800a58e:	0c12      	lsrs	r2, r2, #16
 800a590:	1889      	adds	r1, r1, r2
 800a592:	19cf      	adds	r7, r1, r7
 800a594:	0439      	lsls	r1, r7, #16
 800a596:	430b      	orrs	r3, r1
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	cc02      	ldmia	r4!, {r1}
 800a59c:	6843      	ldr	r3, [r0, #4]
 800a59e:	0c09      	lsrs	r1, r1, #16
 800a5a0:	4371      	muls	r1, r6
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	0c3f      	lsrs	r7, r7, #16
 800a5a6:	18cb      	adds	r3, r1, r3
 800a5a8:	9a04      	ldr	r2, [sp, #16]
 800a5aa:	19db      	adds	r3, r3, r7
 800a5ac:	0c1f      	lsrs	r7, r3, #16
 800a5ae:	3004      	adds	r0, #4
 800a5b0:	42a2      	cmp	r2, r4
 800a5b2:	d8e7      	bhi.n	800a584 <__multiply+0x10c>
 800a5b4:	4662      	mov	r2, ip
 800a5b6:	9905      	ldr	r1, [sp, #20]
 800a5b8:	5053      	str	r3, [r2, r1]
 800a5ba:	9b00      	ldr	r3, [sp, #0]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	449c      	add	ip, r3
 800a5c4:	e79d      	b.n	800a502 <__multiply+0x8a>
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	e79d      	b.n	800a50a <__multiply+0x92>
 800a5ce:	46c0      	nop			; (mov r8, r8)
 800a5d0:	0800c89b 	.word	0x0800c89b
 800a5d4:	0800c8ac 	.word	0x0800c8ac

0800a5d8 <__pow5mult>:
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	2303      	movs	r3, #3
 800a5dc:	0015      	movs	r5, r2
 800a5de:	0007      	movs	r7, r0
 800a5e0:	000e      	movs	r6, r1
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	421d      	tst	r5, r3
 800a5e6:	d008      	beq.n	800a5fa <__pow5mult+0x22>
 800a5e8:	4925      	ldr	r1, [pc, #148]	; (800a680 <__pow5mult+0xa8>)
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	0092      	lsls	r2, r2, #2
 800a5ee:	5852      	ldr	r2, [r2, r1]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	0031      	movs	r1, r6
 800a5f4:	f7ff fe9e 	bl	800a334 <__multadd>
 800a5f8:	0006      	movs	r6, r0
 800a5fa:	10ad      	asrs	r5, r5, #2
 800a5fc:	d03d      	beq.n	800a67a <__pow5mult+0xa2>
 800a5fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a600:	2c00      	cmp	r4, #0
 800a602:	d10f      	bne.n	800a624 <__pow5mult+0x4c>
 800a604:	2010      	movs	r0, #16
 800a606:	f7ff fe0f 	bl	800a228 <malloc>
 800a60a:	1e02      	subs	r2, r0, #0
 800a60c:	6278      	str	r0, [r7, #36]	; 0x24
 800a60e:	d105      	bne.n	800a61c <__pow5mult+0x44>
 800a610:	21d7      	movs	r1, #215	; 0xd7
 800a612:	4b1c      	ldr	r3, [pc, #112]	; (800a684 <__pow5mult+0xac>)
 800a614:	481c      	ldr	r0, [pc, #112]	; (800a688 <__pow5mult+0xb0>)
 800a616:	0049      	lsls	r1, r1, #1
 800a618:	f000 fc42 	bl	800aea0 <__assert_func>
 800a61c:	6044      	str	r4, [r0, #4]
 800a61e:	6084      	str	r4, [r0, #8]
 800a620:	6004      	str	r4, [r0, #0]
 800a622:	60c4      	str	r4, [r0, #12]
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	689c      	ldr	r4, [r3, #8]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	d108      	bne.n	800a640 <__pow5mult+0x68>
 800a62e:	0038      	movs	r0, r7
 800a630:	4916      	ldr	r1, [pc, #88]	; (800a68c <__pow5mult+0xb4>)
 800a632:	f7ff ff0b 	bl	800a44c <__i2b>
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	0004      	movs	r4, r0
 800a63a:	6098      	str	r0, [r3, #8]
 800a63c:	2300      	movs	r3, #0
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	2301      	movs	r3, #1
 800a642:	421d      	tst	r5, r3
 800a644:	d00a      	beq.n	800a65c <__pow5mult+0x84>
 800a646:	0031      	movs	r1, r6
 800a648:	0022      	movs	r2, r4
 800a64a:	0038      	movs	r0, r7
 800a64c:	f7ff ff14 	bl	800a478 <__multiply>
 800a650:	0031      	movs	r1, r6
 800a652:	9001      	str	r0, [sp, #4]
 800a654:	0038      	movs	r0, r7
 800a656:	f7ff fe49 	bl	800a2ec <_Bfree>
 800a65a:	9e01      	ldr	r6, [sp, #4]
 800a65c:	106d      	asrs	r5, r5, #1
 800a65e:	d00c      	beq.n	800a67a <__pow5mult+0xa2>
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	2800      	cmp	r0, #0
 800a664:	d107      	bne.n	800a676 <__pow5mult+0x9e>
 800a666:	0022      	movs	r2, r4
 800a668:	0021      	movs	r1, r4
 800a66a:	0038      	movs	r0, r7
 800a66c:	f7ff ff04 	bl	800a478 <__multiply>
 800a670:	2300      	movs	r3, #0
 800a672:	6020      	str	r0, [r4, #0]
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	0004      	movs	r4, r0
 800a678:	e7e2      	b.n	800a640 <__pow5mult+0x68>
 800a67a:	0030      	movs	r0, r6
 800a67c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	0800c9f8 	.word	0x0800c9f8
 800a684:	0800c829 	.word	0x0800c829
 800a688:	0800c8ac 	.word	0x0800c8ac
 800a68c:	00000271 	.word	0x00000271

0800a690 <__lshift>:
 800a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a692:	000c      	movs	r4, r1
 800a694:	0017      	movs	r7, r2
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	1155      	asrs	r5, r2, #5
 800a69a:	b087      	sub	sp, #28
 800a69c:	18eb      	adds	r3, r5, r3
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	6849      	ldr	r1, [r1, #4]
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	9004      	str	r0, [sp, #16]
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	db10      	blt.n	800a6d2 <__lshift+0x42>
 800a6b0:	9804      	ldr	r0, [sp, #16]
 800a6b2:	f7ff fdd7 	bl	800a264 <_Balloc>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	0002      	movs	r2, r0
 800a6ba:	0006      	movs	r6, r0
 800a6bc:	0019      	movs	r1, r3
 800a6be:	3214      	adds	r2, #20
 800a6c0:	4298      	cmp	r0, r3
 800a6c2:	d10c      	bne.n	800a6de <__lshift+0x4e>
 800a6c4:	21da      	movs	r1, #218	; 0xda
 800a6c6:	0002      	movs	r2, r0
 800a6c8:	4b26      	ldr	r3, [pc, #152]	; (800a764 <__lshift+0xd4>)
 800a6ca:	4827      	ldr	r0, [pc, #156]	; (800a768 <__lshift+0xd8>)
 800a6cc:	31ff      	adds	r1, #255	; 0xff
 800a6ce:	f000 fbe7 	bl	800aea0 <__assert_func>
 800a6d2:	3101      	adds	r1, #1
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	e7e8      	b.n	800a6aa <__lshift+0x1a>
 800a6d8:	0098      	lsls	r0, r3, #2
 800a6da:	5011      	str	r1, [r2, r0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	dbfa      	blt.n	800a6d8 <__lshift+0x48>
 800a6e2:	43eb      	mvns	r3, r5
 800a6e4:	17db      	asrs	r3, r3, #31
 800a6e6:	401d      	ands	r5, r3
 800a6e8:	211f      	movs	r1, #31
 800a6ea:	0023      	movs	r3, r4
 800a6ec:	0038      	movs	r0, r7
 800a6ee:	00ad      	lsls	r5, r5, #2
 800a6f0:	1955      	adds	r5, r2, r5
 800a6f2:	6922      	ldr	r2, [r4, #16]
 800a6f4:	3314      	adds	r3, #20
 800a6f6:	0092      	lsls	r2, r2, #2
 800a6f8:	4008      	ands	r0, r1
 800a6fa:	4684      	mov	ip, r0
 800a6fc:	189a      	adds	r2, r3, r2
 800a6fe:	420f      	tst	r7, r1
 800a700:	d02a      	beq.n	800a758 <__lshift+0xc8>
 800a702:	3101      	adds	r1, #1
 800a704:	1a09      	subs	r1, r1, r0
 800a706:	9105      	str	r1, [sp, #20]
 800a708:	2100      	movs	r1, #0
 800a70a:	9503      	str	r5, [sp, #12]
 800a70c:	4667      	mov	r7, ip
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	40b8      	lsls	r0, r7
 800a712:	4301      	orrs	r1, r0
 800a714:	9803      	ldr	r0, [sp, #12]
 800a716:	c002      	stmia	r0!, {r1}
 800a718:	cb02      	ldmia	r3!, {r1}
 800a71a:	9003      	str	r0, [sp, #12]
 800a71c:	9805      	ldr	r0, [sp, #20]
 800a71e:	40c1      	lsrs	r1, r0
 800a720:	429a      	cmp	r2, r3
 800a722:	d8f3      	bhi.n	800a70c <__lshift+0x7c>
 800a724:	0020      	movs	r0, r4
 800a726:	3015      	adds	r0, #21
 800a728:	2304      	movs	r3, #4
 800a72a:	4282      	cmp	r2, r0
 800a72c:	d304      	bcc.n	800a738 <__lshift+0xa8>
 800a72e:	1b13      	subs	r3, r2, r4
 800a730:	3b15      	subs	r3, #21
 800a732:	089b      	lsrs	r3, r3, #2
 800a734:	3301      	adds	r3, #1
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	50e9      	str	r1, [r5, r3]
 800a73a:	2900      	cmp	r1, #0
 800a73c:	d002      	beq.n	800a744 <__lshift+0xb4>
 800a73e:	9b02      	ldr	r3, [sp, #8]
 800a740:	3302      	adds	r3, #2
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	9804      	ldr	r0, [sp, #16]
 800a748:	3b01      	subs	r3, #1
 800a74a:	0021      	movs	r1, r4
 800a74c:	6133      	str	r3, [r6, #16]
 800a74e:	f7ff fdcd 	bl	800a2ec <_Bfree>
 800a752:	0030      	movs	r0, r6
 800a754:	b007      	add	sp, #28
 800a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a758:	cb02      	ldmia	r3!, {r1}
 800a75a:	c502      	stmia	r5!, {r1}
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d8fb      	bhi.n	800a758 <__lshift+0xc8>
 800a760:	e7f0      	b.n	800a744 <__lshift+0xb4>
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	0800c89b 	.word	0x0800c89b
 800a768:	0800c8ac 	.word	0x0800c8ac

0800a76c <__mcmp>:
 800a76c:	6902      	ldr	r2, [r0, #16]
 800a76e:	690b      	ldr	r3, [r1, #16]
 800a770:	b530      	push	{r4, r5, lr}
 800a772:	0004      	movs	r4, r0
 800a774:	1ad0      	subs	r0, r2, r3
 800a776:	429a      	cmp	r2, r3
 800a778:	d10d      	bne.n	800a796 <__mcmp+0x2a>
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	3414      	adds	r4, #20
 800a77e:	3114      	adds	r1, #20
 800a780:	18e2      	adds	r2, r4, r3
 800a782:	18c9      	adds	r1, r1, r3
 800a784:	3a04      	subs	r2, #4
 800a786:	3904      	subs	r1, #4
 800a788:	6815      	ldr	r5, [r2, #0]
 800a78a:	680b      	ldr	r3, [r1, #0]
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d003      	beq.n	800a798 <__mcmp+0x2c>
 800a790:	2001      	movs	r0, #1
 800a792:	429d      	cmp	r5, r3
 800a794:	d303      	bcc.n	800a79e <__mcmp+0x32>
 800a796:	bd30      	pop	{r4, r5, pc}
 800a798:	4294      	cmp	r4, r2
 800a79a:	d3f3      	bcc.n	800a784 <__mcmp+0x18>
 800a79c:	e7fb      	b.n	800a796 <__mcmp+0x2a>
 800a79e:	4240      	negs	r0, r0
 800a7a0:	e7f9      	b.n	800a796 <__mcmp+0x2a>
	...

0800a7a4 <__mdiff>:
 800a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a6:	000e      	movs	r6, r1
 800a7a8:	0007      	movs	r7, r0
 800a7aa:	0011      	movs	r1, r2
 800a7ac:	0030      	movs	r0, r6
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	0014      	movs	r4, r2
 800a7b2:	f7ff ffdb 	bl	800a76c <__mcmp>
 800a7b6:	1e05      	subs	r5, r0, #0
 800a7b8:	d110      	bne.n	800a7dc <__mdiff+0x38>
 800a7ba:	0001      	movs	r1, r0
 800a7bc:	0038      	movs	r0, r7
 800a7be:	f7ff fd51 	bl	800a264 <_Balloc>
 800a7c2:	1e02      	subs	r2, r0, #0
 800a7c4:	d104      	bne.n	800a7d0 <__mdiff+0x2c>
 800a7c6:	4b40      	ldr	r3, [pc, #256]	; (800a8c8 <__mdiff+0x124>)
 800a7c8:	4940      	ldr	r1, [pc, #256]	; (800a8cc <__mdiff+0x128>)
 800a7ca:	4841      	ldr	r0, [pc, #260]	; (800a8d0 <__mdiff+0x12c>)
 800a7cc:	f000 fb68 	bl	800aea0 <__assert_func>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	6145      	str	r5, [r0, #20]
 800a7d4:	6103      	str	r3, [r0, #16]
 800a7d6:	0010      	movs	r0, r2
 800a7d8:	b007      	add	sp, #28
 800a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7dc:	2301      	movs	r3, #1
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	db04      	blt.n	800a7ee <__mdiff+0x4a>
 800a7e4:	0023      	movs	r3, r4
 800a7e6:	0034      	movs	r4, r6
 800a7e8:	001e      	movs	r6, r3
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	0038      	movs	r0, r7
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	f7ff fd37 	bl	800a264 <_Balloc>
 800a7f6:	1e02      	subs	r2, r0, #0
 800a7f8:	d103      	bne.n	800a802 <__mdiff+0x5e>
 800a7fa:	2190      	movs	r1, #144	; 0x90
 800a7fc:	4b32      	ldr	r3, [pc, #200]	; (800a8c8 <__mdiff+0x124>)
 800a7fe:	0089      	lsls	r1, r1, #2
 800a800:	e7e3      	b.n	800a7ca <__mdiff+0x26>
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	2700      	movs	r7, #0
 800a806:	60c3      	str	r3, [r0, #12]
 800a808:	6920      	ldr	r0, [r4, #16]
 800a80a:	3414      	adds	r4, #20
 800a80c:	9401      	str	r4, [sp, #4]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	0084      	lsls	r4, r0, #2
 800a812:	191b      	adds	r3, r3, r4
 800a814:	0034      	movs	r4, r6
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	6933      	ldr	r3, [r6, #16]
 800a81a:	3414      	adds	r4, #20
 800a81c:	0099      	lsls	r1, r3, #2
 800a81e:	1863      	adds	r3, r4, r1
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	0013      	movs	r3, r2
 800a824:	3314      	adds	r3, #20
 800a826:	469c      	mov	ip, r3
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	9b01      	ldr	r3, [sp, #4]
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	cc02      	ldmia	r4!, {r1}
 800a832:	cb20      	ldmia	r3!, {r5}
 800a834:	9304      	str	r3, [sp, #16]
 800a836:	b2ab      	uxth	r3, r5
 800a838:	19df      	adds	r7, r3, r7
 800a83a:	b28b      	uxth	r3, r1
 800a83c:	1afb      	subs	r3, r7, r3
 800a83e:	0c09      	lsrs	r1, r1, #16
 800a840:	0c2d      	lsrs	r5, r5, #16
 800a842:	1a6d      	subs	r5, r5, r1
 800a844:	1419      	asrs	r1, r3, #16
 800a846:	186d      	adds	r5, r5, r1
 800a848:	4661      	mov	r1, ip
 800a84a:	142f      	asrs	r7, r5, #16
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	042d      	lsls	r5, r5, #16
 800a850:	432b      	orrs	r3, r5
 800a852:	c108      	stmia	r1!, {r3}
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	468c      	mov	ip, r1
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d8e8      	bhi.n	800a82e <__mdiff+0x8a>
 800a85c:	0031      	movs	r1, r6
 800a85e:	9c03      	ldr	r4, [sp, #12]
 800a860:	3115      	adds	r1, #21
 800a862:	2304      	movs	r3, #4
 800a864:	428c      	cmp	r4, r1
 800a866:	d304      	bcc.n	800a872 <__mdiff+0xce>
 800a868:	1ba3      	subs	r3, r4, r6
 800a86a:	3b15      	subs	r3, #21
 800a86c:	089b      	lsrs	r3, r3, #2
 800a86e:	3301      	adds	r3, #1
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	9901      	ldr	r1, [sp, #4]
 800a874:	18cc      	adds	r4, r1, r3
 800a876:	9905      	ldr	r1, [sp, #20]
 800a878:	0026      	movs	r6, r4
 800a87a:	18cb      	adds	r3, r1, r3
 800a87c:	469c      	mov	ip, r3
 800a87e:	9902      	ldr	r1, [sp, #8]
 800a880:	428e      	cmp	r6, r1
 800a882:	d310      	bcc.n	800a8a6 <__mdiff+0x102>
 800a884:	9e02      	ldr	r6, [sp, #8]
 800a886:	1ee1      	subs	r1, r4, #3
 800a888:	2500      	movs	r5, #0
 800a88a:	428e      	cmp	r6, r1
 800a88c:	d304      	bcc.n	800a898 <__mdiff+0xf4>
 800a88e:	0031      	movs	r1, r6
 800a890:	3103      	adds	r1, #3
 800a892:	1b0c      	subs	r4, r1, r4
 800a894:	08a4      	lsrs	r4, r4, #2
 800a896:	00a5      	lsls	r5, r4, #2
 800a898:	195b      	adds	r3, r3, r5
 800a89a:	3b04      	subs	r3, #4
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	2900      	cmp	r1, #0
 800a8a0:	d00f      	beq.n	800a8c2 <__mdiff+0x11e>
 800a8a2:	6110      	str	r0, [r2, #16]
 800a8a4:	e797      	b.n	800a7d6 <__mdiff+0x32>
 800a8a6:	ce02      	ldmia	r6!, {r1}
 800a8a8:	b28d      	uxth	r5, r1
 800a8aa:	19ed      	adds	r5, r5, r7
 800a8ac:	0c0f      	lsrs	r7, r1, #16
 800a8ae:	1429      	asrs	r1, r5, #16
 800a8b0:	1879      	adds	r1, r7, r1
 800a8b2:	140f      	asrs	r7, r1, #16
 800a8b4:	b2ad      	uxth	r5, r5
 800a8b6:	0409      	lsls	r1, r1, #16
 800a8b8:	430d      	orrs	r5, r1
 800a8ba:	4661      	mov	r1, ip
 800a8bc:	c120      	stmia	r1!, {r5}
 800a8be:	468c      	mov	ip, r1
 800a8c0:	e7dd      	b.n	800a87e <__mdiff+0xda>
 800a8c2:	3801      	subs	r0, #1
 800a8c4:	e7e9      	b.n	800a89a <__mdiff+0xf6>
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	0800c89b 	.word	0x0800c89b
 800a8cc:	00000232 	.word	0x00000232
 800a8d0:	0800c8ac 	.word	0x0800c8ac

0800a8d4 <__d2b>:
 800a8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	0014      	movs	r4, r2
 800a8da:	001e      	movs	r6, r3
 800a8dc:	9f08      	ldr	r7, [sp, #32]
 800a8de:	f7ff fcc1 	bl	800a264 <_Balloc>
 800a8e2:	1e05      	subs	r5, r0, #0
 800a8e4:	d105      	bne.n	800a8f2 <__d2b+0x1e>
 800a8e6:	0002      	movs	r2, r0
 800a8e8:	4b26      	ldr	r3, [pc, #152]	; (800a984 <__d2b+0xb0>)
 800a8ea:	4927      	ldr	r1, [pc, #156]	; (800a988 <__d2b+0xb4>)
 800a8ec:	4827      	ldr	r0, [pc, #156]	; (800a98c <__d2b+0xb8>)
 800a8ee:	f000 fad7 	bl	800aea0 <__assert_func>
 800a8f2:	0333      	lsls	r3, r6, #12
 800a8f4:	0076      	lsls	r6, r6, #1
 800a8f6:	0b1b      	lsrs	r3, r3, #12
 800a8f8:	0d76      	lsrs	r6, r6, #21
 800a8fa:	d124      	bne.n	800a946 <__d2b+0x72>
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d027      	beq.n	800a952 <__d2b+0x7e>
 800a902:	4668      	mov	r0, sp
 800a904:	9400      	str	r4, [sp, #0]
 800a906:	f7ff fd73 	bl	800a3f0 <__lo0bits>
 800a90a:	9c00      	ldr	r4, [sp, #0]
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d01e      	beq.n	800a94e <__d2b+0x7a>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	2120      	movs	r1, #32
 800a914:	001a      	movs	r2, r3
 800a916:	1a09      	subs	r1, r1, r0
 800a918:	408a      	lsls	r2, r1
 800a91a:	40c3      	lsrs	r3, r0
 800a91c:	4322      	orrs	r2, r4
 800a91e:	616a      	str	r2, [r5, #20]
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	9c01      	ldr	r4, [sp, #4]
 800a924:	61ac      	str	r4, [r5, #24]
 800a926:	1e63      	subs	r3, r4, #1
 800a928:	419c      	sbcs	r4, r3
 800a92a:	3401      	adds	r4, #1
 800a92c:	612c      	str	r4, [r5, #16]
 800a92e:	2e00      	cmp	r6, #0
 800a930:	d018      	beq.n	800a964 <__d2b+0x90>
 800a932:	4b17      	ldr	r3, [pc, #92]	; (800a990 <__d2b+0xbc>)
 800a934:	18f6      	adds	r6, r6, r3
 800a936:	2335      	movs	r3, #53	; 0x35
 800a938:	1836      	adds	r6, r6, r0
 800a93a:	1a18      	subs	r0, r3, r0
 800a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93e:	603e      	str	r6, [r7, #0]
 800a940:	6018      	str	r0, [r3, #0]
 800a942:	0028      	movs	r0, r5
 800a944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a946:	2280      	movs	r2, #128	; 0x80
 800a948:	0352      	lsls	r2, r2, #13
 800a94a:	4313      	orrs	r3, r2
 800a94c:	e7d6      	b.n	800a8fc <__d2b+0x28>
 800a94e:	616c      	str	r4, [r5, #20]
 800a950:	e7e7      	b.n	800a922 <__d2b+0x4e>
 800a952:	a801      	add	r0, sp, #4
 800a954:	f7ff fd4c 	bl	800a3f0 <__lo0bits>
 800a958:	2401      	movs	r4, #1
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	612c      	str	r4, [r5, #16]
 800a95e:	616b      	str	r3, [r5, #20]
 800a960:	3020      	adds	r0, #32
 800a962:	e7e4      	b.n	800a92e <__d2b+0x5a>
 800a964:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <__d2b+0xc0>)
 800a966:	18c0      	adds	r0, r0, r3
 800a968:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <__d2b+0xc4>)
 800a96a:	6038      	str	r0, [r7, #0]
 800a96c:	18e3      	adds	r3, r4, r3
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	18eb      	adds	r3, r5, r3
 800a972:	6958      	ldr	r0, [r3, #20]
 800a974:	f7ff fd22 	bl	800a3bc <__hi0bits>
 800a978:	0164      	lsls	r4, r4, #5
 800a97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97c:	1a24      	subs	r4, r4, r0
 800a97e:	601c      	str	r4, [r3, #0]
 800a980:	e7df      	b.n	800a942 <__d2b+0x6e>
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	0800c89b 	.word	0x0800c89b
 800a988:	0000030a 	.word	0x0000030a
 800a98c:	0800c8ac 	.word	0x0800c8ac
 800a990:	fffffbcd 	.word	0xfffffbcd
 800a994:	fffffbce 	.word	0xfffffbce
 800a998:	3fffffff 	.word	0x3fffffff

0800a99c <_calloc_r>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	0c13      	lsrs	r3, r2, #16
 800a9a0:	0c0d      	lsrs	r5, r1, #16
 800a9a2:	d11e      	bne.n	800a9e2 <_calloc_r+0x46>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10c      	bne.n	800a9c2 <_calloc_r+0x26>
 800a9a8:	b289      	uxth	r1, r1
 800a9aa:	b294      	uxth	r4, r2
 800a9ac:	434c      	muls	r4, r1
 800a9ae:	0021      	movs	r1, r4
 800a9b0:	f000 f88c 	bl	800aacc <_malloc_r>
 800a9b4:	1e05      	subs	r5, r0, #0
 800a9b6:	d01b      	beq.n	800a9f0 <_calloc_r+0x54>
 800a9b8:	0022      	movs	r2, r4
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	f7fe f8f4 	bl	8008ba8 <memset>
 800a9c0:	e016      	b.n	800a9f0 <_calloc_r+0x54>
 800a9c2:	1c1d      	adds	r5, r3, #0
 800a9c4:	1c0b      	adds	r3, r1, #0
 800a9c6:	b292      	uxth	r2, r2
 800a9c8:	b289      	uxth	r1, r1
 800a9ca:	b29c      	uxth	r4, r3
 800a9cc:	4351      	muls	r1, r2
 800a9ce:	b2ab      	uxth	r3, r5
 800a9d0:	4363      	muls	r3, r4
 800a9d2:	0c0c      	lsrs	r4, r1, #16
 800a9d4:	191c      	adds	r4, r3, r4
 800a9d6:	0c22      	lsrs	r2, r4, #16
 800a9d8:	d107      	bne.n	800a9ea <_calloc_r+0x4e>
 800a9da:	0424      	lsls	r4, r4, #16
 800a9dc:	b289      	uxth	r1, r1
 800a9de:	430c      	orrs	r4, r1
 800a9e0:	e7e5      	b.n	800a9ae <_calloc_r+0x12>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <_calloc_r+0x4e>
 800a9e6:	1c13      	adds	r3, r2, #0
 800a9e8:	e7ed      	b.n	800a9c6 <_calloc_r+0x2a>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	2500      	movs	r5, #0
 800a9ee:	6003      	str	r3, [r0, #0]
 800a9f0:	0028      	movs	r0, r5
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}

0800a9f4 <_free_r>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	0005      	movs	r5, r0
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	d010      	beq.n	800aa1e <_free_r+0x2a>
 800a9fc:	1f0c      	subs	r4, r1, #4
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da00      	bge.n	800aa06 <_free_r+0x12>
 800aa04:	18e4      	adds	r4, r4, r3
 800aa06:	0028      	movs	r0, r5
 800aa08:	f000 fa9e 	bl	800af48 <__malloc_lock>
 800aa0c:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <_free_r+0x90>)
 800aa0e:	6813      	ldr	r3, [r2, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d105      	bne.n	800aa20 <_free_r+0x2c>
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	6014      	str	r4, [r2, #0]
 800aa18:	0028      	movs	r0, r5
 800aa1a:	f000 fa9d 	bl	800af58 <__malloc_unlock>
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d908      	bls.n	800aa36 <_free_r+0x42>
 800aa24:	6821      	ldr	r1, [r4, #0]
 800aa26:	1860      	adds	r0, r4, r1
 800aa28:	4283      	cmp	r3, r0
 800aa2a:	d1f3      	bne.n	800aa14 <_free_r+0x20>
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	1841      	adds	r1, r0, r1
 800aa32:	6021      	str	r1, [r4, #0]
 800aa34:	e7ee      	b.n	800aa14 <_free_r+0x20>
 800aa36:	001a      	movs	r2, r3
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <_free_r+0x4e>
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	d9f9      	bls.n	800aa36 <_free_r+0x42>
 800aa42:	6811      	ldr	r1, [r2, #0]
 800aa44:	1850      	adds	r0, r2, r1
 800aa46:	42a0      	cmp	r0, r4
 800aa48:	d10b      	bne.n	800aa62 <_free_r+0x6e>
 800aa4a:	6820      	ldr	r0, [r4, #0]
 800aa4c:	1809      	adds	r1, r1, r0
 800aa4e:	1850      	adds	r0, r2, r1
 800aa50:	6011      	str	r1, [r2, #0]
 800aa52:	4283      	cmp	r3, r0
 800aa54:	d1e0      	bne.n	800aa18 <_free_r+0x24>
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	1841      	adds	r1, r0, r1
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	6053      	str	r3, [r2, #4]
 800aa60:	e7da      	b.n	800aa18 <_free_r+0x24>
 800aa62:	42a0      	cmp	r0, r4
 800aa64:	d902      	bls.n	800aa6c <_free_r+0x78>
 800aa66:	230c      	movs	r3, #12
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	e7d5      	b.n	800aa18 <_free_r+0x24>
 800aa6c:	6821      	ldr	r1, [r4, #0]
 800aa6e:	1860      	adds	r0, r4, r1
 800aa70:	4283      	cmp	r3, r0
 800aa72:	d103      	bne.n	800aa7c <_free_r+0x88>
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	1841      	adds	r1, r0, r1
 800aa7a:	6021      	str	r1, [r4, #0]
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	6054      	str	r4, [r2, #4]
 800aa80:	e7ca      	b.n	800aa18 <_free_r+0x24>
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	2000075c 	.word	0x2000075c

0800aa88 <sbrk_aligned>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4e0f      	ldr	r6, [pc, #60]	; (800aac8 <sbrk_aligned+0x40>)
 800aa8c:	000d      	movs	r5, r1
 800aa8e:	6831      	ldr	r1, [r6, #0]
 800aa90:	0004      	movs	r4, r0
 800aa92:	2900      	cmp	r1, #0
 800aa94:	d102      	bne.n	800aa9c <sbrk_aligned+0x14>
 800aa96:	f000 f9f1 	bl	800ae7c <_sbrk_r>
 800aa9a:	6030      	str	r0, [r6, #0]
 800aa9c:	0029      	movs	r1, r5
 800aa9e:	0020      	movs	r0, r4
 800aaa0:	f000 f9ec 	bl	800ae7c <_sbrk_r>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d00a      	beq.n	800aabe <sbrk_aligned+0x36>
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	1cc5      	adds	r5, r0, #3
 800aaac:	439d      	bics	r5, r3
 800aaae:	42a8      	cmp	r0, r5
 800aab0:	d007      	beq.n	800aac2 <sbrk_aligned+0x3a>
 800aab2:	1a29      	subs	r1, r5, r0
 800aab4:	0020      	movs	r0, r4
 800aab6:	f000 f9e1 	bl	800ae7c <_sbrk_r>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d101      	bne.n	800aac2 <sbrk_aligned+0x3a>
 800aabe:	2501      	movs	r5, #1
 800aac0:	426d      	negs	r5, r5
 800aac2:	0028      	movs	r0, r5
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20000760 	.word	0x20000760

0800aacc <_malloc_r>:
 800aacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aace:	2203      	movs	r2, #3
 800aad0:	1ccb      	adds	r3, r1, #3
 800aad2:	4393      	bics	r3, r2
 800aad4:	3308      	adds	r3, #8
 800aad6:	0006      	movs	r6, r0
 800aad8:	001f      	movs	r7, r3
 800aada:	2b0c      	cmp	r3, #12
 800aadc:	d232      	bcs.n	800ab44 <_malloc_r+0x78>
 800aade:	270c      	movs	r7, #12
 800aae0:	42b9      	cmp	r1, r7
 800aae2:	d831      	bhi.n	800ab48 <_malloc_r+0x7c>
 800aae4:	0030      	movs	r0, r6
 800aae6:	f000 fa2f 	bl	800af48 <__malloc_lock>
 800aaea:	4d32      	ldr	r5, [pc, #200]	; (800abb4 <_malloc_r+0xe8>)
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	001c      	movs	r4, r3
 800aaf0:	2c00      	cmp	r4, #0
 800aaf2:	d12e      	bne.n	800ab52 <_malloc_r+0x86>
 800aaf4:	0039      	movs	r1, r7
 800aaf6:	0030      	movs	r0, r6
 800aaf8:	f7ff ffc6 	bl	800aa88 <sbrk_aligned>
 800aafc:	0004      	movs	r4, r0
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d11e      	bne.n	800ab40 <_malloc_r+0x74>
 800ab02:	682c      	ldr	r4, [r5, #0]
 800ab04:	0025      	movs	r5, r4
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	d14a      	bne.n	800aba0 <_malloc_r+0xd4>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	0029      	movs	r1, r5
 800ab0e:	18e3      	adds	r3, r4, r3
 800ab10:	0030      	movs	r0, r6
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	f000 f9b2 	bl	800ae7c <_sbrk_r>
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	d143      	bne.n	800aba6 <_malloc_r+0xda>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	3703      	adds	r7, #3
 800ab22:	1aff      	subs	r7, r7, r3
 800ab24:	2303      	movs	r3, #3
 800ab26:	439f      	bics	r7, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	2f0c      	cmp	r7, #12
 800ab2c:	d200      	bcs.n	800ab30 <_malloc_r+0x64>
 800ab2e:	270c      	movs	r7, #12
 800ab30:	0039      	movs	r1, r7
 800ab32:	0030      	movs	r0, r6
 800ab34:	f7ff ffa8 	bl	800aa88 <sbrk_aligned>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d034      	beq.n	800aba6 <_malloc_r+0xda>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	19df      	adds	r7, r3, r7
 800ab40:	6027      	str	r7, [r4, #0]
 800ab42:	e013      	b.n	800ab6c <_malloc_r+0xa0>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dacb      	bge.n	800aae0 <_malloc_r+0x14>
 800ab48:	230c      	movs	r3, #12
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	6033      	str	r3, [r6, #0]
 800ab4e:	0028      	movs	r0, r5
 800ab50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	1bd1      	subs	r1, r2, r7
 800ab56:	d420      	bmi.n	800ab9a <_malloc_r+0xce>
 800ab58:	290b      	cmp	r1, #11
 800ab5a:	d917      	bls.n	800ab8c <_malloc_r+0xc0>
 800ab5c:	19e2      	adds	r2, r4, r7
 800ab5e:	6027      	str	r7, [r4, #0]
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d111      	bne.n	800ab88 <_malloc_r+0xbc>
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	6863      	ldr	r3, [r4, #4]
 800ab68:	6011      	str	r1, [r2, #0]
 800ab6a:	6053      	str	r3, [r2, #4]
 800ab6c:	0030      	movs	r0, r6
 800ab6e:	0025      	movs	r5, r4
 800ab70:	f000 f9f2 	bl	800af58 <__malloc_unlock>
 800ab74:	2207      	movs	r2, #7
 800ab76:	350b      	adds	r5, #11
 800ab78:	1d23      	adds	r3, r4, #4
 800ab7a:	4395      	bics	r5, r2
 800ab7c:	1aea      	subs	r2, r5, r3
 800ab7e:	429d      	cmp	r5, r3
 800ab80:	d0e5      	beq.n	800ab4e <_malloc_r+0x82>
 800ab82:	1b5b      	subs	r3, r3, r5
 800ab84:	50a3      	str	r3, [r4, r2]
 800ab86:	e7e2      	b.n	800ab4e <_malloc_r+0x82>
 800ab88:	605a      	str	r2, [r3, #4]
 800ab8a:	e7ec      	b.n	800ab66 <_malloc_r+0x9a>
 800ab8c:	6862      	ldr	r2, [r4, #4]
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	d101      	bne.n	800ab96 <_malloc_r+0xca>
 800ab92:	602a      	str	r2, [r5, #0]
 800ab94:	e7ea      	b.n	800ab6c <_malloc_r+0xa0>
 800ab96:	605a      	str	r2, [r3, #4]
 800ab98:	e7e8      	b.n	800ab6c <_malloc_r+0xa0>
 800ab9a:	0023      	movs	r3, r4
 800ab9c:	6864      	ldr	r4, [r4, #4]
 800ab9e:	e7a7      	b.n	800aaf0 <_malloc_r+0x24>
 800aba0:	002c      	movs	r4, r5
 800aba2:	686d      	ldr	r5, [r5, #4]
 800aba4:	e7af      	b.n	800ab06 <_malloc_r+0x3a>
 800aba6:	230c      	movs	r3, #12
 800aba8:	0030      	movs	r0, r6
 800abaa:	6033      	str	r3, [r6, #0]
 800abac:	f000 f9d4 	bl	800af58 <__malloc_unlock>
 800abb0:	e7cd      	b.n	800ab4e <_malloc_r+0x82>
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	2000075c 	.word	0x2000075c

0800abb8 <__ssputs_r>:
 800abb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abba:	688e      	ldr	r6, [r1, #8]
 800abbc:	b085      	sub	sp, #20
 800abbe:	0007      	movs	r7, r0
 800abc0:	000c      	movs	r4, r1
 800abc2:	9203      	str	r2, [sp, #12]
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	429e      	cmp	r6, r3
 800abc8:	d83c      	bhi.n	800ac44 <__ssputs_r+0x8c>
 800abca:	2390      	movs	r3, #144	; 0x90
 800abcc:	898a      	ldrh	r2, [r1, #12]
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	421a      	tst	r2, r3
 800abd2:	d034      	beq.n	800ac3e <__ssputs_r+0x86>
 800abd4:	6909      	ldr	r1, [r1, #16]
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	6960      	ldr	r0, [r4, #20]
 800abda:	1a5b      	subs	r3, r3, r1
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	2303      	movs	r3, #3
 800abe0:	4343      	muls	r3, r0
 800abe2:	0fdd      	lsrs	r5, r3, #31
 800abe4:	18ed      	adds	r5, r5, r3
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	9802      	ldr	r0, [sp, #8]
 800abea:	3301      	adds	r3, #1
 800abec:	181b      	adds	r3, r3, r0
 800abee:	106d      	asrs	r5, r5, #1
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	d900      	bls.n	800abf6 <__ssputs_r+0x3e>
 800abf4:	001d      	movs	r5, r3
 800abf6:	0553      	lsls	r3, r2, #21
 800abf8:	d532      	bpl.n	800ac60 <__ssputs_r+0xa8>
 800abfa:	0029      	movs	r1, r5
 800abfc:	0038      	movs	r0, r7
 800abfe:	f7ff ff65 	bl	800aacc <_malloc_r>
 800ac02:	1e06      	subs	r6, r0, #0
 800ac04:	d109      	bne.n	800ac1a <__ssputs_r+0x62>
 800ac06:	230c      	movs	r3, #12
 800ac08:	603b      	str	r3, [r7, #0]
 800ac0a:	2340      	movs	r3, #64	; 0x40
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	89a2      	ldrh	r2, [r4, #12]
 800ac10:	4240      	negs	r0, r0
 800ac12:	4313      	orrs	r3, r2
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	b005      	add	sp, #20
 800ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1a:	9a02      	ldr	r2, [sp, #8]
 800ac1c:	6921      	ldr	r1, [r4, #16]
 800ac1e:	f7ff fb18 	bl	800a252 <memcpy>
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	4a14      	ldr	r2, [pc, #80]	; (800ac78 <__ssputs_r+0xc0>)
 800ac26:	401a      	ands	r2, r3
 800ac28:	2380      	movs	r3, #128	; 0x80
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	9b02      	ldr	r3, [sp, #8]
 800ac30:	6126      	str	r6, [r4, #16]
 800ac32:	18f6      	adds	r6, r6, r3
 800ac34:	6026      	str	r6, [r4, #0]
 800ac36:	6165      	str	r5, [r4, #20]
 800ac38:	9e01      	ldr	r6, [sp, #4]
 800ac3a:	1aed      	subs	r5, r5, r3
 800ac3c:	60a5      	str	r5, [r4, #8]
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	429e      	cmp	r6, r3
 800ac42:	d900      	bls.n	800ac46 <__ssputs_r+0x8e>
 800ac44:	9e01      	ldr	r6, [sp, #4]
 800ac46:	0032      	movs	r2, r6
 800ac48:	9903      	ldr	r1, [sp, #12]
 800ac4a:	6820      	ldr	r0, [r4, #0]
 800ac4c:	f000 f968 	bl	800af20 <memmove>
 800ac50:	68a3      	ldr	r3, [r4, #8]
 800ac52:	2000      	movs	r0, #0
 800ac54:	1b9b      	subs	r3, r3, r6
 800ac56:	60a3      	str	r3, [r4, #8]
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	199e      	adds	r6, r3, r6
 800ac5c:	6026      	str	r6, [r4, #0]
 800ac5e:	e7da      	b.n	800ac16 <__ssputs_r+0x5e>
 800ac60:	002a      	movs	r2, r5
 800ac62:	0038      	movs	r0, r7
 800ac64:	f000 f980 	bl	800af68 <_realloc_r>
 800ac68:	1e06      	subs	r6, r0, #0
 800ac6a:	d1e0      	bne.n	800ac2e <__ssputs_r+0x76>
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	6921      	ldr	r1, [r4, #16]
 800ac70:	f7ff fec0 	bl	800a9f4 <_free_r>
 800ac74:	e7c7      	b.n	800ac06 <__ssputs_r+0x4e>
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	fffffb7f 	.word	0xfffffb7f

0800ac7c <_svfiprintf_r>:
 800ac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7e:	b0a1      	sub	sp, #132	; 0x84
 800ac80:	9003      	str	r0, [sp, #12]
 800ac82:	001d      	movs	r5, r3
 800ac84:	898b      	ldrh	r3, [r1, #12]
 800ac86:	000f      	movs	r7, r1
 800ac88:	0016      	movs	r6, r2
 800ac8a:	061b      	lsls	r3, r3, #24
 800ac8c:	d511      	bpl.n	800acb2 <_svfiprintf_r+0x36>
 800ac8e:	690b      	ldr	r3, [r1, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10e      	bne.n	800acb2 <_svfiprintf_r+0x36>
 800ac94:	2140      	movs	r1, #64	; 0x40
 800ac96:	f7ff ff19 	bl	800aacc <_malloc_r>
 800ac9a:	6038      	str	r0, [r7, #0]
 800ac9c:	6138      	str	r0, [r7, #16]
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d105      	bne.n	800acae <_svfiprintf_r+0x32>
 800aca2:	230c      	movs	r3, #12
 800aca4:	9a03      	ldr	r2, [sp, #12]
 800aca6:	3801      	subs	r0, #1
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	b021      	add	sp, #132	; 0x84
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	2340      	movs	r3, #64	; 0x40
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	2300      	movs	r3, #0
 800acb4:	ac08      	add	r4, sp, #32
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	3320      	adds	r3, #32
 800acba:	7663      	strb	r3, [r4, #25]
 800acbc:	3310      	adds	r3, #16
 800acbe:	76a3      	strb	r3, [r4, #26]
 800acc0:	9507      	str	r5, [sp, #28]
 800acc2:	0035      	movs	r5, r6
 800acc4:	782b      	ldrb	r3, [r5, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <_svfiprintf_r+0x52>
 800acca:	2b25      	cmp	r3, #37	; 0x25
 800accc:	d147      	bne.n	800ad5e <_svfiprintf_r+0xe2>
 800acce:	1bab      	subs	r3, r5, r6
 800acd0:	9305      	str	r3, [sp, #20]
 800acd2:	42b5      	cmp	r5, r6
 800acd4:	d00c      	beq.n	800acf0 <_svfiprintf_r+0x74>
 800acd6:	0032      	movs	r2, r6
 800acd8:	0039      	movs	r1, r7
 800acda:	9803      	ldr	r0, [sp, #12]
 800acdc:	f7ff ff6c 	bl	800abb8 <__ssputs_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d100      	bne.n	800ace6 <_svfiprintf_r+0x6a>
 800ace4:	e0ae      	b.n	800ae44 <_svfiprintf_r+0x1c8>
 800ace6:	6962      	ldr	r2, [r4, #20]
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	4694      	mov	ip, r2
 800acec:	4463      	add	r3, ip
 800acee:	6163      	str	r3, [r4, #20]
 800acf0:	782b      	ldrb	r3, [r5, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d100      	bne.n	800acf8 <_svfiprintf_r+0x7c>
 800acf6:	e0a5      	b.n	800ae44 <_svfiprintf_r+0x1c8>
 800acf8:	2201      	movs	r2, #1
 800acfa:	2300      	movs	r3, #0
 800acfc:	4252      	negs	r2, r2
 800acfe:	6062      	str	r2, [r4, #4]
 800ad00:	a904      	add	r1, sp, #16
 800ad02:	3254      	adds	r2, #84	; 0x54
 800ad04:	1852      	adds	r2, r2, r1
 800ad06:	1c6e      	adds	r6, r5, #1
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	60e3      	str	r3, [r4, #12]
 800ad0c:	60a3      	str	r3, [r4, #8]
 800ad0e:	7013      	strb	r3, [r2, #0]
 800ad10:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad12:	2205      	movs	r2, #5
 800ad14:	7831      	ldrb	r1, [r6, #0]
 800ad16:	4854      	ldr	r0, [pc, #336]	; (800ae68 <_svfiprintf_r+0x1ec>)
 800ad18:	f7ff fa90 	bl	800a23c <memchr>
 800ad1c:	1c75      	adds	r5, r6, #1
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d11f      	bne.n	800ad62 <_svfiprintf_r+0xe6>
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	06d3      	lsls	r3, r2, #27
 800ad26:	d504      	bpl.n	800ad32 <_svfiprintf_r+0xb6>
 800ad28:	2353      	movs	r3, #83	; 0x53
 800ad2a:	a904      	add	r1, sp, #16
 800ad2c:	185b      	adds	r3, r3, r1
 800ad2e:	2120      	movs	r1, #32
 800ad30:	7019      	strb	r1, [r3, #0]
 800ad32:	0713      	lsls	r3, r2, #28
 800ad34:	d504      	bpl.n	800ad40 <_svfiprintf_r+0xc4>
 800ad36:	2353      	movs	r3, #83	; 0x53
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	185b      	adds	r3, r3, r1
 800ad3c:	212b      	movs	r1, #43	; 0x2b
 800ad3e:	7019      	strb	r1, [r3, #0]
 800ad40:	7833      	ldrb	r3, [r6, #0]
 800ad42:	2b2a      	cmp	r3, #42	; 0x2a
 800ad44:	d016      	beq.n	800ad74 <_svfiprintf_r+0xf8>
 800ad46:	0035      	movs	r5, r6
 800ad48:	2100      	movs	r1, #0
 800ad4a:	200a      	movs	r0, #10
 800ad4c:	68e3      	ldr	r3, [r4, #12]
 800ad4e:	782a      	ldrb	r2, [r5, #0]
 800ad50:	1c6e      	adds	r6, r5, #1
 800ad52:	3a30      	subs	r2, #48	; 0x30
 800ad54:	2a09      	cmp	r2, #9
 800ad56:	d94e      	bls.n	800adf6 <_svfiprintf_r+0x17a>
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	d111      	bne.n	800ad80 <_svfiprintf_r+0x104>
 800ad5c:	e017      	b.n	800ad8e <_svfiprintf_r+0x112>
 800ad5e:	3501      	adds	r5, #1
 800ad60:	e7b0      	b.n	800acc4 <_svfiprintf_r+0x48>
 800ad62:	4b41      	ldr	r3, [pc, #260]	; (800ae68 <_svfiprintf_r+0x1ec>)
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	1ac0      	subs	r0, r0, r3
 800ad68:	2301      	movs	r3, #1
 800ad6a:	4083      	lsls	r3, r0
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	002e      	movs	r6, r5
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	e7ce      	b.n	800ad12 <_svfiprintf_r+0x96>
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	1d19      	adds	r1, r3, #4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	9107      	str	r1, [sp, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	db01      	blt.n	800ad84 <_svfiprintf_r+0x108>
 800ad80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad82:	e004      	b.n	800ad8e <_svfiprintf_r+0x112>
 800ad84:	425b      	negs	r3, r3
 800ad86:	60e3      	str	r3, [r4, #12]
 800ad88:	2302      	movs	r3, #2
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	782b      	ldrb	r3, [r5, #0]
 800ad90:	2b2e      	cmp	r3, #46	; 0x2e
 800ad92:	d10a      	bne.n	800adaa <_svfiprintf_r+0x12e>
 800ad94:	786b      	ldrb	r3, [r5, #1]
 800ad96:	2b2a      	cmp	r3, #42	; 0x2a
 800ad98:	d135      	bne.n	800ae06 <_svfiprintf_r+0x18a>
 800ad9a:	9b07      	ldr	r3, [sp, #28]
 800ad9c:	3502      	adds	r5, #2
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	9207      	str	r2, [sp, #28]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	db2b      	blt.n	800ae00 <_svfiprintf_r+0x184>
 800ada8:	9309      	str	r3, [sp, #36]	; 0x24
 800adaa:	4e30      	ldr	r6, [pc, #192]	; (800ae6c <_svfiprintf_r+0x1f0>)
 800adac:	2203      	movs	r2, #3
 800adae:	0030      	movs	r0, r6
 800adb0:	7829      	ldrb	r1, [r5, #0]
 800adb2:	f7ff fa43 	bl	800a23c <memchr>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d006      	beq.n	800adc8 <_svfiprintf_r+0x14c>
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	1b80      	subs	r0, r0, r6
 800adbe:	4083      	lsls	r3, r0
 800adc0:	6822      	ldr	r2, [r4, #0]
 800adc2:	3501      	adds	r5, #1
 800adc4:	4313      	orrs	r3, r2
 800adc6:	6023      	str	r3, [r4, #0]
 800adc8:	7829      	ldrb	r1, [r5, #0]
 800adca:	2206      	movs	r2, #6
 800adcc:	4828      	ldr	r0, [pc, #160]	; (800ae70 <_svfiprintf_r+0x1f4>)
 800adce:	1c6e      	adds	r6, r5, #1
 800add0:	7621      	strb	r1, [r4, #24]
 800add2:	f7ff fa33 	bl	800a23c <memchr>
 800add6:	2800      	cmp	r0, #0
 800add8:	d03c      	beq.n	800ae54 <_svfiprintf_r+0x1d8>
 800adda:	4b26      	ldr	r3, [pc, #152]	; (800ae74 <_svfiprintf_r+0x1f8>)
 800addc:	2b00      	cmp	r3, #0
 800adde:	d125      	bne.n	800ae2c <_svfiprintf_r+0x1b0>
 800ade0:	2207      	movs	r2, #7
 800ade2:	9b07      	ldr	r3, [sp, #28]
 800ade4:	3307      	adds	r3, #7
 800ade6:	4393      	bics	r3, r2
 800ade8:	3308      	adds	r3, #8
 800adea:	9307      	str	r3, [sp, #28]
 800adec:	6963      	ldr	r3, [r4, #20]
 800adee:	9a04      	ldr	r2, [sp, #16]
 800adf0:	189b      	adds	r3, r3, r2
 800adf2:	6163      	str	r3, [r4, #20]
 800adf4:	e765      	b.n	800acc2 <_svfiprintf_r+0x46>
 800adf6:	4343      	muls	r3, r0
 800adf8:	0035      	movs	r5, r6
 800adfa:	2101      	movs	r1, #1
 800adfc:	189b      	adds	r3, r3, r2
 800adfe:	e7a6      	b.n	800ad4e <_svfiprintf_r+0xd2>
 800ae00:	2301      	movs	r3, #1
 800ae02:	425b      	negs	r3, r3
 800ae04:	e7d0      	b.n	800ada8 <_svfiprintf_r+0x12c>
 800ae06:	2300      	movs	r3, #0
 800ae08:	200a      	movs	r0, #10
 800ae0a:	001a      	movs	r2, r3
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	7829      	ldrb	r1, [r5, #0]
 800ae12:	1c6e      	adds	r6, r5, #1
 800ae14:	3930      	subs	r1, #48	; 0x30
 800ae16:	2909      	cmp	r1, #9
 800ae18:	d903      	bls.n	800ae22 <_svfiprintf_r+0x1a6>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0c5      	beq.n	800adaa <_svfiprintf_r+0x12e>
 800ae1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae20:	e7c3      	b.n	800adaa <_svfiprintf_r+0x12e>
 800ae22:	4342      	muls	r2, r0
 800ae24:	0035      	movs	r5, r6
 800ae26:	2301      	movs	r3, #1
 800ae28:	1852      	adds	r2, r2, r1
 800ae2a:	e7f1      	b.n	800ae10 <_svfiprintf_r+0x194>
 800ae2c:	ab07      	add	r3, sp, #28
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	003a      	movs	r2, r7
 800ae32:	0021      	movs	r1, r4
 800ae34:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <_svfiprintf_r+0x1fc>)
 800ae36:	9803      	ldr	r0, [sp, #12]
 800ae38:	f7fd ff68 	bl	8008d0c <_printf_float>
 800ae3c:	9004      	str	r0, [sp, #16]
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	3301      	adds	r3, #1
 800ae42:	d1d3      	bne.n	800adec <_svfiprintf_r+0x170>
 800ae44:	89bb      	ldrh	r3, [r7, #12]
 800ae46:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae48:	065b      	lsls	r3, r3, #25
 800ae4a:	d400      	bmi.n	800ae4e <_svfiprintf_r+0x1d2>
 800ae4c:	e72d      	b.n	800acaa <_svfiprintf_r+0x2e>
 800ae4e:	2001      	movs	r0, #1
 800ae50:	4240      	negs	r0, r0
 800ae52:	e72a      	b.n	800acaa <_svfiprintf_r+0x2e>
 800ae54:	ab07      	add	r3, sp, #28
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	003a      	movs	r2, r7
 800ae5a:	0021      	movs	r1, r4
 800ae5c:	4b06      	ldr	r3, [pc, #24]	; (800ae78 <_svfiprintf_r+0x1fc>)
 800ae5e:	9803      	ldr	r0, [sp, #12]
 800ae60:	f7fe fa06 	bl	8009270 <_printf_i>
 800ae64:	e7ea      	b.n	800ae3c <_svfiprintf_r+0x1c0>
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	0800ca04 	.word	0x0800ca04
 800ae6c:	0800ca0a 	.word	0x0800ca0a
 800ae70:	0800ca0e 	.word	0x0800ca0e
 800ae74:	08008d0d 	.word	0x08008d0d
 800ae78:	0800abb9 	.word	0x0800abb9

0800ae7c <_sbrk_r>:
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	b570      	push	{r4, r5, r6, lr}
 800ae80:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_sbrk_r+0x20>)
 800ae82:	0004      	movs	r4, r0
 800ae84:	0008      	movs	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7fd fd48 	bl	800891c <_sbrk>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d103      	bne.n	800ae98 <_sbrk_r+0x1c>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d000      	beq.n	800ae98 <_sbrk_r+0x1c>
 800ae96:	6023      	str	r3, [r4, #0]
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
 800ae9a:	46c0      	nop			; (mov r8, r8)
 800ae9c:	20000764 	.word	0x20000764

0800aea0 <__assert_func>:
 800aea0:	b530      	push	{r4, r5, lr}
 800aea2:	0014      	movs	r4, r2
 800aea4:	001a      	movs	r2, r3
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <__assert_func+0x2c>)
 800aea8:	0005      	movs	r5, r0
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	b085      	sub	sp, #20
 800aeae:	68d8      	ldr	r0, [r3, #12]
 800aeb0:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <__assert_func+0x30>)
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d101      	bne.n	800aeba <__assert_func+0x1a>
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <__assert_func+0x34>)
 800aeb8:	001c      	movs	r4, r3
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	9100      	str	r1, [sp, #0]
 800aebe:	002b      	movs	r3, r5
 800aec0:	4905      	ldr	r1, [pc, #20]	; (800aed8 <__assert_func+0x38>)
 800aec2:	9402      	str	r4, [sp, #8]
 800aec4:	f000 f80a 	bl	800aedc <fiprintf>
 800aec8:	f000 faba 	bl	800b440 <abort>
 800aecc:	20000018 	.word	0x20000018
 800aed0:	0800ca15 	.word	0x0800ca15
 800aed4:	0800ca50 	.word	0x0800ca50
 800aed8:	0800ca22 	.word	0x0800ca22

0800aedc <fiprintf>:
 800aedc:	b40e      	push	{r1, r2, r3}
 800aede:	b503      	push	{r0, r1, lr}
 800aee0:	0001      	movs	r1, r0
 800aee2:	ab03      	add	r3, sp, #12
 800aee4:	4804      	ldr	r0, [pc, #16]	; (800aef8 <fiprintf+0x1c>)
 800aee6:	cb04      	ldmia	r3!, {r2}
 800aee8:	6800      	ldr	r0, [r0, #0]
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	f000 f892 	bl	800b014 <_vfiprintf_r>
 800aef0:	b002      	add	sp, #8
 800aef2:	bc08      	pop	{r3}
 800aef4:	b003      	add	sp, #12
 800aef6:	4718      	bx	r3
 800aef8:	20000018 	.word	0x20000018

0800aefc <__ascii_mbtowc>:
 800aefc:	b082      	sub	sp, #8
 800aefe:	2900      	cmp	r1, #0
 800af00:	d100      	bne.n	800af04 <__ascii_mbtowc+0x8>
 800af02:	a901      	add	r1, sp, #4
 800af04:	1e10      	subs	r0, r2, #0
 800af06:	d006      	beq.n	800af16 <__ascii_mbtowc+0x1a>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <__ascii_mbtowc+0x1e>
 800af0c:	7813      	ldrb	r3, [r2, #0]
 800af0e:	600b      	str	r3, [r1, #0]
 800af10:	7810      	ldrb	r0, [r2, #0]
 800af12:	1e43      	subs	r3, r0, #1
 800af14:	4198      	sbcs	r0, r3
 800af16:	b002      	add	sp, #8
 800af18:	4770      	bx	lr
 800af1a:	2002      	movs	r0, #2
 800af1c:	4240      	negs	r0, r0
 800af1e:	e7fa      	b.n	800af16 <__ascii_mbtowc+0x1a>

0800af20 <memmove>:
 800af20:	b510      	push	{r4, lr}
 800af22:	4288      	cmp	r0, r1
 800af24:	d902      	bls.n	800af2c <memmove+0xc>
 800af26:	188b      	adds	r3, r1, r2
 800af28:	4298      	cmp	r0, r3
 800af2a:	d303      	bcc.n	800af34 <memmove+0x14>
 800af2c:	2300      	movs	r3, #0
 800af2e:	e007      	b.n	800af40 <memmove+0x20>
 800af30:	5c8b      	ldrb	r3, [r1, r2]
 800af32:	5483      	strb	r3, [r0, r2]
 800af34:	3a01      	subs	r2, #1
 800af36:	d2fb      	bcs.n	800af30 <memmove+0x10>
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	5ccc      	ldrb	r4, [r1, r3]
 800af3c:	54c4      	strb	r4, [r0, r3]
 800af3e:	3301      	adds	r3, #1
 800af40:	429a      	cmp	r2, r3
 800af42:	d1fa      	bne.n	800af3a <memmove+0x1a>
 800af44:	e7f8      	b.n	800af38 <memmove+0x18>
	...

0800af48 <__malloc_lock>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	4802      	ldr	r0, [pc, #8]	; (800af54 <__malloc_lock+0xc>)
 800af4c:	f000 fc4f 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800af50:	bd10      	pop	{r4, pc}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	20000768 	.word	0x20000768

0800af58 <__malloc_unlock>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	4802      	ldr	r0, [pc, #8]	; (800af64 <__malloc_unlock+0xc>)
 800af5c:	f000 fc48 	bl	800b7f0 <__retarget_lock_release_recursive>
 800af60:	bd10      	pop	{r4, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	20000768 	.word	0x20000768

0800af68 <_realloc_r>:
 800af68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af6a:	0007      	movs	r7, r0
 800af6c:	000e      	movs	r6, r1
 800af6e:	0014      	movs	r4, r2
 800af70:	2900      	cmp	r1, #0
 800af72:	d105      	bne.n	800af80 <_realloc_r+0x18>
 800af74:	0011      	movs	r1, r2
 800af76:	f7ff fda9 	bl	800aacc <_malloc_r>
 800af7a:	0005      	movs	r5, r0
 800af7c:	0028      	movs	r0, r5
 800af7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af80:	2a00      	cmp	r2, #0
 800af82:	d103      	bne.n	800af8c <_realloc_r+0x24>
 800af84:	f7ff fd36 	bl	800a9f4 <_free_r>
 800af88:	0025      	movs	r5, r4
 800af8a:	e7f7      	b.n	800af7c <_realloc_r+0x14>
 800af8c:	f000 fc9e 	bl	800b8cc <_malloc_usable_size_r>
 800af90:	9001      	str	r0, [sp, #4]
 800af92:	4284      	cmp	r4, r0
 800af94:	d803      	bhi.n	800af9e <_realloc_r+0x36>
 800af96:	0035      	movs	r5, r6
 800af98:	0843      	lsrs	r3, r0, #1
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	d3ee      	bcc.n	800af7c <_realloc_r+0x14>
 800af9e:	0021      	movs	r1, r4
 800afa0:	0038      	movs	r0, r7
 800afa2:	f7ff fd93 	bl	800aacc <_malloc_r>
 800afa6:	1e05      	subs	r5, r0, #0
 800afa8:	d0e8      	beq.n	800af7c <_realloc_r+0x14>
 800afaa:	9b01      	ldr	r3, [sp, #4]
 800afac:	0022      	movs	r2, r4
 800afae:	429c      	cmp	r4, r3
 800afb0:	d900      	bls.n	800afb4 <_realloc_r+0x4c>
 800afb2:	001a      	movs	r2, r3
 800afb4:	0031      	movs	r1, r6
 800afb6:	0028      	movs	r0, r5
 800afb8:	f7ff f94b 	bl	800a252 <memcpy>
 800afbc:	0031      	movs	r1, r6
 800afbe:	0038      	movs	r0, r7
 800afc0:	f7ff fd18 	bl	800a9f4 <_free_r>
 800afc4:	e7da      	b.n	800af7c <_realloc_r+0x14>

0800afc6 <__sfputc_r>:
 800afc6:	6893      	ldr	r3, [r2, #8]
 800afc8:	b510      	push	{r4, lr}
 800afca:	3b01      	subs	r3, #1
 800afcc:	6093      	str	r3, [r2, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da04      	bge.n	800afdc <__sfputc_r+0x16>
 800afd2:	6994      	ldr	r4, [r2, #24]
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	db07      	blt.n	800afe8 <__sfputc_r+0x22>
 800afd8:	290a      	cmp	r1, #10
 800afda:	d005      	beq.n	800afe8 <__sfputc_r+0x22>
 800afdc:	6813      	ldr	r3, [r2, #0]
 800afde:	1c58      	adds	r0, r3, #1
 800afe0:	6010      	str	r0, [r2, #0]
 800afe2:	7019      	strb	r1, [r3, #0]
 800afe4:	0008      	movs	r0, r1
 800afe6:	bd10      	pop	{r4, pc}
 800afe8:	f000 f94e 	bl	800b288 <__swbuf_r>
 800afec:	0001      	movs	r1, r0
 800afee:	e7f9      	b.n	800afe4 <__sfputc_r+0x1e>

0800aff0 <__sfputs_r>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	0006      	movs	r6, r0
 800aff4:	000f      	movs	r7, r1
 800aff6:	0014      	movs	r4, r2
 800aff8:	18d5      	adds	r5, r2, r3
 800affa:	42ac      	cmp	r4, r5
 800affc:	d101      	bne.n	800b002 <__sfputs_r+0x12>
 800affe:	2000      	movs	r0, #0
 800b000:	e007      	b.n	800b012 <__sfputs_r+0x22>
 800b002:	7821      	ldrb	r1, [r4, #0]
 800b004:	003a      	movs	r2, r7
 800b006:	0030      	movs	r0, r6
 800b008:	f7ff ffdd 	bl	800afc6 <__sfputc_r>
 800b00c:	3401      	adds	r4, #1
 800b00e:	1c43      	adds	r3, r0, #1
 800b010:	d1f3      	bne.n	800affa <__sfputs_r+0xa>
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b014 <_vfiprintf_r>:
 800b014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b016:	b0a1      	sub	sp, #132	; 0x84
 800b018:	0006      	movs	r6, r0
 800b01a:	000c      	movs	r4, r1
 800b01c:	001f      	movs	r7, r3
 800b01e:	9203      	str	r2, [sp, #12]
 800b020:	2800      	cmp	r0, #0
 800b022:	d004      	beq.n	800b02e <_vfiprintf_r+0x1a>
 800b024:	6983      	ldr	r3, [r0, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <_vfiprintf_r+0x1a>
 800b02a:	f000 fb3f 	bl	800b6ac <__sinit>
 800b02e:	4b8e      	ldr	r3, [pc, #568]	; (800b268 <_vfiprintf_r+0x254>)
 800b030:	429c      	cmp	r4, r3
 800b032:	d11c      	bne.n	800b06e <_vfiprintf_r+0x5a>
 800b034:	6874      	ldr	r4, [r6, #4]
 800b036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b038:	07db      	lsls	r3, r3, #31
 800b03a:	d405      	bmi.n	800b048 <_vfiprintf_r+0x34>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	059b      	lsls	r3, r3, #22
 800b040:	d402      	bmi.n	800b048 <_vfiprintf_r+0x34>
 800b042:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b044:	f000 fbd3 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	071b      	lsls	r3, r3, #28
 800b04c:	d502      	bpl.n	800b054 <_vfiprintf_r+0x40>
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11d      	bne.n	800b090 <_vfiprintf_r+0x7c>
 800b054:	0021      	movs	r1, r4
 800b056:	0030      	movs	r0, r6
 800b058:	f000 f97a 	bl	800b350 <__swsetup_r>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d017      	beq.n	800b090 <_vfiprintf_r+0x7c>
 800b060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b062:	07db      	lsls	r3, r3, #31
 800b064:	d50d      	bpl.n	800b082 <_vfiprintf_r+0x6e>
 800b066:	2001      	movs	r0, #1
 800b068:	4240      	negs	r0, r0
 800b06a:	b021      	add	sp, #132	; 0x84
 800b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06e:	4b7f      	ldr	r3, [pc, #508]	; (800b26c <_vfiprintf_r+0x258>)
 800b070:	429c      	cmp	r4, r3
 800b072:	d101      	bne.n	800b078 <_vfiprintf_r+0x64>
 800b074:	68b4      	ldr	r4, [r6, #8]
 800b076:	e7de      	b.n	800b036 <_vfiprintf_r+0x22>
 800b078:	4b7d      	ldr	r3, [pc, #500]	; (800b270 <_vfiprintf_r+0x25c>)
 800b07a:	429c      	cmp	r4, r3
 800b07c:	d1db      	bne.n	800b036 <_vfiprintf_r+0x22>
 800b07e:	68f4      	ldr	r4, [r6, #12]
 800b080:	e7d9      	b.n	800b036 <_vfiprintf_r+0x22>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	d4ee      	bmi.n	800b066 <_vfiprintf_r+0x52>
 800b088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08a:	f000 fbb1 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b08e:	e7ea      	b.n	800b066 <_vfiprintf_r+0x52>
 800b090:	2300      	movs	r3, #0
 800b092:	ad08      	add	r5, sp, #32
 800b094:	616b      	str	r3, [r5, #20]
 800b096:	3320      	adds	r3, #32
 800b098:	766b      	strb	r3, [r5, #25]
 800b09a:	3310      	adds	r3, #16
 800b09c:	76ab      	strb	r3, [r5, #26]
 800b09e:	9707      	str	r7, [sp, #28]
 800b0a0:	9f03      	ldr	r7, [sp, #12]
 800b0a2:	783b      	ldrb	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <_vfiprintf_r+0x98>
 800b0a8:	2b25      	cmp	r3, #37	; 0x25
 800b0aa:	d14e      	bne.n	800b14a <_vfiprintf_r+0x136>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	1afb      	subs	r3, r7, r3
 800b0b0:	9305      	str	r3, [sp, #20]
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	429f      	cmp	r7, r3
 800b0b6:	d00d      	beq.n	800b0d4 <_vfiprintf_r+0xc0>
 800b0b8:	9b05      	ldr	r3, [sp, #20]
 800b0ba:	0021      	movs	r1, r4
 800b0bc:	0030      	movs	r0, r6
 800b0be:	9a03      	ldr	r2, [sp, #12]
 800b0c0:	f7ff ff96 	bl	800aff0 <__sfputs_r>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d100      	bne.n	800b0ca <_vfiprintf_r+0xb6>
 800b0c8:	e0b5      	b.n	800b236 <_vfiprintf_r+0x222>
 800b0ca:	696a      	ldr	r2, [r5, #20]
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	4694      	mov	ip, r2
 800b0d0:	4463      	add	r3, ip
 800b0d2:	616b      	str	r3, [r5, #20]
 800b0d4:	783b      	ldrb	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d100      	bne.n	800b0dc <_vfiprintf_r+0xc8>
 800b0da:	e0ac      	b.n	800b236 <_vfiprintf_r+0x222>
 800b0dc:	2201      	movs	r2, #1
 800b0de:	1c7b      	adds	r3, r7, #1
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4252      	negs	r2, r2
 800b0e6:	606a      	str	r2, [r5, #4]
 800b0e8:	a904      	add	r1, sp, #16
 800b0ea:	3254      	adds	r2, #84	; 0x54
 800b0ec:	1852      	adds	r2, r2, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	60eb      	str	r3, [r5, #12]
 800b0f2:	60ab      	str	r3, [r5, #8]
 800b0f4:	7013      	strb	r3, [r2, #0]
 800b0f6:	65ab      	str	r3, [r5, #88]	; 0x58
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	2205      	movs	r2, #5
 800b0fc:	7819      	ldrb	r1, [r3, #0]
 800b0fe:	485d      	ldr	r0, [pc, #372]	; (800b274 <_vfiprintf_r+0x260>)
 800b100:	f7ff f89c 	bl	800a23c <memchr>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1c5f      	adds	r7, r3, #1
 800b108:	2800      	cmp	r0, #0
 800b10a:	d120      	bne.n	800b14e <_vfiprintf_r+0x13a>
 800b10c:	682a      	ldr	r2, [r5, #0]
 800b10e:	06d3      	lsls	r3, r2, #27
 800b110:	d504      	bpl.n	800b11c <_vfiprintf_r+0x108>
 800b112:	2353      	movs	r3, #83	; 0x53
 800b114:	a904      	add	r1, sp, #16
 800b116:	185b      	adds	r3, r3, r1
 800b118:	2120      	movs	r1, #32
 800b11a:	7019      	strb	r1, [r3, #0]
 800b11c:	0713      	lsls	r3, r2, #28
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x116>
 800b120:	2353      	movs	r3, #83	; 0x53
 800b122:	a904      	add	r1, sp, #16
 800b124:	185b      	adds	r3, r3, r1
 800b126:	212b      	movs	r1, #43	; 0x2b
 800b128:	7019      	strb	r1, [r3, #0]
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b2a      	cmp	r3, #42	; 0x2a
 800b130:	d016      	beq.n	800b160 <_vfiprintf_r+0x14c>
 800b132:	2100      	movs	r1, #0
 800b134:	68eb      	ldr	r3, [r5, #12]
 800b136:	9f03      	ldr	r7, [sp, #12]
 800b138:	783a      	ldrb	r2, [r7, #0]
 800b13a:	1c78      	adds	r0, r7, #1
 800b13c:	3a30      	subs	r2, #48	; 0x30
 800b13e:	4684      	mov	ip, r0
 800b140:	2a09      	cmp	r2, #9
 800b142:	d94f      	bls.n	800b1e4 <_vfiprintf_r+0x1d0>
 800b144:	2900      	cmp	r1, #0
 800b146:	d111      	bne.n	800b16c <_vfiprintf_r+0x158>
 800b148:	e017      	b.n	800b17a <_vfiprintf_r+0x166>
 800b14a:	3701      	adds	r7, #1
 800b14c:	e7a9      	b.n	800b0a2 <_vfiprintf_r+0x8e>
 800b14e:	4b49      	ldr	r3, [pc, #292]	; (800b274 <_vfiprintf_r+0x260>)
 800b150:	682a      	ldr	r2, [r5, #0]
 800b152:	1ac0      	subs	r0, r0, r3
 800b154:	2301      	movs	r3, #1
 800b156:	4083      	lsls	r3, r0
 800b158:	4313      	orrs	r3, r2
 800b15a:	602b      	str	r3, [r5, #0]
 800b15c:	9703      	str	r7, [sp, #12]
 800b15e:	e7cb      	b.n	800b0f8 <_vfiprintf_r+0xe4>
 800b160:	9b07      	ldr	r3, [sp, #28]
 800b162:	1d19      	adds	r1, r3, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	9107      	str	r1, [sp, #28]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	db01      	blt.n	800b170 <_vfiprintf_r+0x15c>
 800b16c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16e:	e004      	b.n	800b17a <_vfiprintf_r+0x166>
 800b170:	425b      	negs	r3, r3
 800b172:	60eb      	str	r3, [r5, #12]
 800b174:	2302      	movs	r3, #2
 800b176:	4313      	orrs	r3, r2
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	783b      	ldrb	r3, [r7, #0]
 800b17c:	2b2e      	cmp	r3, #46	; 0x2e
 800b17e:	d10a      	bne.n	800b196 <_vfiprintf_r+0x182>
 800b180:	787b      	ldrb	r3, [r7, #1]
 800b182:	2b2a      	cmp	r3, #42	; 0x2a
 800b184:	d137      	bne.n	800b1f6 <_vfiprintf_r+0x1e2>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	3702      	adds	r7, #2
 800b18a:	1d1a      	adds	r2, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9207      	str	r2, [sp, #28]
 800b190:	2b00      	cmp	r3, #0
 800b192:	db2d      	blt.n	800b1f0 <_vfiprintf_r+0x1dc>
 800b194:	9309      	str	r3, [sp, #36]	; 0x24
 800b196:	2203      	movs	r2, #3
 800b198:	7839      	ldrb	r1, [r7, #0]
 800b19a:	4837      	ldr	r0, [pc, #220]	; (800b278 <_vfiprintf_r+0x264>)
 800b19c:	f7ff f84e 	bl	800a23c <memchr>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d007      	beq.n	800b1b4 <_vfiprintf_r+0x1a0>
 800b1a4:	4b34      	ldr	r3, [pc, #208]	; (800b278 <_vfiprintf_r+0x264>)
 800b1a6:	682a      	ldr	r2, [r5, #0]
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	4083      	lsls	r3, r0
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	3701      	adds	r7, #1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	7839      	ldrb	r1, [r7, #0]
 800b1b6:	1c7b      	adds	r3, r7, #1
 800b1b8:	2206      	movs	r2, #6
 800b1ba:	4830      	ldr	r0, [pc, #192]	; (800b27c <_vfiprintf_r+0x268>)
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	7629      	strb	r1, [r5, #24]
 800b1c0:	f7ff f83c 	bl	800a23c <memchr>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d045      	beq.n	800b254 <_vfiprintf_r+0x240>
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <_vfiprintf_r+0x26c>)
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d127      	bne.n	800b21e <_vfiprintf_r+0x20a>
 800b1ce:	2207      	movs	r2, #7
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	3307      	adds	r3, #7
 800b1d4:	4393      	bics	r3, r2
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	696b      	ldr	r3, [r5, #20]
 800b1dc:	9a04      	ldr	r2, [sp, #16]
 800b1de:	189b      	adds	r3, r3, r2
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	e75d      	b.n	800b0a0 <_vfiprintf_r+0x8c>
 800b1e4:	210a      	movs	r1, #10
 800b1e6:	434b      	muls	r3, r1
 800b1e8:	4667      	mov	r7, ip
 800b1ea:	189b      	adds	r3, r3, r2
 800b1ec:	3909      	subs	r1, #9
 800b1ee:	e7a3      	b.n	800b138 <_vfiprintf_r+0x124>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	425b      	negs	r3, r3
 800b1f4:	e7ce      	b.n	800b194 <_vfiprintf_r+0x180>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	001a      	movs	r2, r3
 800b1fa:	3701      	adds	r7, #1
 800b1fc:	606b      	str	r3, [r5, #4]
 800b1fe:	7839      	ldrb	r1, [r7, #0]
 800b200:	1c78      	adds	r0, r7, #1
 800b202:	3930      	subs	r1, #48	; 0x30
 800b204:	4684      	mov	ip, r0
 800b206:	2909      	cmp	r1, #9
 800b208:	d903      	bls.n	800b212 <_vfiprintf_r+0x1fe>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0c3      	beq.n	800b196 <_vfiprintf_r+0x182>
 800b20e:	9209      	str	r2, [sp, #36]	; 0x24
 800b210:	e7c1      	b.n	800b196 <_vfiprintf_r+0x182>
 800b212:	230a      	movs	r3, #10
 800b214:	435a      	muls	r2, r3
 800b216:	4667      	mov	r7, ip
 800b218:	1852      	adds	r2, r2, r1
 800b21a:	3b09      	subs	r3, #9
 800b21c:	e7ef      	b.n	800b1fe <_vfiprintf_r+0x1ea>
 800b21e:	ab07      	add	r3, sp, #28
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	0022      	movs	r2, r4
 800b224:	0029      	movs	r1, r5
 800b226:	0030      	movs	r0, r6
 800b228:	4b16      	ldr	r3, [pc, #88]	; (800b284 <_vfiprintf_r+0x270>)
 800b22a:	f7fd fd6f 	bl	8008d0c <_printf_float>
 800b22e:	9004      	str	r0, [sp, #16]
 800b230:	9b04      	ldr	r3, [sp, #16]
 800b232:	3301      	adds	r3, #1
 800b234:	d1d1      	bne.n	800b1da <_vfiprintf_r+0x1c6>
 800b236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b238:	07db      	lsls	r3, r3, #31
 800b23a:	d405      	bmi.n	800b248 <_vfiprintf_r+0x234>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	059b      	lsls	r3, r3, #22
 800b240:	d402      	bmi.n	800b248 <_vfiprintf_r+0x234>
 800b242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b244:	f000 fad4 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	065b      	lsls	r3, r3, #25
 800b24c:	d500      	bpl.n	800b250 <_vfiprintf_r+0x23c>
 800b24e:	e70a      	b.n	800b066 <_vfiprintf_r+0x52>
 800b250:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b252:	e70a      	b.n	800b06a <_vfiprintf_r+0x56>
 800b254:	ab07      	add	r3, sp, #28
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	0022      	movs	r2, r4
 800b25a:	0029      	movs	r1, r5
 800b25c:	0030      	movs	r0, r6
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_vfiprintf_r+0x270>)
 800b260:	f7fe f806 	bl	8009270 <_printf_i>
 800b264:	e7e3      	b.n	800b22e <_vfiprintf_r+0x21a>
 800b266:	46c0      	nop			; (mov r8, r8)
 800b268:	0800cb7c 	.word	0x0800cb7c
 800b26c:	0800cb9c 	.word	0x0800cb9c
 800b270:	0800cb5c 	.word	0x0800cb5c
 800b274:	0800ca04 	.word	0x0800ca04
 800b278:	0800ca0a 	.word	0x0800ca0a
 800b27c:	0800ca0e 	.word	0x0800ca0e
 800b280:	08008d0d 	.word	0x08008d0d
 800b284:	0800aff1 	.word	0x0800aff1

0800b288 <__swbuf_r>:
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28a:	0005      	movs	r5, r0
 800b28c:	000e      	movs	r6, r1
 800b28e:	0014      	movs	r4, r2
 800b290:	2800      	cmp	r0, #0
 800b292:	d004      	beq.n	800b29e <__swbuf_r+0x16>
 800b294:	6983      	ldr	r3, [r0, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <__swbuf_r+0x16>
 800b29a:	f000 fa07 	bl	800b6ac <__sinit>
 800b29e:	4b22      	ldr	r3, [pc, #136]	; (800b328 <__swbuf_r+0xa0>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d12e      	bne.n	800b302 <__swbuf_r+0x7a>
 800b2a4:	686c      	ldr	r4, [r5, #4]
 800b2a6:	69a3      	ldr	r3, [r4, #24]
 800b2a8:	60a3      	str	r3, [r4, #8]
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	071b      	lsls	r3, r3, #28
 800b2ae:	d532      	bpl.n	800b316 <__swbuf_r+0x8e>
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d02f      	beq.n	800b316 <__swbuf_r+0x8e>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	6922      	ldr	r2, [r4, #16]
 800b2ba:	b2f7      	uxtb	r7, r6
 800b2bc:	1a98      	subs	r0, r3, r2
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	b2f6      	uxtb	r6, r6
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	dc05      	bgt.n	800b2d2 <__swbuf_r+0x4a>
 800b2c6:	0021      	movs	r1, r4
 800b2c8:	0028      	movs	r0, r5
 800b2ca:	f000 f94d 	bl	800b568 <_fflush_r>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d127      	bne.n	800b322 <__swbuf_r+0x9a>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	6022      	str	r2, [r4, #0]
 800b2e0:	701f      	strb	r7, [r3, #0]
 800b2e2:	6963      	ldr	r3, [r4, #20]
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d004      	beq.n	800b2f2 <__swbuf_r+0x6a>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	07db      	lsls	r3, r3, #31
 800b2ec:	d507      	bpl.n	800b2fe <__swbuf_r+0x76>
 800b2ee:	2e0a      	cmp	r6, #10
 800b2f0:	d105      	bne.n	800b2fe <__swbuf_r+0x76>
 800b2f2:	0021      	movs	r1, r4
 800b2f4:	0028      	movs	r0, r5
 800b2f6:	f000 f937 	bl	800b568 <_fflush_r>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d111      	bne.n	800b322 <__swbuf_r+0x9a>
 800b2fe:	0030      	movs	r0, r6
 800b300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b302:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <__swbuf_r+0xa4>)
 800b304:	429c      	cmp	r4, r3
 800b306:	d101      	bne.n	800b30c <__swbuf_r+0x84>
 800b308:	68ac      	ldr	r4, [r5, #8]
 800b30a:	e7cc      	b.n	800b2a6 <__swbuf_r+0x1e>
 800b30c:	4b08      	ldr	r3, [pc, #32]	; (800b330 <__swbuf_r+0xa8>)
 800b30e:	429c      	cmp	r4, r3
 800b310:	d1c9      	bne.n	800b2a6 <__swbuf_r+0x1e>
 800b312:	68ec      	ldr	r4, [r5, #12]
 800b314:	e7c7      	b.n	800b2a6 <__swbuf_r+0x1e>
 800b316:	0021      	movs	r1, r4
 800b318:	0028      	movs	r0, r5
 800b31a:	f000 f819 	bl	800b350 <__swsetup_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d0c9      	beq.n	800b2b6 <__swbuf_r+0x2e>
 800b322:	2601      	movs	r6, #1
 800b324:	4276      	negs	r6, r6
 800b326:	e7ea      	b.n	800b2fe <__swbuf_r+0x76>
 800b328:	0800cb7c 	.word	0x0800cb7c
 800b32c:	0800cb9c 	.word	0x0800cb9c
 800b330:	0800cb5c 	.word	0x0800cb5c

0800b334 <__ascii_wctomb>:
 800b334:	0003      	movs	r3, r0
 800b336:	1e08      	subs	r0, r1, #0
 800b338:	d005      	beq.n	800b346 <__ascii_wctomb+0x12>
 800b33a:	2aff      	cmp	r2, #255	; 0xff
 800b33c:	d904      	bls.n	800b348 <__ascii_wctomb+0x14>
 800b33e:	228a      	movs	r2, #138	; 0x8a
 800b340:	2001      	movs	r0, #1
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	4240      	negs	r0, r0
 800b346:	4770      	bx	lr
 800b348:	2001      	movs	r0, #1
 800b34a:	700a      	strb	r2, [r1, #0]
 800b34c:	e7fb      	b.n	800b346 <__ascii_wctomb+0x12>
	...

0800b350 <__swsetup_r>:
 800b350:	4b37      	ldr	r3, [pc, #220]	; (800b430 <__swsetup_r+0xe0>)
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	681d      	ldr	r5, [r3, #0]
 800b356:	0006      	movs	r6, r0
 800b358:	000c      	movs	r4, r1
 800b35a:	2d00      	cmp	r5, #0
 800b35c:	d005      	beq.n	800b36a <__swsetup_r+0x1a>
 800b35e:	69ab      	ldr	r3, [r5, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <__swsetup_r+0x1a>
 800b364:	0028      	movs	r0, r5
 800b366:	f000 f9a1 	bl	800b6ac <__sinit>
 800b36a:	4b32      	ldr	r3, [pc, #200]	; (800b434 <__swsetup_r+0xe4>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	d10f      	bne.n	800b390 <__swsetup_r+0x40>
 800b370:	686c      	ldr	r4, [r5, #4]
 800b372:	230c      	movs	r3, #12
 800b374:	5ee2      	ldrsh	r2, [r4, r3]
 800b376:	b293      	uxth	r3, r2
 800b378:	0711      	lsls	r1, r2, #28
 800b37a:	d42d      	bmi.n	800b3d8 <__swsetup_r+0x88>
 800b37c:	06d9      	lsls	r1, r3, #27
 800b37e:	d411      	bmi.n	800b3a4 <__swsetup_r+0x54>
 800b380:	2309      	movs	r3, #9
 800b382:	2001      	movs	r0, #1
 800b384:	6033      	str	r3, [r6, #0]
 800b386:	3337      	adds	r3, #55	; 0x37
 800b388:	4313      	orrs	r3, r2
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	4240      	negs	r0, r0
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	4b29      	ldr	r3, [pc, #164]	; (800b438 <__swsetup_r+0xe8>)
 800b392:	429c      	cmp	r4, r3
 800b394:	d101      	bne.n	800b39a <__swsetup_r+0x4a>
 800b396:	68ac      	ldr	r4, [r5, #8]
 800b398:	e7eb      	b.n	800b372 <__swsetup_r+0x22>
 800b39a:	4b28      	ldr	r3, [pc, #160]	; (800b43c <__swsetup_r+0xec>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d1e8      	bne.n	800b372 <__swsetup_r+0x22>
 800b3a0:	68ec      	ldr	r4, [r5, #12]
 800b3a2:	e7e6      	b.n	800b372 <__swsetup_r+0x22>
 800b3a4:	075b      	lsls	r3, r3, #29
 800b3a6:	d513      	bpl.n	800b3d0 <__swsetup_r+0x80>
 800b3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	d008      	beq.n	800b3c0 <__swsetup_r+0x70>
 800b3ae:	0023      	movs	r3, r4
 800b3b0:	3344      	adds	r3, #68	; 0x44
 800b3b2:	4299      	cmp	r1, r3
 800b3b4:	d002      	beq.n	800b3bc <__swsetup_r+0x6c>
 800b3b6:	0030      	movs	r0, r6
 800b3b8:	f7ff fb1c 	bl	800a9f4 <_free_r>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	6363      	str	r3, [r4, #52]	; 0x34
 800b3c0:	2224      	movs	r2, #36	; 0x24
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	4393      	bics	r3, r2
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	2308      	movs	r3, #8
 800b3d2:	89a2      	ldrh	r2, [r4, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <__swsetup_r+0xa6>
 800b3de:	21a0      	movs	r1, #160	; 0xa0
 800b3e0:	2280      	movs	r2, #128	; 0x80
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	0089      	lsls	r1, r1, #2
 800b3e6:	0092      	lsls	r2, r2, #2
 800b3e8:	400b      	ands	r3, r1
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d003      	beq.n	800b3f6 <__swsetup_r+0xa6>
 800b3ee:	0021      	movs	r1, r4
 800b3f0:	0030      	movs	r0, r6
 800b3f2:	f000 fa27 	bl	800b844 <__smakebuf_r>
 800b3f6:	220c      	movs	r2, #12
 800b3f8:	5ea3      	ldrsh	r3, [r4, r2]
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	001a      	movs	r2, r3
 800b3fe:	b299      	uxth	r1, r3
 800b400:	4002      	ands	r2, r0
 800b402:	4203      	tst	r3, r0
 800b404:	d00f      	beq.n	800b426 <__swsetup_r+0xd6>
 800b406:	2200      	movs	r2, #0
 800b408:	60a2      	str	r2, [r4, #8]
 800b40a:	6962      	ldr	r2, [r4, #20]
 800b40c:	4252      	negs	r2, r2
 800b40e:	61a2      	str	r2, [r4, #24]
 800b410:	2000      	movs	r0, #0
 800b412:	6922      	ldr	r2, [r4, #16]
 800b414:	4282      	cmp	r2, r0
 800b416:	d1ba      	bne.n	800b38e <__swsetup_r+0x3e>
 800b418:	060a      	lsls	r2, r1, #24
 800b41a:	d5b8      	bpl.n	800b38e <__swsetup_r+0x3e>
 800b41c:	2240      	movs	r2, #64	; 0x40
 800b41e:	4313      	orrs	r3, r2
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	3801      	subs	r0, #1
 800b424:	e7b3      	b.n	800b38e <__swsetup_r+0x3e>
 800b426:	0788      	lsls	r0, r1, #30
 800b428:	d400      	bmi.n	800b42c <__swsetup_r+0xdc>
 800b42a:	6962      	ldr	r2, [r4, #20]
 800b42c:	60a2      	str	r2, [r4, #8]
 800b42e:	e7ef      	b.n	800b410 <__swsetup_r+0xc0>
 800b430:	20000018 	.word	0x20000018
 800b434:	0800cb7c 	.word	0x0800cb7c
 800b438:	0800cb9c 	.word	0x0800cb9c
 800b43c:	0800cb5c 	.word	0x0800cb5c

0800b440 <abort>:
 800b440:	2006      	movs	r0, #6
 800b442:	b510      	push	{r4, lr}
 800b444:	f000 fa74 	bl	800b930 <raise>
 800b448:	2001      	movs	r0, #1
 800b44a:	f7fd fa21 	bl	8008890 <_exit>
	...

0800b450 <__sflush_r>:
 800b450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b452:	898b      	ldrh	r3, [r1, #12]
 800b454:	0005      	movs	r5, r0
 800b456:	000c      	movs	r4, r1
 800b458:	071a      	lsls	r2, r3, #28
 800b45a:	d45f      	bmi.n	800b51c <__sflush_r+0xcc>
 800b45c:	684a      	ldr	r2, [r1, #4]
 800b45e:	2a00      	cmp	r2, #0
 800b460:	dc04      	bgt.n	800b46c <__sflush_r+0x1c>
 800b462:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b464:	2a00      	cmp	r2, #0
 800b466:	dc01      	bgt.n	800b46c <__sflush_r+0x1c>
 800b468:	2000      	movs	r0, #0
 800b46a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b46c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b46e:	2f00      	cmp	r7, #0
 800b470:	d0fa      	beq.n	800b468 <__sflush_r+0x18>
 800b472:	2200      	movs	r2, #0
 800b474:	2180      	movs	r1, #128	; 0x80
 800b476:	682e      	ldr	r6, [r5, #0]
 800b478:	602a      	str	r2, [r5, #0]
 800b47a:	001a      	movs	r2, r3
 800b47c:	0149      	lsls	r1, r1, #5
 800b47e:	400a      	ands	r2, r1
 800b480:	420b      	tst	r3, r1
 800b482:	d034      	beq.n	800b4ee <__sflush_r+0x9e>
 800b484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	075b      	lsls	r3, r3, #29
 800b48a:	d506      	bpl.n	800b49a <__sflush_r+0x4a>
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	1ac0      	subs	r0, r0, r3
 800b490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <__sflush_r+0x4a>
 800b496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b498:	1ac0      	subs	r0, r0, r3
 800b49a:	0002      	movs	r2, r0
 800b49c:	6a21      	ldr	r1, [r4, #32]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	0028      	movs	r0, r5
 800b4a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b4a4:	47b8      	blx	r7
 800b4a6:	89a1      	ldrh	r1, [r4, #12]
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d106      	bne.n	800b4ba <__sflush_r+0x6a>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	2b1d      	cmp	r3, #29
 800b4b0:	d831      	bhi.n	800b516 <__sflush_r+0xc6>
 800b4b2:	4a2c      	ldr	r2, [pc, #176]	; (800b564 <__sflush_r+0x114>)
 800b4b4:	40da      	lsrs	r2, r3
 800b4b6:	07d3      	lsls	r3, r2, #31
 800b4b8:	d52d      	bpl.n	800b516 <__sflush_r+0xc6>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	6063      	str	r3, [r4, #4]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	04cb      	lsls	r3, r1, #19
 800b4c4:	d505      	bpl.n	800b4d2 <__sflush_r+0x82>
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	d102      	bne.n	800b4d0 <__sflush_r+0x80>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d100      	bne.n	800b4d2 <__sflush_r+0x82>
 800b4d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4d4:	602e      	str	r6, [r5, #0]
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	d0c6      	beq.n	800b468 <__sflush_r+0x18>
 800b4da:	0023      	movs	r3, r4
 800b4dc:	3344      	adds	r3, #68	; 0x44
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	d002      	beq.n	800b4e8 <__sflush_r+0x98>
 800b4e2:	0028      	movs	r0, r5
 800b4e4:	f7ff fa86 	bl	800a9f4 <_free_r>
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ec:	e7bd      	b.n	800b46a <__sflush_r+0x1a>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	0028      	movs	r0, r5
 800b4f2:	6a21      	ldr	r1, [r4, #32]
 800b4f4:	47b8      	blx	r7
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d1c5      	bne.n	800b486 <__sflush_r+0x36>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0c2      	beq.n	800b486 <__sflush_r+0x36>
 800b500:	2b1d      	cmp	r3, #29
 800b502:	d001      	beq.n	800b508 <__sflush_r+0xb8>
 800b504:	2b16      	cmp	r3, #22
 800b506:	d101      	bne.n	800b50c <__sflush_r+0xbc>
 800b508:	602e      	str	r6, [r5, #0]
 800b50a:	e7ad      	b.n	800b468 <__sflush_r+0x18>
 800b50c:	2340      	movs	r3, #64	; 0x40
 800b50e:	89a2      	ldrh	r2, [r4, #12]
 800b510:	4313      	orrs	r3, r2
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	e7a9      	b.n	800b46a <__sflush_r+0x1a>
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	430b      	orrs	r3, r1
 800b51a:	e7fa      	b.n	800b512 <__sflush_r+0xc2>
 800b51c:	690f      	ldr	r7, [r1, #16]
 800b51e:	2f00      	cmp	r7, #0
 800b520:	d0a2      	beq.n	800b468 <__sflush_r+0x18>
 800b522:	680a      	ldr	r2, [r1, #0]
 800b524:	600f      	str	r7, [r1, #0]
 800b526:	1bd2      	subs	r2, r2, r7
 800b528:	9201      	str	r2, [sp, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	079b      	lsls	r3, r3, #30
 800b52e:	d100      	bne.n	800b532 <__sflush_r+0xe2>
 800b530:	694a      	ldr	r2, [r1, #20]
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	9b01      	ldr	r3, [sp, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	dc00      	bgt.n	800b53c <__sflush_r+0xec>
 800b53a:	e795      	b.n	800b468 <__sflush_r+0x18>
 800b53c:	003a      	movs	r2, r7
 800b53e:	0028      	movs	r0, r5
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	6a21      	ldr	r1, [r4, #32]
 800b544:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b546:	47b0      	blx	r6
 800b548:	2800      	cmp	r0, #0
 800b54a:	dc06      	bgt.n	800b55a <__sflush_r+0x10a>
 800b54c:	2340      	movs	r3, #64	; 0x40
 800b54e:	2001      	movs	r0, #1
 800b550:	89a2      	ldrh	r2, [r4, #12]
 800b552:	4240      	negs	r0, r0
 800b554:	4313      	orrs	r3, r2
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	e787      	b.n	800b46a <__sflush_r+0x1a>
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	183f      	adds	r7, r7, r0
 800b55e:	1a1b      	subs	r3, r3, r0
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	e7e7      	b.n	800b534 <__sflush_r+0xe4>
 800b564:	20400001 	.word	0x20400001

0800b568 <_fflush_r>:
 800b568:	690b      	ldr	r3, [r1, #16]
 800b56a:	b570      	push	{r4, r5, r6, lr}
 800b56c:	0005      	movs	r5, r0
 800b56e:	000c      	movs	r4, r1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <_fflush_r+0x12>
 800b574:	2500      	movs	r5, #0
 800b576:	0028      	movs	r0, r5
 800b578:	bd70      	pop	{r4, r5, r6, pc}
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d004      	beq.n	800b588 <_fflush_r+0x20>
 800b57e:	6983      	ldr	r3, [r0, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <_fflush_r+0x20>
 800b584:	f000 f892 	bl	800b6ac <__sinit>
 800b588:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <_fflush_r+0x74>)
 800b58a:	429c      	cmp	r4, r3
 800b58c:	d11b      	bne.n	800b5c6 <_fflush_r+0x5e>
 800b58e:	686c      	ldr	r4, [r5, #4]
 800b590:	220c      	movs	r2, #12
 800b592:	5ea3      	ldrsh	r3, [r4, r2]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d0ed      	beq.n	800b574 <_fflush_r+0xc>
 800b598:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b59a:	07d2      	lsls	r2, r2, #31
 800b59c:	d404      	bmi.n	800b5a8 <_fflush_r+0x40>
 800b59e:	059b      	lsls	r3, r3, #22
 800b5a0:	d402      	bmi.n	800b5a8 <_fflush_r+0x40>
 800b5a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5a4:	f000 f923 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800b5a8:	0028      	movs	r0, r5
 800b5aa:	0021      	movs	r1, r4
 800b5ac:	f7ff ff50 	bl	800b450 <__sflush_r>
 800b5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b2:	0005      	movs	r5, r0
 800b5b4:	07db      	lsls	r3, r3, #31
 800b5b6:	d4de      	bmi.n	800b576 <_fflush_r+0xe>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	059b      	lsls	r3, r3, #22
 800b5bc:	d4db      	bmi.n	800b576 <_fflush_r+0xe>
 800b5be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c0:	f000 f916 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b5c4:	e7d7      	b.n	800b576 <_fflush_r+0xe>
 800b5c6:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <_fflush_r+0x78>)
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	d101      	bne.n	800b5d0 <_fflush_r+0x68>
 800b5cc:	68ac      	ldr	r4, [r5, #8]
 800b5ce:	e7df      	b.n	800b590 <_fflush_r+0x28>
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <_fflush_r+0x7c>)
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	d1dc      	bne.n	800b590 <_fflush_r+0x28>
 800b5d6:	68ec      	ldr	r4, [r5, #12]
 800b5d8:	e7da      	b.n	800b590 <_fflush_r+0x28>
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	0800cb7c 	.word	0x0800cb7c
 800b5e0:	0800cb9c 	.word	0x0800cb9c
 800b5e4:	0800cb5c 	.word	0x0800cb5c

0800b5e8 <std>:
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	0004      	movs	r4, r0
 800b5ee:	6003      	str	r3, [r0, #0]
 800b5f0:	6043      	str	r3, [r0, #4]
 800b5f2:	6083      	str	r3, [r0, #8]
 800b5f4:	8181      	strh	r1, [r0, #12]
 800b5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b5f8:	0019      	movs	r1, r3
 800b5fa:	81c2      	strh	r2, [r0, #14]
 800b5fc:	6103      	str	r3, [r0, #16]
 800b5fe:	6143      	str	r3, [r0, #20]
 800b600:	6183      	str	r3, [r0, #24]
 800b602:	2208      	movs	r2, #8
 800b604:	305c      	adds	r0, #92	; 0x5c
 800b606:	f7fd facf 	bl	8008ba8 <memset>
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x38>)
 800b60c:	6224      	str	r4, [r4, #32]
 800b60e:	6263      	str	r3, [r4, #36]	; 0x24
 800b610:	4b04      	ldr	r3, [pc, #16]	; (800b624 <std+0x3c>)
 800b612:	62a3      	str	r3, [r4, #40]	; 0x28
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <std+0x40>)
 800b616:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b618:	4b04      	ldr	r3, [pc, #16]	; (800b62c <std+0x44>)
 800b61a:	6323      	str	r3, [r4, #48]	; 0x30
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	0800b971 	.word	0x0800b971
 800b624:	0800b999 	.word	0x0800b999
 800b628:	0800b9d1 	.word	0x0800b9d1
 800b62c:	0800b9fd 	.word	0x0800b9fd

0800b630 <_cleanup_r>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4902      	ldr	r1, [pc, #8]	; (800b63c <_cleanup_r+0xc>)
 800b634:	f000 f8ba 	bl	800b7ac <_fwalk_reent>
 800b638:	bd10      	pop	{r4, pc}
 800b63a:	46c0      	nop			; (mov r8, r8)
 800b63c:	0800b569 	.word	0x0800b569

0800b640 <__sfmoreglue>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	2568      	movs	r5, #104	; 0x68
 800b644:	1e4a      	subs	r2, r1, #1
 800b646:	4355      	muls	r5, r2
 800b648:	000e      	movs	r6, r1
 800b64a:	0029      	movs	r1, r5
 800b64c:	3174      	adds	r1, #116	; 0x74
 800b64e:	f7ff fa3d 	bl	800aacc <_malloc_r>
 800b652:	1e04      	subs	r4, r0, #0
 800b654:	d008      	beq.n	800b668 <__sfmoreglue+0x28>
 800b656:	2100      	movs	r1, #0
 800b658:	002a      	movs	r2, r5
 800b65a:	6001      	str	r1, [r0, #0]
 800b65c:	6046      	str	r6, [r0, #4]
 800b65e:	300c      	adds	r0, #12
 800b660:	60a0      	str	r0, [r4, #8]
 800b662:	3268      	adds	r2, #104	; 0x68
 800b664:	f7fd faa0 	bl	8008ba8 <memset>
 800b668:	0020      	movs	r0, r4
 800b66a:	bd70      	pop	{r4, r5, r6, pc}

0800b66c <__sfp_lock_acquire>:
 800b66c:	b510      	push	{r4, lr}
 800b66e:	4802      	ldr	r0, [pc, #8]	; (800b678 <__sfp_lock_acquire+0xc>)
 800b670:	f000 f8bd 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800b674:	bd10      	pop	{r4, pc}
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	20000769 	.word	0x20000769

0800b67c <__sfp_lock_release>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4802      	ldr	r0, [pc, #8]	; (800b688 <__sfp_lock_release+0xc>)
 800b680:	f000 f8b6 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	20000769 	.word	0x20000769

0800b68c <__sinit_lock_acquire>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	4802      	ldr	r0, [pc, #8]	; (800b698 <__sinit_lock_acquire+0xc>)
 800b690:	f000 f8ad 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800b694:	bd10      	pop	{r4, pc}
 800b696:	46c0      	nop			; (mov r8, r8)
 800b698:	2000076a 	.word	0x2000076a

0800b69c <__sinit_lock_release>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	4802      	ldr	r0, [pc, #8]	; (800b6a8 <__sinit_lock_release+0xc>)
 800b6a0:	f000 f8a6 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	46c0      	nop			; (mov r8, r8)
 800b6a8:	2000076a 	.word	0x2000076a

0800b6ac <__sinit>:
 800b6ac:	b513      	push	{r0, r1, r4, lr}
 800b6ae:	0004      	movs	r4, r0
 800b6b0:	f7ff ffec 	bl	800b68c <__sinit_lock_acquire>
 800b6b4:	69a3      	ldr	r3, [r4, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <__sinit+0x14>
 800b6ba:	f7ff ffef 	bl	800b69c <__sinit_lock_release>
 800b6be:	bd13      	pop	{r0, r1, r4, pc}
 800b6c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b6c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b6c4:	6523      	str	r3, [r4, #80]	; 0x50
 800b6c6:	4b13      	ldr	r3, [pc, #76]	; (800b714 <__sinit+0x68>)
 800b6c8:	4a13      	ldr	r2, [pc, #76]	; (800b718 <__sinit+0x6c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	d101      	bne.n	800b6d8 <__sinit+0x2c>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	61a3      	str	r3, [r4, #24]
 800b6d8:	0020      	movs	r0, r4
 800b6da:	f000 f81f 	bl	800b71c <__sfp>
 800b6de:	6060      	str	r0, [r4, #4]
 800b6e0:	0020      	movs	r0, r4
 800b6e2:	f000 f81b 	bl	800b71c <__sfp>
 800b6e6:	60a0      	str	r0, [r4, #8]
 800b6e8:	0020      	movs	r0, r4
 800b6ea:	f000 f817 	bl	800b71c <__sfp>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2104      	movs	r1, #4
 800b6f2:	60e0      	str	r0, [r4, #12]
 800b6f4:	6860      	ldr	r0, [r4, #4]
 800b6f6:	f7ff ff77 	bl	800b5e8 <std>
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	2109      	movs	r1, #9
 800b6fe:	68a0      	ldr	r0, [r4, #8]
 800b700:	f7ff ff72 	bl	800b5e8 <std>
 800b704:	2202      	movs	r2, #2
 800b706:	2112      	movs	r1, #18
 800b708:	68e0      	ldr	r0, [r4, #12]
 800b70a:	f7ff ff6d 	bl	800b5e8 <std>
 800b70e:	2301      	movs	r3, #1
 800b710:	61a3      	str	r3, [r4, #24]
 800b712:	e7d2      	b.n	800b6ba <__sinit+0xe>
 800b714:	0800c7e4 	.word	0x0800c7e4
 800b718:	0800b631 	.word	0x0800b631

0800b71c <__sfp>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	0007      	movs	r7, r0
 800b720:	f7ff ffa4 	bl	800b66c <__sfp_lock_acquire>
 800b724:	4b1f      	ldr	r3, [pc, #124]	; (800b7a4 <__sfp+0x88>)
 800b726:	681e      	ldr	r6, [r3, #0]
 800b728:	69b3      	ldr	r3, [r6, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <__sfp+0x18>
 800b72e:	0030      	movs	r0, r6
 800b730:	f7ff ffbc 	bl	800b6ac <__sinit>
 800b734:	3648      	adds	r6, #72	; 0x48
 800b736:	68b4      	ldr	r4, [r6, #8]
 800b738:	6873      	ldr	r3, [r6, #4]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	d504      	bpl.n	800b748 <__sfp+0x2c>
 800b73e:	6833      	ldr	r3, [r6, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d022      	beq.n	800b78a <__sfp+0x6e>
 800b744:	6836      	ldr	r6, [r6, #0]
 800b746:	e7f6      	b.n	800b736 <__sfp+0x1a>
 800b748:	220c      	movs	r2, #12
 800b74a:	5ea5      	ldrsh	r5, [r4, r2]
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	d11a      	bne.n	800b786 <__sfp+0x6a>
 800b750:	0020      	movs	r0, r4
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <__sfp+0x8c>)
 800b754:	3058      	adds	r0, #88	; 0x58
 800b756:	60e3      	str	r3, [r4, #12]
 800b758:	6665      	str	r5, [r4, #100]	; 0x64
 800b75a:	f000 f847 	bl	800b7ec <__retarget_lock_init_recursive>
 800b75e:	f7ff ff8d 	bl	800b67c <__sfp_lock_release>
 800b762:	0020      	movs	r0, r4
 800b764:	2208      	movs	r2, #8
 800b766:	0029      	movs	r1, r5
 800b768:	6025      	str	r5, [r4, #0]
 800b76a:	60a5      	str	r5, [r4, #8]
 800b76c:	6065      	str	r5, [r4, #4]
 800b76e:	6125      	str	r5, [r4, #16]
 800b770:	6165      	str	r5, [r4, #20]
 800b772:	61a5      	str	r5, [r4, #24]
 800b774:	305c      	adds	r0, #92	; 0x5c
 800b776:	f7fd fa17 	bl	8008ba8 <memset>
 800b77a:	6365      	str	r5, [r4, #52]	; 0x34
 800b77c:	63a5      	str	r5, [r4, #56]	; 0x38
 800b77e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b780:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b782:	0020      	movs	r0, r4
 800b784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b786:	3468      	adds	r4, #104	; 0x68
 800b788:	e7d7      	b.n	800b73a <__sfp+0x1e>
 800b78a:	2104      	movs	r1, #4
 800b78c:	0038      	movs	r0, r7
 800b78e:	f7ff ff57 	bl	800b640 <__sfmoreglue>
 800b792:	1e04      	subs	r4, r0, #0
 800b794:	6030      	str	r0, [r6, #0]
 800b796:	d1d5      	bne.n	800b744 <__sfp+0x28>
 800b798:	f7ff ff70 	bl	800b67c <__sfp_lock_release>
 800b79c:	230c      	movs	r3, #12
 800b79e:	603b      	str	r3, [r7, #0]
 800b7a0:	e7ef      	b.n	800b782 <__sfp+0x66>
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	0800c7e4 	.word	0x0800c7e4
 800b7a8:	ffff0001 	.word	0xffff0001

0800b7ac <_fwalk_reent>:
 800b7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ae:	0004      	movs	r4, r0
 800b7b0:	0006      	movs	r6, r0
 800b7b2:	2700      	movs	r7, #0
 800b7b4:	9101      	str	r1, [sp, #4]
 800b7b6:	3448      	adds	r4, #72	; 0x48
 800b7b8:	6863      	ldr	r3, [r4, #4]
 800b7ba:	68a5      	ldr	r5, [r4, #8]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	d504      	bpl.n	800b7d0 <_fwalk_reent+0x24>
 800b7c6:	6824      	ldr	r4, [r4, #0]
 800b7c8:	2c00      	cmp	r4, #0
 800b7ca:	d1f5      	bne.n	800b7b8 <_fwalk_reent+0xc>
 800b7cc:	0038      	movs	r0, r7
 800b7ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7d0:	89ab      	ldrh	r3, [r5, #12]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d908      	bls.n	800b7e8 <_fwalk_reent+0x3c>
 800b7d6:	220e      	movs	r2, #14
 800b7d8:	5eab      	ldrsh	r3, [r5, r2]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	d004      	beq.n	800b7e8 <_fwalk_reent+0x3c>
 800b7de:	0029      	movs	r1, r5
 800b7e0:	0030      	movs	r0, r6
 800b7e2:	9b01      	ldr	r3, [sp, #4]
 800b7e4:	4798      	blx	r3
 800b7e6:	4307      	orrs	r7, r0
 800b7e8:	3568      	adds	r5, #104	; 0x68
 800b7ea:	e7e8      	b.n	800b7be <_fwalk_reent+0x12>

0800b7ec <__retarget_lock_init_recursive>:
 800b7ec:	4770      	bx	lr

0800b7ee <__retarget_lock_acquire_recursive>:
 800b7ee:	4770      	bx	lr

0800b7f0 <__retarget_lock_release_recursive>:
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <__swhatbuf_r>:
 800b7f4:	b570      	push	{r4, r5, r6, lr}
 800b7f6:	000e      	movs	r6, r1
 800b7f8:	001d      	movs	r5, r3
 800b7fa:	230e      	movs	r3, #14
 800b7fc:	5ec9      	ldrsh	r1, [r1, r3]
 800b7fe:	0014      	movs	r4, r2
 800b800:	b096      	sub	sp, #88	; 0x58
 800b802:	2900      	cmp	r1, #0
 800b804:	da08      	bge.n	800b818 <__swhatbuf_r+0x24>
 800b806:	220c      	movs	r2, #12
 800b808:	5eb3      	ldrsh	r3, [r6, r2]
 800b80a:	2200      	movs	r2, #0
 800b80c:	602a      	str	r2, [r5, #0]
 800b80e:	061b      	lsls	r3, r3, #24
 800b810:	d411      	bmi.n	800b836 <__swhatbuf_r+0x42>
 800b812:	2380      	movs	r3, #128	; 0x80
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	e00f      	b.n	800b838 <__swhatbuf_r+0x44>
 800b818:	466a      	mov	r2, sp
 800b81a:	f000 f91b 	bl	800ba54 <_fstat_r>
 800b81e:	2800      	cmp	r0, #0
 800b820:	dbf1      	blt.n	800b806 <__swhatbuf_r+0x12>
 800b822:	23f0      	movs	r3, #240	; 0xf0
 800b824:	9901      	ldr	r1, [sp, #4]
 800b826:	021b      	lsls	r3, r3, #8
 800b828:	4019      	ands	r1, r3
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <__swhatbuf_r+0x4c>)
 800b82c:	18c9      	adds	r1, r1, r3
 800b82e:	424b      	negs	r3, r1
 800b830:	4159      	adcs	r1, r3
 800b832:	6029      	str	r1, [r5, #0]
 800b834:	e7ed      	b.n	800b812 <__swhatbuf_r+0x1e>
 800b836:	2340      	movs	r3, #64	; 0x40
 800b838:	2000      	movs	r0, #0
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	b016      	add	sp, #88	; 0x58
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	ffffe000 	.word	0xffffe000

0800b844 <__smakebuf_r>:
 800b844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b846:	2602      	movs	r6, #2
 800b848:	898b      	ldrh	r3, [r1, #12]
 800b84a:	0005      	movs	r5, r0
 800b84c:	000c      	movs	r4, r1
 800b84e:	4233      	tst	r3, r6
 800b850:	d006      	beq.n	800b860 <__smakebuf_r+0x1c>
 800b852:	0023      	movs	r3, r4
 800b854:	3347      	adds	r3, #71	; 0x47
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	2301      	movs	r3, #1
 800b85c:	6163      	str	r3, [r4, #20]
 800b85e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b860:	466a      	mov	r2, sp
 800b862:	ab01      	add	r3, sp, #4
 800b864:	f7ff ffc6 	bl	800b7f4 <__swhatbuf_r>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	0007      	movs	r7, r0
 800b86c:	0028      	movs	r0, r5
 800b86e:	f7ff f92d 	bl	800aacc <_malloc_r>
 800b872:	2800      	cmp	r0, #0
 800b874:	d108      	bne.n	800b888 <__smakebuf_r+0x44>
 800b876:	220c      	movs	r2, #12
 800b878:	5ea3      	ldrsh	r3, [r4, r2]
 800b87a:	059a      	lsls	r2, r3, #22
 800b87c:	d4ef      	bmi.n	800b85e <__smakebuf_r+0x1a>
 800b87e:	2203      	movs	r2, #3
 800b880:	4393      	bics	r3, r2
 800b882:	431e      	orrs	r6, r3
 800b884:	81a6      	strh	r6, [r4, #12]
 800b886:	e7e4      	b.n	800b852 <__smakebuf_r+0xe>
 800b888:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <__smakebuf_r+0x84>)
 800b88a:	62ab      	str	r3, [r5, #40]	; 0x28
 800b88c:	2380      	movs	r3, #128	; 0x80
 800b88e:	89a2      	ldrh	r2, [r4, #12]
 800b890:	6020      	str	r0, [r4, #0]
 800b892:	4313      	orrs	r3, r2
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	6120      	str	r0, [r4, #16]
 800b89a:	6163      	str	r3, [r4, #20]
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00d      	beq.n	800b8be <__smakebuf_r+0x7a>
 800b8a2:	0028      	movs	r0, r5
 800b8a4:	230e      	movs	r3, #14
 800b8a6:	5ee1      	ldrsh	r1, [r4, r3]
 800b8a8:	f000 f8e6 	bl	800ba78 <_isatty_r>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d006      	beq.n	800b8be <__smakebuf_r+0x7a>
 800b8b0:	2203      	movs	r2, #3
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	4393      	bics	r3, r2
 800b8b6:	001a      	movs	r2, r3
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	89a0      	ldrh	r0, [r4, #12]
 800b8c0:	4307      	orrs	r7, r0
 800b8c2:	81a7      	strh	r7, [r4, #12]
 800b8c4:	e7cb      	b.n	800b85e <__smakebuf_r+0x1a>
 800b8c6:	46c0      	nop			; (mov r8, r8)
 800b8c8:	0800b631 	.word	0x0800b631

0800b8cc <_malloc_usable_size_r>:
 800b8cc:	1f0b      	subs	r3, r1, #4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	1f18      	subs	r0, r3, #4
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da01      	bge.n	800b8da <_malloc_usable_size_r+0xe>
 800b8d6:	580b      	ldr	r3, [r1, r0]
 800b8d8:	18c0      	adds	r0, r0, r3
 800b8da:	4770      	bx	lr

0800b8dc <_raise_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	0004      	movs	r4, r0
 800b8e0:	000d      	movs	r5, r1
 800b8e2:	291f      	cmp	r1, #31
 800b8e4:	d904      	bls.n	800b8f0 <_raise_r+0x14>
 800b8e6:	2316      	movs	r3, #22
 800b8e8:	6003      	str	r3, [r0, #0]
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	4240      	negs	r0, r0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d004      	beq.n	800b900 <_raise_r+0x24>
 800b8f6:	008a      	lsls	r2, r1, #2
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	2a00      	cmp	r2, #0
 800b8fe:	d108      	bne.n	800b912 <_raise_r+0x36>
 800b900:	0020      	movs	r0, r4
 800b902:	f000 f831 	bl	800b968 <_getpid_r>
 800b906:	002a      	movs	r2, r5
 800b908:	0001      	movs	r1, r0
 800b90a:	0020      	movs	r0, r4
 800b90c:	f000 f81a 	bl	800b944 <_kill_r>
 800b910:	e7ed      	b.n	800b8ee <_raise_r+0x12>
 800b912:	2000      	movs	r0, #0
 800b914:	2a01      	cmp	r2, #1
 800b916:	d0ea      	beq.n	800b8ee <_raise_r+0x12>
 800b918:	1c51      	adds	r1, r2, #1
 800b91a:	d103      	bne.n	800b924 <_raise_r+0x48>
 800b91c:	2316      	movs	r3, #22
 800b91e:	3001      	adds	r0, #1
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	e7e4      	b.n	800b8ee <_raise_r+0x12>
 800b924:	2400      	movs	r4, #0
 800b926:	0028      	movs	r0, r5
 800b928:	601c      	str	r4, [r3, #0]
 800b92a:	4790      	blx	r2
 800b92c:	0020      	movs	r0, r4
 800b92e:	e7de      	b.n	800b8ee <_raise_r+0x12>

0800b930 <raise>:
 800b930:	b510      	push	{r4, lr}
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <raise+0x10>)
 800b934:	0001      	movs	r1, r0
 800b936:	6818      	ldr	r0, [r3, #0]
 800b938:	f7ff ffd0 	bl	800b8dc <_raise_r>
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	20000018 	.word	0x20000018

0800b944 <_kill_r>:
 800b944:	2300      	movs	r3, #0
 800b946:	b570      	push	{r4, r5, r6, lr}
 800b948:	4d06      	ldr	r5, [pc, #24]	; (800b964 <_kill_r+0x20>)
 800b94a:	0004      	movs	r4, r0
 800b94c:	0008      	movs	r0, r1
 800b94e:	0011      	movs	r1, r2
 800b950:	602b      	str	r3, [r5, #0]
 800b952:	f7fc ff8d 	bl	8008870 <_kill>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	d103      	bne.n	800b962 <_kill_r+0x1e>
 800b95a:	682b      	ldr	r3, [r5, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d000      	beq.n	800b962 <_kill_r+0x1e>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd70      	pop	{r4, r5, r6, pc}
 800b964:	20000764 	.word	0x20000764

0800b968 <_getpid_r>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	f7fc ff7b 	bl	8008864 <_getpid>
 800b96e:	bd10      	pop	{r4, pc}

0800b970 <__sread>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	000c      	movs	r4, r1
 800b974:	250e      	movs	r5, #14
 800b976:	5f49      	ldrsh	r1, [r1, r5]
 800b978:	f000 f8a4 	bl	800bac4 <_read_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	db03      	blt.n	800b988 <__sread+0x18>
 800b980:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b982:	181b      	adds	r3, r3, r0
 800b984:	6563      	str	r3, [r4, #84]	; 0x54
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	4a02      	ldr	r2, [pc, #8]	; (800b994 <__sread+0x24>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	81a3      	strh	r3, [r4, #12]
 800b990:	e7f9      	b.n	800b986 <__sread+0x16>
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	ffffefff 	.word	0xffffefff

0800b998 <__swrite>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	001f      	movs	r7, r3
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	0005      	movs	r5, r0
 800b9a0:	000c      	movs	r4, r1
 800b9a2:	0016      	movs	r6, r2
 800b9a4:	05db      	lsls	r3, r3, #23
 800b9a6:	d505      	bpl.n	800b9b4 <__swrite+0x1c>
 800b9a8:	230e      	movs	r3, #14
 800b9aa:	5ec9      	ldrsh	r1, [r1, r3]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	f000 f874 	bl	800ba9c <_lseek_r>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	4a05      	ldr	r2, [pc, #20]	; (800b9cc <__swrite+0x34>)
 800b9b8:	0028      	movs	r0, r5
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	0032      	movs	r2, r6
 800b9c0:	230e      	movs	r3, #14
 800b9c2:	5ee1      	ldrsh	r1, [r4, r3]
 800b9c4:	003b      	movs	r3, r7
 800b9c6:	f000 f81f 	bl	800ba08 <_write_r>
 800b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9cc:	ffffefff 	.word	0xffffefff

0800b9d0 <__sseek>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	000c      	movs	r4, r1
 800b9d4:	250e      	movs	r5, #14
 800b9d6:	5f49      	ldrsh	r1, [r1, r5]
 800b9d8:	f000 f860 	bl	800ba9c <_lseek_r>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	1c42      	adds	r2, r0, #1
 800b9e0:	d103      	bne.n	800b9ea <__sseek+0x1a>
 800b9e2:	4a05      	ldr	r2, [pc, #20]	; (800b9f8 <__sseek+0x28>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	2280      	movs	r2, #128	; 0x80
 800b9ec:	0152      	lsls	r2, r2, #5
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	81a3      	strh	r3, [r4, #12]
 800b9f2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9f4:	e7f8      	b.n	800b9e8 <__sseek+0x18>
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	ffffefff 	.word	0xffffefff

0800b9fc <__sclose>:
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	230e      	movs	r3, #14
 800ba00:	5ec9      	ldrsh	r1, [r1, r3]
 800ba02:	f000 f815 	bl	800ba30 <_close_r>
 800ba06:	bd10      	pop	{r4, pc}

0800ba08 <_write_r>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	0004      	movs	r4, r0
 800ba0c:	0008      	movs	r0, r1
 800ba0e:	0011      	movs	r1, r2
 800ba10:	001a      	movs	r2, r3
 800ba12:	2300      	movs	r3, #0
 800ba14:	4d05      	ldr	r5, [pc, #20]	; (800ba2c <_write_r+0x24>)
 800ba16:	602b      	str	r3, [r5, #0]
 800ba18:	f7fc ff63 	bl	80088e2 <_write>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d103      	bne.n	800ba28 <_write_r+0x20>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d000      	beq.n	800ba28 <_write_r+0x20>
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	46c0      	nop			; (mov r8, r8)
 800ba2c:	20000764 	.word	0x20000764

0800ba30 <_close_r>:
 800ba30:	2300      	movs	r3, #0
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	4d06      	ldr	r5, [pc, #24]	; (800ba50 <_close_r+0x20>)
 800ba36:	0004      	movs	r4, r0
 800ba38:	0008      	movs	r0, r1
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	f7fc ff9a 	bl	8008974 <_close>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d103      	bne.n	800ba4c <_close_r+0x1c>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d000      	beq.n	800ba4c <_close_r+0x1c>
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	20000764 	.word	0x20000764

0800ba54 <_fstat_r>:
 800ba54:	2300      	movs	r3, #0
 800ba56:	b570      	push	{r4, r5, r6, lr}
 800ba58:	4d06      	ldr	r5, [pc, #24]	; (800ba74 <_fstat_r+0x20>)
 800ba5a:	0004      	movs	r4, r0
 800ba5c:	0008      	movs	r0, r1
 800ba5e:	0011      	movs	r1, r2
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	f7fc ff91 	bl	8008988 <_fstat>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d103      	bne.n	800ba72 <_fstat_r+0x1e>
 800ba6a:	682b      	ldr	r3, [r5, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d000      	beq.n	800ba72 <_fstat_r+0x1e>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	20000764 	.word	0x20000764

0800ba78 <_isatty_r>:
 800ba78:	2300      	movs	r3, #0
 800ba7a:	b570      	push	{r4, r5, r6, lr}
 800ba7c:	4d06      	ldr	r5, [pc, #24]	; (800ba98 <_isatty_r+0x20>)
 800ba7e:	0004      	movs	r4, r0
 800ba80:	0008      	movs	r0, r1
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	f7fc ff8e 	bl	80089a4 <_isatty>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d103      	bne.n	800ba94 <_isatty_r+0x1c>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d000      	beq.n	800ba94 <_isatty_r+0x1c>
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	20000764 	.word	0x20000764

0800ba9c <_lseek_r>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	0004      	movs	r4, r0
 800baa0:	0008      	movs	r0, r1
 800baa2:	0011      	movs	r1, r2
 800baa4:	001a      	movs	r2, r3
 800baa6:	2300      	movs	r3, #0
 800baa8:	4d05      	ldr	r5, [pc, #20]	; (800bac0 <_lseek_r+0x24>)
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7fc ff83 	bl	80089b6 <_lseek>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d103      	bne.n	800babc <_lseek_r+0x20>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d000      	beq.n	800babc <_lseek_r+0x20>
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	20000764 	.word	0x20000764

0800bac4 <_read_r>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	0004      	movs	r4, r0
 800bac8:	0008      	movs	r0, r1
 800baca:	0011      	movs	r1, r2
 800bacc:	001a      	movs	r2, r3
 800bace:	2300      	movs	r3, #0
 800bad0:	4d05      	ldr	r5, [pc, #20]	; (800bae8 <_read_r+0x24>)
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7fc fee8 	bl	80088a8 <_read>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d103      	bne.n	800bae4 <_read_r+0x20>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d000      	beq.n	800bae4 <_read_r+0x20>
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	46c0      	nop			; (mov r8, r8)
 800bae8:	20000764 	.word	0x20000764

0800baec <_init>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf2:	bc08      	pop	{r3}
 800baf4:	469e      	mov	lr, r3
 800baf6:	4770      	bx	lr

0800baf8 <_fini>:
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafe:	bc08      	pop	{r3}
 800bb00:	469e      	mov	lr, r3
 800bb02:	4770      	bx	lr
