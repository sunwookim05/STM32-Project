
Gas_Range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  2000008c  0800464c  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000021c  0800464c  0002021c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006b18  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001688  00000000  00000000  00026bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000618  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  00028870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00013834  00000000  00000000  00028dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000075bf  00000000  00000000  0003c604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007584a  00000000  00000000  00043bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000b940d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001860  00000000  00000000  000b9460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004468 	.word	0x08004468

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08004468 	.word	0x08004468

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_ddiv>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	464e      	mov	r6, r9
 800024a:	4645      	mov	r5, r8
 800024c:	46de      	mov	lr, fp
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	4681      	mov	r9, r0
 8000252:	0005      	movs	r5, r0
 8000254:	030c      	lsls	r4, r1, #12
 8000256:	0048      	lsls	r0, r1, #1
 8000258:	4692      	mov	sl, r2
 800025a:	001f      	movs	r7, r3
 800025c:	b085      	sub	sp, #20
 800025e:	0b24      	lsrs	r4, r4, #12
 8000260:	0d40      	lsrs	r0, r0, #21
 8000262:	0fce      	lsrs	r6, r1, #31
 8000264:	2800      	cmp	r0, #0
 8000266:	d059      	beq.n	800031c <__aeabi_ddiv+0xd8>
 8000268:	4b87      	ldr	r3, [pc, #540]	; (8000488 <__aeabi_ddiv+0x244>)
 800026a:	4298      	cmp	r0, r3
 800026c:	d100      	bne.n	8000270 <__aeabi_ddiv+0x2c>
 800026e:	e098      	b.n	80003a2 <__aeabi_ddiv+0x15e>
 8000270:	0f6b      	lsrs	r3, r5, #29
 8000272:	00e4      	lsls	r4, r4, #3
 8000274:	431c      	orrs	r4, r3
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	041b      	lsls	r3, r3, #16
 800027a:	4323      	orrs	r3, r4
 800027c:	4698      	mov	r8, r3
 800027e:	4b83      	ldr	r3, [pc, #524]	; (800048c <__aeabi_ddiv+0x248>)
 8000280:	00ed      	lsls	r5, r5, #3
 8000282:	469b      	mov	fp, r3
 8000284:	2300      	movs	r3, #0
 8000286:	4699      	mov	r9, r3
 8000288:	4483      	add	fp, r0
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	033c      	lsls	r4, r7, #12
 800028e:	007b      	lsls	r3, r7, #1
 8000290:	4650      	mov	r0, sl
 8000292:	0b24      	lsrs	r4, r4, #12
 8000294:	0d5b      	lsrs	r3, r3, #21
 8000296:	0fff      	lsrs	r7, r7, #31
 8000298:	2b00      	cmp	r3, #0
 800029a:	d067      	beq.n	800036c <__aeabi_ddiv+0x128>
 800029c:	4a7a      	ldr	r2, [pc, #488]	; (8000488 <__aeabi_ddiv+0x244>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d018      	beq.n	80002d4 <__aeabi_ddiv+0x90>
 80002a2:	497a      	ldr	r1, [pc, #488]	; (800048c <__aeabi_ddiv+0x248>)
 80002a4:	0f42      	lsrs	r2, r0, #29
 80002a6:	468c      	mov	ip, r1
 80002a8:	00e4      	lsls	r4, r4, #3
 80002aa:	4659      	mov	r1, fp
 80002ac:	4314      	orrs	r4, r2
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	4463      	add	r3, ip
 80002b2:	0412      	lsls	r2, r2, #16
 80002b4:	1acb      	subs	r3, r1, r3
 80002b6:	4314      	orrs	r4, r2
 80002b8:	469b      	mov	fp, r3
 80002ba:	00c2      	lsls	r2, r0, #3
 80002bc:	2000      	movs	r0, #0
 80002be:	0033      	movs	r3, r6
 80002c0:	407b      	eors	r3, r7
 80002c2:	469a      	mov	sl, r3
 80002c4:	464b      	mov	r3, r9
 80002c6:	2b0f      	cmp	r3, #15
 80002c8:	d900      	bls.n	80002cc <__aeabi_ddiv+0x88>
 80002ca:	e0ef      	b.n	80004ac <__aeabi_ddiv+0x268>
 80002cc:	4970      	ldr	r1, [pc, #448]	; (8000490 <__aeabi_ddiv+0x24c>)
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	58cb      	ldr	r3, [r1, r3]
 80002d2:	469f      	mov	pc, r3
 80002d4:	4b6f      	ldr	r3, [pc, #444]	; (8000494 <__aeabi_ddiv+0x250>)
 80002d6:	4652      	mov	r2, sl
 80002d8:	469c      	mov	ip, r3
 80002da:	4322      	orrs	r2, r4
 80002dc:	44e3      	add	fp, ip
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d000      	beq.n	80002e4 <__aeabi_ddiv+0xa0>
 80002e2:	e095      	b.n	8000410 <__aeabi_ddiv+0x1cc>
 80002e4:	4649      	mov	r1, r9
 80002e6:	2302      	movs	r3, #2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	4689      	mov	r9, r1
 80002ec:	2400      	movs	r4, #0
 80002ee:	2002      	movs	r0, #2
 80002f0:	e7e5      	b.n	80002be <__aeabi_ddiv+0x7a>
 80002f2:	2300      	movs	r3, #0
 80002f4:	2400      	movs	r4, #0
 80002f6:	2500      	movs	r5, #0
 80002f8:	4652      	mov	r2, sl
 80002fa:	051b      	lsls	r3, r3, #20
 80002fc:	4323      	orrs	r3, r4
 80002fe:	07d2      	lsls	r2, r2, #31
 8000300:	4313      	orrs	r3, r2
 8000302:	0028      	movs	r0, r5
 8000304:	0019      	movs	r1, r3
 8000306:	b005      	add	sp, #20
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	2400      	movs	r4, #0
 8000316:	2500      	movs	r5, #0
 8000318:	4b5b      	ldr	r3, [pc, #364]	; (8000488 <__aeabi_ddiv+0x244>)
 800031a:	e7ed      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 800031c:	464b      	mov	r3, r9
 800031e:	4323      	orrs	r3, r4
 8000320:	4698      	mov	r8, r3
 8000322:	d100      	bne.n	8000326 <__aeabi_ddiv+0xe2>
 8000324:	e089      	b.n	800043a <__aeabi_ddiv+0x1f6>
 8000326:	2c00      	cmp	r4, #0
 8000328:	d100      	bne.n	800032c <__aeabi_ddiv+0xe8>
 800032a:	e1e0      	b.n	80006ee <__aeabi_ddiv+0x4aa>
 800032c:	0020      	movs	r0, r4
 800032e:	f000 fad7 	bl	80008e0 <__clzsi2>
 8000332:	0001      	movs	r1, r0
 8000334:	0002      	movs	r2, r0
 8000336:	390b      	subs	r1, #11
 8000338:	231d      	movs	r3, #29
 800033a:	1a5b      	subs	r3, r3, r1
 800033c:	4649      	mov	r1, r9
 800033e:	0010      	movs	r0, r2
 8000340:	40d9      	lsrs	r1, r3
 8000342:	3808      	subs	r0, #8
 8000344:	4084      	lsls	r4, r0
 8000346:	000b      	movs	r3, r1
 8000348:	464d      	mov	r5, r9
 800034a:	4323      	orrs	r3, r4
 800034c:	4698      	mov	r8, r3
 800034e:	4085      	lsls	r5, r0
 8000350:	4851      	ldr	r0, [pc, #324]	; (8000498 <__aeabi_ddiv+0x254>)
 8000352:	033c      	lsls	r4, r7, #12
 8000354:	1a83      	subs	r3, r0, r2
 8000356:	469b      	mov	fp, r3
 8000358:	2300      	movs	r3, #0
 800035a:	4699      	mov	r9, r3
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	007b      	lsls	r3, r7, #1
 8000360:	4650      	mov	r0, sl
 8000362:	0b24      	lsrs	r4, r4, #12
 8000364:	0d5b      	lsrs	r3, r3, #21
 8000366:	0fff      	lsrs	r7, r7, #31
 8000368:	2b00      	cmp	r3, #0
 800036a:	d197      	bne.n	800029c <__aeabi_ddiv+0x58>
 800036c:	4652      	mov	r2, sl
 800036e:	4322      	orrs	r2, r4
 8000370:	d055      	beq.n	800041e <__aeabi_ddiv+0x1da>
 8000372:	2c00      	cmp	r4, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_ddiv+0x134>
 8000376:	e1ca      	b.n	800070e <__aeabi_ddiv+0x4ca>
 8000378:	0020      	movs	r0, r4
 800037a:	f000 fab1 	bl	80008e0 <__clzsi2>
 800037e:	0002      	movs	r2, r0
 8000380:	3a0b      	subs	r2, #11
 8000382:	231d      	movs	r3, #29
 8000384:	0001      	movs	r1, r0
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	3908      	subs	r1, #8
 800038c:	40da      	lsrs	r2, r3
 800038e:	408c      	lsls	r4, r1
 8000390:	4314      	orrs	r4, r2
 8000392:	4652      	mov	r2, sl
 8000394:	408a      	lsls	r2, r1
 8000396:	4b41      	ldr	r3, [pc, #260]	; (800049c <__aeabi_ddiv+0x258>)
 8000398:	4458      	add	r0, fp
 800039a:	469b      	mov	fp, r3
 800039c:	4483      	add	fp, r0
 800039e:	2000      	movs	r0, #0
 80003a0:	e78d      	b.n	80002be <__aeabi_ddiv+0x7a>
 80003a2:	464b      	mov	r3, r9
 80003a4:	4323      	orrs	r3, r4
 80003a6:	4698      	mov	r8, r3
 80003a8:	d140      	bne.n	800042c <__aeabi_ddiv+0x1e8>
 80003aa:	2308      	movs	r3, #8
 80003ac:	4699      	mov	r9, r3
 80003ae:	3b06      	subs	r3, #6
 80003b0:	2500      	movs	r5, #0
 80003b2:	4683      	mov	fp, r0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	e769      	b.n	800028c <__aeabi_ddiv+0x48>
 80003b8:	46b2      	mov	sl, r6
 80003ba:	9b00      	ldr	r3, [sp, #0]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d0a9      	beq.n	8000314 <__aeabi_ddiv+0xd0>
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d100      	bne.n	80003c6 <__aeabi_ddiv+0x182>
 80003c4:	e211      	b.n	80007ea <__aeabi_ddiv+0x5a6>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d093      	beq.n	80002f2 <__aeabi_ddiv+0xae>
 80003ca:	4a35      	ldr	r2, [pc, #212]	; (80004a0 <__aeabi_ddiv+0x25c>)
 80003cc:	445a      	add	r2, fp
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	dc00      	bgt.n	80003d4 <__aeabi_ddiv+0x190>
 80003d2:	e13c      	b.n	800064e <__aeabi_ddiv+0x40a>
 80003d4:	076b      	lsls	r3, r5, #29
 80003d6:	d000      	beq.n	80003da <__aeabi_ddiv+0x196>
 80003d8:	e1a7      	b.n	800072a <__aeabi_ddiv+0x4e6>
 80003da:	08ed      	lsrs	r5, r5, #3
 80003dc:	4643      	mov	r3, r8
 80003de:	01db      	lsls	r3, r3, #7
 80003e0:	d506      	bpl.n	80003f0 <__aeabi_ddiv+0x1ac>
 80003e2:	4642      	mov	r2, r8
 80003e4:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <__aeabi_ddiv+0x260>)
 80003e6:	401a      	ands	r2, r3
 80003e8:	4690      	mov	r8, r2
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	00d2      	lsls	r2, r2, #3
 80003ee:	445a      	add	r2, fp
 80003f0:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <__aeabi_ddiv+0x264>)
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dc8e      	bgt.n	8000314 <__aeabi_ddiv+0xd0>
 80003f6:	4643      	mov	r3, r8
 80003f8:	0552      	lsls	r2, r2, #21
 80003fa:	0758      	lsls	r0, r3, #29
 80003fc:	025c      	lsls	r4, r3, #9
 80003fe:	4305      	orrs	r5, r0
 8000400:	0b24      	lsrs	r4, r4, #12
 8000402:	0d53      	lsrs	r3, r2, #21
 8000404:	e778      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 8000406:	46ba      	mov	sl, r7
 8000408:	46a0      	mov	r8, r4
 800040a:	0015      	movs	r5, r2
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	e7d4      	b.n	80003ba <__aeabi_ddiv+0x176>
 8000410:	464a      	mov	r2, r9
 8000412:	2303      	movs	r3, #3
 8000414:	431a      	orrs	r2, r3
 8000416:	4691      	mov	r9, r2
 8000418:	2003      	movs	r0, #3
 800041a:	4652      	mov	r2, sl
 800041c:	e74f      	b.n	80002be <__aeabi_ddiv+0x7a>
 800041e:	4649      	mov	r1, r9
 8000420:	2301      	movs	r3, #1
 8000422:	4319      	orrs	r1, r3
 8000424:	4689      	mov	r9, r1
 8000426:	2400      	movs	r4, #0
 8000428:	2001      	movs	r0, #1
 800042a:	e748      	b.n	80002be <__aeabi_ddiv+0x7a>
 800042c:	230c      	movs	r3, #12
 800042e:	4699      	mov	r9, r3
 8000430:	3b09      	subs	r3, #9
 8000432:	46a0      	mov	r8, r4
 8000434:	4683      	mov	fp, r0
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	e728      	b.n	800028c <__aeabi_ddiv+0x48>
 800043a:	2304      	movs	r3, #4
 800043c:	4699      	mov	r9, r3
 800043e:	2300      	movs	r3, #0
 8000440:	469b      	mov	fp, r3
 8000442:	3301      	adds	r3, #1
 8000444:	2500      	movs	r5, #0
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	e720      	b.n	800028c <__aeabi_ddiv+0x48>
 800044a:	2300      	movs	r3, #0
 800044c:	2480      	movs	r4, #128	; 0x80
 800044e:	469a      	mov	sl, r3
 8000450:	2500      	movs	r5, #0
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <__aeabi_ddiv+0x244>)
 8000454:	0324      	lsls	r4, r4, #12
 8000456:	e74f      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	4641      	mov	r1, r8
 800045c:	031b      	lsls	r3, r3, #12
 800045e:	4219      	tst	r1, r3
 8000460:	d008      	beq.n	8000474 <__aeabi_ddiv+0x230>
 8000462:	421c      	tst	r4, r3
 8000464:	d106      	bne.n	8000474 <__aeabi_ddiv+0x230>
 8000466:	431c      	orrs	r4, r3
 8000468:	0324      	lsls	r4, r4, #12
 800046a:	46ba      	mov	sl, r7
 800046c:	0015      	movs	r5, r2
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <__aeabi_ddiv+0x244>)
 8000470:	0b24      	lsrs	r4, r4, #12
 8000472:	e741      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 8000474:	2480      	movs	r4, #128	; 0x80
 8000476:	4643      	mov	r3, r8
 8000478:	0324      	lsls	r4, r4, #12
 800047a:	431c      	orrs	r4, r3
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	46b2      	mov	sl, r6
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <__aeabi_ddiv+0x244>)
 8000482:	0b24      	lsrs	r4, r4, #12
 8000484:	e738      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	000007ff 	.word	0x000007ff
 800048c:	fffffc01 	.word	0xfffffc01
 8000490:	08004528 	.word	0x08004528
 8000494:	fffff801 	.word	0xfffff801
 8000498:	fffffc0d 	.word	0xfffffc0d
 800049c:	000003f3 	.word	0x000003f3
 80004a0:	000003ff 	.word	0x000003ff
 80004a4:	feffffff 	.word	0xfeffffff
 80004a8:	000007fe 	.word	0x000007fe
 80004ac:	4544      	cmp	r4, r8
 80004ae:	d200      	bcs.n	80004b2 <__aeabi_ddiv+0x26e>
 80004b0:	e116      	b.n	80006e0 <__aeabi_ddiv+0x49c>
 80004b2:	d100      	bne.n	80004b6 <__aeabi_ddiv+0x272>
 80004b4:	e111      	b.n	80006da <__aeabi_ddiv+0x496>
 80004b6:	2301      	movs	r3, #1
 80004b8:	425b      	negs	r3, r3
 80004ba:	469c      	mov	ip, r3
 80004bc:	002e      	movs	r6, r5
 80004be:	4640      	mov	r0, r8
 80004c0:	2500      	movs	r5, #0
 80004c2:	44e3      	add	fp, ip
 80004c4:	0223      	lsls	r3, r4, #8
 80004c6:	0e14      	lsrs	r4, r2, #24
 80004c8:	431c      	orrs	r4, r3
 80004ca:	0c1b      	lsrs	r3, r3, #16
 80004cc:	4699      	mov	r9, r3
 80004ce:	0423      	lsls	r3, r4, #16
 80004d0:	0c1f      	lsrs	r7, r3, #16
 80004d2:	0212      	lsls	r2, r2, #8
 80004d4:	4649      	mov	r1, r9
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9701      	str	r7, [sp, #4]
 80004da:	f7ff fead 	bl	8000238 <__aeabi_uidivmod>
 80004de:	0002      	movs	r2, r0
 80004e0:	437a      	muls	r2, r7
 80004e2:	040b      	lsls	r3, r1, #16
 80004e4:	0c31      	lsrs	r1, r6, #16
 80004e6:	4680      	mov	r8, r0
 80004e8:	4319      	orrs	r1, r3
 80004ea:	428a      	cmp	r2, r1
 80004ec:	d90b      	bls.n	8000506 <__aeabi_ddiv+0x2c2>
 80004ee:	2301      	movs	r3, #1
 80004f0:	425b      	negs	r3, r3
 80004f2:	469c      	mov	ip, r3
 80004f4:	1909      	adds	r1, r1, r4
 80004f6:	44e0      	add	r8, ip
 80004f8:	428c      	cmp	r4, r1
 80004fa:	d804      	bhi.n	8000506 <__aeabi_ddiv+0x2c2>
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d902      	bls.n	8000506 <__aeabi_ddiv+0x2c2>
 8000500:	1e83      	subs	r3, r0, #2
 8000502:	4698      	mov	r8, r3
 8000504:	1909      	adds	r1, r1, r4
 8000506:	1a88      	subs	r0, r1, r2
 8000508:	4649      	mov	r1, r9
 800050a:	f7ff fe95 	bl	8000238 <__aeabi_uidivmod>
 800050e:	0409      	lsls	r1, r1, #16
 8000510:	468c      	mov	ip, r1
 8000512:	0431      	lsls	r1, r6, #16
 8000514:	4666      	mov	r6, ip
 8000516:	9a01      	ldr	r2, [sp, #4]
 8000518:	0c09      	lsrs	r1, r1, #16
 800051a:	4342      	muls	r2, r0
 800051c:	0003      	movs	r3, r0
 800051e:	4331      	orrs	r1, r6
 8000520:	428a      	cmp	r2, r1
 8000522:	d904      	bls.n	800052e <__aeabi_ddiv+0x2ea>
 8000524:	1909      	adds	r1, r1, r4
 8000526:	3b01      	subs	r3, #1
 8000528:	428c      	cmp	r4, r1
 800052a:	d800      	bhi.n	800052e <__aeabi_ddiv+0x2ea>
 800052c:	e111      	b.n	8000752 <__aeabi_ddiv+0x50e>
 800052e:	1a89      	subs	r1, r1, r2
 8000530:	4642      	mov	r2, r8
 8000532:	9e00      	ldr	r6, [sp, #0]
 8000534:	0412      	lsls	r2, r2, #16
 8000536:	431a      	orrs	r2, r3
 8000538:	0c33      	lsrs	r3, r6, #16
 800053a:	001f      	movs	r7, r3
 800053c:	0c10      	lsrs	r0, r2, #16
 800053e:	4690      	mov	r8, r2
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	0413      	lsls	r3, r2, #16
 8000544:	0432      	lsls	r2, r6, #16
 8000546:	0c16      	lsrs	r6, r2, #16
 8000548:	0032      	movs	r2, r6
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	435a      	muls	r2, r3
 800054e:	9603      	str	r6, [sp, #12]
 8000550:	437b      	muls	r3, r7
 8000552:	4346      	muls	r6, r0
 8000554:	4378      	muls	r0, r7
 8000556:	0c17      	lsrs	r7, r2, #16
 8000558:	46bc      	mov	ip, r7
 800055a:	199b      	adds	r3, r3, r6
 800055c:	4463      	add	r3, ip
 800055e:	429e      	cmp	r6, r3
 8000560:	d903      	bls.n	800056a <__aeabi_ddiv+0x326>
 8000562:	2680      	movs	r6, #128	; 0x80
 8000564:	0276      	lsls	r6, r6, #9
 8000566:	46b4      	mov	ip, r6
 8000568:	4460      	add	r0, ip
 800056a:	0c1e      	lsrs	r6, r3, #16
 800056c:	1830      	adds	r0, r6, r0
 800056e:	0416      	lsls	r6, r2, #16
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	0c36      	lsrs	r6, r6, #16
 8000574:	199e      	adds	r6, r3, r6
 8000576:	4281      	cmp	r1, r0
 8000578:	d200      	bcs.n	800057c <__aeabi_ddiv+0x338>
 800057a:	e09c      	b.n	80006b6 <__aeabi_ddiv+0x472>
 800057c:	d100      	bne.n	8000580 <__aeabi_ddiv+0x33c>
 800057e:	e097      	b.n	80006b0 <__aeabi_ddiv+0x46c>
 8000580:	1bae      	subs	r6, r5, r6
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	42b5      	cmp	r5, r6
 8000586:	4180      	sbcs	r0, r0
 8000588:	4240      	negs	r0, r0
 800058a:	1a08      	subs	r0, r1, r0
 800058c:	4284      	cmp	r4, r0
 800058e:	d100      	bne.n	8000592 <__aeabi_ddiv+0x34e>
 8000590:	e111      	b.n	80007b6 <__aeabi_ddiv+0x572>
 8000592:	4649      	mov	r1, r9
 8000594:	f7ff fe50 	bl	8000238 <__aeabi_uidivmod>
 8000598:	9a01      	ldr	r2, [sp, #4]
 800059a:	040b      	lsls	r3, r1, #16
 800059c:	4342      	muls	r2, r0
 800059e:	0c31      	lsrs	r1, r6, #16
 80005a0:	0005      	movs	r5, r0
 80005a2:	4319      	orrs	r1, r3
 80005a4:	428a      	cmp	r2, r1
 80005a6:	d907      	bls.n	80005b8 <__aeabi_ddiv+0x374>
 80005a8:	1909      	adds	r1, r1, r4
 80005aa:	3d01      	subs	r5, #1
 80005ac:	428c      	cmp	r4, r1
 80005ae:	d803      	bhi.n	80005b8 <__aeabi_ddiv+0x374>
 80005b0:	428a      	cmp	r2, r1
 80005b2:	d901      	bls.n	80005b8 <__aeabi_ddiv+0x374>
 80005b4:	1e85      	subs	r5, r0, #2
 80005b6:	1909      	adds	r1, r1, r4
 80005b8:	1a88      	subs	r0, r1, r2
 80005ba:	4649      	mov	r1, r9
 80005bc:	f7ff fe3c 	bl	8000238 <__aeabi_uidivmod>
 80005c0:	0409      	lsls	r1, r1, #16
 80005c2:	468c      	mov	ip, r1
 80005c4:	0431      	lsls	r1, r6, #16
 80005c6:	4666      	mov	r6, ip
 80005c8:	9a01      	ldr	r2, [sp, #4]
 80005ca:	0c09      	lsrs	r1, r1, #16
 80005cc:	4342      	muls	r2, r0
 80005ce:	0003      	movs	r3, r0
 80005d0:	4331      	orrs	r1, r6
 80005d2:	428a      	cmp	r2, r1
 80005d4:	d907      	bls.n	80005e6 <__aeabi_ddiv+0x3a2>
 80005d6:	1909      	adds	r1, r1, r4
 80005d8:	3b01      	subs	r3, #1
 80005da:	428c      	cmp	r4, r1
 80005dc:	d803      	bhi.n	80005e6 <__aeabi_ddiv+0x3a2>
 80005de:	428a      	cmp	r2, r1
 80005e0:	d901      	bls.n	80005e6 <__aeabi_ddiv+0x3a2>
 80005e2:	1e83      	subs	r3, r0, #2
 80005e4:	1909      	adds	r1, r1, r4
 80005e6:	9e03      	ldr	r6, [sp, #12]
 80005e8:	1a89      	subs	r1, r1, r2
 80005ea:	0032      	movs	r2, r6
 80005ec:	042d      	lsls	r5, r5, #16
 80005ee:	431d      	orrs	r5, r3
 80005f0:	9f02      	ldr	r7, [sp, #8]
 80005f2:	042b      	lsls	r3, r5, #16
 80005f4:	0c1b      	lsrs	r3, r3, #16
 80005f6:	435a      	muls	r2, r3
 80005f8:	437b      	muls	r3, r7
 80005fa:	469c      	mov	ip, r3
 80005fc:	0c28      	lsrs	r0, r5, #16
 80005fe:	4346      	muls	r6, r0
 8000600:	0c13      	lsrs	r3, r2, #16
 8000602:	44b4      	add	ip, r6
 8000604:	4463      	add	r3, ip
 8000606:	4378      	muls	r0, r7
 8000608:	429e      	cmp	r6, r3
 800060a:	d903      	bls.n	8000614 <__aeabi_ddiv+0x3d0>
 800060c:	2680      	movs	r6, #128	; 0x80
 800060e:	0276      	lsls	r6, r6, #9
 8000610:	46b4      	mov	ip, r6
 8000612:	4460      	add	r0, ip
 8000614:	0c1e      	lsrs	r6, r3, #16
 8000616:	0412      	lsls	r2, r2, #16
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c12      	lsrs	r2, r2, #16
 800061c:	1830      	adds	r0, r6, r0
 800061e:	189b      	adds	r3, r3, r2
 8000620:	4281      	cmp	r1, r0
 8000622:	d306      	bcc.n	8000632 <__aeabi_ddiv+0x3ee>
 8000624:	d002      	beq.n	800062c <__aeabi_ddiv+0x3e8>
 8000626:	2301      	movs	r3, #1
 8000628:	431d      	orrs	r5, r3
 800062a:	e6ce      	b.n	80003ca <__aeabi_ddiv+0x186>
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x3ee>
 8000630:	e6cb      	b.n	80003ca <__aeabi_ddiv+0x186>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	1e6e      	subs	r6, r5, #1
 8000636:	42a1      	cmp	r1, r4
 8000638:	d200      	bcs.n	800063c <__aeabi_ddiv+0x3f8>
 800063a:	e0a4      	b.n	8000786 <__aeabi_ddiv+0x542>
 800063c:	4281      	cmp	r1, r0
 800063e:	d200      	bcs.n	8000642 <__aeabi_ddiv+0x3fe>
 8000640:	e0c9      	b.n	80007d6 <__aeabi_ddiv+0x592>
 8000642:	d100      	bne.n	8000646 <__aeabi_ddiv+0x402>
 8000644:	e0d9      	b.n	80007fa <__aeabi_ddiv+0x5b6>
 8000646:	0035      	movs	r5, r6
 8000648:	e7ed      	b.n	8000626 <__aeabi_ddiv+0x3e2>
 800064a:	2501      	movs	r5, #1
 800064c:	426d      	negs	r5, r5
 800064e:	2101      	movs	r1, #1
 8000650:	1a89      	subs	r1, r1, r2
 8000652:	2938      	cmp	r1, #56	; 0x38
 8000654:	dd00      	ble.n	8000658 <__aeabi_ddiv+0x414>
 8000656:	e64c      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000658:	291f      	cmp	r1, #31
 800065a:	dc00      	bgt.n	800065e <__aeabi_ddiv+0x41a>
 800065c:	e07f      	b.n	800075e <__aeabi_ddiv+0x51a>
 800065e:	231f      	movs	r3, #31
 8000660:	425b      	negs	r3, r3
 8000662:	1a9a      	subs	r2, r3, r2
 8000664:	4643      	mov	r3, r8
 8000666:	40d3      	lsrs	r3, r2
 8000668:	2920      	cmp	r1, #32
 800066a:	d004      	beq.n	8000676 <__aeabi_ddiv+0x432>
 800066c:	4644      	mov	r4, r8
 800066e:	4a65      	ldr	r2, [pc, #404]	; (8000804 <__aeabi_ddiv+0x5c0>)
 8000670:	445a      	add	r2, fp
 8000672:	4094      	lsls	r4, r2
 8000674:	4325      	orrs	r5, r4
 8000676:	1e6a      	subs	r2, r5, #1
 8000678:	4195      	sbcs	r5, r2
 800067a:	2207      	movs	r2, #7
 800067c:	432b      	orrs	r3, r5
 800067e:	0015      	movs	r5, r2
 8000680:	2400      	movs	r4, #0
 8000682:	401d      	ands	r5, r3
 8000684:	421a      	tst	r2, r3
 8000686:	d100      	bne.n	800068a <__aeabi_ddiv+0x446>
 8000688:	e0a1      	b.n	80007ce <__aeabi_ddiv+0x58a>
 800068a:	220f      	movs	r2, #15
 800068c:	2400      	movs	r4, #0
 800068e:	401a      	ands	r2, r3
 8000690:	2a04      	cmp	r2, #4
 8000692:	d100      	bne.n	8000696 <__aeabi_ddiv+0x452>
 8000694:	e098      	b.n	80007c8 <__aeabi_ddiv+0x584>
 8000696:	1d1a      	adds	r2, r3, #4
 8000698:	429a      	cmp	r2, r3
 800069a:	419b      	sbcs	r3, r3
 800069c:	425b      	negs	r3, r3
 800069e:	18e4      	adds	r4, r4, r3
 80006a0:	0013      	movs	r3, r2
 80006a2:	0222      	lsls	r2, r4, #8
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_ddiv+0x464>
 80006a6:	e08f      	b.n	80007c8 <__aeabi_ddiv+0x584>
 80006a8:	2301      	movs	r3, #1
 80006aa:	2400      	movs	r4, #0
 80006ac:	2500      	movs	r5, #0
 80006ae:	e623      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 80006b0:	42b5      	cmp	r5, r6
 80006b2:	d300      	bcc.n	80006b6 <__aeabi_ddiv+0x472>
 80006b4:	e764      	b.n	8000580 <__aeabi_ddiv+0x33c>
 80006b6:	4643      	mov	r3, r8
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	9b00      	ldr	r3, [sp, #0]
 80006bc:	469c      	mov	ip, r3
 80006be:	4465      	add	r5, ip
 80006c0:	001f      	movs	r7, r3
 80006c2:	429d      	cmp	r5, r3
 80006c4:	419b      	sbcs	r3, r3
 80006c6:	425b      	negs	r3, r3
 80006c8:	191b      	adds	r3, r3, r4
 80006ca:	18c9      	adds	r1, r1, r3
 80006cc:	428c      	cmp	r4, r1
 80006ce:	d23a      	bcs.n	8000746 <__aeabi_ddiv+0x502>
 80006d0:	4288      	cmp	r0, r1
 80006d2:	d863      	bhi.n	800079c <__aeabi_ddiv+0x558>
 80006d4:	d060      	beq.n	8000798 <__aeabi_ddiv+0x554>
 80006d6:	4690      	mov	r8, r2
 80006d8:	e752      	b.n	8000580 <__aeabi_ddiv+0x33c>
 80006da:	42aa      	cmp	r2, r5
 80006dc:	d900      	bls.n	80006e0 <__aeabi_ddiv+0x49c>
 80006de:	e6ea      	b.n	80004b6 <__aeabi_ddiv+0x272>
 80006e0:	4643      	mov	r3, r8
 80006e2:	07de      	lsls	r6, r3, #31
 80006e4:	0858      	lsrs	r0, r3, #1
 80006e6:	086b      	lsrs	r3, r5, #1
 80006e8:	431e      	orrs	r6, r3
 80006ea:	07ed      	lsls	r5, r5, #31
 80006ec:	e6ea      	b.n	80004c4 <__aeabi_ddiv+0x280>
 80006ee:	4648      	mov	r0, r9
 80006f0:	f000 f8f6 	bl	80008e0 <__clzsi2>
 80006f4:	0001      	movs	r1, r0
 80006f6:	0002      	movs	r2, r0
 80006f8:	3115      	adds	r1, #21
 80006fa:	3220      	adds	r2, #32
 80006fc:	291c      	cmp	r1, #28
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_ddiv+0x4be>
 8000700:	e61a      	b.n	8000338 <__aeabi_ddiv+0xf4>
 8000702:	464b      	mov	r3, r9
 8000704:	3808      	subs	r0, #8
 8000706:	4083      	lsls	r3, r0
 8000708:	2500      	movs	r5, #0
 800070a:	4698      	mov	r8, r3
 800070c:	e620      	b.n	8000350 <__aeabi_ddiv+0x10c>
 800070e:	f000 f8e7 	bl	80008e0 <__clzsi2>
 8000712:	0003      	movs	r3, r0
 8000714:	001a      	movs	r2, r3
 8000716:	3215      	adds	r2, #21
 8000718:	3020      	adds	r0, #32
 800071a:	2a1c      	cmp	r2, #28
 800071c:	dc00      	bgt.n	8000720 <__aeabi_ddiv+0x4dc>
 800071e:	e630      	b.n	8000382 <__aeabi_ddiv+0x13e>
 8000720:	4654      	mov	r4, sl
 8000722:	3b08      	subs	r3, #8
 8000724:	2200      	movs	r2, #0
 8000726:	409c      	lsls	r4, r3
 8000728:	e635      	b.n	8000396 <__aeabi_ddiv+0x152>
 800072a:	230f      	movs	r3, #15
 800072c:	402b      	ands	r3, r5
 800072e:	2b04      	cmp	r3, #4
 8000730:	d100      	bne.n	8000734 <__aeabi_ddiv+0x4f0>
 8000732:	e652      	b.n	80003da <__aeabi_ddiv+0x196>
 8000734:	2305      	movs	r3, #5
 8000736:	425b      	negs	r3, r3
 8000738:	42ab      	cmp	r3, r5
 800073a:	419b      	sbcs	r3, r3
 800073c:	3504      	adds	r5, #4
 800073e:	425b      	negs	r3, r3
 8000740:	08ed      	lsrs	r5, r5, #3
 8000742:	4498      	add	r8, r3
 8000744:	e64a      	b.n	80003dc <__aeabi_ddiv+0x198>
 8000746:	428c      	cmp	r4, r1
 8000748:	d1c5      	bne.n	80006d6 <__aeabi_ddiv+0x492>
 800074a:	42af      	cmp	r7, r5
 800074c:	d9c0      	bls.n	80006d0 <__aeabi_ddiv+0x48c>
 800074e:	4690      	mov	r8, r2
 8000750:	e716      	b.n	8000580 <__aeabi_ddiv+0x33c>
 8000752:	428a      	cmp	r2, r1
 8000754:	d800      	bhi.n	8000758 <__aeabi_ddiv+0x514>
 8000756:	e6ea      	b.n	800052e <__aeabi_ddiv+0x2ea>
 8000758:	1e83      	subs	r3, r0, #2
 800075a:	1909      	adds	r1, r1, r4
 800075c:	e6e7      	b.n	800052e <__aeabi_ddiv+0x2ea>
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <__aeabi_ddiv+0x5c4>)
 8000760:	0028      	movs	r0, r5
 8000762:	445a      	add	r2, fp
 8000764:	4643      	mov	r3, r8
 8000766:	4095      	lsls	r5, r2
 8000768:	4093      	lsls	r3, r2
 800076a:	40c8      	lsrs	r0, r1
 800076c:	1e6a      	subs	r2, r5, #1
 800076e:	4195      	sbcs	r5, r2
 8000770:	4644      	mov	r4, r8
 8000772:	4303      	orrs	r3, r0
 8000774:	432b      	orrs	r3, r5
 8000776:	40cc      	lsrs	r4, r1
 8000778:	075a      	lsls	r2, r3, #29
 800077a:	d092      	beq.n	80006a2 <__aeabi_ddiv+0x45e>
 800077c:	220f      	movs	r2, #15
 800077e:	401a      	ands	r2, r3
 8000780:	2a04      	cmp	r2, #4
 8000782:	d188      	bne.n	8000696 <__aeabi_ddiv+0x452>
 8000784:	e78d      	b.n	80006a2 <__aeabi_ddiv+0x45e>
 8000786:	0035      	movs	r5, r6
 8000788:	4281      	cmp	r1, r0
 800078a:	d000      	beq.n	800078e <__aeabi_ddiv+0x54a>
 800078c:	e74b      	b.n	8000626 <__aeabi_ddiv+0x3e2>
 800078e:	9a00      	ldr	r2, [sp, #0]
 8000790:	4293      	cmp	r3, r2
 8000792:	d000      	beq.n	8000796 <__aeabi_ddiv+0x552>
 8000794:	e747      	b.n	8000626 <__aeabi_ddiv+0x3e2>
 8000796:	e618      	b.n	80003ca <__aeabi_ddiv+0x186>
 8000798:	42ae      	cmp	r6, r5
 800079a:	d99c      	bls.n	80006d6 <__aeabi_ddiv+0x492>
 800079c:	2302      	movs	r3, #2
 800079e:	425b      	negs	r3, r3
 80007a0:	469c      	mov	ip, r3
 80007a2:	9b00      	ldr	r3, [sp, #0]
 80007a4:	44e0      	add	r8, ip
 80007a6:	469c      	mov	ip, r3
 80007a8:	4465      	add	r5, ip
 80007aa:	429d      	cmp	r5, r3
 80007ac:	419b      	sbcs	r3, r3
 80007ae:	425b      	negs	r3, r3
 80007b0:	191b      	adds	r3, r3, r4
 80007b2:	18c9      	adds	r1, r1, r3
 80007b4:	e6e4      	b.n	8000580 <__aeabi_ddiv+0x33c>
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <__aeabi_ddiv+0x5c8>)
 80007b8:	445a      	add	r2, fp
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_ddiv+0x57c>
 80007be:	e744      	b.n	800064a <__aeabi_ddiv+0x406>
 80007c0:	2301      	movs	r3, #1
 80007c2:	2500      	movs	r5, #0
 80007c4:	4498      	add	r8, r3
 80007c6:	e609      	b.n	80003dc <__aeabi_ddiv+0x198>
 80007c8:	0765      	lsls	r5, r4, #29
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0b24      	lsrs	r4, r4, #12
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	431d      	orrs	r5, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	e590      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 80007d6:	9e00      	ldr	r6, [sp, #0]
 80007d8:	3d02      	subs	r5, #2
 80007da:	0072      	lsls	r2, r6, #1
 80007dc:	42b2      	cmp	r2, r6
 80007de:	41bf      	sbcs	r7, r7
 80007e0:	427f      	negs	r7, r7
 80007e2:	193c      	adds	r4, r7, r4
 80007e4:	1909      	adds	r1, r1, r4
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	e7ce      	b.n	8000788 <__aeabi_ddiv+0x544>
 80007ea:	2480      	movs	r4, #128	; 0x80
 80007ec:	4643      	mov	r3, r8
 80007ee:	0324      	lsls	r4, r4, #12
 80007f0:	431c      	orrs	r4, r3
 80007f2:	0324      	lsls	r4, r4, #12
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <__aeabi_ddiv+0x5cc>)
 80007f6:	0b24      	lsrs	r4, r4, #12
 80007f8:	e57e      	b.n	80002f8 <__aeabi_ddiv+0xb4>
 80007fa:	9a00      	ldr	r2, [sp, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d3ea      	bcc.n	80007d6 <__aeabi_ddiv+0x592>
 8000800:	0035      	movs	r5, r6
 8000802:	e7c4      	b.n	800078e <__aeabi_ddiv+0x54a>
 8000804:	0000043e 	.word	0x0000043e
 8000808:	0000041e 	.word	0x0000041e
 800080c:	000003ff 	.word	0x000003ff
 8000810:	000007ff 	.word	0x000007ff

08000814 <__aeabi_d2iz>:
 8000814:	000a      	movs	r2, r1
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	4c13      	ldr	r4, [pc, #76]	; (8000868 <__aeabi_d2iz+0x54>)
 800081a:	0053      	lsls	r3, r2, #1
 800081c:	0309      	lsls	r1, r1, #12
 800081e:	0005      	movs	r5, r0
 8000820:	0b09      	lsrs	r1, r1, #12
 8000822:	2000      	movs	r0, #0
 8000824:	0d5b      	lsrs	r3, r3, #21
 8000826:	0fd2      	lsrs	r2, r2, #31
 8000828:	42a3      	cmp	r3, r4
 800082a:	dd04      	ble.n	8000836 <__aeabi_d2iz+0x22>
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <__aeabi_d2iz+0x58>)
 800082e:	4283      	cmp	r3, r0
 8000830:	dd02      	ble.n	8000838 <__aeabi_d2iz+0x24>
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <__aeabi_d2iz+0x5c>)
 8000834:	18d0      	adds	r0, r2, r3
 8000836:	bd30      	pop	{r4, r5, pc}
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	0340      	lsls	r0, r0, #13
 800083c:	4301      	orrs	r1, r0
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <__aeabi_d2iz+0x60>)
 8000840:	1ac0      	subs	r0, r0, r3
 8000842:	281f      	cmp	r0, #31
 8000844:	dd08      	ble.n	8000858 <__aeabi_d2iz+0x44>
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <__aeabi_d2iz+0x64>)
 8000848:	1ac3      	subs	r3, r0, r3
 800084a:	40d9      	lsrs	r1, r3
 800084c:	000b      	movs	r3, r1
 800084e:	4258      	negs	r0, r3
 8000850:	2a00      	cmp	r2, #0
 8000852:	d1f0      	bne.n	8000836 <__aeabi_d2iz+0x22>
 8000854:	0018      	movs	r0, r3
 8000856:	e7ee      	b.n	8000836 <__aeabi_d2iz+0x22>
 8000858:	4c08      	ldr	r4, [pc, #32]	; (800087c <__aeabi_d2iz+0x68>)
 800085a:	40c5      	lsrs	r5, r0
 800085c:	46a4      	mov	ip, r4
 800085e:	4463      	add	r3, ip
 8000860:	4099      	lsls	r1, r3
 8000862:	000b      	movs	r3, r1
 8000864:	432b      	orrs	r3, r5
 8000866:	e7f2      	b.n	800084e <__aeabi_d2iz+0x3a>
 8000868:	000003fe 	.word	0x000003fe
 800086c:	0000041d 	.word	0x0000041d
 8000870:	7fffffff 	.word	0x7fffffff
 8000874:	00000433 	.word	0x00000433
 8000878:	00000413 	.word	0x00000413
 800087c:	fffffbed 	.word	0xfffffbed

08000880 <__aeabi_i2d>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	2800      	cmp	r0, #0
 8000884:	d016      	beq.n	80008b4 <__aeabi_i2d+0x34>
 8000886:	17c3      	asrs	r3, r0, #31
 8000888:	18c5      	adds	r5, r0, r3
 800088a:	405d      	eors	r5, r3
 800088c:	0fc4      	lsrs	r4, r0, #31
 800088e:	0028      	movs	r0, r5
 8000890:	f000 f826 	bl	80008e0 <__clzsi2>
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <__aeabi_i2d+0x5c>)
 8000896:	1a12      	subs	r2, r2, r0
 8000898:	280a      	cmp	r0, #10
 800089a:	dc16      	bgt.n	80008ca <__aeabi_i2d+0x4a>
 800089c:	0003      	movs	r3, r0
 800089e:	002e      	movs	r6, r5
 80008a0:	3315      	adds	r3, #21
 80008a2:	409e      	lsls	r6, r3
 80008a4:	230b      	movs	r3, #11
 80008a6:	1a18      	subs	r0, r3, r0
 80008a8:	40c5      	lsrs	r5, r0
 80008aa:	0553      	lsls	r3, r2, #21
 80008ac:	032d      	lsls	r5, r5, #12
 80008ae:	0b2d      	lsrs	r5, r5, #12
 80008b0:	0d5b      	lsrs	r3, r3, #21
 80008b2:	e003      	b.n	80008bc <__aeabi_i2d+0x3c>
 80008b4:	2400      	movs	r4, #0
 80008b6:	2300      	movs	r3, #0
 80008b8:	2500      	movs	r5, #0
 80008ba:	2600      	movs	r6, #0
 80008bc:	051b      	lsls	r3, r3, #20
 80008be:	432b      	orrs	r3, r5
 80008c0:	07e4      	lsls	r4, r4, #31
 80008c2:	4323      	orrs	r3, r4
 80008c4:	0030      	movs	r0, r6
 80008c6:	0019      	movs	r1, r3
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	380b      	subs	r0, #11
 80008cc:	4085      	lsls	r5, r0
 80008ce:	0553      	lsls	r3, r2, #21
 80008d0:	032d      	lsls	r5, r5, #12
 80008d2:	2600      	movs	r6, #0
 80008d4:	0b2d      	lsrs	r5, r5, #12
 80008d6:	0d5b      	lsrs	r3, r3, #21
 80008d8:	e7f0      	b.n	80008bc <__aeabi_i2d+0x3c>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	0000041e 	.word	0x0000041e

080008e0 <__clzsi2>:
 80008e0:	211c      	movs	r1, #28
 80008e2:	2301      	movs	r3, #1
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	4298      	cmp	r0, r3
 80008e8:	d301      	bcc.n	80008ee <__clzsi2+0xe>
 80008ea:	0c00      	lsrs	r0, r0, #16
 80008ec:	3910      	subs	r1, #16
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	4298      	cmp	r0, r3
 80008f2:	d301      	bcc.n	80008f8 <__clzsi2+0x18>
 80008f4:	0a00      	lsrs	r0, r0, #8
 80008f6:	3908      	subs	r1, #8
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	4298      	cmp	r0, r3
 80008fc:	d301      	bcc.n	8000902 <__clzsi2+0x22>
 80008fe:	0900      	lsrs	r0, r0, #4
 8000900:	3904      	subs	r1, #4
 8000902:	a202      	add	r2, pc, #8	; (adr r2, 800090c <__clzsi2+0x2c>)
 8000904:	5c10      	ldrb	r0, [r2, r0]
 8000906:	1840      	adds	r0, r0, r1
 8000908:	4770      	bx	lr
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	02020304 	.word	0x02020304
 8000910:	01010101 	.word	0x01010101
	...

0800091c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_Init+0x3c>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_Init+0x3c>)
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	430a      	orrs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f811 	bl	800095c <HAL_InitTick>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d003      	beq.n	8000946 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e001      	b.n	800094a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000946:	f003 f839 	bl	80039bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000964:	240f      	movs	r4, #15
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_InitTick+0x50>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	22fa      	movs	r2, #250	; 0xfa
 8000972:	0091      	lsls	r1, r2, #2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff fbd9 	bl	800012c <__udivsi3>
 800097a:	0003      	movs	r3, r0
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fd48 	bl	8001412 <HAL_SYSTICK_Config>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d003      	beq.n	800098e <HAL_InitTick+0x32>
  {
    status = HAL_ERROR;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e006      	b.n	800099c <HAL_InitTick+0x40>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fd26 	bl	80013e8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b005      	add	sp, #20
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	20000024 	.word	0x20000024

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  uwTick++;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_IncTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_IncTick+0x14>)
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000c0 	.word	0x200000c0

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	200000c0 	.word	0x200000c0

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fff0 	bl	80009c8 <HAL_GetTick>
 80009e8:	0003      	movs	r3, r0
 80009ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	d002      	beq.n	80009fc <HAL_Delay+0x20>
  {
    wait++;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	f7ff ffe3 	bl	80009c8 <HAL_GetTick>
 8000a02:	0002      	movs	r2, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d8f7      	bhi.n	80009fe <HAL_Delay+0x22>
  {
  }
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b004      	add	sp, #16
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e159      	b.n	8000cde <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10a      	bne.n	8000a48 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2250      	movs	r2, #80	; 0x50
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 ffce 	bl	80039e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d005      	beq.n	8000a60 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a5e:	d00b      	beq.n	8000a78 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a64:	2210      	movs	r2, #16
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2250      	movs	r2, #80	; 0x50
 8000a70:	2100      	movs	r1, #0
 8000a72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e132      	b.n	8000cde <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7c:	4a9a      	ldr	r2, [pc, #616]	; (8000ce8 <HAL_ADC_Init+0x2d0>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2202      	movs	r2, #2
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	4013      	ands	r3, r2
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d108      	bne.n	8000aa8 <HAL_ADC_Init+0x90>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d101      	bne.n	8000aa8 <HAL_ADC_Init+0x90>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <HAL_ADC_Init+0x92>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d149      	bne.n	8000b42 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	23c0      	movs	r3, #192	; 0xc0
 8000ab4:	061b      	lsls	r3, r3, #24
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_ADC_Init+0xba>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d005      	beq.n	8000ad2 <HAL_ADC_Init+0xba>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	061b      	lsls	r3, r3, #24
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d111      	bne.n	8000af6 <HAL_ADC_Init+0xde>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	691a      	ldr	r2, [r3, #16]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	0892      	lsrs	r2, r2, #2
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6919      	ldr	r1, [r3, #16]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	e014      	b.n	8000b20 <HAL_ADC_Init+0x108>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	0892      	lsrs	r2, r2, #2
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	4b79      	ldr	r3, [pc, #484]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b0c:	4978      	ldr	r1, [pc, #480]	; (8000cf0 <HAL_ADC_Init+0x2d8>)
 8000b0e:	400a      	ands	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	4b76      	ldr	r3, [pc, #472]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b14:	6819      	ldr	r1, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2118      	movs	r1, #24
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68d9      	ldr	r1, [r3, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b48:	496a      	ldr	r1, [pc, #424]	; (8000cf4 <HAL_ADC_Init+0x2dc>)
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000b4e:	4b67      	ldr	r3, [pc, #412]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b56:	065a      	lsls	r2, r3, #25
 8000b58:	4b64      	ldr	r3, [pc, #400]	; (8000cec <HAL_ADC_Init+0x2d4>)
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	055b      	lsls	r3, r3, #21
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d108      	bne.n	8000b7e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0549      	lsls	r1, r1, #21
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	495b      	ldr	r1, [pc, #364]	; (8000cf8 <HAL_ADC_Init+0x2e0>)
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68d9      	ldr	r1, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d101      	bne.n	8000ba4 <HAL_ADC_Init+0x18c>
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	e000      	b.n	8000ba6 <HAL_ADC_Init+0x18e>
 8000ba4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ba6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2020      	movs	r0, #32
 8000bac:	5c1b      	ldrb	r3, [r3, r0]
 8000bae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000bb0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	202c      	movs	r0, #44	; 0x2c
 8000bb6:	5c1b      	ldrb	r3, [r3, r0]
 8000bb8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000bc0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000bc8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bd0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bde:	23c2      	movs	r3, #194	; 0xc2
 8000be0:	33ff      	adds	r3, #255	; 0xff
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d00b      	beq.n	8000bfe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68d9      	ldr	r1, [r3, #12]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2221      	movs	r2, #33	; 0x21
 8000c02:	5c9b      	ldrb	r3, [r3, r2]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d11a      	bne.n	8000c3e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	5c9b      	ldrb	r3, [r3, r2]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d109      	bne.n	8000c26 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0249      	lsls	r1, r1, #9
 8000c20:	430a      	orrs	r2, r1
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	e00b      	b.n	8000c3e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	2201      	movs	r2, #1
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d11f      	bne.n	8000c86 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	492a      	ldr	r1, [pc, #168]	; (8000cfc <HAL_ADC_Init+0x2e4>)
 8000c52:	400a      	ands	r2, r1
 8000c54:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6919      	ldr	r1, [r3, #16]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c64:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000c6a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	e00e      	b.n	8000ca4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d107      	bne.n	8000ca4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	438a      	bics	r2, r1
 8000ca2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2107      	movs	r1, #7
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6959      	ldr	r1, [r3, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4393      	bics	r3, r2
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	fffffefd 	.word	0xfffffefd
 8000cec:	40012708 	.word	0x40012708
 8000cf0:	ffc3ffff 	.word	0xffc3ffff
 8000cf4:	fdffffff 	.word	0xfdffffff
 8000cf8:	fffe0219 	.word	0xfffe0219
 8000cfc:	fffffc03 	.word	0xfffffc03

08000d00 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2204      	movs	r2, #4
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d138      	bne.n	8000d8e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2250      	movs	r2, #80	; 0x50
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d101      	bne.n	8000d2a <HAL_ADC_Start+0x2a>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e038      	b.n	8000d9c <HAL_ADC_Start+0x9c>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2250      	movs	r2, #80	; 0x50
 8000d2e:	2101      	movs	r1, #1
 8000d30:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d007      	beq.n	8000d4a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	18fc      	adds	r4, r7, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 f999 	bl	8001078 <ADC_Enable>
 8000d46:	0003      	movs	r3, r0
 8000d48:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d120      	bne.n	8000d96 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_ADC_Start+0xa4>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0052      	lsls	r2, r2, #1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2250      	movs	r2, #80	; 0x50
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	221c      	movs	r2, #28
 8000d7a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2104      	movs	r1, #4
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	e003      	b.n	8000d96 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d8e:	230f      	movs	r3, #15
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b005      	add	sp, #20
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	fffff0fe 	.word	0xfffff0fe

08000da8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2250      	movs	r2, #80	; 0x50
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Stop+0x1e>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e029      	b.n	8000e1a <HAL_ADC_Stop+0x72>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2250      	movs	r2, #80	; 0x50
 8000dca:	2101      	movs	r1, #1
 8000dcc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000dce:	250f      	movs	r5, #15
 8000dd0:	197c      	adds	r4, r7, r5
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fa0f 	bl	80011f8 <ADC_ConversionStop>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d112      	bne.n	8000e0c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000de6:	197c      	adds	r4, r7, r5
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f9a4 	bl	8001138 <ADC_Disable>
 8000df0:	0003      	movs	r3, r0
 8000df2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000df4:	197b      	adds	r3, r7, r5
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d107      	bne.n	8000e0c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_ADC_Stop+0x7c>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	2201      	movs	r2, #1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2250      	movs	r2, #80	; 0x50
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	781b      	ldrb	r3, [r3, #0]
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	fffffefe 	.word	0xfffffefe

08000e28 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d102      	bne.n	8000e48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e42:	2308      	movs	r3, #8
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e014      	b.n	8000e72 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10b      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2250      	movs	r2, #80	; 0x50
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e06c      	b.n	8000f48 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e6e:	230c      	movs	r3, #12
 8000e70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e72:	f7ff fda9 	bl	80009c8 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e7a:	e019      	b.n	8000eb0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	d016      	beq.n	8000eb0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_ADC_PollForConversion+0x70>
 8000e88:	f7ff fd9e 	bl	80009c8 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d20b      	bcs.n	8000eb0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2250      	movs	r2, #80	; 0x50
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e04b      	b.n	8000f48 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0df      	beq.n	8000e7c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d12e      	bne.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2220      	movs	r2, #32
 8000edc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d129      	bne.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2208      	movs	r2, #8
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d122      	bne.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d110      	bne.n	8000f1e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	210c      	movs	r1, #12
 8000f08:	438a      	bics	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_ADC_PollForConversion+0x128>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	2201      	movs	r2, #1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	655a      	str	r2, [r3, #84]	; 0x54
 8000f1c:	e00b      	b.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f22:	2220      	movs	r2, #32
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	2201      	movs	r2, #1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b004      	add	sp, #16
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	fffffefe 	.word	0xfffffefe

08000f54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2250      	movs	r2, #80	; 0x50
 8000f7a:	5c9b      	ldrb	r3, [r3, r2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x18>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e06c      	b.n	800105e <HAL_ADC_ConfigChannel+0xf2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2250      	movs	r2, #80	; 0x50
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d00b      	beq.n	8000fb0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2250      	movs	r2, #80	; 0x50
 8000fa8:	2100      	movs	r1, #0
 8000faa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e056      	b.n	800105e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <HAL_ADC_ConfigChannel+0xfc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d028      	beq.n	800100c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	035b      	lsls	r3, r3, #13
 8000fc6:	0b5a      	lsrs	r2, r3, #13
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	02db      	lsls	r3, r3, #11
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d009      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0409      	lsls	r1, r1, #16
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 f94a 	bl	8001284 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d02b      	beq.n	8001054 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	03c9      	lsls	r1, r1, #15
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e023      	b.n	8001054 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	035b      	lsls	r3, r3, #13
 8001018:	0b5b      	lsrs	r3, r3, #13
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	400a      	ands	r2, r1
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	02db      	lsls	r3, r3, #11
 800102c:	4013      	ands	r3, r2
 800102e:	d005      	beq.n	800103c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <HAL_ADC_ConfigChannel+0x104>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d005      	beq.n	8001054 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_ADC_ConfigChannel+0x100>)
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <HAL_ADC_ConfigChannel+0x108>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2250      	movs	r2, #80	; 0x50
 8001058:	2100      	movs	r1, #0
 800105a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	00001001 	.word	0x00001001
 800106c:	40012708 	.word	0x40012708
 8001070:	ff7fffff 	.word	0xff7fffff
 8001074:	ffbfffff 	.word	0xffbfffff

08001078 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <ADC_Enable+0x2c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	4013      	ands	r3, r2
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <ADC_Enable+0x2c>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <ADC_Enable+0x2e>
 80010a4:	2300      	movs	r3, #0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d13f      	bne.n	800112a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <ADC_Enable+0xbc>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	2210      	movs	r2, #16
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	2201      	movs	r2, #1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e02c      	b.n	800112c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f8ce 	bl	8001284 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80010e8:	f7ff fc6e 	bl	80009c8 <HAL_GetTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010f0:	e014      	b.n	800111c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010f2:	f7ff fc69 	bl	80009c8 <HAL_GetTick>
 80010f6:	0002      	movs	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d90d      	bls.n	800111c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	2210      	movs	r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	2201      	movs	r2, #1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e007      	b.n	800112c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	2b01      	cmp	r3, #1
 8001128:	d1e3      	bne.n	80010f2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}
 8001134:	80000017 	.word	0x80000017

08001138 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <ADC_Disable+0x2c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <ADC_Disable+0x2c>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <ADC_Disable+0x2e>
 8001164:	2300      	movs	r3, #0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d041      	beq.n	80011ee <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2205      	movs	r2, #5
 8001172:	4013      	ands	r3, r2
 8001174:	2b01      	cmp	r3, #1
 8001176:	d110      	bne.n	800119a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2102      	movs	r1, #2
 8001184:	430a      	orrs	r2, r1
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2203      	movs	r2, #3
 800118e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001190:	f7ff fc1a 	bl	80009c8 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001198:	e022      	b.n	80011e0 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	2210      	movs	r2, #16
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	2201      	movs	r2, #1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e01c      	b.n	80011f0 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011b6:	f7ff fc07 	bl	80009c8 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b0a      	cmp	r3, #10
 80011c2:	d90d      	bls.n	80011e0 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	2210      	movs	r2, #16
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	2201      	movs	r2, #1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e007      	b.n	80011f0 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d0e3      	beq.n	80011b6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	d034      	beq.n	800127a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2204      	movs	r2, #4
 8001218:	4013      	ands	r3, r2
 800121a:	2b04      	cmp	r3, #4
 800121c:	d10d      	bne.n	800123a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2202      	movs	r2, #2
 8001226:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001228:	d107      	bne.n	800123a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2110      	movs	r1, #16
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800123a:	f7ff fbc5 	bl	80009c8 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001242:	e014      	b.n	800126e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001244:	f7ff fbc0 	bl	80009c8 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90d      	bls.n	800126e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	2210      	movs	r2, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	2201      	movs	r2, #1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e006      	b.n	800127c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2204      	movs	r2, #4
 8001276:	4013      	ands	r3, r2
 8001278:	d1e4      	bne.n	8001244 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b004      	add	sp, #16
 8001282:	bd80      	pop	{r7, pc}

08001284 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <ADC_DelayMicroSecond+0x38>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	490b      	ldr	r1, [pc, #44]	; (80012c0 <ADC_DelayMicroSecond+0x3c>)
 8001292:	0018      	movs	r0, r3
 8001294:	f7fe ff4a 	bl	800012c <__udivsi3>
 8001298:	0003      	movs	r3, r0
 800129a:	001a      	movs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4353      	muls	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80012a2:	e002      	b.n	80012aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f9      	bne.n	80012a4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	20000024 	.word	0x20000024
 80012c0:	000f4240 	.word	0x000f4240

080012c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b7f      	cmp	r3, #127	; 0x7f
 80012d8:	d932      	bls.n	8001340 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <NVIC_SetPriority+0xd4>)
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	0019      	movs	r1, r3
 80012e2:	230f      	movs	r3, #15
 80012e4:	400b      	ands	r3, r1
 80012e6:	3b08      	subs	r3, #8
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3306      	adds	r3, #6
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	3304      	adds	r3, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1dfa      	adds	r2, r7, #7
 80012f6:	7812      	ldrb	r2, [r2, #0]
 80012f8:	0011      	movs	r1, r2
 80012fa:	2203      	movs	r2, #3
 80012fc:	400a      	ands	r2, r1
 80012fe:	00d2      	lsls	r2, r2, #3
 8001300:	21ff      	movs	r1, #255	; 0xff
 8001302:	4091      	lsls	r1, r2
 8001304:	000a      	movs	r2, r1
 8001306:	43d2      	mvns	r2, r2
 8001308:	401a      	ands	r2, r3
 800130a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	019b      	lsls	r3, r3, #6
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	401a      	ands	r2, r3
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	2303      	movs	r3, #3
 800131c:	4003      	ands	r3, r0
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001322:	481d      	ldr	r0, [pc, #116]	; (8001398 <NVIC_SetPriority+0xd4>)
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001c      	movs	r4, r3
 800132a:	230f      	movs	r3, #15
 800132c:	4023      	ands	r3, r4
 800132e:	3b08      	subs	r3, #8
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	3306      	adds	r3, #6
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18c3      	adds	r3, r0, r3
 800133a:	3304      	adds	r3, #4
 800133c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800133e:	e027      	b.n	8001390 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <NVIC_SetPriority+0xd8>)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	33c0      	adds	r3, #192	; 0xc0
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	589b      	ldr	r3, [r3, r2]
 8001350:	1dfa      	adds	r2, r7, #7
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	0011      	movs	r1, r2
 8001356:	2203      	movs	r2, #3
 8001358:	400a      	ands	r2, r1
 800135a:	00d2      	lsls	r2, r2, #3
 800135c:	21ff      	movs	r1, #255	; 0xff
 800135e:	4091      	lsls	r1, r2
 8001360:	000a      	movs	r2, r1
 8001362:	43d2      	mvns	r2, r2
 8001364:	401a      	ands	r2, r3
 8001366:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	019b      	lsls	r3, r3, #6
 800136c:	22ff      	movs	r2, #255	; 0xff
 800136e:	401a      	ands	r2, r3
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	0018      	movs	r0, r3
 8001376:	2303      	movs	r3, #3
 8001378:	4003      	ands	r3, r0
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <NVIC_SetPriority+0xd8>)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25b      	sxtb	r3, r3
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	430a      	orrs	r2, r1
 800138a:	33c0      	adds	r3, #192	; 0xc0
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	501a      	str	r2, [r3, r0]
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b003      	add	sp, #12
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	e000ed00 	.word	0xe000ed00
 800139c:	e000e100 	.word	0xe000e100

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	045b      	lsls	r3, r3, #17
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d301      	bcc.n	80013b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b4:	2301      	movs	r3, #1
 80013b6:	e010      	b.n	80013da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <SysTick_Config+0x44>)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	3a01      	subs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c0:	2301      	movs	r3, #1
 80013c2:	425b      	negs	r3, r3
 80013c4:	2103      	movs	r1, #3
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff ff7c 	bl	80012c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x44>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	210f      	movs	r1, #15
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b25b      	sxtb	r3, r3
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <NVIC_SetPriority>
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ffbf 	bl	80013a0 <SysTick_Config>
 8001422:	0003      	movs	r3, r0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001442:	e14f      	b.n	80016e4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d100      	bne.n	800145c <HAL_GPIO_Init+0x30>
 800145a:	e140      	b.n	80016de <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x40>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	58d3      	ldr	r3, [r2, r3]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2207      	movs	r2, #7
 800147e:	4013      	ands	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2107      	movs	r1, #7
 8001498:	400b      	ands	r3, r1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	409a      	lsls	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	6939      	ldr	r1, [r7, #16]
 80014b2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d00b      	beq.n	80014d4 <HAL_GPIO_Init+0xa8>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c8:	2b11      	cmp	r3, #17
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b12      	cmp	r3, #18
 80014d2:	d130      	bne.n	8001536 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	409a      	lsls	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0013      	movs	r3, r2
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150a:	2201      	movs	r2, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	2201      	movs	r2, #1
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	401a      	ands	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_GPIO_Init+0x17c>
 80015a6:	e09a      	b.n	80016de <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_GPIO_Init+0x2d4>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	589b      	ldr	r3, [r3, r2]
 80015c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	429a      	cmp	r2, r3
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x1ea>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a47      	ldr	r2, [pc, #284]	; (8001704 <HAL_GPIO_Init+0x2d8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x1e6>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_GPIO_Init+0x2dc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x1e2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a45      	ldr	r2, [pc, #276]	; (800170c <HAL_GPIO_Init+0x2e0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x1de>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a44      	ldr	r2, [pc, #272]	; (8001710 <HAL_GPIO_Init+0x2e4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x1da>
 8001602:	2305      	movs	r3, #5
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x1ec>
 8001606:	2306      	movs	r3, #6
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x1ec>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x1ec>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x1ec>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x1ec>
 8001616:	2300      	movs	r3, #0
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	2103      	movs	r1, #3
 800161c:	400a      	ands	r2, r1
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x2d4>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4013      	ands	r3, r2
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43da      	mvns	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	1e13      	subs	r3, r2, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_GPIO_Init+0x2c6>
 80016f0:	e6a8      	b.n	8001444 <HAL_GPIO_Init+0x18>
  }
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	50000400 	.word	0x50000400
 8001708:	50000800 	.word	0x50000800
 800170c:	50000c00 	.word	0x50000c00
 8001710:	50001c00 	.word	0x50001c00
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	000a      	movs	r2, r1
 8001722:	1cbb      	adds	r3, r7, #2
 8001724:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	1cba      	adds	r2, r7, #2
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	4013      	ands	r3, r2
 8001730:	d004      	beq.n	800173c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001732:	230f      	movs	r3, #15
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e003      	b.n	8001744 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800173c:	230f      	movs	r3, #15
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	0008      	movs	r0, r1
 800175c:	0011      	movs	r1, r2
 800175e:	1cbb      	adds	r3, r7, #2
 8001760:	1c02      	adds	r2, r0, #0
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	1c7b      	adds	r3, r7, #1
 8001766:	1c0a      	adds	r2, r1, #0
 8001768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800176a:	1c7b      	adds	r3, r7, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	1cbb      	adds	r3, r7, #2
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800177a:	e003      	b.n	8001784 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800177c:	1cbb      	adds	r3, r7, #2
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f000 fbab 	bl	8001ef6 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a0:	4bce      	ldr	r3, [pc, #824]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	220c      	movs	r2, #12
 80017a6:	4013      	ands	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017aa:	4bcc      	ldr	r3, [pc, #816]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	4013      	ands	r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x36>
 80017c0:	e07e      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d007      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4bc0      	ldr	r3, [pc, #768]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5a>
 80017e4:	e06b      	b.n	80018be <HAL_RCC_OscConfig+0x132>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d167      	bne.n	80018be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 fb81 	bl	8001ef6 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x84>
 8001800:	4bb6      	ldr	r3, [pc, #728]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4bb5      	ldr	r3, [pc, #724]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e027      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	23a0      	movs	r3, #160	; 0xa0
 8001816:	02db      	lsls	r3, r3, #11
 8001818:	429a      	cmp	r2, r3
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0xae>
 800181c:	4baf      	ldr	r3, [pc, #700]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4bae      	ldr	r3, [pc, #696]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	02c9      	lsls	r1, r1, #11
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4bac      	ldr	r3, [pc, #688]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4bab      	ldr	r3, [pc, #684]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e012      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 800183a:	4ba8      	ldr	r3, [pc, #672]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4ba7      	ldr	r3, [pc, #668]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001840:	49a7      	ldr	r1, [pc, #668]	; (8001ae0 <HAL_RCC_OscConfig+0x354>)
 8001842:	400a      	ands	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4ba1      	ldr	r3, [pc, #644]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4ba0      	ldr	r3, [pc, #640]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800185a:	49a2      	ldr	r1, [pc, #648]	; (8001ae4 <HAL_RCC_OscConfig+0x358>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff f8ae 	bl	80009c8 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff f8a9 	bl	80009c8 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d902      	bls.n	8001886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	f000 fb38 	bl	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001886:	4b95      	ldr	r3, [pc, #596]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d0ef      	beq.n	8001872 <HAL_RCC_OscConfig+0xe6>
 8001892:	e015      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff f898 	bl	80009c8 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff f893 	bl	80009c8 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e322      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b0:	4b8a      	ldr	r3, [pc, #552]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x112>
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x140>
 80018ca:	e08a      	b.n	80019e2 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d13d      	bne.n	800195a <HAL_RCC_OscConfig+0x1ce>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d13a      	bne.n	800195a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018e4:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2204      	movs	r2, #4
 80018ea:	4013      	ands	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_RCC_OscConfig+0x16c>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e2fe      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x35c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	0019      	movs	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	021a      	lsls	r2, r3, #8
 8001908:	4b74      	ldr	r3, [pc, #464]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800190e:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2209      	movs	r2, #9
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	4b70      	ldr	r3, [pc, #448]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001920:	f000 fc1e 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8001924:	0001      	movs	r1, r0
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	220f      	movs	r2, #15
 800192e:	4013      	ands	r3, r2
 8001930:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x360>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	000a      	movs	r2, r1
 8001936:	40da      	lsrs	r2, r3
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x364>)
 800193a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800193c:	2513      	movs	r5, #19
 800193e:	197c      	adds	r4, r7, r5
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff f80b 	bl	800095c <HAL_InitTick>
 8001946:	0003      	movs	r3, r0
 8001948:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800194a:	002a      	movs	r2, r5
 800194c:	18bb      	adds	r3, r7, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d046      	beq.n	80019e2 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8001954:	18bb      	adds	r3, r7, r2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	e2cd      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d027      	beq.n	80019b0 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001960:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2209      	movs	r2, #9
 8001966:	4393      	bics	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff f829 	bl	80009c8 <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff f824 	bl	80009c8 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e2b3      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2204      	movs	r2, #4
 8001994:	4013      	ands	r3, r2
 8001996:	d0f1      	beq.n	800197c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_RCC_OscConfig+0x35c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	021a      	lsls	r2, r3, #8
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f804 	bl	80009c8 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7fe ffff 	bl	80009c8 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e28e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019d8:	4b40      	ldr	r3, [pc, #256]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2204      	movs	r2, #4
 80019de:	4013      	ands	r3, r2
 80019e0:	d1f1      	bne.n	80019c6 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	4013      	ands	r3, r2
 80019ea:	d100      	bne.n	80019ee <HAL_RCC_OscConfig+0x262>
 80019ec:	e09e      	b.n	8001b2c <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x280>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e274      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_RCC_OscConfig+0x368>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	0a19      	lsrs	r1, r3, #8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	061a      	lsls	r2, r3, #24
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	0b5b      	lsrs	r3, r3, #13
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	0212      	lsls	r2, r2, #8
 8001a40:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	210f      	movs	r1, #15
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x360>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x364>)
 8001a54:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a56:	2513      	movs	r5, #19
 8001a58:	197c      	adds	r4, r7, r5
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7fe ff7e 	bl	800095c <HAL_InitTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a64:	002a      	movs	r2, r5
 8001a66:	18bb      	adds	r3, r7, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d05e      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8001a6e:	18bb      	adds	r3, r7, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	e240      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03d      	beq.n	8001af8 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	0049      	lsls	r1, r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7fe ff9d 	bl	80009c8 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a94:	f7fe ff98 	bl	80009c8 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e227      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_RCC_OscConfig+0x368>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	0a19      	lsrs	r1, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	061a      	lsls	r2, r3, #24
 8001ad4:	4b01      	ldr	r3, [pc, #4]	; (8001adc <HAL_RCC_OscConfig+0x350>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e027      	b.n	8001b2c <HAL_RCC_OscConfig+0x3a0>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	fffeffff 	.word	0xfffeffff
 8001ae4:	fffbffff 	.word	0xfffbffff
 8001ae8:	ffffe0ff 	.word	0xffffe0ff
 8001aec:	0800456c 	.word	0x0800456c
 8001af0:	20000024 	.word	0x20000024
 8001af4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001af8:	4bbd      	ldr	r3, [pc, #756]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4bbc      	ldr	r3, [pc, #752]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001afe:	49bd      	ldr	r1, [pc, #756]	; (8001df4 <HAL_RCC_OscConfig+0x668>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe ff60 	bl	80009c8 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b0e:	f7fe ff5b 	bl	80009c8 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1ea      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b20:	4bb3      	ldr	r3, [pc, #716]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2208      	movs	r2, #8
 8001b32:	4013      	ands	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4bac      	ldr	r3, [pc, #688]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b42:	4bab      	ldr	r3, [pc, #684]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	430a      	orrs	r2, r1
 8001b48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7fe ff3d 	bl	80009c8 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b54:	f7fe ff38 	bl	80009c8 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1c7      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b66:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d0f1      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3c8>
 8001b70:	e018      	b.n	8001ba4 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b76:	4b9e      	ldr	r3, [pc, #632]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7fe ff23 	bl	80009c8 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7fe ff1e 	bl	80009c8 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1ad      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b9a:	4b95      	ldr	r3, [pc, #596]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d1f1      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4013      	ands	r3, r2
 8001bac:	d100      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x424>
 8001bae:	e0ae      	b.n	8001d0e <HAL_RCC_OscConfig+0x582>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb0:	2027      	movs	r0, #39	; 0x27
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb8:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	055b      	lsls	r3, r3, #21
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x44c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b8a      	ldr	r3, [pc, #552]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc8:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0549      	lsls	r1, r1, #21
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b87      	ldr	r3, [pc, #540]	; (8001df8 <HAL_RCC_OscConfig+0x66c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d11a      	bne.n	8001c1a <HAL_RCC_OscConfig+0x48e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be4:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <HAL_RCC_OscConfig+0x66c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x66c>)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	0049      	lsls	r1, r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe fee9 	bl	80009c8 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x482>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7fe fee4 	bl	80009c8 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x482>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e173      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x66c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x470>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
 8001c26:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0049      	lsls	r1, r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	651a      	str	r2, [r3, #80]	; 0x50
 8001c34:	e031      	b.n	8001c9a <HAL_RCC_OscConfig+0x50e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4cc>
 8001c3e:	4b6c      	ldr	r3, [pc, #432]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c42:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c44:	496b      	ldr	r1, [pc, #428]	; (8001df4 <HAL_RCC_OscConfig+0x668>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	651a      	str	r2, [r3, #80]	; 0x50
 8001c4a:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c50:	496a      	ldr	r1, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x670>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	651a      	str	r2, [r3, #80]	; 0x50
 8001c56:	e020      	b.n	8001c9a <HAL_RCC_OscConfig+0x50e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	23a0      	movs	r3, #160	; 0xa0
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10e      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
 8001c64:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	00c9      	lsls	r1, r1, #3
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	651a      	str	r2, [r3, #80]	; 0x50
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c76:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0049      	lsls	r1, r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x50e>
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c88:	495a      	ldr	r1, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x668>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c8e:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001c94:	4959      	ldr	r1, [pc, #356]	; (8001dfc <HAL_RCC_OscConfig+0x670>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d015      	beq.n	8001cce <HAL_RCC_OscConfig+0x542>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fe91 	bl	80009c8 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001caa:	e009      	b.n	8001cc0 <HAL_RCC_OscConfig+0x534>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7fe fe8c 	bl	80009c8 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_RCC_OscConfig+0x674>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x534>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e11a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d0ef      	beq.n	8001cac <HAL_RCC_OscConfig+0x520>
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7fe fe7b 	bl	80009c8 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cd6:	e009      	b.n	8001cec <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7fe fe76 	bl	80009c8 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x674>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e104      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1ef      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cf8:	2327      	movs	r3, #39	; 0x27
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x582>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d08:	493e      	ldr	r1, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x678>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2220      	movs	r2, #32
 8001d14:	4013      	ands	r3, r2
 8001d16:	d049      	beq.n	8001dac <HAL_RCC_OscConfig+0x620>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d026      	beq.n	8001d6e <HAL_RCC_OscConfig+0x5e2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	635a      	str	r2, [r3, #52]	; 0x34
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0189      	lsls	r1, r1, #6
 8001d42:	430a      	orrs	r2, r1
 8001d44:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fe3f 	bl	80009c8 <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x5d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d50:	f7fe fe3a 	bl	80009c8 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0c9      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d0f1      	beq.n	8001d50 <HAL_RCC_OscConfig+0x5c4>
 8001d6c:	e01e      	b.n	8001dac <HAL_RCC_OscConfig+0x620>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	438a      	bics	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x680>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fe1f 	bl	80009c8 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d90:	f7fe fe1a 	bl	80009c8 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0a9      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d1f1      	bne.n	8001d90 <HAL_RCC_OscConfig+0x604>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
 8001db4:	e09e      	b.n	8001ef4 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d100      	bne.n	8001dbe <HAL_RCC_OscConfig+0x632>
 8001dbc:	e077      	b.n	8001eae <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d158      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x664>)
 8001dcc:	4910      	ldr	r1, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0x684>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fdf9 	bl	80009c8 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dda:	e01b      	b.n	8001e14 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe fdf4 	bl	80009c8 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d914      	bls.n	8001e14 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e083      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	40021000 	.word	0x40021000
 8001df4:	fffffeff 	.word	0xfffffeff
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	fffffbff 	.word	0xfffffbff
 8001e00:	00001388 	.word	0x00001388
 8001e04:	efffffff 	.word	0xefffffff
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	ffffdfff 	.word	0xffffdfff
 8001e10:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	049b      	lsls	r3, r3, #18
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d1dd      	bne.n	8001ddc <HAL_RCC_OscConfig+0x650>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e20:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x778>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0449      	lsls	r1, r1, #17
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fdbb 	bl	80009c8 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe fdb6 	bl	80009c8 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e045      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	049b      	lsls	r3, r3, #18
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x6cc>
 8001e76:	e03d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001e7e:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_RCC_OscConfig+0x77c>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fda0 	bl	80009c8 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7fe fd9b 	bl	80009c8 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e02a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	049b      	lsls	r3, r3, #18
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x702>
 8001eac:	e022      	b.n	8001ef4 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e01d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x774>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10f      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	23f0      	movs	r3, #240	; 0xf0
 8001ed4:	039b      	lsls	r3, r3, #14
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	23c0      	movs	r3, #192	; 0xc0
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b00a      	add	sp, #40	; 0x28
 8001efc:	bdb0      	pop	{r4, r5, r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40021000 	.word	0x40021000
 8001f04:	ff02ffff 	.word	0xff02ffff
 8001f08:	feffffff 	.word	0xfeffffff

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e10d      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d911      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0f4      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	22f0      	movs	r2, #240	; 0xf0
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	4b77      	ldr	r3, [pc, #476]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2201      	movs	r2, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x70>
 8001f7a:	e089      	b.n	8002090 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f84:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d120      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d3      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	049b      	lsls	r3, r3, #18
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d114      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0c7      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb4:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0bc      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0b4      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe fcef 	bl	80009c8 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d111      	bne.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff6:	e009      	b.n	800200c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe fce6 	bl	80009c8 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x240>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e097      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800200c:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	220c      	movs	r2, #12
 8002012:	4013      	ands	r3, r2
 8002014:	2b08      	cmp	r3, #8
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xec>
 8002018:	e03a      	b.n	8002090 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d111      	bne.n	8002046 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002022:	e009      	b.n	8002038 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe fcd0 	bl	80009c8 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x240>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e081      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d1ef      	bne.n	8002024 <HAL_RCC_ClockConfig+0x118>
 8002044:	e024      	b.n	8002090 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d11b      	bne.n	8002086 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	e009      	b.n	8002064 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7fe fcba 	bl	80009c8 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HAL_RCC_ClockConfig+0x240>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e06b      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	220c      	movs	r2, #12
 800206a:	4013      	ands	r3, r2
 800206c:	2b04      	cmp	r3, #4
 800206e:	d1ef      	bne.n	8002050 <HAL_RCC_ClockConfig+0x144>
 8002070:	e00e      	b.n	8002090 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002072:	f7fe fca9 	bl	80009c8 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	4a33      	ldr	r2, [pc, #204]	; (800214c <HAL_RCC_ClockConfig+0x240>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e05a      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	220c      	movs	r2, #12
 800208c:	4013      	ands	r3, r2
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d211      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x238>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e03c      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2204      	movs	r2, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00a      	beq.n	8002100 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x248>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	00da      	lsls	r2, r3, #3
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002100:	f000 f82e 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8002104:	0001      	movs	r1, r0
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCC_ClockConfig+0x23c>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	220f      	movs	r2, #15
 800210e:	4013      	ands	r3, r2
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_RCC_ClockConfig+0x24c>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	000a      	movs	r2, r1
 8002116:	40da      	lsrs	r2, r3
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_RCC_ClockConfig+0x250>)
 800211a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800211c:	250b      	movs	r5, #11
 800211e:	197c      	adds	r4, r7, r5
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fc1b 	bl	800095c <HAL_InitTick>
 8002126:	0003      	movs	r3, r0
 8002128:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800212a:	002a      	movs	r2, r5
 800212c:	18bb      	adds	r3, r7, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002134:	18bb      	adds	r3, r7, r2
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	e000      	b.n	800213c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bdb0      	pop	{r4, r5, r7, pc}
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	00001388 	.word	0x00001388
 8002150:	fffff8ff 	.word	0xfffff8ff
 8002154:	ffffc7ff 	.word	0xffffc7ff
 8002158:	0800456c 	.word	0x0800456c
 800215c:	20000024 	.word	0x20000024

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	220c      	movs	r2, #12
 8002170:	4013      	ands	r3, r2
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d013      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3e>
 8002176:	d85c      	bhi.n	8002232 <HAL_RCC_GetSysClockFreq+0xd2>
 8002178:	2b04      	cmp	r3, #4
 800217a:	d002      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x22>
 800217c:	2b08      	cmp	r3, #8
 800217e:	d00b      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x38>
 8002180:	e057      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2210      	movs	r2, #16
 8002188:	4013      	ands	r3, r2
 800218a:	d002      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCC_GetSysClockFreq+0xfc>)
 800218e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002190:	e05d      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_RCC_GetSysClockFreq+0x100>)
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e05a      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_RCC_GetSysClockFreq+0x104>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e057      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	220f      	movs	r2, #15
 80021a4:	4013      	ands	r3, r2
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	0d9b      	lsrs	r3, r3, #22
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	3301      	adds	r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	4013      	ands	r3, r2
 80021c2:	d00f      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	000a      	movs	r2, r1
 80021c8:	0152      	lsls	r2, r2, #5
 80021ca:	1a52      	subs	r2, r2, r1
 80021cc:	0193      	lsls	r3, r2, #6
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	185b      	adds	r3, r3, r1
 80021d4:	025b      	lsls	r3, r3, #9
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f7fd ffa7 	bl	800012c <__udivsi3>
 80021de:	0003      	movs	r3, r0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e023      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2210      	movs	r2, #16
 80021ea:	4013      	ands	r3, r2
 80021ec:	d00f      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	000a      	movs	r2, r1
 80021f2:	0152      	lsls	r2, r2, #5
 80021f4:	1a52      	subs	r2, r2, r1
 80021f6:	0193      	lsls	r3, r2, #6
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	185b      	adds	r3, r3, r1
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f7fd ff92 	bl	800012c <__udivsi3>
 8002208:	0003      	movs	r3, r0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00e      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	000a      	movs	r2, r1
 8002212:	0152      	lsls	r2, r2, #5
 8002214:	1a52      	subs	r2, r2, r1
 8002216:	0193      	lsls	r3, r2, #6
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	185b      	adds	r3, r3, r1
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f7fd ff82 	bl	800012c <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	e00d      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0b5b      	lsrs	r3, r3, #13
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	0212      	lsls	r2, r2, #8
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800224e:	693b      	ldr	r3, [r7, #16]
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	003d0900 	.word	0x003d0900
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200
 8002268:	0800457c 	.word	0x0800457c

0800226c <led_ring_bit>:
 */

#include "main.h"
#include "control_hardware.h"

void led_ring_bit(uint8_t x) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	0002      	movs	r2, r0
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
  if(x) {
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <led_ring_bit+0x40>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 8002280:	23a0      	movs	r3, #160	; 0xa0
 8002282:	05db      	lsls	r3, r3, #23
 8002284:	2220      	movs	r2, #32
 8002286:	619a      	str	r2, [r3, #24]
    NS800;
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 80022a2:	23a0      	movs	r3, #160	; 0xa0
 80022a4:	05db      	lsls	r3, r3, #23
 80022a6:	2220      	movs	r2, #32
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
  else {
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
    NS400;
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
  }
}
 80022aa:	e00c      	b.n	80022c6 <led_ring_bit+0x5a>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 80022ac:	23a0      	movs	r3, #160	; 0xa0
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	2220      	movs	r2, #32
 80022b2:	619a      	str	r2, [r3, #24]
    NS400;
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 80022be:	23a0      	movs	r3, #160	; 0xa0
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	2220      	movs	r2, #32
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <led_ring_update>:

void led_ring_update(uint32_t *data_24bit)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b0cc      	sub	sp, #304	; 0x130
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint8_t data_bit[288];

    for(i=0; i<288; i++)
 80022d8:	2397      	movs	r3, #151	; 0x97
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e02c      	b.n	800233e <led_ring_update+0x6e>
    {
        data_bit[i]=data_24bit[i/24]>>(23-(i%24))&1;
 80022e4:	2597      	movs	r5, #151	; 0x97
 80022e6:	006d      	lsls	r5, r5, #1
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2118      	movs	r1, #24
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fd ff1c 	bl	800012c <__udivsi3>
 80022f4:	0003      	movs	r3, r0
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	681c      	ldr	r4, [r3, #0]
 8002300:	197b      	adds	r3, r7, r5
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2118      	movs	r1, #24
 8002306:	0018      	movs	r0, r3
 8002308:	f7fd ff96 	bl	8000238 <__aeabi_uidivmod>
 800230c:	000b      	movs	r3, r1
 800230e:	b29b      	uxth	r3, r3
 8002310:	001a      	movs	r2, r3
 8002312:	2317      	movs	r3, #23
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	40dc      	lsrs	r4, r3
 8002318:	0023      	movs	r3, r4
 800231a:	b2da      	uxtb	r2, r3
 800231c:	197b      	adds	r3, r7, r5
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	400a      	ands	r2, r1
 8002324:	b2d1      	uxtb	r1, r2
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <led_ring_update+0xcc>)
 8002328:	2098      	movs	r0, #152	; 0x98
 800232a:	0040      	lsls	r0, r0, #1
 800232c:	4684      	mov	ip, r0
 800232e:	44bc      	add	ip, r7
 8002330:	4462      	add	r2, ip
 8002332:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<288; i++)
 8002334:	197b      	adds	r3, r7, r5
 8002336:	881a      	ldrh	r2, [r3, #0]
 8002338:	197b      	adds	r3, r7, r5
 800233a:	3201      	adds	r2, #1
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	2197      	movs	r1, #151	; 0x97
 8002340:	0049      	lsls	r1, r1, #1
 8002342:	187b      	adds	r3, r7, r1
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	2390      	movs	r3, #144	; 0x90
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	429a      	cmp	r2, r3
 800234c:	d3ca      	bcc.n	80022e4 <led_ring_update+0x14>
    }

    for(i=0; i<288; i++)
 800234e:	187b      	adds	r3, r7, r1
 8002350:	2200      	movs	r2, #0
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e012      	b.n	800237c <led_ring_update+0xac>
    {
        led_ring_bit(data_bit[i]);
 8002356:	2497      	movs	r4, #151	; 0x97
 8002358:	0064      	lsls	r4, r4, #1
 800235a:	193b      	adds	r3, r7, r4
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4a0f      	ldr	r2, [pc, #60]	; (800239c <led_ring_update+0xcc>)
 8002360:	2198      	movs	r1, #152	; 0x98
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	468c      	mov	ip, r1
 8002366:	44bc      	add	ip, r7
 8002368:	4462      	add	r2, ip
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff ff7d 	bl	800226c <led_ring_bit>
    for(i=0; i<288; i++)
 8002372:	193b      	adds	r3, r7, r4
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	193b      	adds	r3, r7, r4
 8002378:	3201      	adds	r2, #1
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	2397      	movs	r3, #151	; 0x97
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	2390      	movs	r3, #144	; 0x90
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	429a      	cmp	r2, r3
 800238a:	d3e4      	bcc.n	8002356 <led_ring_update+0x86>
    }

    HAL_Delay(1);
 800238c:	2001      	movs	r0, #1
 800238e:	f7fe fb25 	bl	80009dc <HAL_Delay>
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b04c      	add	sp, #304	; 0x130
 8002398:	bdb0      	pop	{r4, r5, r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	fffffedc 	.word	0xfffffedc

080023a0 <led_ring_rgb>:

uint32_t led_ring_rgb(uint8_t red, uint8_t green, uint8_t blue)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0004      	movs	r4, r0
 80023a8:	0008      	movs	r0, r1
 80023aa:	0011      	movs	r1, r2
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	1c22      	adds	r2, r4, #0
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	1dbb      	adds	r3, r7, #6
 80023b4:	1c02      	adds	r2, r0, #0
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	1d7b      	adds	r3, r7, #5
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	701a      	strb	r2, [r3, #0]
  uint32_t data_24bit;

    data_24bit = (uint32_t)blue;
 80023be:	1d7b      	adds	r3, r7, #5
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)red<<8;
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)green<<16;
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    return data_24bit;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b005      	add	sp, #20
 80023e4:	bd90      	pop	{r4, r7, pc}
	...

080023e8 <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 80023ee:	003b      	movs	r3, r7
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	003b      	movs	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	003b      	movs	r3, r7
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8002400:	003b      	movs	r3, r7
 8002402:	4a22      	ldr	r2, [pc, #136]	; (800248c <LcdReadByte+0xa4>)
 8002404:	0019      	movs	r1, r3
 8002406:	0010      	movs	r0, r2
 8002408:	f7ff f810 	bl	800142c <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <LcdReadByte+0xa4>)
 800240e:	2201      	movs	r2, #1
 8002410:	2102      	movs	r1, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff f99d 	bl	8001752 <HAL_GPIO_WritePin>
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <LcdReadByte+0xa4>)
 800241a:	2201      	movs	r2, #1
 800241c:	2108      	movs	r1, #8
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff f997 	bl	8001752 <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 8002424:	2517      	movs	r5, #23
 8002426:	197c      	adds	r4, r7, r5
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <LcdReadByte+0xa4>)
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff f973 	bl	8001718 <HAL_GPIO_ReadPin>
 8002432:	0003      	movs	r3, r0
 8002434:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <LcdReadByte+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	2108      	movs	r1, #8
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff f988 	bl	8001752 <HAL_GPIO_WritePin>
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <LcdReadByte+0xa4>)
 8002444:	2201      	movs	r2, #1
 8002446:	2108      	movs	r1, #8
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff f982 	bl	8001752 <HAL_GPIO_WritePin>
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <LcdReadByte+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	2108      	movs	r1, #8
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff f97c 	bl	8001752 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 800245a:	003b      	movs	r3, r7
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	003b      	movs	r3, r7
 8002462:	2201      	movs	r2, #1
 8002464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	003b      	movs	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	003b      	movs	r3, r7
 800246e:	2203      	movs	r2, #3
 8002470:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8002472:	003b      	movs	r3, r7
 8002474:	4a05      	ldr	r2, [pc, #20]	; (800248c <LcdReadByte+0xa4>)
 8002476:	0019      	movs	r1, r3
 8002478:	0010      	movs	r0, r2
 800247a:	f7fe ffd7 	bl	800142c <HAL_GPIO_Init>
  
  return lcdBusy;
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781b      	ldrb	r3, [r3, #0]
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b006      	add	sp, #24
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	50000400 	.word	0x50000400

08002490 <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	481c      	ldr	r0, [pc, #112]	; (8002518 <LcdSendNibble+0x88>)
 80024a8:	001a      	movs	r2, r3
 80024aa:	2110      	movs	r1, #16
 80024ac:	f7ff f951 	bl	8001752 <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4816      	ldr	r0, [pc, #88]	; (8002518 <LcdSendNibble+0x88>)
 80024c0:	001a      	movs	r2, r3
 80024c2:	2120      	movs	r1, #32
 80024c4:	f7ff f945 	bl	8001752 <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4810      	ldr	r0, [pc, #64]	; (8002518 <LcdSendNibble+0x88>)
 80024d8:	001a      	movs	r2, r3
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	f7ff f939 	bl	8001752 <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	480a      	ldr	r0, [pc, #40]	; (8002518 <LcdSendNibble+0x88>)
 80024f0:	001a      	movs	r2, r3
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	f7ff f92d 	bl	8001752 <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <LcdSendNibble+0x88>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	2108      	movs	r1, #8
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff f927 	bl	8001752 <HAL_GPIO_WritePin>
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <LcdSendNibble+0x88>)
 8002506:	2200      	movs	r2, #0
 8002508:	2108      	movs	r1, #8
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff f921 	bl	8001752 <HAL_GPIO_WritePin>
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	50000400 	.word	0x50000400

0800251c <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	1c0a      	adds	r2, r1, #0
 800252c:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <LcdSendByte+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff f90c 	bl	8001752 <HAL_GPIO_WritePin>
  while(LcdReadByte());
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	f7ff ff54 	bl	80023e8 <LcdReadByte>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d1fb      	bne.n	800253c <LcdSendByte+0x20>
  LCD_RS(address);
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4811      	ldr	r0, [pc, #68]	; (8002590 <LcdSendByte+0x74>)
 800254a:	001a      	movs	r2, r3
 800254c:	2101      	movs	r1, #1
 800254e:	f7ff f900 	bl	8001752 <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <LcdSendByte+0x74>)
 8002554:	2200      	movs	r2, #0
 8002556:	2102      	movs	r1, #2
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff f8fa 	bl	8001752 <HAL_GPIO_WritePin>
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <LcdSendByte+0x74>)
 8002560:	2200      	movs	r2, #0
 8002562:	2108      	movs	r1, #8
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff f8f4 	bl	8001752 <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	b2db      	uxtb	r3, r3
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff ff8c 	bl	8002490 <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 8002578:	1dbb      	adds	r3, r7, #6
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	220f      	movs	r2, #15
 800257e:	4013      	ands	r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff ff84 	bl	8002490 <LcdSendNibble>
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	50000400 	.word	0x50000400

08002594 <LcdInit>:

void LcdInit() {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <LcdInit+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	2101      	movs	r1, #1
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff f8d6 	bl	8001752 <HAL_GPIO_WritePin>
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <LcdInit+0x90>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	2102      	movs	r1, #2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff f8d0 	bl	8001752 <HAL_GPIO_WritePin>
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <LcdInit+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2108      	movs	r1, #8
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff f8ca 	bl	8001752 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 80025be:	200f      	movs	r0, #15
 80025c0:	f7fe fa0c 	bl	80009dc <HAL_Delay>
  for(i=0; i<3; i++) {
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e00a      	b.n	80025e2 <LcdInit+0x4e>
    LcdSendNibble(3);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff ff5f 	bl	8002490 <LcdSendNibble>
    HAL_Delay(5);
 80025d2:	2005      	movs	r0, #5
 80025d4:	f7fe fa02 	bl	80009dc <HAL_Delay>
  for(i=0; i<3; i++) {
 80025d8:	1dfb      	adds	r3, r7, #7
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	3201      	adds	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	1dfb      	adds	r3, r7, #7
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d9f0      	bls.n	80025cc <LcdInit+0x38>
  }
  LcdSendNibble(2);
 80025ea:	2002      	movs	r0, #2
 80025ec:	f7ff ff50 	bl	8002490 <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e00c      	b.n	8002612 <LcdInit+0x7e>
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <LcdInit+0x94>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	0019      	movs	r1, r3
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff ff8a 	bl	800251c <LcdSendByte>
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	3201      	adds	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d9ee      	bls.n	80025f8 <LcdInit+0x64>
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}
 8002624:	50000400 	.word	0x50000400
 8002628:	08004568 	.word	0x08004568

0800262c <lcd_gotoxy>:

void lcd_gotoxy(uint8_t x, uint8_t y) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	0002      	movs	r2, r0
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	1c0a      	adds	r2, r1, #0
 800263c:	701a      	strb	r2, [r3, #0]
  uint8_t address;
  if(y != 1) address = 0x40;
 800263e:	1dbb      	adds	r3, r7, #6
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d004      	beq.n	8002650 <lcd_gotoxy+0x24>
 8002646:	230f      	movs	r3, #15
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e003      	b.n	8002658 <lcd_gotoxy+0x2c>
  else address = 0;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
  address += x-1;
 8002658:	1dfa      	adds	r2, r7, #7
 800265a:	210f      	movs	r1, #15
 800265c:	187b      	adds	r3, r7, r1
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	18d3      	adds	r3, r2, r3
 8002664:	b2da      	uxtb	r2, r3
 8002666:	187b      	adds	r3, r7, r1
 8002668:	3a01      	subs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
  LcdSendByte(0, 0x80 | address);
 800266c:	187b      	adds	r3, r7, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	4252      	negs	r2, r2
 8002674:	4313      	orrs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	0019      	movs	r1, r3
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff ff4e 	bl	800251c <LcdSendByte>
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}

08002688 <lcd_putc>:

void lcd_putc(uint8_t c) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	0002      	movs	r2, r0
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	701a      	strb	r2, [r3, #0]
  if(c == '\f') {
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d107      	bne.n	80026ac <lcd_putc+0x24>
    LcdSendByte(0, 1);
 800269c:	2101      	movs	r1, #1
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff ff3c 	bl	800251c <LcdSendByte>
    HAL_Delay(2);
 80026a4:	2002      	movs	r0, #2
 80026a6:	f7fe f999 	bl	80009dc <HAL_Delay>
  }
  else if(c == '\n') lcd_gotoxy(1, 2);
  else if(c == '\b') LcdSendByte(0, 0x10);
  else LcdSendByte(1, c);
}
 80026aa:	e017      	b.n	80026dc <lcd_putc+0x54>
  else if(c == '\n') lcd_gotoxy(1, 2);
 80026ac:	1dfb      	adds	r3, r7, #7
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b0a      	cmp	r3, #10
 80026b2:	d104      	bne.n	80026be <lcd_putc+0x36>
 80026b4:	2102      	movs	r1, #2
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff ffb8 	bl	800262c <lcd_gotoxy>
}
 80026bc:	e00e      	b.n	80026dc <lcd_putc+0x54>
  else if(c == '\b') LcdSendByte(0, 0x10);
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d104      	bne.n	80026d0 <lcd_putc+0x48>
 80026c6:	2110      	movs	r1, #16
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff ff27 	bl	800251c <LcdSendByte>
}
 80026ce:	e005      	b.n	80026dc <lcd_putc+0x54>
  else LcdSendByte(1, c);
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	0019      	movs	r1, r3
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff ff20 	bl	800251c <LcdSendByte>
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <lcd_puts>:

void lcd_puts(const char* str) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<strlen(str); i++) {
 80026ec:	230f      	movs	r3, #15
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e00d      	b.n	8002712 <lcd_puts+0x2e>
    lcd_putc(str[i]);
 80026f6:	240f      	movs	r4, #15
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff ffc0 	bl	8002688 <lcd_putc>
  for(i=0; i<strlen(str); i++) {
 8002708:	193b      	adds	r3, r7, r4
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	193b      	adds	r3, r7, r4
 800270e:	3201      	adds	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	230f      	movs	r3, #15
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781c      	ldrb	r4, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f7fd fcf4 	bl	8000108 <strlen>
 8002720:	0003      	movs	r3, r0
 8002722:	429c      	cmp	r4, r3
 8002724:	d3e7      	bcc.n	80026f6 <lcd_puts+0x12>
  }
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b005      	add	sp, #20
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <lcd_cgram>:

void lcd_cgram(uint8_t room, uint8_t n) {
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	0002      	movs	r2, r0
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	1c0a      	adds	r2, r1, #0
 8002740:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  const uint8_t data[2][8]={{0x04, 0x04, 0x0E, 0x0F, 0x1B, 0x19, 0x11, 0x0A}, // FIRE SYMBOL
 8002742:	230c      	movs	r3, #12
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <lcd_cgram+0x80>)
 8002748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800274a:	c313      	stmia	r3!, {r0, r1, r4}
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	601a      	str	r2, [r3, #0]
                            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}; //
  
  for(i=0; i<8; i++) {
 8002750:	231f      	movs	r3, #31
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e020      	b.n	800279c <lcd_cgram+0x6c>
    LcdSendByte(0, 0x40+i+(room*8));
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	b2da      	uxtb	r2, r3
 8002762:	241f      	movs	r4, #31
 8002764:	193b      	adds	r3, r7, r4
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3340      	adds	r3, #64	; 0x40
 800276e:	b2db      	uxtb	r3, r3
 8002770:	0019      	movs	r1, r3
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff fed2 	bl	800251c <LcdSendByte>
    LcdSendByte(1, data[n][i]);
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	193b      	adds	r3, r7, r4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	210c      	movs	r1, #12
 8002782:	1879      	adds	r1, r7, r1
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	188a      	adds	r2, r1, r2
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	0019      	movs	r1, r3
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fec5 	bl	800251c <LcdSendByte>
  for(i=0; i<8; i++) {
 8002792:	193b      	adds	r3, r7, r4
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	193b      	adds	r3, r7, r4
 8002798:	3201      	adds	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	231f      	movs	r3, #31
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	d9d9      	bls.n	800275a <lcd_cgram+0x2a>
  }
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b009      	add	sp, #36	; 0x24
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	08004480 	.word	0x08004480

080027b4 <read_adc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t read_adc(uint8_t x) {
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	0002      	movs	r2, r0
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	701a      	strb	r2, [r3, #0]
	uint16_t adc[2];

	HAL_ADC_Start(&hadc);
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <read_adc+0x6c>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fe fa9c 	bl	8000d00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 80027c8:	23fa      	movs	r3, #250	; 0xfa
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <read_adc+0x6c>)
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fb29 	bl	8000e28 <HAL_ADC_PollForConversion>
	adc[0] = HAL_ADC_GetValue(&hadc);
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <read_adc+0x6c>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fbbb 	bl	8000f54 <HAL_ADC_GetValue>
 80027de:	0003      	movs	r3, r0
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	240c      	movs	r4, #12
 80027e4:	193b      	adds	r3, r7, r4
 80027e6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc, 1000);
 80027e8:	23fa      	movs	r3, #250	; 0xfa
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <read_adc+0x6c>)
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe fb19 	bl	8000e28 <HAL_ADC_PollForConversion>
	adc[1] = HAL_ADC_GetValue(&hadc);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <read_adc+0x6c>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fbab 	bl	8000f54 <HAL_ADC_GetValue>
 80027fe:	0003      	movs	r3, r0
 8002800:	b29a      	uxth	r2, r3
 8002802:	193b      	adds	r3, r7, r4
 8002804:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc);
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <read_adc+0x6c>)
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe facd 	bl	8000da8 <HAL_ADC_Stop>

	return adc[x];
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	193b      	adds	r3, r7, r4
 8002814:	0052      	lsls	r2, r2, #1
 8002816:	5ad3      	ldrh	r3, [r2, r3]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b005      	add	sp, #20
 800281e:	bd90      	pop	{r4, r7, pc}
 8002820:	200001b0 	.word	0x200001b0

08002824 <status_cal>:

void status_cal() {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	if (over_heat)
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <status_cal+0x9c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <status_cal+0x14>
		status = OVER_HEAT;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <status_cal+0xa0>)
 8002832:	2203      	movs	r2, #3
 8002834:	701a      	strb	r2, [r3, #0]
		status = ON_NONE;
	else if (auto_adj && (read_adc(CDS) >= CDS_LIMIT))
		status = AUTO_ADJ;
	else if (power && (read_adc(CDS) >= CDS_LIMIT))
		status = ON;
}
 8002836:	e03f      	b.n	80028b8 <status_cal+0x94>
	else if (safe_lock)
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <status_cal+0xa4>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <status_cal+0x24>
		status = SAFE_LOCK;
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <status_cal+0xa0>)
 8002842:	2205      	movs	r2, #5
 8002844:	701a      	strb	r2, [r3, #0]
}
 8002846:	e037      	b.n	80028b8 <status_cal+0x94>
	else if (power == 0)
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <status_cal+0xa8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <status_cal+0x34>
		status = OFF;
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <status_cal+0xa0>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	e02f      	b.n	80028b8 <status_cal+0x94>
	else if (power && (read_adc(CDS) < CDS_LIMIT))
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <status_cal+0xa8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <status_cal+0x54>
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ffa7 	bl	80027b4 <read_adc>
 8002866:	0003      	movs	r3, r0
 8002868:	001a      	movs	r2, r3
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <status_cal+0xac>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d803      	bhi.n	8002878 <status_cal+0x54>
		status = ON_NONE;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <status_cal+0xa0>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e01f      	b.n	80028b8 <status_cal+0x94>
	else if (auto_adj && (read_adc(CDS) >= CDS_LIMIT))
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <status_cal+0xb0>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <status_cal+0x74>
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff ff97 	bl	80027b4 <read_adc>
 8002886:	0003      	movs	r3, r0
 8002888:	001a      	movs	r2, r3
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <status_cal+0xac>)
 800288c:	429a      	cmp	r2, r3
 800288e:	d903      	bls.n	8002898 <status_cal+0x74>
		status = AUTO_ADJ;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <status_cal+0xa0>)
 8002892:	2204      	movs	r2, #4
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e00f      	b.n	80028b8 <status_cal+0x94>
	else if (power && (read_adc(CDS) >= CDS_LIMIT))
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <status_cal+0xa8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <status_cal+0x94>
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff ff87 	bl	80027b4 <read_adc>
 80028a6:	0003      	movs	r3, r0
 80028a8:	001a      	movs	r2, r3
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <status_cal+0xac>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d903      	bls.n	80028b8 <status_cal+0x94>
		status = ON;
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <status_cal+0xa0>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	e7ff      	b.n	80028b8 <status_cal+0x94>
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	200000ac 	.word	0x200000ac
 80028c4:	200000a8 	.word	0x200000a8
 80028c8:	200000ab 	.word	0x200000ab
 80028cc:	200000a9 	.word	0x200000a9
 80028d0:	00000bb7 	.word	0x00000bb7
 80028d4:	200000aa 	.word	0x200000aa

080028d8 <lcd_dis>:

void lcd_dis() {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af02      	add	r7, sp, #8
	sprintf(temp, "TEMP:%03d%cC  %c:%d ", temper, 0xDF, 1, fire);
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <lcd_dis+0xa0>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	001a      	movs	r2, r3
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <lcd_dis+0xa4>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4925      	ldr	r1, [pc, #148]	; (8002980 <lcd_dis+0xa8>)
 80028ea:	4826      	ldr	r0, [pc, #152]	; (8002984 <lcd_dis+0xac>)
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2301      	movs	r3, #1
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	23df      	movs	r3, #223	; 0xdf
 80028f4:	f001 f992 	bl	8003c1c <siprintf>
	sprintf(temp2, "%03d", a_temper);
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <lcd_dis+0xb0>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	001a      	movs	r2, r3
 80028fe:	4923      	ldr	r1, [pc, #140]	; (800298c <lcd_dis+0xb4>)
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <lcd_dis+0xb8>)
 8002902:	0018      	movs	r0, r3
 8002904:	f001 f98a 	bl	8003c1c <siprintf>
	lcd_gotoxy(1, 1);
 8002908:	2101      	movs	r1, #1
 800290a:	2001      	movs	r0, #1
 800290c:	f7ff fe8e 	bl	800262c <lcd_gotoxy>
	lcd_puts(temp);
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <lcd_dis+0xac>)
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff fee6 	bl	80026e4 <lcd_puts>
	lcd_gotoxy(1, 2);
 8002918:	2102      	movs	r1, #2
 800291a:	2001      	movs	r0, #1
 800291c:	f7ff fe86 	bl	800262c <lcd_gotoxy>
	lcd_puts("[");
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <lcd_dis+0xbc>)
 8002922:	0018      	movs	r0, r3
 8002924:	f7ff fede 	bl	80026e4 <lcd_puts>
	lcd_gotoxy(11, 2);
 8002928:	2102      	movs	r1, #2
 800292a:	200b      	movs	r0, #11
 800292c:	f7ff fe7e 	bl	800262c <lcd_gotoxy>
	lcd_puts("][");
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <lcd_dis+0xc0>)
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff fed6 	bl	80026e4 <lcd_puts>
	lcd_gotoxy(16, 2);
 8002938:	2102      	movs	r1, #2
 800293a:	2010      	movs	r0, #16
 800293c:	f7ff fe76 	bl	800262c <lcd_gotoxy>
	lcd_puts("]");
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <lcd_dis+0xc4>)
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff fece 	bl	80026e4 <lcd_puts>
	lcd_gotoxy(2, 2);
 8002948:	2102      	movs	r1, #2
 800294a:	2002      	movs	r0, #2
 800294c:	f7ff fe6e 	bl	800262c <lcd_gotoxy>
	lcd_puts(status_fonts[status]);
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <lcd_dis+0xc8>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	001a      	movs	r2, r3
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <lcd_dis+0xcc>)
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	58d3      	ldr	r3, [r2, r3]
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff fec1 	bl	80026e4 <lcd_puts>
	lcd_gotoxy(13, 2);
 8002962:	2102      	movs	r1, #2
 8002964:	200d      	movs	r0, #13
 8002966:	f7ff fe61 	bl	800262c <lcd_gotoxy>
	lcd_puts(temp2);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <lcd_dis+0xb8>)
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff feb9 	bl	80026e4 <lcd_puts>
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000000 	.word	0x20000000
 800297c:	200000ad 	.word	0x200000ad
 8002980:	080044d8 	.word	0x080044d8
 8002984:	20000118 	.word	0x20000118
 8002988:	20000002 	.word	0x20000002
 800298c:	080044f0 	.word	0x080044f0
 8002990:	200000f0 	.word	0x200000f0
 8002994:	080044f8 	.word	0x080044f8
 8002998:	080044fc 	.word	0x080044fc
 800299c:	08004500 	.word	0x08004500
 80029a0:	200000a8 	.word	0x200000a8
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <led_ring>:

void led_ring() {
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - r_count) >= 100) {
 80029ac:	f7fe f80c 	bl	80009c8 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	4bc9      	ldr	r3, [pc, #804]	; (8002cd8 <led_ring+0x330>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b63      	cmp	r3, #99	; 0x63
 80029ba:	d800      	bhi.n	80029be <led_ring+0x16>
 80029bc:	e188      	b.n	8002cd0 <led_ring+0x328>
		if (fire != fire_ring) {
 80029be:	4bc7      	ldr	r3, [pc, #796]	; (8002cdc <led_ring+0x334>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4bc7      	ldr	r3, [pc, #796]	; (8002ce0 <led_ring+0x338>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d012      	beq.n	80029f0 <led_ring+0x48>
			if (fire > fire_ring)
 80029ca:	4bc4      	ldr	r3, [pc, #784]	; (8002cdc <led_ring+0x334>)
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	4bc4      	ldr	r3, [pc, #784]	; (8002ce0 <led_ring+0x338>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d906      	bls.n	80029e4 <led_ring+0x3c>
				fire_ring++;
 80029d6:	4bc2      	ldr	r3, [pc, #776]	; (8002ce0 <led_ring+0x338>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4bc0      	ldr	r3, [pc, #768]	; (8002ce0 <led_ring+0x338>)
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e005      	b.n	80029f0 <led_ring+0x48>
			else
				fire_ring--;
 80029e4:	4bbe      	ldr	r3, [pc, #760]	; (8002ce0 <led_ring+0x338>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4bbc      	ldr	r3, [pc, #752]	; (8002ce0 <led_ring+0x338>)
 80029ee:	701a      	strb	r2, [r3, #0]
		}

		if (fire_ring > 0) {
 80029f0:	4bbb      	ldr	r3, [pc, #748]	; (8002ce0 <led_ring+0x338>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d100      	bne.n	80029fa <led_ring+0x52>
 80029f8:	e147      	b.n	8002c8a <led_ring+0x2e2>
			if (fire_ring <= 3) {
 80029fa:	4bb9      	ldr	r3, [pc, #740]	; (8002ce0 <led_ring+0x338>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d86e      	bhi.n	8002ae0 <led_ring+0x138>
				for (i = 1; i < 12; i += 2) {
 8002a02:	4bb8      	ldr	r3, [pc, #736]	; (8002ce4 <led_ring+0x33c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e011      	b.n	8002a2e <led_ring+0x86>
					led_ring_data[i] = led_ring_rgb(0, 0, 0);
 8002a0a:	4bb6      	ldr	r3, [pc, #728]	; (8002ce4 <led_ring+0x33c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	001c      	movs	r4, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff fcc3 	bl	80023a0 <led_ring_rgb>
 8002a1a:	0001      	movs	r1, r0
 8002a1c:	4bb2      	ldr	r3, [pc, #712]	; (8002ce8 <led_ring+0x340>)
 8002a1e:	00a2      	lsls	r2, r4, #2
 8002a20:	50d1      	str	r1, [r2, r3]
				for (i = 1; i < 12; i += 2) {
 8002a22:	4bb0      	ldr	r3, [pc, #704]	; (8002ce4 <led_ring+0x33c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3302      	adds	r3, #2
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4bae      	ldr	r3, [pc, #696]	; (8002ce4 <led_ring+0x33c>)
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	4bad      	ldr	r3, [pc, #692]	; (8002ce4 <led_ring+0x33c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b0b      	cmp	r3, #11
 8002a34:	d9e9      	bls.n	8002a0a <led_ring+0x62>
				}
				for (i = 2; i < 12; i += 4) {
 8002a36:	4bab      	ldr	r3, [pc, #684]	; (8002ce4 <led_ring+0x33c>)
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e011      	b.n	8002a62 <led_ring+0xba>
					led_ring_data[i] = led_ring_rgb(0, 0, 0);
 8002a3e:	4ba9      	ldr	r3, [pc, #676]	; (8002ce4 <led_ring+0x33c>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	001c      	movs	r4, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff fca9 	bl	80023a0 <led_ring_rgb>
 8002a4e:	0001      	movs	r1, r0
 8002a50:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <led_ring+0x340>)
 8002a52:	00a2      	lsls	r2, r4, #2
 8002a54:	50d1      	str	r1, [r2, r3]
				for (i = 2; i < 12; i += 4) {
 8002a56:	4ba3      	ldr	r3, [pc, #652]	; (8002ce4 <led_ring+0x33c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4ba1      	ldr	r3, [pc, #644]	; (8002ce4 <led_ring+0x33c>)
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	4ba0      	ldr	r3, [pc, #640]	; (8002ce4 <led_ring+0x33c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b0b      	cmp	r3, #11
 8002a68:	d9e9      	bls.n	8002a3e <led_ring+0x96>
				}

				if (fire_ring == 1) {
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	; (8002ce0 <led_ring+0x338>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d110      	bne.n	8002a94 <led_ring+0xec>
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
							led_ring_rgb(0, 0, 13);
 8002a72:	220d      	movs	r2, #13
 8002a74:	2100      	movs	r1, #0
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fc92 	bl	80023a0 <led_ring_rgb>
 8002a7c:	0002      	movs	r2, r0
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
 8002a7e:	4b9a      	ldr	r3, [pc, #616]	; (8002ce8 <led_ring+0x340>)
 8002a80:	621a      	str	r2, [r3, #32]
 8002a82:	4b99      	ldr	r3, [pc, #612]	; (8002ce8 <led_ring+0x340>)
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	4b98      	ldr	r3, [pc, #608]	; (8002ce8 <led_ring+0x340>)
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	4b97      	ldr	r3, [pc, #604]	; (8002ce8 <led_ring+0x340>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	4b96      	ldr	r3, [pc, #600]	; (8002ce8 <led_ring+0x340>)
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e035      	b.n	8002b00 <led_ring+0x158>
				} else if (fire_ring == 2) {
 8002a94:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <led_ring+0x338>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d110      	bne.n	8002abe <led_ring+0x116>
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
							led_ring_rgb(0, 0, 76);
 8002a9c:	224c      	movs	r2, #76	; 0x4c
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff fc7d 	bl	80023a0 <led_ring_rgb>
 8002aa6:	0002      	movs	r2, r0
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
 8002aa8:	4b8f      	ldr	r3, [pc, #572]	; (8002ce8 <led_ring+0x340>)
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	4b8e      	ldr	r3, [pc, #568]	; (8002ce8 <led_ring+0x340>)
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	4b8d      	ldr	r3, [pc, #564]	; (8002ce8 <led_ring+0x340>)
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <led_ring+0x340>)
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <led_ring+0x340>)
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e020      	b.n	8002b00 <led_ring+0x158>
				} else {
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
							led_ring_rgb(0, 0, 255);
 8002abe:	22ff      	movs	r2, #255	; 0xff
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff fc6c 	bl	80023a0 <led_ring_rgb>
 8002ac8:	0002      	movs	r2, r0
					led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
 8002aca:	4b87      	ldr	r3, [pc, #540]	; (8002ce8 <led_ring+0x340>)
 8002acc:	621a      	str	r2, [r3, #32]
 8002ace:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <led_ring+0x340>)
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <led_ring+0x340>)
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	4b84      	ldr	r3, [pc, #528]	; (8002ce8 <led_ring+0x340>)
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <led_ring+0x340>)
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e00f      	b.n	8002b00 <led_ring+0x158>
				}
			} else {
				led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
						led_ring_rgb(0, 0, 255);
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7ff fc5b 	bl	80023a0 <led_ring_rgb>
 8002aea:	0002      	movs	r2, r0
				led_ring_data[0] = led_ring_data[4] = led_ring_data[8] =
 8002aec:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <led_ring+0x340>)
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <led_ring+0x340>)
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	4b7c      	ldr	r3, [pc, #496]	; (8002ce8 <led_ring+0x340>)
 8002af6:	611a      	str	r2, [r3, #16]
 8002af8:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <led_ring+0x340>)
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <led_ring+0x340>)
 8002afe:	601a      	str	r2, [r3, #0]
			}

			if (fire_ring > 3 && fire_ring <= 6) {
 8002b00:	4b77      	ldr	r3, [pc, #476]	; (8002ce0 <led_ring+0x338>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d957      	bls.n	8002bb8 <led_ring+0x210>
 8002b08:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <led_ring+0x338>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d853      	bhi.n	8002bb8 <led_ring+0x210>
				for (i = 1; i < 12; i += 2) {
 8002b10:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <led_ring+0x33c>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e011      	b.n	8002b3c <led_ring+0x194>
					led_ring_data[i] = led_ring_rgb(0, 0, 0);
 8002b18:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <led_ring+0x33c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	001c      	movs	r4, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7ff fc3c 	bl	80023a0 <led_ring_rgb>
 8002b28:	0001      	movs	r1, r0
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <led_ring+0x340>)
 8002b2c:	00a2      	lsls	r2, r4, #2
 8002b2e:	50d1      	str	r1, [r2, r3]
				for (i = 1; i < 12; i += 2) {
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <led_ring+0x33c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	3302      	adds	r3, #2
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <led_ring+0x33c>)
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <led_ring+0x33c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b0b      	cmp	r3, #11
 8002b42:	d9e9      	bls.n	8002b18 <led_ring+0x170>
				}

				if (fire_ring == 4) {
 8002b44:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <led_ring+0x338>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d110      	bne.n	8002b6e <led_ring+0x1c6>
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
							led_ring_rgb(0, 0, 13);
 8002b4c:	220d      	movs	r2, #13
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff fc25 	bl	80023a0 <led_ring_rgb>
 8002b56:	0002      	movs	r2, r0
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
 8002b58:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <led_ring+0x340>)
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <led_ring+0x340>)
 8002b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <led_ring+0x340>)
 8002b62:	619a      	str	r2, [r3, #24]
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <led_ring+0x340>)
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <led_ring+0x340>)
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e024      	b.n	8002bb8 <led_ring+0x210>
				} else if (fire_ring == 5) {
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <led_ring+0x338>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d110      	bne.n	8002b98 <led_ring+0x1f0>
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
							led_ring_rgb(0, 0, 76);
 8002b76:	224c      	movs	r2, #76	; 0x4c
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7ff fc10 	bl	80023a0 <led_ring_rgb>
 8002b80:	0002      	movs	r2, r0
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <led_ring+0x340>)
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
 8002b86:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <led_ring+0x340>)
 8002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <led_ring+0x340>)
 8002b8c:	619a      	str	r2, [r3, #24]
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <led_ring+0x340>)
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <led_ring+0x340>)
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e00f      	b.n	8002bb8 <led_ring+0x210>
				} else {
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
							led_ring_rgb(0, 0, 255);
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fbff 	bl	80023a0 <led_ring_rgb>
 8002ba2:	0002      	movs	r2, r0
					led_ring_data[2] = led_ring_data[6] = led_ring_data[10] =
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <led_ring+0x340>)
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba8:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <led_ring+0x340>)
 8002baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <led_ring+0x340>)
 8002bae:	619a      	str	r2, [r3, #24]
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <led_ring+0x340>)
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <led_ring+0x340>)
 8002bb6:	609a      	str	r2, [r3, #8]
				}
			}

			if (fire_ring > 6 && fire_ring <= 9) {
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <led_ring+0x338>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d800      	bhi.n	8002bc2 <led_ring+0x21a>
 8002bc0:	e07d      	b.n	8002cbe <led_ring+0x316>
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <led_ring+0x338>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	d900      	bls.n	8002bcc <led_ring+0x224>
 8002bca:	e078      	b.n	8002cbe <led_ring+0x316>
				if (fire_ring == 7) {
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <led_ring+0x338>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	d11c      	bne.n	8002c0e <led_ring+0x266>
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
							led_ring_data[7] = led_ring_data[9] =
									led_ring_data[11] = led_ring_rgb(0, 0, 13);
 8002bd4:	220d      	movs	r2, #13
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff fbe1 	bl	80023a0 <led_ring_rgb>
 8002bde:	0002      	movs	r2, r0
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <led_ring+0x340>)
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <led_ring+0x340>)
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
							led_ring_data[7] = led_ring_data[9] =
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <led_ring+0x340>)
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <led_ring+0x340>)
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <led_ring+0x340>)
 8002bf2:	61da      	str	r2, [r3, #28]
 8002bf4:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <led_ring+0x340>)
 8002bf6:	69da      	ldr	r2, [r3, #28]
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <led_ring+0x340>)
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <led_ring+0x340>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <led_ring+0x340>)
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <led_ring+0x340>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <led_ring+0x340>)
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e057      	b.n	8002cbe <led_ring+0x316>
				} else if (fire_ring == 8) {
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <led_ring+0x338>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <led_ring+0x2a8>
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
							led_ring_data[7] = led_ring_data[9] =
									led_ring_data[11] = led_ring_rgb(0, 0, 76);
 8002c16:	224c      	movs	r2, #76	; 0x4c
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7ff fbc0 	bl	80023a0 <led_ring_rgb>
 8002c20:	0002      	movs	r2, r0
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <led_ring+0x340>)
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <led_ring+0x340>)
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
							led_ring_data[7] = led_ring_data[9] =
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <led_ring+0x340>)
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <led_ring+0x340>)
 8002c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <led_ring+0x340>)
 8002c34:	61da      	str	r2, [r3, #28]
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <led_ring+0x340>)
 8002c38:	69da      	ldr	r2, [r3, #28]
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <led_ring+0x340>)
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <led_ring+0x340>)
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <led_ring+0x340>)
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <led_ring+0x340>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <led_ring+0x340>)
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e036      	b.n	8002cbe <led_ring+0x316>
				} else {
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
							led_ring_data[7] = led_ring_data[9] =
									led_ring_data[11] = led_ring_rgb(0, 0, 255);
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	2100      	movs	r1, #0
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fba3 	bl	80023a0 <led_ring_rgb>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <led_ring+0x340>)
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <led_ring+0x340>)
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
							led_ring_data[7] = led_ring_data[9] =
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <led_ring+0x340>)
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <led_ring+0x340>)
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <led_ring+0x340>)
 8002c6e:	61da      	str	r2, [r3, #28]
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <led_ring+0x340>)
 8002c72:	69da      	ldr	r2, [r3, #28]
					led_ring_data[1] = led_ring_data[3] = led_ring_data[5] =
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <led_ring+0x340>)
 8002c76:	615a      	str	r2, [r3, #20]
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <led_ring+0x340>)
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <led_ring+0x340>)
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <led_ring+0x340>)
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <led_ring+0x340>)
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e019      	b.n	8002cbe <led_ring+0x316>
				}
			}
		} else {
			for (i = 0; i < 12; i++) {
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <led_ring+0x33c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e011      	b.n	8002cb6 <led_ring+0x30e>
				led_ring_data[i] = led_ring_rgb(0, 0, 0);
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <led_ring+0x33c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	001c      	movs	r4, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff fb7f 	bl	80023a0 <led_ring_rgb>
 8002ca2:	0001      	movs	r1, r0
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <led_ring+0x340>)
 8002ca6:	00a2      	lsls	r2, r4, #2
 8002ca8:	50d1      	str	r1, [r2, r3]
			for (i = 0; i < 12; i++) {
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <led_ring+0x33c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <led_ring+0x33c>)
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <led_ring+0x33c>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b0b      	cmp	r3, #11
 8002cbc:	d9e9      	bls.n	8002c92 <led_ring+0x2ea>
			}
		}

		led_ring_update(led_ring_data);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <led_ring+0x340>)
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff fb05 	bl	80022d0 <led_ring_update>
		r_count = HAL_GetTick();
 8002cc6:	f7fd fe7f 	bl	80009c8 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <led_ring+0x330>)
 8002cce:	601a      	str	r2, [r3, #0]
	}
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	20000154 	.word	0x20000154
 8002cdc:	200000ad 	.word	0x200000ad
 8002ce0:	200000ae 	.word	0x200000ae
 8002ce4:	20000144 	.word	0x20000144
 8002ce8:	20000158 	.word	0x20000158

08002cec <temper_updown>:

void temper_updown() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	if ((temper - B_TEMP) < 10)
 8002cf0:	4b52      	ldr	r3, [pc, #328]	; (8002e3c <temper_updown+0x150>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	2b1d      	cmp	r3, #29
 8002cf6:	d803      	bhi.n	8002d00 <temper_updown+0x14>
		temper_dnspeed = 2900;
 8002cf8:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <temper_updown+0x154>)
 8002cfa:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <temper_updown+0x158>)
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	e041      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 300)
 8002d00:	4b4e      	ldr	r3, [pc, #312]	; (8002e3c <temper_updown+0x150>)
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	23a0      	movs	r3, #160	; 0xa0
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d303      	bcc.n	8002d14 <temper_updown+0x28>
		temper_dnspeed = 100;
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <temper_updown+0x154>)
 8002d0e:	2264      	movs	r2, #100	; 0x64
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e037      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 200)
 8002d14:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <temper_updown+0x150>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	2bdb      	cmp	r3, #219	; 0xdb
 8002d1a:	d903      	bls.n	8002d24 <temper_updown+0x38>
		temper_dnspeed = 200;
 8002d1c:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <temper_updown+0x154>)
 8002d1e:	22c8      	movs	r2, #200	; 0xc8
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	e02f      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 100)
 8002d24:	4b45      	ldr	r3, [pc, #276]	; (8002e3c <temper_updown+0x150>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	2b77      	cmp	r3, #119	; 0x77
 8002d2a:	d904      	bls.n	8002d36 <temper_updown+0x4a>
		temper_dnspeed = 400;
 8002d2c:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <temper_updown+0x154>)
 8002d2e:	22c8      	movs	r2, #200	; 0xc8
 8002d30:	0052      	lsls	r2, r2, #1
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e026      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 40)
 8002d36:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <temper_updown+0x150>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	2b3b      	cmp	r3, #59	; 0x3b
 8002d3c:	d904      	bls.n	8002d48 <temper_updown+0x5c>
		temper_dnspeed = 700;
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <temper_updown+0x154>)
 8002d40:	22af      	movs	r2, #175	; 0xaf
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e01d      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 20)
 8002d48:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <temper_updown+0x150>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b27      	cmp	r3, #39	; 0x27
 8002d4e:	d903      	bls.n	8002d58 <temper_updown+0x6c>
		temper_dnspeed = 1100;
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <temper_updown+0x154>)
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <temper_updown+0x15c>)
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	e015      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 15)
 8002d58:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <temper_updown+0x150>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	2b22      	cmp	r3, #34	; 0x22
 8002d5e:	d904      	bls.n	8002d6a <temper_updown+0x7e>
		temper_dnspeed = 1600;
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <temper_updown+0x154>)
 8002d62:	22c8      	movs	r2, #200	; 0xc8
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e00c      	b.n	8002d84 <temper_updown+0x98>
	else if ((temper - B_TEMP) >= 10)
 8002d6a:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <temper_updown+0x150>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	2b1d      	cmp	r3, #29
 8002d70:	d903      	bls.n	8002d7a <temper_updown+0x8e>
		temper_dnspeed = 2200;
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <temper_updown+0x154>)
 8002d74:	4a35      	ldr	r2, [pc, #212]	; (8002e4c <temper_updown+0x160>)
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	e004      	b.n	8002d84 <temper_updown+0x98>
	else
		dn_count = HAL_GetTick();
 8002d7a:	f7fd fe25 	bl	80009c8 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <temper_updown+0x164>)
 8002d82:	601a      	str	r2, [r3, #0]

	if (fire == 0)
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <temper_updown+0x168>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <temper_updown+0xac>
		up_count = HAL_GetTick();
 8002d8c:	f7fd fe1c 	bl	80009c8 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <temper_updown+0x16c>)
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e012      	b.n	8002dbe <temper_updown+0xd2>
	else {
		temper_upspeed = (1000 - (fire * 100));
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <temper_updown+0x168>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	1c1a      	adds	r2, r3, #0
 8002da0:	0252      	lsls	r2, r2, #9
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	18d2      	adds	r2, r2, r3
 8002da8:	00d2      	lsls	r2, r2, #3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	22fa      	movs	r2, #250	; 0xfa
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4694      	mov	ip, r2
 8002db6:	4463      	add	r3, ip
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <temper_updown+0x170>)
 8002dbc:	801a      	strh	r2, [r3, #0]
	}

	if (HAL_GetTick() - dn_count >= temper_dnspeed) {
 8002dbe:	f7fd fe03 	bl	80009c8 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <temper_updown+0x164>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <temper_updown+0x154>)
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d30a      	bcc.n	8002de8 <temper_updown+0xfc>
		temper--;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <temper_updown+0x150>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <temper_updown+0x150>)
 8002ddc:	801a      	strh	r2, [r3, #0]
		dn_count = HAL_GetTick();
 8002dde:	f7fd fdf3 	bl	80009c8 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <temper_updown+0x164>)
 8002de6:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - up_count >= temper_upspeed) {
 8002de8:	f7fd fdee 	bl	80009c8 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <temper_updown+0x16c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <temper_updown+0x170>)
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d30a      	bcc.n	8002e12 <temper_updown+0x126>
		temper++;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <temper_updown+0x150>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <temper_updown+0x150>)
 8002e06:	801a      	strh	r2, [r3, #0]
		up_count = HAL_GetTick();
 8002e08:	f7fd fdde 	bl	80009c8 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <temper_updown+0x16c>)
 8002e10:	601a      	str	r2, [r3, #0]
	}

	if (temper > 999)
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <temper_updown+0x150>)
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	23fa      	movs	r3, #250	; 0xfa
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d303      	bcc.n	8002e26 <temper_updown+0x13a>
		temper = 999;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <temper_updown+0x150>)
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <temper_updown+0x174>)
 8002e22:	801a      	strh	r2, [r3, #0]
	else if (temper < 20)
		temper = 20;

}
 8002e24:	e006      	b.n	8002e34 <temper_updown+0x148>
	else if (temper < 20)
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <temper_updown+0x150>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	2b13      	cmp	r3, #19
 8002e2c:	d802      	bhi.n	8002e34 <temper_updown+0x148>
		temper = 20;
 8002e2e:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <temper_updown+0x150>)
 8002e30:	2214      	movs	r2, #20
 8002e32:	801a      	strh	r2, [r3, #0]
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	20000008 	.word	0x20000008
 8002e44:	00000b54 	.word	0x00000b54
 8002e48:	0000044c 	.word	0x0000044c
 8002e4c:	00000898 	.word	0x00000898
 8002e50:	20000140 	.word	0x20000140
 8002e54:	200000ad 	.word	0x200000ad
 8002e58:	20000150 	.word	0x20000150
 8002e5c:	20000006 	.word	0x20000006
 8002e60:	000003e7 	.word	0x000003e7

08002e64 <buzz_3sound>:

void buzz_3sound(uint8_t *b_flag) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	if (*b_flag) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d100      	bne.n	8002e76 <buzz_3sound+0x12>
 8002e74:	e086      	b.n	8002f84 <buzz_3sound+0x120>
		if (HAL_GetTick() - b_count <= 200)
 8002e76:	f7fd fda7 	bl	80009c8 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <buzz_3sound+0x128>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2bc8      	cmp	r3, #200	; 0xc8
 8002e84:	d809      	bhi.n	8002e9a <buzz_3sound+0x36>
			BUZZ_ON
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	23a0      	movs	r3, #160	; 0xa0
 8002e8e:	05db      	lsls	r3, r3, #23
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0209      	lsls	r1, r1, #8
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
			BUZZ_OFF
			b_count = HAL_GetTick();
			*b_flag = 0;
		}
	}
}
 8002e98:	e074      	b.n	8002f84 <buzz_3sound+0x120>
		else if (HAL_GetTick() - b_count <= 400)
 8002e9a:	f7fd fd95 	bl	80009c8 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <buzz_3sound+0x128>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1ad2      	subs	r2, r2, r3
 8002ea6:	23c8      	movs	r3, #200	; 0xc8
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d809      	bhi.n	8002ec2 <buzz_3sound+0x5e>
			BUZZ_OFF
 8002eae:	23a0      	movs	r3, #160	; 0xa0
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	23a0      	movs	r3, #160	; 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0209      	lsls	r1, r1, #8
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec0:	e060      	b.n	8002f84 <buzz_3sound+0x120>
		else if (HAL_GetTick() - b_count <= 600)
 8002ec2:	f7fd fd81 	bl	80009c8 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <buzz_3sound+0x128>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	2396      	movs	r3, #150	; 0x96
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d809      	bhi.n	8002eea <buzz_3sound+0x86>
			BUZZ_ON
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	05db      	lsls	r3, r3, #23
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0209      	lsls	r1, r1, #8
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]
}
 8002ee8:	e04c      	b.n	8002f84 <buzz_3sound+0x120>
		else if (HAL_GetTick() - b_count <= 800)
 8002eea:	f7fd fd6d 	bl	80009c8 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <buzz_3sound+0x128>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	23c8      	movs	r3, #200	; 0xc8
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d809      	bhi.n	8002f12 <buzz_3sound+0xae>
			BUZZ_OFF
 8002efe:	23a0      	movs	r3, #160	; 0xa0
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f04:	23a0      	movs	r3, #160	; 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0209      	lsls	r1, r1, #8
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f10:	e038      	b.n	8002f84 <buzz_3sound+0x120>
		else if (HAL_GetTick() - b_count <= 1000)
 8002f12:	f7fd fd59 	bl	80009c8 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <buzz_3sound+0x128>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1ad2      	subs	r2, r2, r3
 8002f1e:	23fa      	movs	r3, #250	; 0xfa
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d809      	bhi.n	8002f3a <buzz_3sound+0xd6>
			BUZZ_ON
 8002f26:	23a0      	movs	r3, #160	; 0xa0
 8002f28:	05db      	lsls	r3, r3, #23
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	23a0      	movs	r3, #160	; 0xa0
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0209      	lsls	r1, r1, #8
 8002f34:	430a      	orrs	r2, r1
 8002f36:	619a      	str	r2, [r3, #24]
}
 8002f38:	e024      	b.n	8002f84 <buzz_3sound+0x120>
		else if (HAL_GetTick() - b_count <= 1200)
 8002f3a:	f7fd fd45 	bl	80009c8 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <buzz_3sound+0x128>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	2396      	movs	r3, #150	; 0x96
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d809      	bhi.n	8002f62 <buzz_3sound+0xfe>
			BUZZ_OFF
 8002f4e:	23a0      	movs	r3, #160	; 0xa0
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f54:	23a0      	movs	r3, #160	; 0xa0
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0209      	lsls	r1, r1, #8
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	e010      	b.n	8002f84 <buzz_3sound+0x120>
			BUZZ_OFF
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	05db      	lsls	r3, r3, #23
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0209      	lsls	r1, r1, #8
 8002f70:	430a      	orrs	r2, r1
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
			b_count = HAL_GetTick();
 8002f74:	f7fd fd28 	bl	80009c8 <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <buzz_3sound+0x128>)
 8002f7c:	601a      	str	r2, [r3, #0]
			*b_flag = 0;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200000ec 	.word	0x200000ec

08002f90 <led_con>:

void led_con(uint8_t led) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	0002      	movs	r2, r0
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
	if (led == 1) {
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d12b      	bne.n	8002ffc <led_con+0x6c>
		LED1_ON
 8002fa4:	23a0      	movs	r3, #160	; 0xa0
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002faa:	23a0      	movs	r3, #160	; 0xa0
 8002fac:	05db      	lsls	r3, r3, #23
 8002fae:	2140      	movs	r1, #64	; 0x40
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
		LED2_OFF
 8002fb4:	23a0      	movs	r3, #160	; 0xa0
 8002fb6:	05db      	lsls	r3, r3, #23
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	23a0      	movs	r3, #160	; 0xa0
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
		LED3_OFF
 8002fc4:	23a0      	movs	r3, #160	; 0xa0
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	23a0      	movs	r3, #160	; 0xa0
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	0049      	lsls	r1, r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
		LED4_OFF
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	23a0      	movs	r3, #160	; 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0089      	lsls	r1, r1, #2
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
		LED5_OFF
 8002fe8:	23a0      	movs	r3, #160	; 0xa0
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	23a0      	movs	r3, #160	; 0xa0
 8002ff0:	05db      	lsls	r3, r3, #23
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	00c9      	lsls	r1, r1, #3
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	619a      	str	r2, [r3, #24]
		LED2_OFF
		LED3_OFF
		LED4_OFF
		LED5_OFF
	}
}
 8002ffa:	e0ea      	b.n	80031d2 <led_con+0x242>
	} else if (led == 2) {
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d12b      	bne.n	800305c <led_con+0xcc>
		LED1_OFF
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	05db      	lsls	r3, r3, #23
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	23a0      	movs	r3, #160	; 0xa0
 800300c:	05db      	lsls	r3, r3, #23
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	430a      	orrs	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
		LED2_ON
 8003014:	23a0      	movs	r3, #160	; 0xa0
 8003016:	05db      	lsls	r3, r3, #23
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	430a      	orrs	r2, r1
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
		LED3_OFF
 8003024:	23a0      	movs	r3, #160	; 0xa0
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	23a0      	movs	r3, #160	; 0xa0
 800302c:	05db      	lsls	r3, r3, #23
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	0049      	lsls	r1, r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	619a      	str	r2, [r3, #24]
		LED4_OFF
 8003036:	23a0      	movs	r3, #160	; 0xa0
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	23a0      	movs	r3, #160	; 0xa0
 800303e:	05db      	lsls	r3, r3, #23
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0089      	lsls	r1, r1, #2
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
		LED5_OFF
 8003048:	23a0      	movs	r3, #160	; 0xa0
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	23a0      	movs	r3, #160	; 0xa0
 8003050:	05db      	lsls	r3, r3, #23
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	00c9      	lsls	r1, r1, #3
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	e0ba      	b.n	80031d2 <led_con+0x242>
	} else if (led == 3) {
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d12b      	bne.n	80030bc <led_con+0x12c>
		LED1_OFF
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	23a0      	movs	r3, #160	; 0xa0
 800306c:	05db      	lsls	r3, r3, #23
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	430a      	orrs	r2, r1
 8003072:	619a      	str	r2, [r3, #24]
		LED2_OFF
 8003074:	23a0      	movs	r3, #160	; 0xa0
 8003076:	05db      	lsls	r3, r3, #23
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	23a0      	movs	r3, #160	; 0xa0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
		LED3_ON
 8003084:	23a0      	movs	r3, #160	; 0xa0
 8003086:	05db      	lsls	r3, r3, #23
 8003088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308a:	23a0      	movs	r3, #160	; 0xa0
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	0049      	lsls	r1, r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
		LED4_OFF
 8003096:	23a0      	movs	r3, #160	; 0xa0
 8003098:	05db      	lsls	r3, r3, #23
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	23a0      	movs	r3, #160	; 0xa0
 800309e:	05db      	lsls	r3, r3, #23
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	0089      	lsls	r1, r1, #2
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
		LED5_OFF
 80030a8:	23a0      	movs	r3, #160	; 0xa0
 80030aa:	05db      	lsls	r3, r3, #23
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	23a0      	movs	r3, #160	; 0xa0
 80030b0:	05db      	lsls	r3, r3, #23
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	00c9      	lsls	r1, r1, #3
 80030b6:	430a      	orrs	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]
}
 80030ba:	e08a      	b.n	80031d2 <led_con+0x242>
	} else if (led == 4) {
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d12b      	bne.n	800311c <led_con+0x18c>
		LED1_OFF
 80030c4:	23a0      	movs	r3, #160	; 0xa0
 80030c6:	05db      	lsls	r3, r3, #23
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	23a0      	movs	r3, #160	; 0xa0
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
		LED2_OFF
 80030d4:	23a0      	movs	r3, #160	; 0xa0
 80030d6:	05db      	lsls	r3, r3, #23
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	23a0      	movs	r3, #160	; 0xa0
 80030dc:	05db      	lsls	r3, r3, #23
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
		LED3_OFF
 80030e4:	23a0      	movs	r3, #160	; 0xa0
 80030e6:	05db      	lsls	r3, r3, #23
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	23a0      	movs	r3, #160	; 0xa0
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	0049      	lsls	r1, r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	619a      	str	r2, [r3, #24]
		LED4_ON
 80030f6:	23a0      	movs	r3, #160	; 0xa0
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fc:	23a0      	movs	r3, #160	; 0xa0
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0089      	lsls	r1, r1, #2
 8003104:	430a      	orrs	r2, r1
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
		LED5_OFF
 8003108:	23a0      	movs	r3, #160	; 0xa0
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	23a0      	movs	r3, #160	; 0xa0
 8003110:	05db      	lsls	r3, r3, #23
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	00c9      	lsls	r1, r1, #3
 8003116:	430a      	orrs	r2, r1
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	e05a      	b.n	80031d2 <led_con+0x242>
	} else if (led == 5) {
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d12b      	bne.n	800317c <led_con+0x1ec>
		LED1_OFF
 8003124:	23a0      	movs	r3, #160	; 0xa0
 8003126:	05db      	lsls	r3, r3, #23
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	23a0      	movs	r3, #160	; 0xa0
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
		LED2_OFF
 8003134:	23a0      	movs	r3, #160	; 0xa0
 8003136:	05db      	lsls	r3, r3, #23
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	23a0      	movs	r3, #160	; 0xa0
 800313c:	05db      	lsls	r3, r3, #23
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
		LED3_OFF
 8003144:	23a0      	movs	r3, #160	; 0xa0
 8003146:	05db      	lsls	r3, r3, #23
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	23a0      	movs	r3, #160	; 0xa0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0049      	lsls	r1, r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	619a      	str	r2, [r3, #24]
		LED4_OFF
 8003156:	23a0      	movs	r3, #160	; 0xa0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	23a0      	movs	r3, #160	; 0xa0
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0089      	lsls	r1, r1, #2
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]
		LED5_ON
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	05db      	lsls	r3, r3, #23
 800316c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316e:	23a0      	movs	r3, #160	; 0xa0
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	00c9      	lsls	r1, r1, #3
 8003176:	430a      	orrs	r2, r1
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317a:	e02a      	b.n	80031d2 <led_con+0x242>
		LED1_OFF
 800317c:	23a0      	movs	r3, #160	; 0xa0
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	23a0      	movs	r3, #160	; 0xa0
 8003184:	05db      	lsls	r3, r3, #23
 8003186:	2140      	movs	r1, #64	; 0x40
 8003188:	430a      	orrs	r2, r1
 800318a:	619a      	str	r2, [r3, #24]
		LED2_OFF
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	23a0      	movs	r3, #160	; 0xa0
 8003194:	05db      	lsls	r3, r3, #23
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	430a      	orrs	r2, r1
 800319a:	619a      	str	r2, [r3, #24]
		LED3_OFF
 800319c:	23a0      	movs	r3, #160	; 0xa0
 800319e:	05db      	lsls	r3, r3, #23
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	23a0      	movs	r3, #160	; 0xa0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	0049      	lsls	r1, r1, #1
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
		LED4_OFF
 80031ae:	23a0      	movs	r3, #160	; 0xa0
 80031b0:	05db      	lsls	r3, r3, #23
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	23a0      	movs	r3, #160	; 0xa0
 80031b6:	05db      	lsls	r3, r3, #23
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0089      	lsls	r1, r1, #2
 80031bc:	430a      	orrs	r2, r1
 80031be:	619a      	str	r2, [r3, #24]
		LED5_OFF
 80031c0:	23a0      	movs	r3, #160	; 0xa0
 80031c2:	05db      	lsls	r3, r3, #23
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	23a0      	movs	r3, #160	; 0xa0
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	00c9      	lsls	r1, r1, #3
 80031ce:	430a      	orrs	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <auto_adj_mode>:

void auto_adj_mode() {
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	vr = read_adc(VR);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f7ff fae7 	bl	80027b4 <read_adc>
 80031e6:	0003      	movs	r3, r0
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <auto_adj_mode+0xc0>)
 80031ec:	801a      	strh	r2, [r3, #0]

	if (vr <= 600) {
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <auto_adj_mode+0xc0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	5e9a      	ldrsh	r2, [r3, r2]
 80031f4:	2396      	movs	r3, #150	; 0x96
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dc06      	bgt.n	800320a <auto_adj_mode+0x2e>
		auto_temper = 80;
 80031fc:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <auto_adj_mode+0xc4>)
 80031fe:	2250      	movs	r2, #80	; 0x50
 8003200:	801a      	strh	r2, [r3, #0]
		led_con(1);
 8003202:	2001      	movs	r0, #1
 8003204:	f7ff fec4 	bl	8002f90 <led_con>
 8003208:	e02d      	b.n	8003266 <auto_adj_mode+0x8a>
	} else if (vr <= 1600) {
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <auto_adj_mode+0xc0>)
 800320c:	2200      	movs	r2, #0
 800320e:	5e9a      	ldrsh	r2, [r3, r2]
 8003210:	23c8      	movs	r3, #200	; 0xc8
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	429a      	cmp	r2, r3
 8003216:	dc06      	bgt.n	8003226 <auto_adj_mode+0x4a>
		auto_temper = 100;
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <auto_adj_mode+0xc4>)
 800321a:	2264      	movs	r2, #100	; 0x64
 800321c:	801a      	strh	r2, [r3, #0]
		led_con(2);
 800321e:	2002      	movs	r0, #2
 8003220:	f7ff feb6 	bl	8002f90 <led_con>
 8003224:	e01f      	b.n	8003266 <auto_adj_mode+0x8a>
	} else if (vr <= 2600) {
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <auto_adj_mode+0xc0>)
 8003228:	2200      	movs	r2, #0
 800322a:	5e9b      	ldrsh	r3, [r3, r2]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <auto_adj_mode+0xc8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	dc06      	bgt.n	8003240 <auto_adj_mode+0x64>
		auto_temper = 140;
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <auto_adj_mode+0xc4>)
 8003234:	228c      	movs	r2, #140	; 0x8c
 8003236:	801a      	strh	r2, [r3, #0]
		led_con(3);
 8003238:	2003      	movs	r0, #3
 800323a:	f7ff fea9 	bl	8002f90 <led_con>
 800323e:	e012      	b.n	8003266 <auto_adj_mode+0x8a>
	} else if (vr <= 3500) {
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <auto_adj_mode+0xc0>)
 8003242:	2200      	movs	r2, #0
 8003244:	5e9b      	ldrsh	r3, [r3, r2]
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <auto_adj_mode+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	dc06      	bgt.n	800325a <auto_adj_mode+0x7e>
		auto_temper = 180;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <auto_adj_mode+0xc4>)
 800324e:	22b4      	movs	r2, #180	; 0xb4
 8003250:	801a      	strh	r2, [r3, #0]
		led_con(4);
 8003252:	2004      	movs	r0, #4
 8003254:	f7ff fe9c 	bl	8002f90 <led_con>
 8003258:	e005      	b.n	8003266 <auto_adj_mode+0x8a>
	} else {
		auto_temper = 220;
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <auto_adj_mode+0xc4>)
 800325c:	22dc      	movs	r2, #220	; 0xdc
 800325e:	801a      	strh	r2, [r3, #0]
		led_con(5);
 8003260:	2005      	movs	r0, #5
 8003262:	f7ff fe95 	bl	8002f90 <led_con>
	}

	if (auto_temper - temper > 1)
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <auto_adj_mode+0xc4>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	001a      	movs	r2, r3
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <auto_adj_mode+0xd0>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	dd03      	ble.n	800327e <auto_adj_mode+0xa2>
		fire = 9;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <auto_adj_mode+0xd4>)
 8003278:	2209      	movs	r2, #9
 800327a:	701a      	strb	r2, [r3, #0]
	else if (auto_temper - temper < -1)
		fire = 1;
}
 800327c:	e00a      	b.n	8003294 <auto_adj_mode+0xb8>
	else if (auto_temper - temper < -1)
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <auto_adj_mode+0xc4>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	001a      	movs	r2, r3
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <auto_adj_mode+0xd0>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	3301      	adds	r3, #1
 800328c:	da02      	bge.n	8003294 <auto_adj_mode+0xb8>
		fire = 1;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <auto_adj_mode+0xd4>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	2000014c 	.word	0x2000014c
 80032a0:	20000004 	.word	0x20000004
 80032a4:	00000a28 	.word	0x00000a28
 80032a8:	00000dac 	.word	0x00000dac
 80032ac:	20000000 	.word	0x20000000
 80032b0:	200000ad 	.word	0x200000ad

080032b4 <alarm_set>:

void alarm_set() {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
	if (!SW4 || !SW5) {
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <alarm_set+0x84>)
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	01db      	lsls	r3, r3, #7
 80032c0:	4013      	ands	r3, r2
 80032c2:	d005      	beq.n	80032d0 <alarm_set+0x1c>
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <alarm_set+0x84>)
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	4013      	ands	r3, r2
 80032ce:	d12c      	bne.n	800332a <alarm_set+0x76>
		if (!sw_flag) {
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <alarm_set+0x88>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d12c      	bne.n	8003332 <alarm_set+0x7e>
			if (!SW4)
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <alarm_set+0x84>)
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	01db      	lsls	r3, r3, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	d106      	bne.n	80032f2 <alarm_set+0x3e>
				a_temper -= 20;
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <alarm_set+0x8c>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	3b14      	subs	r3, #20
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <alarm_set+0x8c>)
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e005      	b.n	80032fe <alarm_set+0x4a>
			else
				a_temper += 20;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <alarm_set+0x8c>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <alarm_set+0x8c>)
 80032fc:	801a      	strh	r2, [r3, #0]

			if (a_temper > 280)
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <alarm_set+0x8c>)
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	238c      	movs	r3, #140	; 0x8c
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	429a      	cmp	r2, r3
 8003308:	d904      	bls.n	8003314 <alarm_set+0x60>
				a_temper = 280;
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <alarm_set+0x8c>)
 800330c:	228c      	movs	r2, #140	; 0x8c
 800330e:	0052      	lsls	r2, r2, #1
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e006      	b.n	8003322 <alarm_set+0x6e>
			else if (a_temper < 20)
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <alarm_set+0x8c>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2b13      	cmp	r3, #19
 800331a:	d802      	bhi.n	8003322 <alarm_set+0x6e>
				a_temper = 20;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <alarm_set+0x8c>)
 800331e:	2214      	movs	r2, #20
 8003320:	801a      	strh	r2, [r3, #0]

			sw_flag = 1;
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <alarm_set+0x88>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
		if (!sw_flag) {
 8003328:	e003      	b.n	8003332 <alarm_set+0x7e>
		}
	} else
		sw_flag = 0;
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <alarm_set+0x88>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	50000800 	.word	0x50000800
 800333c:	200000af 	.word	0x200000af
 8003340:	20000002 	.word	0x20000002

08003344 <alarm_buzz>:

void alarm_buzz() {
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
	if ((a_temper != 20) && (a_temper <= temper)) {
 8003348:	4b40      	ldr	r3, [pc, #256]	; (800344c <alarm_buzz+0x108>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	2b14      	cmp	r3, #20
 800334e:	d06c      	beq.n	800342a <alarm_buzz+0xe6>
 8003350:	4b3e      	ldr	r3, [pc, #248]	; (800344c <alarm_buzz+0x108>)
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	4b3e      	ldr	r3, [pc, #248]	; (8003450 <alarm_buzz+0x10c>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d866      	bhi.n	800342a <alarm_buzz+0xe6>
		if (alarm_flag == 0) {
 800335c:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <alarm_buzz+0x110>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <alarm_buzz+0x30>
			alarm_flag = 1;
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <alarm_buzz+0x110>)
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
			a_count = HAL_GetTick();
 800336a:	f7fd fb2d 	bl	80009c8 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <alarm_buzz+0x114>)
 8003372:	601a      	str	r2, [r3, #0]
		}

		if (HAL_GetTick() - a_count <= 100)
 8003374:	f7fd fb28 	bl	80009c8 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <alarm_buzz+0x114>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d809      	bhi.n	8003398 <alarm_buzz+0x54>
			BUZZ_ON
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	23a0      	movs	r3, #160	; 0xa0
 800338c:	05db      	lsls	r3, r3, #23
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0209      	lsls	r1, r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
		if (HAL_GetTick() - a_count <= 100)
 8003396:	e055      	b.n	8003444 <alarm_buzz+0x100>
		else if (HAL_GetTick() - a_count <= 200)
 8003398:	f7fd fb16 	bl	80009c8 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <alarm_buzz+0x114>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2bc8      	cmp	r3, #200	; 0xc8
 80033a6:	d809      	bhi.n	80033bc <alarm_buzz+0x78>
			BUZZ_OFF
 80033a8:	23a0      	movs	r3, #160	; 0xa0
 80033aa:	05db      	lsls	r3, r3, #23
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0209      	lsls	r1, r1, #8
 80033b6:	430a      	orrs	r2, r1
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
		if (HAL_GetTick() - a_count <= 100)
 80033ba:	e043      	b.n	8003444 <alarm_buzz+0x100>
		else if (HAL_GetTick() - a_count <= 300)
 80033bc:	f7fd fb04 	bl	80009c8 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <alarm_buzz+0x114>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	2396      	movs	r3, #150	; 0x96
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d809      	bhi.n	80033e4 <alarm_buzz+0xa0>
			BUZZ_ON
 80033d0:	23a0      	movs	r3, #160	; 0xa0
 80033d2:	05db      	lsls	r3, r3, #23
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	23a0      	movs	r3, #160	; 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	0209      	lsls	r1, r1, #8
 80033de:	430a      	orrs	r2, r1
 80033e0:	619a      	str	r2, [r3, #24]
		if (HAL_GetTick() - a_count <= 100)
 80033e2:	e02f      	b.n	8003444 <alarm_buzz+0x100>
		else if (HAL_GetTick() - a_count <= 1000)
 80033e4:	f7fd faf0 	bl	80009c8 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <alarm_buzz+0x114>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	23fa      	movs	r3, #250	; 0xfa
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d809      	bhi.n	800340c <alarm_buzz+0xc8>
			BUZZ_OFF
 80033f8:	23a0      	movs	r3, #160	; 0xa0
 80033fa:	05db      	lsls	r3, r3, #23
 80033fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fe:	23a0      	movs	r3, #160	; 0xa0
 8003400:	05db      	lsls	r3, r3, #23
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	0209      	lsls	r1, r1, #8
 8003406:	430a      	orrs	r2, r1
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
		if (HAL_GetTick() - a_count <= 100)
 800340a:	e01b      	b.n	8003444 <alarm_buzz+0x100>
		else {
			BUZZ_OFF
 800340c:	23a0      	movs	r3, #160	; 0xa0
 800340e:	05db      	lsls	r3, r3, #23
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	23a0      	movs	r3, #160	; 0xa0
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	0209      	lsls	r1, r1, #8
 800341a:	430a      	orrs	r2, r1
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
			a_count = HAL_GetTick();
 800341e:	f7fd fad3 	bl	80009c8 <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <alarm_buzz+0x114>)
 8003426:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - a_count <= 100)
 8003428:	e00c      	b.n	8003444 <alarm_buzz+0x100>
		}
	} else {
		BUZZ_OFF
 800342a:	23a0      	movs	r3, #160	; 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003430:	23a0      	movs	r3, #160	; 0xa0
 8003432:	05db      	lsls	r3, r3, #23
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0209      	lsls	r1, r1, #8
 8003438:	430a      	orrs	r2, r1
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
		alarm_flag = 0;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <alarm_buzz+0x110>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
	}
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000002 	.word	0x20000002
 8003450:	20000000 	.word	0x20000000
 8003454:	200000b0 	.word	0x200000b0
 8003458:	20000148 	.word	0x20000148

0800345c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uint8_t b_flag = 0, sw3_flag = 0;
 8003462:	1dbb      	adds	r3, r7, #6
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800346e:	f7fd fa55 	bl	800091c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003472:	f000 f923 	bl	80036bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003476:	f000 f9ef 	bl	8003858 <MX_GPIO_Init>
	MX_ADC_Init();
 800347a:	f000 f97b 	bl	8003774 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	LcdInit();
 800347e:	f7ff f889 	bl	8002594 <LcdInit>

	lcd_cgram(1, 0);
 8003482:	2100      	movs	r1, #0
 8003484:	2001      	movs	r0, #1
 8003486:	f7ff f953 	bl	8002730 <lcd_cgram>

	led_ring_update(led_ring_data);
 800348a:	4b7d      	ldr	r3, [pc, #500]	; (8003680 <main+0x224>)
 800348c:	0018      	movs	r0, r3
 800348e:	f7fe ff1f 	bl	80022d0 <led_ring_update>

	lcd_puts("\fSmart Gas Range\n              01");
 8003492:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <main+0x228>)
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff f925 	bl	80026e4 <lcd_puts>
	HAL_Delay(2000);
 800349a:	23fa      	movs	r3, #250	; 0xfa
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fd fa9c 	bl	80009dc <HAL_Delay>

	r_count = up_count = dn_count = HAL_GetTick();
 80034a4:	f7fd fa90 	bl	80009c8 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	4b77      	ldr	r3, [pc, #476]	; (8003688 <main+0x22c>)
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <main+0x22c>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <main+0x230>)
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	4b75      	ldr	r3, [pc, #468]	; (800368c <main+0x230>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <main+0x234>)
 80034bc:	601a      	str	r2, [r3, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (SW1 == 0)
 80034be:	23a0      	movs	r3, #160	; 0xa0
 80034c0:	05db      	lsls	r3, r3, #23
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2204      	movs	r2, #4
 80034c6:	4013      	ands	r3, r2
 80034c8:	d103      	bne.n	80034d2 <main+0x76>
			power = 1;
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <main+0x238>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e002      	b.n	80034d8 <main+0x7c>
		else
			power = 0;
 80034d2:	4b70      	ldr	r3, [pc, #448]	; (8003694 <main+0x238>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]

		if (temper > 300) {
 80034d8:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <main+0x23c>)
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	2396      	movs	r3, #150	; 0x96
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d90a      	bls.n	80034fa <main+0x9e>
			over_heat = 1;
 80034e4:	4b6d      	ldr	r3, [pc, #436]	; (800369c <main+0x240>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
			b_flag = 1;
 80034ea:	1dbb      	adds	r3, r7, #6
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
			b_count = HAL_GetTick();
 80034f0:	f7fd fa6a 	bl	80009c8 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <main+0x244>)
 80034f8:	601a      	str	r2, [r3, #0]
		}

		if (!SW2)
 80034fa:	23a0      	movs	r3, #160	; 0xa0
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2210      	movs	r2, #16
 8003502:	4013      	ands	r3, r2
 8003504:	d102      	bne.n	800350c <main+0xb0>
			safe_lock = 1;
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <main+0x248>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]

		if (!SW3) {
 800350c:	23a0      	movs	r3, #160	; 0xa0
 800350e:	05db      	lsls	r3, r3, #23
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2208      	movs	r2, #8
 8003514:	4013      	ands	r3, r2
 8003516:	d112      	bne.n	800353e <main+0xe2>
			if (!sw3_flag) {
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <main+0xda>
				if (!auto_adj)
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <main+0x24c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <main+0xd4>
					auto_adj = 1;
 8003528:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <main+0x24c>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e002      	b.n	8003536 <main+0xda>
				else
					auto_adj = 0;
 8003530:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <main+0x24c>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
			}
			sw3_flag = 1;
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e002      	b.n	8003544 <main+0xe8>
		} else
			sw3_flag = 0;
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]

		status_cal();
 8003544:	f7ff f96e 	bl	8002824 <status_cal>

		alarm_set();
 8003548:	f7ff feb4 	bl	80032b4 <alarm_set>

		if (power && status != OVER_HEAT && status != SAFE_LOCK)
 800354c:	4b51      	ldr	r3, [pc, #324]	; (8003694 <main+0x238>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <main+0x10c>
 8003554:	4b55      	ldr	r3, [pc, #340]	; (80036ac <main+0x250>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d005      	beq.n	8003568 <main+0x10c>
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <main+0x250>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d001      	beq.n	8003568 <main+0x10c>
			alarm_buzz();
 8003564:	f7ff feee 	bl	8003344 <alarm_buzz>

		if (status == OFF)
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <main+0x250>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <main+0x11c>
			fire = 0;
 8003570:	4b4f      	ldr	r3, [pc, #316]	; (80036b0 <main+0x254>)
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e006      	b.n	8003586 <main+0x12a>
		else if (status == ON_NONE)
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <main+0x250>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d102      	bne.n	8003586 <main+0x12a>
			fire = 1;
 8003580:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <main+0x254>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]

		if (status == OVER_HEAT) {
 8003586:	4b49      	ldr	r3, [pc, #292]	; (80036ac <main+0x250>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d112      	bne.n	80035b4 <main+0x158>
			fire = 0;
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <main+0x254>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
			buzz_3sound(&b_flag);
 8003594:	1dbb      	adds	r3, r7, #6
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fc64 	bl	8002e64 <buzz_3sound>
			if ((!power) && temper < 150)
 800359c:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <main+0x238>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11d      	bne.n	80035e0 <main+0x184>
 80035a4:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <main+0x23c>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	2b95      	cmp	r3, #149	; 0x95
 80035aa:	d819      	bhi.n	80035e0 <main+0x184>
				over_heat = 0;
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <main+0x240>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e015      	b.n	80035e0 <main+0x184>
		}

		else if (status == SAFE_LOCK) {
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <main+0x250>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d111      	bne.n	80035e0 <main+0x184>
			fire = 0;
 80035bc:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <main+0x254>)
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
			if (SW2 && SW1)
 80035c2:	23a0      	movs	r3, #160	; 0xa0
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	d008      	beq.n	80035e0 <main+0x184>
 80035ce:	23a0      	movs	r3, #160	; 0xa0
 80035d0:	05db      	lsls	r3, r3, #23
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d002      	beq.n	80035e0 <main+0x184>
				safe_lock = 0;
 80035da:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <main+0x248>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
		}

		if (status == ON) {
 80035e0:	4b32      	ldr	r3, [pc, #200]	; (80036ac <main+0x250>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d13a      	bne.n	800365e <main+0x202>
			vr = read_adc(VR);
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7ff f8e3 	bl	80027b4 <read_adc>
 80035ee:	0003      	movs	r3, r0
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <main+0x258>)
 80035f4:	801a      	strh	r2, [r3, #0]
			vr -= 65;
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <main+0x258>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	5e9b      	ldrsh	r3, [r3, r2]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b41      	subs	r3, #65	; 0x41
 8003600:	b29b      	uxth	r3, r3
 8003602:	b21a      	sxth	r2, r3
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <main+0x258>)
 8003606:	801a      	strh	r2, [r3, #0]
			if (vr < 0)
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <main+0x258>)
 800360a:	2200      	movs	r2, #0
 800360c:	5e9b      	ldrsh	r3, [r3, r2]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da02      	bge.n	8003618 <main+0x1bc>
				vr = 0;
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <main+0x258>)
 8003614:	2200      	movs	r2, #0
 8003616:	801a      	strh	r2, [r3, #0]
			vr /= 503.75;
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <main+0x258>)
 800361a:	2200      	movs	r2, #0
 800361c:	5e9b      	ldrsh	r3, [r3, r2]
 800361e:	0018      	movs	r0, r3
 8003620:	f7fd f92e 	bl	8000880 <__aeabi_i2d>
 8003624:	2200      	movs	r2, #0
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <main+0x25c>)
 8003628:	f7fc fe0c 	bl	8000244 <__aeabi_ddiv>
 800362c:	0002      	movs	r2, r0
 800362e:	000b      	movs	r3, r1
 8003630:	0010      	movs	r0, r2
 8003632:	0019      	movs	r1, r3
 8003634:	f7fd f8ee 	bl	8000814 <__aeabi_d2iz>
 8003638:	0003      	movs	r3, r0
 800363a:	b21a      	sxth	r2, r3
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <main+0x258>)
 800363e:	801a      	strh	r2, [r3, #0]
			vr += 1;
 8003640:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <main+0x258>)
 8003642:	2200      	movs	r2, #0
 8003644:	5e9b      	ldrsh	r3, [r3, r2]
 8003646:	b29b      	uxth	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	b21a      	sxth	r2, r3
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <main+0x258>)
 8003650:	801a      	strh	r2, [r3, #0]

			fire = vr;
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <main+0x258>)
 8003654:	2200      	movs	r2, #0
 8003656:	5e9b      	ldrsh	r3, [r3, r2]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <main+0x254>)
 800365c:	701a      	strb	r2, [r3, #0]
		}

		if (status == AUTO_ADJ) {
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <main+0x250>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d102      	bne.n	800366c <main+0x210>
			auto_adj_mode();
 8003666:	f7ff fdb9 	bl	80031dc <auto_adj_mode>
 800366a:	e002      	b.n	8003672 <main+0x216>
		} else
			led_con(0);
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff fc8f 	bl	8002f90 <led_con>

		led_ring();
 8003672:	f7ff f999 	bl	80029a8 <led_ring>

		temper_updown();
 8003676:	f7ff fb39 	bl	8002cec <temper_updown>

		lcd_dis();
 800367a:	f7ff f92d 	bl	80028d8 <lcd_dis>
		if (SW1 == 0)
 800367e:	e71e      	b.n	80034be <main+0x62>
 8003680:	20000158 	.word	0x20000158
 8003684:	08004504 	.word	0x08004504
 8003688:	20000140 	.word	0x20000140
 800368c:	20000150 	.word	0x20000150
 8003690:	20000154 	.word	0x20000154
 8003694:	200000a9 	.word	0x200000a9
 8003698:	20000000 	.word	0x20000000
 800369c:	200000ac 	.word	0x200000ac
 80036a0:	200000ec 	.word	0x200000ec
 80036a4:	200000ab 	.word	0x200000ab
 80036a8:	200000aa 	.word	0x200000aa
 80036ac:	200000a8 	.word	0x200000a8
 80036b0:	200000ad 	.word	0x200000ad
 80036b4:	2000014c 	.word	0x2000014c
 80036b8:	407f7c00 	.word	0x407f7c00

080036bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b095      	sub	sp, #84	; 0x54
 80036c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80036c2:	2418      	movs	r4, #24
 80036c4:	193b      	adds	r3, r7, r4
 80036c6:	0018      	movs	r0, r3
 80036c8:	2338      	movs	r3, #56	; 0x38
 80036ca:	001a      	movs	r2, r3
 80036cc:	2100      	movs	r1, #0
 80036ce:	f000 fa9d 	bl	8003c0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	0018      	movs	r0, r3
 80036d6:	2314      	movs	r3, #20
 80036d8:	001a      	movs	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	f000 fa96 	bl	8003c0c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <SystemClock_Config+0xb0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <SystemClock_Config+0xb4>)
 80036e6:	401a      	ands	r2, r3
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <SystemClock_Config+0xb0>)
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0109      	lsls	r1, r1, #4
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036f2:	0021      	movs	r1, r4
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	2202      	movs	r2, #2
 80036f8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	2201      	movs	r2, #1
 80036fe:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2210      	movs	r2, #16
 8003704:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2202      	movs	r2, #2
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2200      	movs	r2, #0
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	02d2      	lsls	r2, r2, #11
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	03d2      	lsls	r2, r2, #15
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003722:	187b      	adds	r3, r7, r1
 8003724:	0018      	movs	r0, r3
 8003726:	f7fe f831 	bl	800178c <HAL_RCC_OscConfig>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <SystemClock_Config+0x76>
		Error_Handler();
 800372e:	f000 f93f 	bl	80039b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	220f      	movs	r2, #15
 8003736:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2203      	movs	r2, #3
 800373c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	2101      	movs	r1, #1
 8003754:	0018      	movs	r0, r3
 8003756:	f7fe fbd9 	bl	8001f0c <HAL_RCC_ClockConfig>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <SystemClock_Config+0xa6>
		Error_Handler();
 800375e:	f000 f927 	bl	80039b0 <Error_Handler>
	}
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b015      	add	sp, #84	; 0x54
 8003768:	bd90      	pop	{r4, r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	40007000 	.word	0x40007000
 8003770:	ffffe7ff 	.word	0xffffe7ff

08003774 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800377a:	003b      	movs	r3, r7
 800377c:	0018      	movs	r0, r3
 800377e:	2308      	movs	r3, #8
 8003780:	001a      	movs	r2, r3
 8003782:	2100      	movs	r1, #0
 8003784:	f000 fa42 	bl	8003c0c <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <MX_ADC_Init+0xd8>)
 800378a:	4a31      	ldr	r2, [pc, #196]	; (8003850 <MX_ADC_Init+0xdc>)
 800378c:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 800378e:	4b2f      	ldr	r3, [pc, #188]	; (800384c <MX_ADC_Init+0xd8>)
 8003790:	2200      	movs	r2, #0
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <MX_ADC_Init+0xd8>)
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	05d2      	lsls	r2, r2, #23
 800379a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <MX_ADC_Init+0xd8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <MX_ADC_Init+0xd8>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <MX_ADC_Init+0xd8>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <MX_ADC_Init+0xd8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <MX_ADC_Init+0xd8>)
 80037b6:	2220      	movs	r2, #32
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <MX_ADC_Init+0xd8>)
 80037be:	2221      	movs	r2, #33	; 0x21
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <MX_ADC_Init+0xd8>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <MX_ADC_Init+0xd8>)
 80037cc:	22c2      	movs	r2, #194	; 0xc2
 80037ce:	32ff      	adds	r2, #255	; 0xff
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <MX_ADC_Init+0xd8>)
 80037d4:	222c      	movs	r2, #44	; 0x2c
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <MX_ADC_Init+0xd8>)
 80037dc:	2204      	movs	r2, #4
 80037de:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <MX_ADC_Init+0xd8>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <MX_ADC_Init+0xd8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <MX_ADC_Init+0xd8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <MX_ADC_Init+0xd8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <MX_ADC_Init+0xd8>)
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fd f90c 	bl	8000a18 <HAL_ADC_Init>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d001      	beq.n	8003808 <MX_ADC_Init+0x94>
		Error_Handler();
 8003804:	f000 f8d4 	bl	80039b0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003808:	003b      	movs	r3, r7
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800380e:	003b      	movs	r3, r7
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	0152      	lsls	r2, r2, #5
 8003814:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003816:	003a      	movs	r2, r7
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MX_ADC_Init+0xd8>)
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd fba5 	bl	8000f6c <HAL_ADC_ConfigChannel>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <MX_ADC_Init+0xb6>
		Error_Handler();
 8003826:	f000 f8c3 	bl	80039b0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800382a:	003b      	movs	r3, r7
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <MX_ADC_Init+0xe0>)
 800382e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003830:	003a      	movs	r2, r7
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <MX_ADC_Init+0xd8>)
 8003834:	0011      	movs	r1, r2
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fb98 	bl	8000f6c <HAL_ADC_ConfigChannel>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <MX_ADC_Init+0xd0>
		Error_Handler();
 8003840:	f000 f8b6 	bl	80039b0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200001b0 	.word	0x200001b0
 8003850:	40012400 	.word	0x40012400
 8003854:	04000002 	.word	0x04000002

08003858 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800385e:	240c      	movs	r4, #12
 8003860:	193b      	adds	r3, r7, r4
 8003862:	0018      	movs	r0, r3
 8003864:	2314      	movs	r3, #20
 8003866:	001a      	movs	r2, r3
 8003868:	2100      	movs	r1, #0
 800386a:	f000 f9cf 	bl	8003c0c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	4b4b      	ldr	r3, [pc, #300]	; (800399c <MX_GPIO_Init+0x144>)
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <MX_GPIO_Init+0x144>)
 8003874:	2104      	movs	r1, #4
 8003876:	430a      	orrs	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
 800387a:	4b48      	ldr	r3, [pc, #288]	; (800399c <MX_GPIO_Init+0x144>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	2204      	movs	r2, #4
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <MX_GPIO_Init+0x144>)
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <MX_GPIO_Init+0x144>)
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <MX_GPIO_Init+0x144>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	2201      	movs	r2, #1
 8003898:	4013      	ands	r3, r2
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	4b3f      	ldr	r3, [pc, #252]	; (800399c <MX_GPIO_Init+0x144>)
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <MX_GPIO_Init+0x144>)
 80038a4:	2102      	movs	r1, #2
 80038a6:	430a      	orrs	r2, r1
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80038aa:	4b3c      	ldr	r3, [pc, #240]	; (800399c <MX_GPIO_Init+0x144>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_RING_Pin | BUZZ_Pin, GPIO_PIN_RESET);
 80038b6:	493a      	ldr	r1, [pc, #232]	; (80039a0 <MX_GPIO_Init+0x148>)
 80038b8:	23a0      	movs	r3, #160	; 0xa0
 80038ba:	05db      	lsls	r3, r3, #23
 80038bc:	2200      	movs	r2, #0
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fd ff47 	bl	8001752 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80038c4:	23f8      	movs	r3, #248	; 0xf8
 80038c6:	00d9      	lsls	r1, r3, #3
 80038c8:	23a0      	movs	r3, #160	; 0xa0
 80038ca:	05db      	lsls	r3, r3, #23
 80038cc:	2201      	movs	r2, #1
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fd ff3f 	bl	8001752 <HAL_GPIO_WritePin>
			LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80038d4:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <MX_GPIO_Init+0x14c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	21fb      	movs	r1, #251	; 0xfb
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd ff39 	bl	8001752 <HAL_GPIO_WritePin>
			LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin
					| LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SW_A_Pin SW_B_Pin */
	GPIO_InitStruct.Pin = SW_A_Pin | SW_B_Pin;
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	22c0      	movs	r2, #192	; 0xc0
 80038e4:	0212      	lsls	r2, r2, #8
 80038e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ee:	193b      	adds	r3, r7, r4
 80038f0:	2201      	movs	r2, #1
 80038f2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f4:	193b      	adds	r3, r7, r4
 80038f6:	4a2c      	ldr	r2, [pc, #176]	; (80039a8 <MX_GPIO_Init+0x150>)
 80038f8:	0019      	movs	r1, r3
 80038fa:	0010      	movs	r0, r2
 80038fc:	f7fd fd96 	bl	800142c <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
	GPIO_InitStruct.Pin = SW_ON_Pin | SW_AUTO_Pin | SW_LOCK_Pin;
 8003900:	193b      	adds	r3, r7, r4
 8003902:	221c      	movs	r2, #28
 8003904:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003906:	193b      	adds	r3, r7, r4
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390c:	193b      	adds	r3, r7, r4
 800390e:	2201      	movs	r2, #1
 8003910:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	193a      	adds	r2, r7, r4
 8003914:	23a0      	movs	r3, #160	; 0xa0
 8003916:	05db      	lsls	r3, r3, #23
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd fd86 	bl	800142c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RING_Pin */
	GPIO_InitStruct.Pin = LED_RING_Pin;
 8003920:	193b      	adds	r3, r7, r4
 8003922:	2220      	movs	r2, #32
 8003924:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003926:	193b      	adds	r3, r7, r4
 8003928:	2211      	movs	r2, #17
 800392a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	193b      	adds	r3, r7, r4
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	193b      	adds	r3, r7, r4
 8003934:	2203      	movs	r2, #3
 8003936:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_RING_GPIO_Port, &GPIO_InitStruct);
 8003938:	193a      	adds	r2, r7, r4
 800393a:	23a0      	movs	r3, #160	; 0xa0
 800393c:	05db      	lsls	r3, r3, #23
 800393e:	0011      	movs	r1, r2
 8003940:	0018      	movs	r0, r3
 8003942:	f7fd fd73 	bl	800142c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
	 LED5_Pin BUZZ_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin
 8003946:	193b      	adds	r3, r7, r4
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <MX_GPIO_Init+0x154>)
 800394a:	601a      	str	r2, [r3, #0]
			| BUZZ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	2201      	movs	r2, #1
 8003950:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	193b      	adds	r3, r7, r4
 800395a:	2203      	movs	r2, #3
 800395c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	193a      	adds	r2, r7, r4
 8003960:	23a0      	movs	r3, #160	; 0xa0
 8003962:	05db      	lsls	r3, r3, #23
 8003964:	0011      	movs	r1, r2
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fd60 	bl	800142c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin
	 LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin
 800396c:	0021      	movs	r1, r4
 800396e:	187b      	adds	r3, r7, r1
 8003970:	22fb      	movs	r2, #251	; 0xfb
 8003972:	601a      	str	r2, [r3, #0]
			| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003974:	187b      	adds	r3, r7, r1
 8003976:	2201      	movs	r2, #1
 8003978:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	187b      	adds	r3, r7, r1
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2203      	movs	r2, #3
 8003984:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	187b      	adds	r3, r7, r1
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <MX_GPIO_Init+0x14c>)
 800398a:	0019      	movs	r1, r3
 800398c:	0010      	movs	r0, r2
 800398e:	f7fd fd4d 	bl	800142c <HAL_GPIO_Init>

}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b009      	add	sp, #36	; 0x24
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	40021000 	.word	0x40021000
 80039a0:	00008020 	.word	0x00008020
 80039a4:	50000400 	.word	0x50000400
 80039a8:	50000800 	.word	0x50000800
 80039ac:	000087c0 	.word	0x000087c0

080039b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_MspInit+0x24>)
 80039c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_MspInit+0x24>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <HAL_MspInit+0x24>)
 80039ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_MspInit+0x24>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0549      	lsls	r1, r1, #21
 80039d6:	430a      	orrs	r2, r1
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	240c      	movs	r4, #12
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	0018      	movs	r0, r3
 80039f2:	2314      	movs	r3, #20
 80039f4:	001a      	movs	r2, r3
 80039f6:	2100      	movs	r1, #0
 80039f8:	f000 f908 	bl	8003c0c <memset>
  if(hadc->Instance==ADC1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <HAL_ADC_MspInit+0x70>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d122      	bne.n	8003a4c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_ADC_MspInit+0x74>)
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_ADC_MspInit+0x74>)
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	0089      	lsls	r1, r1, #2
 8003a10:	430a      	orrs	r2, r1
 8003a12:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_ADC_MspInit+0x74>)
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_ADC_MspInit+0x74>)
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a20:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_ADC_MspInit+0x74>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	2201      	movs	r2, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	2203      	movs	r2, #3
 8003a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	2203      	movs	r2, #3
 8003a36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	193a      	adds	r2, r7, r4
 8003a40:	23a0      	movs	r3, #160	; 0xa0
 8003a42:	05db      	lsls	r3, r3, #23
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7fd fcf0 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b009      	add	sp, #36	; 0x24
 8003a52:	bd90      	pop	{r4, r7, pc}
 8003a54:	40012400 	.word	0x40012400
 8003a58:	40021000 	.word	0x40021000

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a84:	f7fc ff94 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_sbrk+0x50>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x16>
		heap_end = &end;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <_sbrk+0x50>)
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <_sbrk+0x54>)
 8003aa4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <_sbrk+0x50>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <_sbrk+0x50>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	18d2      	adds	r2, r2, r3
 8003ab4:	466b      	mov	r3, sp
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d907      	bls.n	8003aca <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003aba:	f000 f87d 	bl	8003bb8 <__errno>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	220c      	movs	r2, #12
 8003ac2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	425b      	negs	r3, r3
 8003ac8:	e006      	b.n	8003ad8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <_sbrk+0x50>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <_sbrk+0x50>)
 8003ad4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200000b4 	.word	0x200000b4
 8003ae4:	2000021c 	.word	0x2000021c

08003ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <SystemInit+0x64>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <SystemInit+0x64>)
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	0049      	lsls	r1, r1, #1
 8003af6:	430a      	orrs	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <SystemInit+0x64>)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <SystemInit+0x64>)
 8003b00:	4913      	ldr	r1, [pc, #76]	; (8003b50 <SystemInit+0x68>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <SystemInit+0x64>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <SystemInit+0x64>)
 8003b0c:	4911      	ldr	r1, [pc, #68]	; (8003b54 <SystemInit+0x6c>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <SystemInit+0x64>)
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <SystemInit+0x64>)
 8003b18:	2101      	movs	r1, #1
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <SystemInit+0x64>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <SystemInit+0x64>)
 8003b24:	490c      	ldr	r1, [pc, #48]	; (8003b58 <SystemInit+0x70>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <SystemInit+0x64>)
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <SystemInit+0x64>)
 8003b30:	490a      	ldr	r1, [pc, #40]	; (8003b5c <SystemInit+0x74>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <SystemInit+0x64>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <SystemInit+0x78>)
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0512      	lsls	r2, r2, #20
 8003b42:	609a      	str	r2, [r3, #8]
#endif
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	88ff400c 	.word	0x88ff400c
 8003b54:	fef6fff6 	.word	0xfef6fff6
 8003b58:	fffbffff 	.word	0xfffbffff
 8003b5c:	ff02ffff 	.word	0xff02ffff
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b6a:	e003      	b.n	8003b74 <LoopCopyDataInit>

08003b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b72:	3104      	adds	r1, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b7c:	d3f6      	bcc.n	8003b6c <CopyDataInit>
  ldr  r2, =_sbss
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b80:	e002      	b.n	8003b88 <LoopFillZerobss>

08003b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b82:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b84:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b86:	3204      	adds	r2, #4

08003b88 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <LoopForever+0x16>)
  cmp  r2, r3
 8003b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b8c:	d3f9      	bcc.n	8003b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b8e:	f7ff ffab 	bl	8003ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b92:	f000 f817 	bl	8003bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b96:	f7ff fc61 	bl	800345c <main>

08003b9a <LoopForever>:

LoopForever:
    b LoopForever
 8003b9a:	e7fe      	b.n	8003b9a <LoopForever>
   ldr   r0, =_estack
 8003b9c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003ba0:	080045c0 	.word	0x080045c0
  ldr  r0, =_sdata
 8003ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ba8:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003bac:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003bb0:	2000021c 	.word	0x2000021c

08003bb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb4:	e7fe      	b.n	8003bb4 <ADC1_COMP_IRQHandler>
	...

08003bb8 <__errno>:
 8003bb8:	4b01      	ldr	r3, [pc, #4]	; (8003bc0 <__errno+0x8>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	4770      	bx	lr
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	20000028 	.word	0x20000028

08003bc4 <__libc_init_array>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	4d0c      	ldr	r5, [pc, #48]	; (8003bfc <__libc_init_array+0x38>)
 8003bca:	4c0d      	ldr	r4, [pc, #52]	; (8003c00 <__libc_init_array+0x3c>)
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	42a6      	cmp	r6, r4
 8003bd2:	d109      	bne.n	8003be8 <__libc_init_array+0x24>
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	f000 fc47 	bl	8004468 <_init>
 8003bda:	4d0a      	ldr	r5, [pc, #40]	; (8003c04 <__libc_init_array+0x40>)
 8003bdc:	4c0a      	ldr	r4, [pc, #40]	; (8003c08 <__libc_init_array+0x44>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	42a6      	cmp	r6, r4
 8003be4:	d105      	bne.n	8003bf2 <__libc_init_array+0x2e>
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	00b3      	lsls	r3, r6, #2
 8003bea:	58eb      	ldr	r3, [r5, r3]
 8003bec:	4798      	blx	r3
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7ee      	b.n	8003bd0 <__libc_init_array+0xc>
 8003bf2:	00b3      	lsls	r3, r6, #2
 8003bf4:	58eb      	ldr	r3, [r5, r3]
 8003bf6:	4798      	blx	r3
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	e7f2      	b.n	8003be2 <__libc_init_array+0x1e>
 8003bfc:	080045b8 	.word	0x080045b8
 8003c00:	080045b8 	.word	0x080045b8
 8003c04:	080045b8 	.word	0x080045b8
 8003c08:	080045bc 	.word	0x080045bc

08003c0c <memset>:
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	1882      	adds	r2, r0, r2
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d100      	bne.n	8003c16 <memset+0xa>
 8003c14:	4770      	bx	lr
 8003c16:	7019      	strb	r1, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	e7f9      	b.n	8003c10 <memset+0x4>

08003c1c <siprintf>:
 8003c1c:	b40e      	push	{r1, r2, r3}
 8003c1e:	b500      	push	{lr}
 8003c20:	490b      	ldr	r1, [pc, #44]	; (8003c50 <siprintf+0x34>)
 8003c22:	b09c      	sub	sp, #112	; 0x70
 8003c24:	ab1d      	add	r3, sp, #116	; 0x74
 8003c26:	9002      	str	r0, [sp, #8]
 8003c28:	9006      	str	r0, [sp, #24]
 8003c2a:	9107      	str	r1, [sp, #28]
 8003c2c:	9104      	str	r1, [sp, #16]
 8003c2e:	4809      	ldr	r0, [pc, #36]	; (8003c54 <siprintf+0x38>)
 8003c30:	4909      	ldr	r1, [pc, #36]	; (8003c58 <siprintf+0x3c>)
 8003c32:	cb04      	ldmia	r3!, {r2}
 8003c34:	9105      	str	r1, [sp, #20]
 8003c36:	6800      	ldr	r0, [r0, #0]
 8003c38:	a902      	add	r1, sp, #8
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	f000 f870 	bl	8003d20 <_svfiprintf_r>
 8003c40:	2300      	movs	r3, #0
 8003c42:	9a02      	ldr	r2, [sp, #8]
 8003c44:	7013      	strb	r3, [r2, #0]
 8003c46:	b01c      	add	sp, #112	; 0x70
 8003c48:	bc08      	pop	{r3}
 8003c4a:	b003      	add	sp, #12
 8003c4c:	4718      	bx	r3
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	7fffffff 	.word	0x7fffffff
 8003c54:	20000028 	.word	0x20000028
 8003c58:	ffff0208 	.word	0xffff0208

08003c5c <__ssputs_r>:
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	688e      	ldr	r6, [r1, #8]
 8003c60:	b085      	sub	sp, #20
 8003c62:	0007      	movs	r7, r0
 8003c64:	000c      	movs	r4, r1
 8003c66:	9203      	str	r2, [sp, #12]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	429e      	cmp	r6, r3
 8003c6c:	d83c      	bhi.n	8003ce8 <__ssputs_r+0x8c>
 8003c6e:	2390      	movs	r3, #144	; 0x90
 8003c70:	898a      	ldrh	r2, [r1, #12]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	421a      	tst	r2, r3
 8003c76:	d034      	beq.n	8003ce2 <__ssputs_r+0x86>
 8003c78:	2503      	movs	r5, #3
 8003c7a:	6909      	ldr	r1, [r1, #16]
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	1a5b      	subs	r3, r3, r1
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	6963      	ldr	r3, [r4, #20]
 8003c84:	9802      	ldr	r0, [sp, #8]
 8003c86:	435d      	muls	r5, r3
 8003c88:	0feb      	lsrs	r3, r5, #31
 8003c8a:	195d      	adds	r5, r3, r5
 8003c8c:	9b01      	ldr	r3, [sp, #4]
 8003c8e:	106d      	asrs	r5, r5, #1
 8003c90:	3301      	adds	r3, #1
 8003c92:	181b      	adds	r3, r3, r0
 8003c94:	42ab      	cmp	r3, r5
 8003c96:	d900      	bls.n	8003c9a <__ssputs_r+0x3e>
 8003c98:	001d      	movs	r5, r3
 8003c9a:	0553      	lsls	r3, r2, #21
 8003c9c:	d532      	bpl.n	8003d04 <__ssputs_r+0xa8>
 8003c9e:	0029      	movs	r1, r5
 8003ca0:	0038      	movs	r0, r7
 8003ca2:	f000 fb31 	bl	8004308 <_malloc_r>
 8003ca6:	1e06      	subs	r6, r0, #0
 8003ca8:	d109      	bne.n	8003cbe <__ssputs_r+0x62>
 8003caa:	230c      	movs	r3, #12
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	89a2      	ldrh	r2, [r4, #12]
 8003cb4:	4240      	negs	r0, r0
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	b005      	add	sp, #20
 8003cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbe:	9a02      	ldr	r2, [sp, #8]
 8003cc0:	6921      	ldr	r1, [r4, #16]
 8003cc2:	f000 faba 	bl	800423a <memcpy>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <__ssputs_r+0xc0>)
 8003cca:	401a      	ands	r2, r3
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	9b02      	ldr	r3, [sp, #8]
 8003cd4:	6126      	str	r6, [r4, #16]
 8003cd6:	18f6      	adds	r6, r6, r3
 8003cd8:	6026      	str	r6, [r4, #0]
 8003cda:	6165      	str	r5, [r4, #20]
 8003cdc:	9e01      	ldr	r6, [sp, #4]
 8003cde:	1aed      	subs	r5, r5, r3
 8003ce0:	60a5      	str	r5, [r4, #8]
 8003ce2:	9b01      	ldr	r3, [sp, #4]
 8003ce4:	429e      	cmp	r6, r3
 8003ce6:	d900      	bls.n	8003cea <__ssputs_r+0x8e>
 8003ce8:	9e01      	ldr	r6, [sp, #4]
 8003cea:	0032      	movs	r2, r6
 8003cec:	9903      	ldr	r1, [sp, #12]
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	f000 faac 	bl	800424c <memmove>
 8003cf4:	68a3      	ldr	r3, [r4, #8]
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	1b9b      	subs	r3, r3, r6
 8003cfa:	60a3      	str	r3, [r4, #8]
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	199e      	adds	r6, r3, r6
 8003d00:	6026      	str	r6, [r4, #0]
 8003d02:	e7da      	b.n	8003cba <__ssputs_r+0x5e>
 8003d04:	002a      	movs	r2, r5
 8003d06:	0038      	movs	r0, r7
 8003d08:	f000 fb5c 	bl	80043c4 <_realloc_r>
 8003d0c:	1e06      	subs	r6, r0, #0
 8003d0e:	d1e0      	bne.n	8003cd2 <__ssputs_r+0x76>
 8003d10:	0038      	movs	r0, r7
 8003d12:	6921      	ldr	r1, [r4, #16]
 8003d14:	f000 faae 	bl	8004274 <_free_r>
 8003d18:	e7c7      	b.n	8003caa <__ssputs_r+0x4e>
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	fffffb7f 	.word	0xfffffb7f

08003d20 <_svfiprintf_r>:
 8003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d22:	b0a1      	sub	sp, #132	; 0x84
 8003d24:	9003      	str	r0, [sp, #12]
 8003d26:	001d      	movs	r5, r3
 8003d28:	898b      	ldrh	r3, [r1, #12]
 8003d2a:	000f      	movs	r7, r1
 8003d2c:	0016      	movs	r6, r2
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	d511      	bpl.n	8003d56 <_svfiprintf_r+0x36>
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10e      	bne.n	8003d56 <_svfiprintf_r+0x36>
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	f000 fae5 	bl	8004308 <_malloc_r>
 8003d3e:	6038      	str	r0, [r7, #0]
 8003d40:	6138      	str	r0, [r7, #16]
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d105      	bne.n	8003d52 <_svfiprintf_r+0x32>
 8003d46:	230c      	movs	r3, #12
 8003d48:	9a03      	ldr	r2, [sp, #12]
 8003d4a:	3801      	subs	r0, #1
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	b021      	add	sp, #132	; 0x84
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	2300      	movs	r3, #0
 8003d58:	ac08      	add	r4, sp, #32
 8003d5a:	6163      	str	r3, [r4, #20]
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	7663      	strb	r3, [r4, #25]
 8003d60:	3310      	adds	r3, #16
 8003d62:	76a3      	strb	r3, [r4, #26]
 8003d64:	9507      	str	r5, [sp, #28]
 8003d66:	0035      	movs	r5, r6
 8003d68:	782b      	ldrb	r3, [r5, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <_svfiprintf_r+0x52>
 8003d6e:	2b25      	cmp	r3, #37	; 0x25
 8003d70:	d147      	bne.n	8003e02 <_svfiprintf_r+0xe2>
 8003d72:	1bab      	subs	r3, r5, r6
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	42b5      	cmp	r5, r6
 8003d78:	d00c      	beq.n	8003d94 <_svfiprintf_r+0x74>
 8003d7a:	0032      	movs	r2, r6
 8003d7c:	0039      	movs	r1, r7
 8003d7e:	9803      	ldr	r0, [sp, #12]
 8003d80:	f7ff ff6c 	bl	8003c5c <__ssputs_r>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d100      	bne.n	8003d8a <_svfiprintf_r+0x6a>
 8003d88:	e0ae      	b.n	8003ee8 <_svfiprintf_r+0x1c8>
 8003d8a:	6962      	ldr	r2, [r4, #20]
 8003d8c:	9b05      	ldr	r3, [sp, #20]
 8003d8e:	4694      	mov	ip, r2
 8003d90:	4463      	add	r3, ip
 8003d92:	6163      	str	r3, [r4, #20]
 8003d94:	782b      	ldrb	r3, [r5, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d100      	bne.n	8003d9c <_svfiprintf_r+0x7c>
 8003d9a:	e0a5      	b.n	8003ee8 <_svfiprintf_r+0x1c8>
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4252      	negs	r2, r2
 8003da2:	6062      	str	r2, [r4, #4]
 8003da4:	a904      	add	r1, sp, #16
 8003da6:	3254      	adds	r2, #84	; 0x54
 8003da8:	1852      	adds	r2, r2, r1
 8003daa:	1c6e      	adds	r6, r5, #1
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	60e3      	str	r3, [r4, #12]
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	7013      	strb	r3, [r2, #0]
 8003db4:	65a3      	str	r3, [r4, #88]	; 0x58
 8003db6:	2205      	movs	r2, #5
 8003db8:	7831      	ldrb	r1, [r6, #0]
 8003dba:	4854      	ldr	r0, [pc, #336]	; (8003f0c <_svfiprintf_r+0x1ec>)
 8003dbc:	f000 fa32 	bl	8004224 <memchr>
 8003dc0:	1c75      	adds	r5, r6, #1
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d11f      	bne.n	8003e06 <_svfiprintf_r+0xe6>
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	06d3      	lsls	r3, r2, #27
 8003dca:	d504      	bpl.n	8003dd6 <_svfiprintf_r+0xb6>
 8003dcc:	2353      	movs	r3, #83	; 0x53
 8003dce:	a904      	add	r1, sp, #16
 8003dd0:	185b      	adds	r3, r3, r1
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	7019      	strb	r1, [r3, #0]
 8003dd6:	0713      	lsls	r3, r2, #28
 8003dd8:	d504      	bpl.n	8003de4 <_svfiprintf_r+0xc4>
 8003dda:	2353      	movs	r3, #83	; 0x53
 8003ddc:	a904      	add	r1, sp, #16
 8003dde:	185b      	adds	r3, r3, r1
 8003de0:	212b      	movs	r1, #43	; 0x2b
 8003de2:	7019      	strb	r1, [r3, #0]
 8003de4:	7833      	ldrb	r3, [r6, #0]
 8003de6:	2b2a      	cmp	r3, #42	; 0x2a
 8003de8:	d016      	beq.n	8003e18 <_svfiprintf_r+0xf8>
 8003dea:	0035      	movs	r5, r6
 8003dec:	2100      	movs	r1, #0
 8003dee:	200a      	movs	r0, #10
 8003df0:	68e3      	ldr	r3, [r4, #12]
 8003df2:	782a      	ldrb	r2, [r5, #0]
 8003df4:	1c6e      	adds	r6, r5, #1
 8003df6:	3a30      	subs	r2, #48	; 0x30
 8003df8:	2a09      	cmp	r2, #9
 8003dfa:	d94e      	bls.n	8003e9a <_svfiprintf_r+0x17a>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d111      	bne.n	8003e24 <_svfiprintf_r+0x104>
 8003e00:	e017      	b.n	8003e32 <_svfiprintf_r+0x112>
 8003e02:	3501      	adds	r5, #1
 8003e04:	e7b0      	b.n	8003d68 <_svfiprintf_r+0x48>
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <_svfiprintf_r+0x1ec>)
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	1ac0      	subs	r0, r0, r3
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4083      	lsls	r3, r0
 8003e10:	4313      	orrs	r3, r2
 8003e12:	002e      	movs	r6, r5
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	e7ce      	b.n	8003db6 <_svfiprintf_r+0x96>
 8003e18:	9b07      	ldr	r3, [sp, #28]
 8003e1a:	1d19      	adds	r1, r3, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	9107      	str	r1, [sp, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db01      	blt.n	8003e28 <_svfiprintf_r+0x108>
 8003e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e26:	e004      	b.n	8003e32 <_svfiprintf_r+0x112>
 8003e28:	425b      	negs	r3, r3
 8003e2a:	60e3      	str	r3, [r4, #12]
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	782b      	ldrb	r3, [r5, #0]
 8003e34:	2b2e      	cmp	r3, #46	; 0x2e
 8003e36:	d10a      	bne.n	8003e4e <_svfiprintf_r+0x12e>
 8003e38:	786b      	ldrb	r3, [r5, #1]
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d135      	bne.n	8003eaa <_svfiprintf_r+0x18a>
 8003e3e:	9b07      	ldr	r3, [sp, #28]
 8003e40:	3502      	adds	r5, #2
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9207      	str	r2, [sp, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db2b      	blt.n	8003ea4 <_svfiprintf_r+0x184>
 8003e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4e:	4e30      	ldr	r6, [pc, #192]	; (8003f10 <_svfiprintf_r+0x1f0>)
 8003e50:	2203      	movs	r2, #3
 8003e52:	0030      	movs	r0, r6
 8003e54:	7829      	ldrb	r1, [r5, #0]
 8003e56:	f000 f9e5 	bl	8004224 <memchr>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d006      	beq.n	8003e6c <_svfiprintf_r+0x14c>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	4083      	lsls	r3, r0
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	3501      	adds	r5, #1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	7829      	ldrb	r1, [r5, #0]
 8003e6e:	2206      	movs	r2, #6
 8003e70:	4828      	ldr	r0, [pc, #160]	; (8003f14 <_svfiprintf_r+0x1f4>)
 8003e72:	1c6e      	adds	r6, r5, #1
 8003e74:	7621      	strb	r1, [r4, #24]
 8003e76:	f000 f9d5 	bl	8004224 <memchr>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d03c      	beq.n	8003ef8 <_svfiprintf_r+0x1d8>
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <_svfiprintf_r+0x1f8>)
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d125      	bne.n	8003ed0 <_svfiprintf_r+0x1b0>
 8003e84:	2207      	movs	r2, #7
 8003e86:	9b07      	ldr	r3, [sp, #28]
 8003e88:	3307      	adds	r3, #7
 8003e8a:	4393      	bics	r3, r2
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	9307      	str	r3, [sp, #28]
 8003e90:	6963      	ldr	r3, [r4, #20]
 8003e92:	9a04      	ldr	r2, [sp, #16]
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	6163      	str	r3, [r4, #20]
 8003e98:	e765      	b.n	8003d66 <_svfiprintf_r+0x46>
 8003e9a:	4343      	muls	r3, r0
 8003e9c:	0035      	movs	r5, r6
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	189b      	adds	r3, r3, r2
 8003ea2:	e7a6      	b.n	8003df2 <_svfiprintf_r+0xd2>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	425b      	negs	r3, r3
 8003ea8:	e7d0      	b.n	8003e4c <_svfiprintf_r+0x12c>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	200a      	movs	r0, #10
 8003eae:	001a      	movs	r2, r3
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	6063      	str	r3, [r4, #4]
 8003eb4:	7829      	ldrb	r1, [r5, #0]
 8003eb6:	1c6e      	adds	r6, r5, #1
 8003eb8:	3930      	subs	r1, #48	; 0x30
 8003eba:	2909      	cmp	r1, #9
 8003ebc:	d903      	bls.n	8003ec6 <_svfiprintf_r+0x1a6>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0c5      	beq.n	8003e4e <_svfiprintf_r+0x12e>
 8003ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec4:	e7c3      	b.n	8003e4e <_svfiprintf_r+0x12e>
 8003ec6:	4342      	muls	r2, r0
 8003ec8:	0035      	movs	r5, r6
 8003eca:	2301      	movs	r3, #1
 8003ecc:	1852      	adds	r2, r2, r1
 8003ece:	e7f1      	b.n	8003eb4 <_svfiprintf_r+0x194>
 8003ed0:	ab07      	add	r3, sp, #28
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	003a      	movs	r2, r7
 8003ed6:	0021      	movs	r1, r4
 8003ed8:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_svfiprintf_r+0x1fc>)
 8003eda:	9803      	ldr	r0, [sp, #12]
 8003edc:	e000      	b.n	8003ee0 <_svfiprintf_r+0x1c0>
 8003ede:	bf00      	nop
 8003ee0:	9004      	str	r0, [sp, #16]
 8003ee2:	9b04      	ldr	r3, [sp, #16]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	d1d3      	bne.n	8003e90 <_svfiprintf_r+0x170>
 8003ee8:	89bb      	ldrh	r3, [r7, #12]
 8003eea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003eec:	065b      	lsls	r3, r3, #25
 8003eee:	d400      	bmi.n	8003ef2 <_svfiprintf_r+0x1d2>
 8003ef0:	e72d      	b.n	8003d4e <_svfiprintf_r+0x2e>
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	4240      	negs	r0, r0
 8003ef6:	e72a      	b.n	8003d4e <_svfiprintf_r+0x2e>
 8003ef8:	ab07      	add	r3, sp, #28
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	003a      	movs	r2, r7
 8003efe:	0021      	movs	r1, r4
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <_svfiprintf_r+0x1fc>)
 8003f02:	9803      	ldr	r0, [sp, #12]
 8003f04:	f000 f87c 	bl	8004000 <_printf_i>
 8003f08:	e7ea      	b.n	8003ee0 <_svfiprintf_r+0x1c0>
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	08004585 	.word	0x08004585
 8003f10:	0800458b 	.word	0x0800458b
 8003f14:	0800458f 	.word	0x0800458f
 8003f18:	00000000 	.word	0x00000000
 8003f1c:	08003c5d 	.word	0x08003c5d

08003f20 <_printf_common>:
 8003f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f22:	0015      	movs	r5, r2
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	688a      	ldr	r2, [r1, #8]
 8003f28:	690b      	ldr	r3, [r1, #16]
 8003f2a:	000c      	movs	r4, r1
 8003f2c:	9000      	str	r0, [sp, #0]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	da00      	bge.n	8003f34 <_printf_common+0x14>
 8003f32:	0013      	movs	r3, r2
 8003f34:	0022      	movs	r2, r4
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	3243      	adds	r2, #67	; 0x43
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	2a00      	cmp	r2, #0
 8003f3e:	d001      	beq.n	8003f44 <_printf_common+0x24>
 8003f40:	3301      	adds	r3, #1
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	069b      	lsls	r3, r3, #26
 8003f48:	d502      	bpl.n	8003f50 <_printf_common+0x30>
 8003f4a:	682b      	ldr	r3, [r5, #0]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	6822      	ldr	r2, [r4, #0]
 8003f52:	2306      	movs	r3, #6
 8003f54:	0017      	movs	r7, r2
 8003f56:	401f      	ands	r7, r3
 8003f58:	421a      	tst	r2, r3
 8003f5a:	d027      	beq.n	8003fac <_printf_common+0x8c>
 8003f5c:	0023      	movs	r3, r4
 8003f5e:	3343      	adds	r3, #67	; 0x43
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	4193      	sbcs	r3, r2
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	0692      	lsls	r2, r2, #26
 8003f6a:	d430      	bmi.n	8003fce <_printf_common+0xae>
 8003f6c:	0022      	movs	r2, r4
 8003f6e:	9901      	ldr	r1, [sp, #4]
 8003f70:	9800      	ldr	r0, [sp, #0]
 8003f72:	9e08      	ldr	r6, [sp, #32]
 8003f74:	3243      	adds	r2, #67	; 0x43
 8003f76:	47b0      	blx	r6
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d025      	beq.n	8003fc8 <_printf_common+0xa8>
 8003f7c:	2306      	movs	r3, #6
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	682a      	ldr	r2, [r5, #0]
 8003f82:	68e1      	ldr	r1, [r4, #12]
 8003f84:	2500      	movs	r5, #0
 8003f86:	4003      	ands	r3, r0
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0x74>
 8003f8c:	1a8d      	subs	r5, r1, r2
 8003f8e:	43eb      	mvns	r3, r5
 8003f90:	17db      	asrs	r3, r3, #31
 8003f92:	401d      	ands	r5, r3
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	6922      	ldr	r2, [r4, #16]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	dd01      	ble.n	8003fa0 <_printf_common+0x80>
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	18ed      	adds	r5, r5, r3
 8003fa0:	2700      	movs	r7, #0
 8003fa2:	42bd      	cmp	r5, r7
 8003fa4:	d120      	bne.n	8003fe8 <_printf_common+0xc8>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e010      	b.n	8003fcc <_printf_common+0xac>
 8003faa:	3701      	adds	r7, #1
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	682a      	ldr	r2, [r5, #0]
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	ddd2      	ble.n	8003f5c <_printf_common+0x3c>
 8003fb6:	0022      	movs	r2, r4
 8003fb8:	2301      	movs	r3, #1
 8003fba:	9901      	ldr	r1, [sp, #4]
 8003fbc:	9800      	ldr	r0, [sp, #0]
 8003fbe:	9e08      	ldr	r6, [sp, #32]
 8003fc0:	3219      	adds	r2, #25
 8003fc2:	47b0      	blx	r6
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d1f0      	bne.n	8003faa <_printf_common+0x8a>
 8003fc8:	2001      	movs	r0, #1
 8003fca:	4240      	negs	r0, r0
 8003fcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fce:	2030      	movs	r0, #48	; 0x30
 8003fd0:	18e1      	adds	r1, r4, r3
 8003fd2:	3143      	adds	r1, #67	; 0x43
 8003fd4:	7008      	strb	r0, [r1, #0]
 8003fd6:	0021      	movs	r1, r4
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	3145      	adds	r1, #69	; 0x45
 8003fdc:	7809      	ldrb	r1, [r1, #0]
 8003fde:	18a2      	adds	r2, r4, r2
 8003fe0:	3243      	adds	r2, #67	; 0x43
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	7011      	strb	r1, [r2, #0]
 8003fe6:	e7c1      	b.n	8003f6c <_printf_common+0x4c>
 8003fe8:	0022      	movs	r2, r4
 8003fea:	2301      	movs	r3, #1
 8003fec:	9901      	ldr	r1, [sp, #4]
 8003fee:	9800      	ldr	r0, [sp, #0]
 8003ff0:	9e08      	ldr	r6, [sp, #32]
 8003ff2:	321a      	adds	r2, #26
 8003ff4:	47b0      	blx	r6
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d0e6      	beq.n	8003fc8 <_printf_common+0xa8>
 8003ffa:	3701      	adds	r7, #1
 8003ffc:	e7d1      	b.n	8003fa2 <_printf_common+0x82>
	...

08004000 <_printf_i>:
 8004000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004002:	b08b      	sub	sp, #44	; 0x2c
 8004004:	9206      	str	r2, [sp, #24]
 8004006:	000a      	movs	r2, r1
 8004008:	3243      	adds	r2, #67	; 0x43
 800400a:	9307      	str	r3, [sp, #28]
 800400c:	9005      	str	r0, [sp, #20]
 800400e:	9204      	str	r2, [sp, #16]
 8004010:	7e0a      	ldrb	r2, [r1, #24]
 8004012:	000c      	movs	r4, r1
 8004014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004016:	2a78      	cmp	r2, #120	; 0x78
 8004018:	d806      	bhi.n	8004028 <_printf_i+0x28>
 800401a:	2a62      	cmp	r2, #98	; 0x62
 800401c:	d808      	bhi.n	8004030 <_printf_i+0x30>
 800401e:	2a00      	cmp	r2, #0
 8004020:	d100      	bne.n	8004024 <_printf_i+0x24>
 8004022:	e0c0      	b.n	80041a6 <_printf_i+0x1a6>
 8004024:	2a58      	cmp	r2, #88	; 0x58
 8004026:	d052      	beq.n	80040ce <_printf_i+0xce>
 8004028:	0026      	movs	r6, r4
 800402a:	3642      	adds	r6, #66	; 0x42
 800402c:	7032      	strb	r2, [r6, #0]
 800402e:	e022      	b.n	8004076 <_printf_i+0x76>
 8004030:	0010      	movs	r0, r2
 8004032:	3863      	subs	r0, #99	; 0x63
 8004034:	2815      	cmp	r0, #21
 8004036:	d8f7      	bhi.n	8004028 <_printf_i+0x28>
 8004038:	f7fc f86e 	bl	8000118 <__gnu_thumb1_case_shi>
 800403c:	001f0016 	.word	0x001f0016
 8004040:	fff6fff6 	.word	0xfff6fff6
 8004044:	fff6fff6 	.word	0xfff6fff6
 8004048:	fff6001f 	.word	0xfff6001f
 800404c:	fff6fff6 	.word	0xfff6fff6
 8004050:	00a8fff6 	.word	0x00a8fff6
 8004054:	009a0036 	.word	0x009a0036
 8004058:	fff6fff6 	.word	0xfff6fff6
 800405c:	fff600b9 	.word	0xfff600b9
 8004060:	fff60036 	.word	0xfff60036
 8004064:	009efff6 	.word	0x009efff6
 8004068:	0026      	movs	r6, r4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	3642      	adds	r6, #66	; 0x42
 800406e:	1d11      	adds	r1, r2, #4
 8004070:	6019      	str	r1, [r3, #0]
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	7033      	strb	r3, [r6, #0]
 8004076:	2301      	movs	r3, #1
 8004078:	e0a7      	b.n	80041ca <_printf_i+0x1ca>
 800407a:	6808      	ldr	r0, [r1, #0]
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	1d0a      	adds	r2, r1, #4
 8004080:	0605      	lsls	r5, r0, #24
 8004082:	d50b      	bpl.n	800409c <_printf_i+0x9c>
 8004084:	680d      	ldr	r5, [r1, #0]
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	2d00      	cmp	r5, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0x94>
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	9a04      	ldr	r2, [sp, #16]
 8004090:	426d      	negs	r5, r5
 8004092:	7013      	strb	r3, [r2, #0]
 8004094:	4b61      	ldr	r3, [pc, #388]	; (800421c <_printf_i+0x21c>)
 8004096:	270a      	movs	r7, #10
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	e032      	b.n	8004102 <_printf_i+0x102>
 800409c:	680d      	ldr	r5, [r1, #0]
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	0641      	lsls	r1, r0, #25
 80040a2:	d5f1      	bpl.n	8004088 <_printf_i+0x88>
 80040a4:	b22d      	sxth	r5, r5
 80040a6:	e7ef      	b.n	8004088 <_printf_i+0x88>
 80040a8:	680d      	ldr	r5, [r1, #0]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	1d08      	adds	r0, r1, #4
 80040ae:	6018      	str	r0, [r3, #0]
 80040b0:	062e      	lsls	r6, r5, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xb8>
 80040b4:	680d      	ldr	r5, [r1, #0]
 80040b6:	e003      	b.n	80040c0 <_printf_i+0xc0>
 80040b8:	066d      	lsls	r5, r5, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xb4>
 80040bc:	680d      	ldr	r5, [r1, #0]
 80040be:	b2ad      	uxth	r5, r5
 80040c0:	4b56      	ldr	r3, [pc, #344]	; (800421c <_printf_i+0x21c>)
 80040c2:	270a      	movs	r7, #10
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	2a6f      	cmp	r2, #111	; 0x6f
 80040c8:	d117      	bne.n	80040fa <_printf_i+0xfa>
 80040ca:	2708      	movs	r7, #8
 80040cc:	e015      	b.n	80040fa <_printf_i+0xfa>
 80040ce:	3145      	adds	r1, #69	; 0x45
 80040d0:	700a      	strb	r2, [r1, #0]
 80040d2:	4a52      	ldr	r2, [pc, #328]	; (800421c <_printf_i+0x21c>)
 80040d4:	9203      	str	r2, [sp, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	6821      	ldr	r1, [r4, #0]
 80040da:	ca20      	ldmia	r2!, {r5}
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	0608      	lsls	r0, r1, #24
 80040e0:	d550      	bpl.n	8004184 <_printf_i+0x184>
 80040e2:	07cb      	lsls	r3, r1, #31
 80040e4:	d502      	bpl.n	80040ec <_printf_i+0xec>
 80040e6:	2320      	movs	r3, #32
 80040e8:	4319      	orrs	r1, r3
 80040ea:	6021      	str	r1, [r4, #0]
 80040ec:	2710      	movs	r7, #16
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	d103      	bne.n	80040fa <_printf_i+0xfa>
 80040f2:	2320      	movs	r3, #32
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	439a      	bics	r2, r3
 80040f8:	6022      	str	r2, [r4, #0]
 80040fa:	0023      	movs	r3, r4
 80040fc:	2200      	movs	r2, #0
 80040fe:	3343      	adds	r3, #67	; 0x43
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	db03      	blt.n	8004112 <_printf_i+0x112>
 800410a:	2204      	movs	r2, #4
 800410c:	6821      	ldr	r1, [r4, #0]
 800410e:	4391      	bics	r1, r2
 8004110:	6021      	str	r1, [r4, #0]
 8004112:	2d00      	cmp	r5, #0
 8004114:	d102      	bne.n	800411c <_printf_i+0x11c>
 8004116:	9e04      	ldr	r6, [sp, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <_printf_i+0x136>
 800411c:	9e04      	ldr	r6, [sp, #16]
 800411e:	0028      	movs	r0, r5
 8004120:	0039      	movs	r1, r7
 8004122:	f7fc f889 	bl	8000238 <__aeabi_uidivmod>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3e01      	subs	r6, #1
 800412a:	5c5b      	ldrb	r3, [r3, r1]
 800412c:	7033      	strb	r3, [r6, #0]
 800412e:	002b      	movs	r3, r5
 8004130:	0005      	movs	r5, r0
 8004132:	429f      	cmp	r7, r3
 8004134:	d9f3      	bls.n	800411e <_printf_i+0x11e>
 8004136:	2f08      	cmp	r7, #8
 8004138:	d109      	bne.n	800414e <_printf_i+0x14e>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	07db      	lsls	r3, r3, #31
 800413e:	d506      	bpl.n	800414e <_printf_i+0x14e>
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	6922      	ldr	r2, [r4, #16]
 8004144:	4293      	cmp	r3, r2
 8004146:	dc02      	bgt.n	800414e <_printf_i+0x14e>
 8004148:	2330      	movs	r3, #48	; 0x30
 800414a:	3e01      	subs	r6, #1
 800414c:	7033      	strb	r3, [r6, #0]
 800414e:	9b04      	ldr	r3, [sp, #16]
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	9b07      	ldr	r3, [sp, #28]
 8004156:	0021      	movs	r1, r4
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	9805      	ldr	r0, [sp, #20]
 800415c:	9b06      	ldr	r3, [sp, #24]
 800415e:	aa09      	add	r2, sp, #36	; 0x24
 8004160:	f7ff fede 	bl	8003f20 <_printf_common>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d135      	bne.n	80041d4 <_printf_i+0x1d4>
 8004168:	2001      	movs	r0, #1
 800416a:	4240      	negs	r0, r0
 800416c:	b00b      	add	sp, #44	; 0x2c
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004170:	2220      	movs	r2, #32
 8004172:	6809      	ldr	r1, [r1, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	6022      	str	r2, [r4, #0]
 8004178:	0022      	movs	r2, r4
 800417a:	2178      	movs	r1, #120	; 0x78
 800417c:	3245      	adds	r2, #69	; 0x45
 800417e:	7011      	strb	r1, [r2, #0]
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <_printf_i+0x220>)
 8004182:	e7a7      	b.n	80040d4 <_printf_i+0xd4>
 8004184:	0648      	lsls	r0, r1, #25
 8004186:	d5ac      	bpl.n	80040e2 <_printf_i+0xe2>
 8004188:	b2ad      	uxth	r5, r5
 800418a:	e7aa      	b.n	80040e2 <_printf_i+0xe2>
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	680d      	ldr	r5, [r1, #0]
 8004190:	1d10      	adds	r0, r2, #4
 8004192:	6949      	ldr	r1, [r1, #20]
 8004194:	6018      	str	r0, [r3, #0]
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	062e      	lsls	r6, r5, #24
 800419a:	d501      	bpl.n	80041a0 <_printf_i+0x1a0>
 800419c:	6019      	str	r1, [r3, #0]
 800419e:	e002      	b.n	80041a6 <_printf_i+0x1a6>
 80041a0:	066d      	lsls	r5, r5, #25
 80041a2:	d5fb      	bpl.n	800419c <_printf_i+0x19c>
 80041a4:	8019      	strh	r1, [r3, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9e04      	ldr	r6, [sp, #16]
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	e7d2      	b.n	8004154 <_printf_i+0x154>
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	1d11      	adds	r1, r2, #4
 80041b2:	6019      	str	r1, [r3, #0]
 80041b4:	6816      	ldr	r6, [r2, #0]
 80041b6:	2100      	movs	r1, #0
 80041b8:	0030      	movs	r0, r6
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	f000 f832 	bl	8004224 <memchr>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d001      	beq.n	80041c8 <_printf_i+0x1c8>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	9a04      	ldr	r2, [sp, #16]
 80041d0:	7013      	strb	r3, [r2, #0]
 80041d2:	e7bf      	b.n	8004154 <_printf_i+0x154>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	0032      	movs	r2, r6
 80041d8:	9906      	ldr	r1, [sp, #24]
 80041da:	9805      	ldr	r0, [sp, #20]
 80041dc:	9d07      	ldr	r5, [sp, #28]
 80041de:	47a8      	blx	r5
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d0c1      	beq.n	8004168 <_printf_i+0x168>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	079b      	lsls	r3, r3, #30
 80041e8:	d415      	bmi.n	8004216 <_printf_i+0x216>
 80041ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ec:	68e0      	ldr	r0, [r4, #12]
 80041ee:	4298      	cmp	r0, r3
 80041f0:	dabc      	bge.n	800416c <_printf_i+0x16c>
 80041f2:	0018      	movs	r0, r3
 80041f4:	e7ba      	b.n	800416c <_printf_i+0x16c>
 80041f6:	0022      	movs	r2, r4
 80041f8:	2301      	movs	r3, #1
 80041fa:	9906      	ldr	r1, [sp, #24]
 80041fc:	9805      	ldr	r0, [sp, #20]
 80041fe:	9e07      	ldr	r6, [sp, #28]
 8004200:	3219      	adds	r2, #25
 8004202:	47b0      	blx	r6
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d0af      	beq.n	8004168 <_printf_i+0x168>
 8004208:	3501      	adds	r5, #1
 800420a:	68e3      	ldr	r3, [r4, #12]
 800420c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	42ab      	cmp	r3, r5
 8004212:	dcf0      	bgt.n	80041f6 <_printf_i+0x1f6>
 8004214:	e7e9      	b.n	80041ea <_printf_i+0x1ea>
 8004216:	2500      	movs	r5, #0
 8004218:	e7f7      	b.n	800420a <_printf_i+0x20a>
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	08004596 	.word	0x08004596
 8004220:	080045a7 	.word	0x080045a7

08004224 <memchr>:
 8004224:	b2c9      	uxtb	r1, r1
 8004226:	1882      	adds	r2, r0, r2
 8004228:	4290      	cmp	r0, r2
 800422a:	d101      	bne.n	8004230 <memchr+0xc>
 800422c:	2000      	movs	r0, #0
 800422e:	4770      	bx	lr
 8004230:	7803      	ldrb	r3, [r0, #0]
 8004232:	428b      	cmp	r3, r1
 8004234:	d0fb      	beq.n	800422e <memchr+0xa>
 8004236:	3001      	adds	r0, #1
 8004238:	e7f6      	b.n	8004228 <memchr+0x4>

0800423a <memcpy>:
 800423a:	2300      	movs	r3, #0
 800423c:	b510      	push	{r4, lr}
 800423e:	429a      	cmp	r2, r3
 8004240:	d100      	bne.n	8004244 <memcpy+0xa>
 8004242:	bd10      	pop	{r4, pc}
 8004244:	5ccc      	ldrb	r4, [r1, r3]
 8004246:	54c4      	strb	r4, [r0, r3]
 8004248:	3301      	adds	r3, #1
 800424a:	e7f8      	b.n	800423e <memcpy+0x4>

0800424c <memmove>:
 800424c:	b510      	push	{r4, lr}
 800424e:	4288      	cmp	r0, r1
 8004250:	d902      	bls.n	8004258 <memmove+0xc>
 8004252:	188b      	adds	r3, r1, r2
 8004254:	4298      	cmp	r0, r3
 8004256:	d303      	bcc.n	8004260 <memmove+0x14>
 8004258:	2300      	movs	r3, #0
 800425a:	e007      	b.n	800426c <memmove+0x20>
 800425c:	5c8b      	ldrb	r3, [r1, r2]
 800425e:	5483      	strb	r3, [r0, r2]
 8004260:	3a01      	subs	r2, #1
 8004262:	d2fb      	bcs.n	800425c <memmove+0x10>
 8004264:	bd10      	pop	{r4, pc}
 8004266:	5ccc      	ldrb	r4, [r1, r3]
 8004268:	54c4      	strb	r4, [r0, r3]
 800426a:	3301      	adds	r3, #1
 800426c:	429a      	cmp	r2, r3
 800426e:	d1fa      	bne.n	8004266 <memmove+0x1a>
 8004270:	e7f8      	b.n	8004264 <memmove+0x18>
	...

08004274 <_free_r>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	0005      	movs	r5, r0
 8004278:	2900      	cmp	r1, #0
 800427a:	d010      	beq.n	800429e <_free_r+0x2a>
 800427c:	1f0c      	subs	r4, r1, #4
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da00      	bge.n	8004286 <_free_r+0x12>
 8004284:	18e4      	adds	r4, r4, r3
 8004286:	0028      	movs	r0, r5
 8004288:	f000 f8d4 	bl	8004434 <__malloc_lock>
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <_free_r+0x90>)
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <_free_r+0x2c>
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	6014      	str	r4, [r2, #0]
 8004298:	0028      	movs	r0, r5
 800429a:	f000 f8d3 	bl	8004444 <__malloc_unlock>
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d908      	bls.n	80042b6 <_free_r+0x42>
 80042a4:	6821      	ldr	r1, [r4, #0]
 80042a6:	1860      	adds	r0, r4, r1
 80042a8:	4283      	cmp	r3, r0
 80042aa:	d1f3      	bne.n	8004294 <_free_r+0x20>
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	1841      	adds	r1, r0, r1
 80042b2:	6021      	str	r1, [r4, #0]
 80042b4:	e7ee      	b.n	8004294 <_free_r+0x20>
 80042b6:	001a      	movs	r2, r3
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_free_r+0x4e>
 80042be:	42a3      	cmp	r3, r4
 80042c0:	d9f9      	bls.n	80042b6 <_free_r+0x42>
 80042c2:	6811      	ldr	r1, [r2, #0]
 80042c4:	1850      	adds	r0, r2, r1
 80042c6:	42a0      	cmp	r0, r4
 80042c8:	d10b      	bne.n	80042e2 <_free_r+0x6e>
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	1809      	adds	r1, r1, r0
 80042ce:	1850      	adds	r0, r2, r1
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	4283      	cmp	r3, r0
 80042d4:	d1e0      	bne.n	8004298 <_free_r+0x24>
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	1841      	adds	r1, r0, r1
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	6053      	str	r3, [r2, #4]
 80042e0:	e7da      	b.n	8004298 <_free_r+0x24>
 80042e2:	42a0      	cmp	r0, r4
 80042e4:	d902      	bls.n	80042ec <_free_r+0x78>
 80042e6:	230c      	movs	r3, #12
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	e7d5      	b.n	8004298 <_free_r+0x24>
 80042ec:	6821      	ldr	r1, [r4, #0]
 80042ee:	1860      	adds	r0, r4, r1
 80042f0:	4283      	cmp	r3, r0
 80042f2:	d103      	bne.n	80042fc <_free_r+0x88>
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	1841      	adds	r1, r0, r1
 80042fa:	6021      	str	r1, [r4, #0]
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6054      	str	r4, [r2, #4]
 8004300:	e7ca      	b.n	8004298 <_free_r+0x24>
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	200000b8 	.word	0x200000b8

08004308 <_malloc_r>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	2303      	movs	r3, #3
 800430c:	1ccd      	adds	r5, r1, #3
 800430e:	439d      	bics	r5, r3
 8004310:	3508      	adds	r5, #8
 8004312:	0006      	movs	r6, r0
 8004314:	2d0c      	cmp	r5, #12
 8004316:	d21f      	bcs.n	8004358 <_malloc_r+0x50>
 8004318:	250c      	movs	r5, #12
 800431a:	42a9      	cmp	r1, r5
 800431c:	d81e      	bhi.n	800435c <_malloc_r+0x54>
 800431e:	0030      	movs	r0, r6
 8004320:	f000 f888 	bl	8004434 <__malloc_lock>
 8004324:	4925      	ldr	r1, [pc, #148]	; (80043bc <_malloc_r+0xb4>)
 8004326:	680a      	ldr	r2, [r1, #0]
 8004328:	0014      	movs	r4, r2
 800432a:	2c00      	cmp	r4, #0
 800432c:	d11a      	bne.n	8004364 <_malloc_r+0x5c>
 800432e:	4f24      	ldr	r7, [pc, #144]	; (80043c0 <_malloc_r+0xb8>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <_malloc_r+0x38>
 8004336:	0021      	movs	r1, r4
 8004338:	0030      	movs	r0, r6
 800433a:	f000 f869 	bl	8004410 <_sbrk_r>
 800433e:	6038      	str	r0, [r7, #0]
 8004340:	0029      	movs	r1, r5
 8004342:	0030      	movs	r0, r6
 8004344:	f000 f864 	bl	8004410 <_sbrk_r>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d12b      	bne.n	80043a4 <_malloc_r+0x9c>
 800434c:	230c      	movs	r3, #12
 800434e:	0030      	movs	r0, r6
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	f000 f877 	bl	8004444 <__malloc_unlock>
 8004356:	e003      	b.n	8004360 <_malloc_r+0x58>
 8004358:	2d00      	cmp	r5, #0
 800435a:	dade      	bge.n	800431a <_malloc_r+0x12>
 800435c:	230c      	movs	r3, #12
 800435e:	6033      	str	r3, [r6, #0]
 8004360:	2000      	movs	r0, #0
 8004362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	1b5b      	subs	r3, r3, r5
 8004368:	d419      	bmi.n	800439e <_malloc_r+0x96>
 800436a:	2b0b      	cmp	r3, #11
 800436c:	d903      	bls.n	8004376 <_malloc_r+0x6e>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	18e4      	adds	r4, r4, r3
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	e003      	b.n	800437e <_malloc_r+0x76>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	42a2      	cmp	r2, r4
 800437a:	d10e      	bne.n	800439a <_malloc_r+0x92>
 800437c:	600b      	str	r3, [r1, #0]
 800437e:	0030      	movs	r0, r6
 8004380:	f000 f860 	bl	8004444 <__malloc_unlock>
 8004384:	0020      	movs	r0, r4
 8004386:	2207      	movs	r2, #7
 8004388:	300b      	adds	r0, #11
 800438a:	1d23      	adds	r3, r4, #4
 800438c:	4390      	bics	r0, r2
 800438e:	1ac2      	subs	r2, r0, r3
 8004390:	4298      	cmp	r0, r3
 8004392:	d0e6      	beq.n	8004362 <_malloc_r+0x5a>
 8004394:	1a1b      	subs	r3, r3, r0
 8004396:	50a3      	str	r3, [r4, r2]
 8004398:	e7e3      	b.n	8004362 <_malloc_r+0x5a>
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7ef      	b.n	800437e <_malloc_r+0x76>
 800439e:	0022      	movs	r2, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7c2      	b.n	800432a <_malloc_r+0x22>
 80043a4:	2303      	movs	r3, #3
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	439c      	bics	r4, r3
 80043aa:	42a0      	cmp	r0, r4
 80043ac:	d0e1      	beq.n	8004372 <_malloc_r+0x6a>
 80043ae:	1a21      	subs	r1, r4, r0
 80043b0:	0030      	movs	r0, r6
 80043b2:	f000 f82d 	bl	8004410 <_sbrk_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d1db      	bne.n	8004372 <_malloc_r+0x6a>
 80043ba:	e7c7      	b.n	800434c <_malloc_r+0x44>
 80043bc:	200000b8 	.word	0x200000b8
 80043c0:	200000bc 	.word	0x200000bc

080043c4 <_realloc_r>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	0007      	movs	r7, r0
 80043c8:	000d      	movs	r5, r1
 80043ca:	0016      	movs	r6, r2
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d105      	bne.n	80043dc <_realloc_r+0x18>
 80043d0:	0011      	movs	r1, r2
 80043d2:	f7ff ff99 	bl	8004308 <_malloc_r>
 80043d6:	0004      	movs	r4, r0
 80043d8:	0020      	movs	r0, r4
 80043da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d103      	bne.n	80043e8 <_realloc_r+0x24>
 80043e0:	f7ff ff48 	bl	8004274 <_free_r>
 80043e4:	0034      	movs	r4, r6
 80043e6:	e7f7      	b.n	80043d8 <_realloc_r+0x14>
 80043e8:	f000 f834 	bl	8004454 <_malloc_usable_size_r>
 80043ec:	002c      	movs	r4, r5
 80043ee:	42b0      	cmp	r0, r6
 80043f0:	d2f2      	bcs.n	80043d8 <_realloc_r+0x14>
 80043f2:	0031      	movs	r1, r6
 80043f4:	0038      	movs	r0, r7
 80043f6:	f7ff ff87 	bl	8004308 <_malloc_r>
 80043fa:	1e04      	subs	r4, r0, #0
 80043fc:	d0ec      	beq.n	80043d8 <_realloc_r+0x14>
 80043fe:	0029      	movs	r1, r5
 8004400:	0032      	movs	r2, r6
 8004402:	f7ff ff1a 	bl	800423a <memcpy>
 8004406:	0029      	movs	r1, r5
 8004408:	0038      	movs	r0, r7
 800440a:	f7ff ff33 	bl	8004274 <_free_r>
 800440e:	e7e3      	b.n	80043d8 <_realloc_r+0x14>

08004410 <_sbrk_r>:
 8004410:	2300      	movs	r3, #0
 8004412:	b570      	push	{r4, r5, r6, lr}
 8004414:	4d06      	ldr	r5, [pc, #24]	; (8004430 <_sbrk_r+0x20>)
 8004416:	0004      	movs	r4, r0
 8004418:	0008      	movs	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7ff fb38 	bl	8003a90 <_sbrk>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d103      	bne.n	800442c <_sbrk_r+0x1c>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d000      	beq.n	800442c <_sbrk_r+0x1c>
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	2000020c 	.word	0x2000020c

08004434 <__malloc_lock>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4802      	ldr	r0, [pc, #8]	; (8004440 <__malloc_lock+0xc>)
 8004438:	f000 f814 	bl	8004464 <__retarget_lock_acquire_recursive>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000214 	.word	0x20000214

08004444 <__malloc_unlock>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4802      	ldr	r0, [pc, #8]	; (8004450 <__malloc_unlock+0xc>)
 8004448:	f000 f80d 	bl	8004466 <__retarget_lock_release_recursive>
 800444c:	bd10      	pop	{r4, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	20000214 	.word	0x20000214

08004454 <_malloc_usable_size_r>:
 8004454:	1f0b      	subs	r3, r1, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	da01      	bge.n	8004462 <_malloc_usable_size_r+0xe>
 800445e:	580b      	ldr	r3, [r1, r0]
 8004460:	18c0      	adds	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
