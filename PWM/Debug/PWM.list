
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035bc  080035bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000000c  080035d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080035d8  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000808a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181f  00000000  00000000  000280be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  000298e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b71  00000000  00000000  0002a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096a6  00000000  00000000  0003d499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007483d  00000000  00000000  00046b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb37c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  000bb3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003548 	.word	0x08003548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003548 	.word	0x08003548

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fbaa 	bl	8000a34 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fba5 	bl	8000a34 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dmul>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	4698      	mov	r8, r3
 8000462:	030c      	lsls	r4, r1, #12
 8000464:	004b      	lsls	r3, r1, #1
 8000466:	0006      	movs	r6, r0
 8000468:	4692      	mov	sl, r2
 800046a:	b087      	sub	sp, #28
 800046c:	0b24      	lsrs	r4, r4, #12
 800046e:	0d5b      	lsrs	r3, r3, #21
 8000470:	0fcf      	lsrs	r7, r1, #31
 8000472:	2b00      	cmp	r3, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_dmul+0x24>
 8000476:	e15c      	b.n	8000732 <__aeabi_dmul+0x2de>
 8000478:	4ad9      	ldr	r2, [pc, #868]	; (80007e0 <__aeabi_dmul+0x38c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d100      	bne.n	8000480 <__aeabi_dmul+0x2c>
 800047e:	e175      	b.n	800076c <__aeabi_dmul+0x318>
 8000480:	0f42      	lsrs	r2, r0, #29
 8000482:	00e4      	lsls	r4, r4, #3
 8000484:	4314      	orrs	r4, r2
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	0412      	lsls	r2, r2, #16
 800048a:	4314      	orrs	r4, r2
 800048c:	4ad5      	ldr	r2, [pc, #852]	; (80007e4 <__aeabi_dmul+0x390>)
 800048e:	00c5      	lsls	r5, r0, #3
 8000490:	4694      	mov	ip, r2
 8000492:	4463      	add	r3, ip
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	4699      	mov	r9, r3
 800049a:	469b      	mov	fp, r3
 800049c:	4643      	mov	r3, r8
 800049e:	4642      	mov	r2, r8
 80004a0:	031e      	lsls	r6, r3, #12
 80004a2:	0fd2      	lsrs	r2, r2, #31
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4650      	mov	r0, sl
 80004a8:	4690      	mov	r8, r2
 80004aa:	0b36      	lsrs	r6, r6, #12
 80004ac:	0d5b      	lsrs	r3, r3, #21
 80004ae:	d100      	bne.n	80004b2 <__aeabi_dmul+0x5e>
 80004b0:	e120      	b.n	80006f4 <__aeabi_dmul+0x2a0>
 80004b2:	4acb      	ldr	r2, [pc, #812]	; (80007e0 <__aeabi_dmul+0x38c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d100      	bne.n	80004ba <__aeabi_dmul+0x66>
 80004b8:	e162      	b.n	8000780 <__aeabi_dmul+0x32c>
 80004ba:	49ca      	ldr	r1, [pc, #808]	; (80007e4 <__aeabi_dmul+0x390>)
 80004bc:	0f42      	lsrs	r2, r0, #29
 80004be:	468c      	mov	ip, r1
 80004c0:	9900      	ldr	r1, [sp, #0]
 80004c2:	4463      	add	r3, ip
 80004c4:	00f6      	lsls	r6, r6, #3
 80004c6:	468c      	mov	ip, r1
 80004c8:	4316      	orrs	r6, r2
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	449c      	add	ip, r3
 80004ce:	0412      	lsls	r2, r2, #16
 80004d0:	4663      	mov	r3, ip
 80004d2:	4316      	orrs	r6, r2
 80004d4:	00c2      	lsls	r2, r0, #3
 80004d6:	2000      	movs	r0, #0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	9900      	ldr	r1, [sp, #0]
 80004dc:	4643      	mov	r3, r8
 80004de:	3101      	adds	r1, #1
 80004e0:	468c      	mov	ip, r1
 80004e2:	4649      	mov	r1, r9
 80004e4:	407b      	eors	r3, r7
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	290f      	cmp	r1, #15
 80004ea:	d826      	bhi.n	800053a <__aeabi_dmul+0xe6>
 80004ec:	4bbe      	ldr	r3, [pc, #760]	; (80007e8 <__aeabi_dmul+0x394>)
 80004ee:	0089      	lsls	r1, r1, #2
 80004f0:	5859      	ldr	r1, [r3, r1]
 80004f2:	468f      	mov	pc, r1
 80004f4:	4643      	mov	r3, r8
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	0034      	movs	r4, r6
 80004fa:	0015      	movs	r5, r2
 80004fc:	4683      	mov	fp, r0
 80004fe:	465b      	mov	r3, fp
 8000500:	2b02      	cmp	r3, #2
 8000502:	d016      	beq.n	8000532 <__aeabi_dmul+0xde>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0xb6>
 8000508:	e203      	b.n	8000912 <__aeabi_dmul+0x4be>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d000      	beq.n	8000510 <__aeabi_dmul+0xbc>
 800050e:	e0cd      	b.n	80006ac <__aeabi_dmul+0x258>
 8000510:	2200      	movs	r2, #0
 8000512:	2400      	movs	r4, #0
 8000514:	2500      	movs	r5, #0
 8000516:	9b01      	ldr	r3, [sp, #4]
 8000518:	0512      	lsls	r2, r2, #20
 800051a:	4322      	orrs	r2, r4
 800051c:	07db      	lsls	r3, r3, #31
 800051e:	431a      	orrs	r2, r3
 8000520:	0028      	movs	r0, r5
 8000522:	0011      	movs	r1, r2
 8000524:	b007      	add	sp, #28
 8000526:	bcf0      	pop	{r4, r5, r6, r7}
 8000528:	46bb      	mov	fp, r7
 800052a:	46b2      	mov	sl, r6
 800052c:	46a9      	mov	r9, r5
 800052e:	46a0      	mov	r8, r4
 8000530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000532:	2400      	movs	r4, #0
 8000534:	2500      	movs	r5, #0
 8000536:	4aaa      	ldr	r2, [pc, #680]	; (80007e0 <__aeabi_dmul+0x38c>)
 8000538:	e7ed      	b.n	8000516 <__aeabi_dmul+0xc2>
 800053a:	0c28      	lsrs	r0, r5, #16
 800053c:	042d      	lsls	r5, r5, #16
 800053e:	0c2d      	lsrs	r5, r5, #16
 8000540:	002b      	movs	r3, r5
 8000542:	0c11      	lsrs	r1, r2, #16
 8000544:	0412      	lsls	r2, r2, #16
 8000546:	0c12      	lsrs	r2, r2, #16
 8000548:	4353      	muls	r3, r2
 800054a:	4698      	mov	r8, r3
 800054c:	0013      	movs	r3, r2
 800054e:	002f      	movs	r7, r5
 8000550:	4343      	muls	r3, r0
 8000552:	4699      	mov	r9, r3
 8000554:	434f      	muls	r7, r1
 8000556:	444f      	add	r7, r9
 8000558:	46bb      	mov	fp, r7
 800055a:	4647      	mov	r7, r8
 800055c:	000b      	movs	r3, r1
 800055e:	0c3f      	lsrs	r7, r7, #16
 8000560:	46ba      	mov	sl, r7
 8000562:	4343      	muls	r3, r0
 8000564:	44da      	add	sl, fp
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	45d1      	cmp	r9, sl
 800056a:	d904      	bls.n	8000576 <__aeabi_dmul+0x122>
 800056c:	2780      	movs	r7, #128	; 0x80
 800056e:	027f      	lsls	r7, r7, #9
 8000570:	46b9      	mov	r9, r7
 8000572:	444b      	add	r3, r9
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	4653      	mov	r3, sl
 8000578:	0c1b      	lsrs	r3, r3, #16
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	041f      	lsls	r7, r3, #16
 8000580:	4643      	mov	r3, r8
 8000582:	041b      	lsls	r3, r3, #16
 8000584:	0c1b      	lsrs	r3, r3, #16
 8000586:	4698      	mov	r8, r3
 8000588:	003b      	movs	r3, r7
 800058a:	4443      	add	r3, r8
 800058c:	9304      	str	r3, [sp, #16]
 800058e:	0c33      	lsrs	r3, r6, #16
 8000590:	0436      	lsls	r6, r6, #16
 8000592:	0c36      	lsrs	r6, r6, #16
 8000594:	4698      	mov	r8, r3
 8000596:	0033      	movs	r3, r6
 8000598:	4343      	muls	r3, r0
 800059a:	4699      	mov	r9, r3
 800059c:	4643      	mov	r3, r8
 800059e:	4343      	muls	r3, r0
 80005a0:	002f      	movs	r7, r5
 80005a2:	469a      	mov	sl, r3
 80005a4:	4643      	mov	r3, r8
 80005a6:	4377      	muls	r7, r6
 80005a8:	435d      	muls	r5, r3
 80005aa:	0c38      	lsrs	r0, r7, #16
 80005ac:	444d      	add	r5, r9
 80005ae:	1945      	adds	r5, r0, r5
 80005b0:	45a9      	cmp	r9, r5
 80005b2:	d903      	bls.n	80005bc <__aeabi_dmul+0x168>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	025b      	lsls	r3, r3, #9
 80005b8:	4699      	mov	r9, r3
 80005ba:	44ca      	add	sl, r9
 80005bc:	043f      	lsls	r7, r7, #16
 80005be:	0c28      	lsrs	r0, r5, #16
 80005c0:	0c3f      	lsrs	r7, r7, #16
 80005c2:	042d      	lsls	r5, r5, #16
 80005c4:	19ed      	adds	r5, r5, r7
 80005c6:	0c27      	lsrs	r7, r4, #16
 80005c8:	0424      	lsls	r4, r4, #16
 80005ca:	0c24      	lsrs	r4, r4, #16
 80005cc:	0003      	movs	r3, r0
 80005ce:	0020      	movs	r0, r4
 80005d0:	4350      	muls	r0, r2
 80005d2:	437a      	muls	r2, r7
 80005d4:	4691      	mov	r9, r2
 80005d6:	003a      	movs	r2, r7
 80005d8:	4453      	add	r3, sl
 80005da:	9305      	str	r3, [sp, #20]
 80005dc:	0c03      	lsrs	r3, r0, #16
 80005de:	469a      	mov	sl, r3
 80005e0:	434a      	muls	r2, r1
 80005e2:	4361      	muls	r1, r4
 80005e4:	4449      	add	r1, r9
 80005e6:	4451      	add	r1, sl
 80005e8:	44ab      	add	fp, r5
 80005ea:	4589      	cmp	r9, r1
 80005ec:	d903      	bls.n	80005f6 <__aeabi_dmul+0x1a2>
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	025b      	lsls	r3, r3, #9
 80005f2:	4699      	mov	r9, r3
 80005f4:	444a      	add	r2, r9
 80005f6:	0400      	lsls	r0, r0, #16
 80005f8:	0c0b      	lsrs	r3, r1, #16
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	0409      	lsls	r1, r1, #16
 80005fe:	1809      	adds	r1, r1, r0
 8000600:	0020      	movs	r0, r4
 8000602:	4699      	mov	r9, r3
 8000604:	4643      	mov	r3, r8
 8000606:	4370      	muls	r0, r6
 8000608:	435c      	muls	r4, r3
 800060a:	437e      	muls	r6, r7
 800060c:	435f      	muls	r7, r3
 800060e:	0c03      	lsrs	r3, r0, #16
 8000610:	4698      	mov	r8, r3
 8000612:	19a4      	adds	r4, r4, r6
 8000614:	4444      	add	r4, r8
 8000616:	444a      	add	r2, r9
 8000618:	9703      	str	r7, [sp, #12]
 800061a:	42a6      	cmp	r6, r4
 800061c:	d904      	bls.n	8000628 <__aeabi_dmul+0x1d4>
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	4698      	mov	r8, r3
 8000624:	4447      	add	r7, r8
 8000626:	9703      	str	r7, [sp, #12]
 8000628:	0423      	lsls	r3, r4, #16
 800062a:	9e02      	ldr	r6, [sp, #8]
 800062c:	469a      	mov	sl, r3
 800062e:	9b05      	ldr	r3, [sp, #20]
 8000630:	445e      	add	r6, fp
 8000632:	4698      	mov	r8, r3
 8000634:	42ae      	cmp	r6, r5
 8000636:	41ad      	sbcs	r5, r5
 8000638:	1876      	adds	r6, r6, r1
 800063a:	428e      	cmp	r6, r1
 800063c:	4189      	sbcs	r1, r1
 800063e:	0400      	lsls	r0, r0, #16
 8000640:	0c00      	lsrs	r0, r0, #16
 8000642:	4450      	add	r0, sl
 8000644:	4440      	add	r0, r8
 8000646:	426d      	negs	r5, r5
 8000648:	1947      	adds	r7, r0, r5
 800064a:	46b8      	mov	r8, r7
 800064c:	4693      	mov	fp, r2
 800064e:	4249      	negs	r1, r1
 8000650:	4689      	mov	r9, r1
 8000652:	44c3      	add	fp, r8
 8000654:	44d9      	add	r9, fp
 8000656:	4298      	cmp	r0, r3
 8000658:	4180      	sbcs	r0, r0
 800065a:	45a8      	cmp	r8, r5
 800065c:	41ad      	sbcs	r5, r5
 800065e:	4593      	cmp	fp, r2
 8000660:	4192      	sbcs	r2, r2
 8000662:	4589      	cmp	r9, r1
 8000664:	4189      	sbcs	r1, r1
 8000666:	426d      	negs	r5, r5
 8000668:	4240      	negs	r0, r0
 800066a:	4328      	orrs	r0, r5
 800066c:	0c24      	lsrs	r4, r4, #16
 800066e:	4252      	negs	r2, r2
 8000670:	4249      	negs	r1, r1
 8000672:	430a      	orrs	r2, r1
 8000674:	9b03      	ldr	r3, [sp, #12]
 8000676:	1900      	adds	r0, r0, r4
 8000678:	1880      	adds	r0, r0, r2
 800067a:	18c7      	adds	r7, r0, r3
 800067c:	464b      	mov	r3, r9
 800067e:	0ddc      	lsrs	r4, r3, #23
 8000680:	9b04      	ldr	r3, [sp, #16]
 8000682:	0275      	lsls	r5, r6, #9
 8000684:	431d      	orrs	r5, r3
 8000686:	1e6a      	subs	r2, r5, #1
 8000688:	4195      	sbcs	r5, r2
 800068a:	464b      	mov	r3, r9
 800068c:	0df6      	lsrs	r6, r6, #23
 800068e:	027f      	lsls	r7, r7, #9
 8000690:	4335      	orrs	r5, r6
 8000692:	025a      	lsls	r2, r3, #9
 8000694:	433c      	orrs	r4, r7
 8000696:	4315      	orrs	r5, r2
 8000698:	01fb      	lsls	r3, r7, #7
 800069a:	d400      	bmi.n	800069e <__aeabi_dmul+0x24a>
 800069c:	e11c      	b.n	80008d8 <__aeabi_dmul+0x484>
 800069e:	2101      	movs	r1, #1
 80006a0:	086a      	lsrs	r2, r5, #1
 80006a2:	400d      	ands	r5, r1
 80006a4:	4315      	orrs	r5, r2
 80006a6:	07e2      	lsls	r2, r4, #31
 80006a8:	4315      	orrs	r5, r2
 80006aa:	0864      	lsrs	r4, r4, #1
 80006ac:	494f      	ldr	r1, [pc, #316]	; (80007ec <__aeabi_dmul+0x398>)
 80006ae:	4461      	add	r1, ip
 80006b0:	2900      	cmp	r1, #0
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dmul+0x262>
 80006b4:	e0b0      	b.n	8000818 <__aeabi_dmul+0x3c4>
 80006b6:	076b      	lsls	r3, r5, #29
 80006b8:	d009      	beq.n	80006ce <__aeabi_dmul+0x27a>
 80006ba:	220f      	movs	r2, #15
 80006bc:	402a      	ands	r2, r5
 80006be:	2a04      	cmp	r2, #4
 80006c0:	d005      	beq.n	80006ce <__aeabi_dmul+0x27a>
 80006c2:	1d2a      	adds	r2, r5, #4
 80006c4:	42aa      	cmp	r2, r5
 80006c6:	41ad      	sbcs	r5, r5
 80006c8:	426d      	negs	r5, r5
 80006ca:	1964      	adds	r4, r4, r5
 80006cc:	0015      	movs	r5, r2
 80006ce:	01e3      	lsls	r3, r4, #7
 80006d0:	d504      	bpl.n	80006dc <__aeabi_dmul+0x288>
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4a46      	ldr	r2, [pc, #280]	; (80007f0 <__aeabi_dmul+0x39c>)
 80006d6:	00c9      	lsls	r1, r1, #3
 80006d8:	4014      	ands	r4, r2
 80006da:	4461      	add	r1, ip
 80006dc:	4a45      	ldr	r2, [pc, #276]	; (80007f4 <__aeabi_dmul+0x3a0>)
 80006de:	4291      	cmp	r1, r2
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dmul+0x290>
 80006e2:	e726      	b.n	8000532 <__aeabi_dmul+0xde>
 80006e4:	0762      	lsls	r2, r4, #29
 80006e6:	08ed      	lsrs	r5, r5, #3
 80006e8:	0264      	lsls	r4, r4, #9
 80006ea:	0549      	lsls	r1, r1, #21
 80006ec:	4315      	orrs	r5, r2
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	0d4a      	lsrs	r2, r1, #21
 80006f2:	e710      	b.n	8000516 <__aeabi_dmul+0xc2>
 80006f4:	4652      	mov	r2, sl
 80006f6:	4332      	orrs	r2, r6
 80006f8:	d100      	bne.n	80006fc <__aeabi_dmul+0x2a8>
 80006fa:	e07f      	b.n	80007fc <__aeabi_dmul+0x3a8>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_dmul+0x2ae>
 8000700:	e0dc      	b.n	80008bc <__aeabi_dmul+0x468>
 8000702:	0030      	movs	r0, r6
 8000704:	f000 f978 	bl	80009f8 <__clzsi2>
 8000708:	0002      	movs	r2, r0
 800070a:	3a0b      	subs	r2, #11
 800070c:	231d      	movs	r3, #29
 800070e:	0001      	movs	r1, r0
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	4652      	mov	r2, sl
 8000714:	3908      	subs	r1, #8
 8000716:	40da      	lsrs	r2, r3
 8000718:	408e      	lsls	r6, r1
 800071a:	4316      	orrs	r6, r2
 800071c:	4652      	mov	r2, sl
 800071e:	408a      	lsls	r2, r1
 8000720:	9b00      	ldr	r3, [sp, #0]
 8000722:	4935      	ldr	r1, [pc, #212]	; (80007f8 <__aeabi_dmul+0x3a4>)
 8000724:	1a18      	subs	r0, r3, r0
 8000726:	0003      	movs	r3, r0
 8000728:	468c      	mov	ip, r1
 800072a:	4463      	add	r3, ip
 800072c:	2000      	movs	r0, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	e6d3      	b.n	80004da <__aeabi_dmul+0x86>
 8000732:	0025      	movs	r5, r4
 8000734:	4305      	orrs	r5, r0
 8000736:	d04a      	beq.n	80007ce <__aeabi_dmul+0x37a>
 8000738:	2c00      	cmp	r4, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dmul+0x2ea>
 800073c:	e0b0      	b.n	80008a0 <__aeabi_dmul+0x44c>
 800073e:	0020      	movs	r0, r4
 8000740:	f000 f95a 	bl	80009f8 <__clzsi2>
 8000744:	0001      	movs	r1, r0
 8000746:	0002      	movs	r2, r0
 8000748:	390b      	subs	r1, #11
 800074a:	231d      	movs	r3, #29
 800074c:	0010      	movs	r0, r2
 800074e:	1a5b      	subs	r3, r3, r1
 8000750:	0031      	movs	r1, r6
 8000752:	0035      	movs	r5, r6
 8000754:	3808      	subs	r0, #8
 8000756:	4084      	lsls	r4, r0
 8000758:	40d9      	lsrs	r1, r3
 800075a:	4085      	lsls	r5, r0
 800075c:	430c      	orrs	r4, r1
 800075e:	4826      	ldr	r0, [pc, #152]	; (80007f8 <__aeabi_dmul+0x3a4>)
 8000760:	1a83      	subs	r3, r0, r2
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	4699      	mov	r9, r3
 8000768:	469b      	mov	fp, r3
 800076a:	e697      	b.n	800049c <__aeabi_dmul+0x48>
 800076c:	0005      	movs	r5, r0
 800076e:	4325      	orrs	r5, r4
 8000770:	d126      	bne.n	80007c0 <__aeabi_dmul+0x36c>
 8000772:	2208      	movs	r2, #8
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2302      	movs	r3, #2
 8000778:	2400      	movs	r4, #0
 800077a:	4691      	mov	r9, r2
 800077c:	469b      	mov	fp, r3
 800077e:	e68d      	b.n	800049c <__aeabi_dmul+0x48>
 8000780:	4652      	mov	r2, sl
 8000782:	9b00      	ldr	r3, [sp, #0]
 8000784:	4332      	orrs	r2, r6
 8000786:	d110      	bne.n	80007aa <__aeabi_dmul+0x356>
 8000788:	4915      	ldr	r1, [pc, #84]	; (80007e0 <__aeabi_dmul+0x38c>)
 800078a:	2600      	movs	r6, #0
 800078c:	468c      	mov	ip, r1
 800078e:	4463      	add	r3, ip
 8000790:	4649      	mov	r1, r9
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2302      	movs	r3, #2
 8000796:	4319      	orrs	r1, r3
 8000798:	4689      	mov	r9, r1
 800079a:	2002      	movs	r0, #2
 800079c:	e69d      	b.n	80004da <__aeabi_dmul+0x86>
 800079e:	465b      	mov	r3, fp
 80007a0:	9701      	str	r7, [sp, #4]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dmul+0x354>
 80007a6:	e6ad      	b.n	8000504 <__aeabi_dmul+0xb0>
 80007a8:	e6c3      	b.n	8000532 <__aeabi_dmul+0xde>
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <__aeabi_dmul+0x38c>)
 80007ac:	2003      	movs	r0, #3
 80007ae:	4694      	mov	ip, r2
 80007b0:	4463      	add	r3, ip
 80007b2:	464a      	mov	r2, r9
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2303      	movs	r3, #3
 80007b8:	431a      	orrs	r2, r3
 80007ba:	4691      	mov	r9, r2
 80007bc:	4652      	mov	r2, sl
 80007be:	e68c      	b.n	80004da <__aeabi_dmul+0x86>
 80007c0:	220c      	movs	r2, #12
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2303      	movs	r3, #3
 80007c6:	0005      	movs	r5, r0
 80007c8:	4691      	mov	r9, r2
 80007ca:	469b      	mov	fp, r3
 80007cc:	e666      	b.n	800049c <__aeabi_dmul+0x48>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4699      	mov	r9, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	2400      	movs	r4, #0
 80007da:	469b      	mov	fp, r3
 80007dc:	e65e      	b.n	800049c <__aeabi_dmul+0x48>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	fffffc01 	.word	0xfffffc01
 80007e8:	08003560 	.word	0x08003560
 80007ec:	000003ff 	.word	0x000003ff
 80007f0:	feffffff 	.word	0xfeffffff
 80007f4:	000007fe 	.word	0x000007fe
 80007f8:	fffffc0d 	.word	0xfffffc0d
 80007fc:	4649      	mov	r1, r9
 80007fe:	2301      	movs	r3, #1
 8000800:	4319      	orrs	r1, r3
 8000802:	4689      	mov	r9, r1
 8000804:	2600      	movs	r6, #0
 8000806:	2001      	movs	r0, #1
 8000808:	e667      	b.n	80004da <__aeabi_dmul+0x86>
 800080a:	2300      	movs	r3, #0
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	2500      	movs	r5, #0
 8000810:	4a43      	ldr	r2, [pc, #268]	; (8000920 <__aeabi_dmul+0x4cc>)
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	0324      	lsls	r4, r4, #12
 8000816:	e67e      	b.n	8000516 <__aeabi_dmul+0xc2>
 8000818:	2001      	movs	r0, #1
 800081a:	1a40      	subs	r0, r0, r1
 800081c:	2838      	cmp	r0, #56	; 0x38
 800081e:	dd00      	ble.n	8000822 <__aeabi_dmul+0x3ce>
 8000820:	e676      	b.n	8000510 <__aeabi_dmul+0xbc>
 8000822:	281f      	cmp	r0, #31
 8000824:	dd5b      	ble.n	80008de <__aeabi_dmul+0x48a>
 8000826:	221f      	movs	r2, #31
 8000828:	0023      	movs	r3, r4
 800082a:	4252      	negs	r2, r2
 800082c:	1a51      	subs	r1, r2, r1
 800082e:	40cb      	lsrs	r3, r1
 8000830:	0019      	movs	r1, r3
 8000832:	2820      	cmp	r0, #32
 8000834:	d003      	beq.n	800083e <__aeabi_dmul+0x3ea>
 8000836:	4a3b      	ldr	r2, [pc, #236]	; (8000924 <__aeabi_dmul+0x4d0>)
 8000838:	4462      	add	r2, ip
 800083a:	4094      	lsls	r4, r2
 800083c:	4325      	orrs	r5, r4
 800083e:	1e6a      	subs	r2, r5, #1
 8000840:	4195      	sbcs	r5, r2
 8000842:	002a      	movs	r2, r5
 8000844:	430a      	orrs	r2, r1
 8000846:	2107      	movs	r1, #7
 8000848:	000d      	movs	r5, r1
 800084a:	2400      	movs	r4, #0
 800084c:	4015      	ands	r5, r2
 800084e:	4211      	tst	r1, r2
 8000850:	d05b      	beq.n	800090a <__aeabi_dmul+0x4b6>
 8000852:	210f      	movs	r1, #15
 8000854:	2400      	movs	r4, #0
 8000856:	4011      	ands	r1, r2
 8000858:	2904      	cmp	r1, #4
 800085a:	d053      	beq.n	8000904 <__aeabi_dmul+0x4b0>
 800085c:	1d11      	adds	r1, r2, #4
 800085e:	4291      	cmp	r1, r2
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	18a4      	adds	r4, r4, r2
 8000866:	000a      	movs	r2, r1
 8000868:	0223      	lsls	r3, r4, #8
 800086a:	d54b      	bpl.n	8000904 <__aeabi_dmul+0x4b0>
 800086c:	2201      	movs	r2, #1
 800086e:	2400      	movs	r4, #0
 8000870:	2500      	movs	r5, #0
 8000872:	e650      	b.n	8000516 <__aeabi_dmul+0xc2>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	031b      	lsls	r3, r3, #12
 8000878:	421c      	tst	r4, r3
 800087a:	d009      	beq.n	8000890 <__aeabi_dmul+0x43c>
 800087c:	421e      	tst	r6, r3
 800087e:	d107      	bne.n	8000890 <__aeabi_dmul+0x43c>
 8000880:	4333      	orrs	r3, r6
 8000882:	031c      	lsls	r4, r3, #12
 8000884:	4643      	mov	r3, r8
 8000886:	0015      	movs	r5, r2
 8000888:	0b24      	lsrs	r4, r4, #12
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <__aeabi_dmul+0x4cc>)
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	e642      	b.n	8000516 <__aeabi_dmul+0xc2>
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0312      	lsls	r2, r2, #12
 8000894:	4314      	orrs	r4, r2
 8000896:	0324      	lsls	r4, r4, #12
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <__aeabi_dmul+0x4cc>)
 800089a:	0b24      	lsrs	r4, r4, #12
 800089c:	9701      	str	r7, [sp, #4]
 800089e:	e63a      	b.n	8000516 <__aeabi_dmul+0xc2>
 80008a0:	f000 f8aa 	bl	80009f8 <__clzsi2>
 80008a4:	0001      	movs	r1, r0
 80008a6:	0002      	movs	r2, r0
 80008a8:	3115      	adds	r1, #21
 80008aa:	3220      	adds	r2, #32
 80008ac:	291c      	cmp	r1, #28
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dmul+0x45e>
 80008b0:	e74b      	b.n	800074a <__aeabi_dmul+0x2f6>
 80008b2:	0034      	movs	r4, r6
 80008b4:	3808      	subs	r0, #8
 80008b6:	2500      	movs	r5, #0
 80008b8:	4084      	lsls	r4, r0
 80008ba:	e750      	b.n	800075e <__aeabi_dmul+0x30a>
 80008bc:	f000 f89c 	bl	80009f8 <__clzsi2>
 80008c0:	0003      	movs	r3, r0
 80008c2:	001a      	movs	r2, r3
 80008c4:	3215      	adds	r2, #21
 80008c6:	3020      	adds	r0, #32
 80008c8:	2a1c      	cmp	r2, #28
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dmul+0x47a>
 80008cc:	e71e      	b.n	800070c <__aeabi_dmul+0x2b8>
 80008ce:	4656      	mov	r6, sl
 80008d0:	3b08      	subs	r3, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	409e      	lsls	r6, r3
 80008d6:	e723      	b.n	8000720 <__aeabi_dmul+0x2cc>
 80008d8:	9b00      	ldr	r3, [sp, #0]
 80008da:	469c      	mov	ip, r3
 80008dc:	e6e6      	b.n	80006ac <__aeabi_dmul+0x258>
 80008de:	4912      	ldr	r1, [pc, #72]	; (8000928 <__aeabi_dmul+0x4d4>)
 80008e0:	0022      	movs	r2, r4
 80008e2:	4461      	add	r1, ip
 80008e4:	002e      	movs	r6, r5
 80008e6:	408d      	lsls	r5, r1
 80008e8:	408a      	lsls	r2, r1
 80008ea:	40c6      	lsrs	r6, r0
 80008ec:	1e69      	subs	r1, r5, #1
 80008ee:	418d      	sbcs	r5, r1
 80008f0:	4332      	orrs	r2, r6
 80008f2:	432a      	orrs	r2, r5
 80008f4:	40c4      	lsrs	r4, r0
 80008f6:	0753      	lsls	r3, r2, #29
 80008f8:	d0b6      	beq.n	8000868 <__aeabi_dmul+0x414>
 80008fa:	210f      	movs	r1, #15
 80008fc:	4011      	ands	r1, r2
 80008fe:	2904      	cmp	r1, #4
 8000900:	d1ac      	bne.n	800085c <__aeabi_dmul+0x408>
 8000902:	e7b1      	b.n	8000868 <__aeabi_dmul+0x414>
 8000904:	0765      	lsls	r5, r4, #29
 8000906:	0264      	lsls	r4, r4, #9
 8000908:	0b24      	lsrs	r4, r4, #12
 800090a:	08d2      	lsrs	r2, r2, #3
 800090c:	4315      	orrs	r5, r2
 800090e:	2200      	movs	r2, #0
 8000910:	e601      	b.n	8000516 <__aeabi_dmul+0xc2>
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0312      	lsls	r2, r2, #12
 8000916:	4314      	orrs	r4, r2
 8000918:	0324      	lsls	r4, r4, #12
 800091a:	4a01      	ldr	r2, [pc, #4]	; (8000920 <__aeabi_dmul+0x4cc>)
 800091c:	0b24      	lsrs	r4, r4, #12
 800091e:	e5fa      	b.n	8000516 <__aeabi_dmul+0xc2>
 8000920:	000007ff 	.word	0x000007ff
 8000924:	0000043e 	.word	0x0000043e
 8000928:	0000041e 	.word	0x0000041e

0800092c <__aeabi_d2iz>:
 800092c:	000a      	movs	r2, r1
 800092e:	b530      	push	{r4, r5, lr}
 8000930:	4c13      	ldr	r4, [pc, #76]	; (8000980 <__aeabi_d2iz+0x54>)
 8000932:	0053      	lsls	r3, r2, #1
 8000934:	0309      	lsls	r1, r1, #12
 8000936:	0005      	movs	r5, r0
 8000938:	0b09      	lsrs	r1, r1, #12
 800093a:	2000      	movs	r0, #0
 800093c:	0d5b      	lsrs	r3, r3, #21
 800093e:	0fd2      	lsrs	r2, r2, #31
 8000940:	42a3      	cmp	r3, r4
 8000942:	dd04      	ble.n	800094e <__aeabi_d2iz+0x22>
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <__aeabi_d2iz+0x58>)
 8000946:	4283      	cmp	r3, r0
 8000948:	dd02      	ble.n	8000950 <__aeabi_d2iz+0x24>
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <__aeabi_d2iz+0x5c>)
 800094c:	18d0      	adds	r0, r2, r3
 800094e:	bd30      	pop	{r4, r5, pc}
 8000950:	2080      	movs	r0, #128	; 0x80
 8000952:	0340      	lsls	r0, r0, #13
 8000954:	4301      	orrs	r1, r0
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <__aeabi_d2iz+0x60>)
 8000958:	1ac0      	subs	r0, r0, r3
 800095a:	281f      	cmp	r0, #31
 800095c:	dd08      	ble.n	8000970 <__aeabi_d2iz+0x44>
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <__aeabi_d2iz+0x64>)
 8000960:	1ac3      	subs	r3, r0, r3
 8000962:	40d9      	lsrs	r1, r3
 8000964:	000b      	movs	r3, r1
 8000966:	4258      	negs	r0, r3
 8000968:	2a00      	cmp	r2, #0
 800096a:	d1f0      	bne.n	800094e <__aeabi_d2iz+0x22>
 800096c:	0018      	movs	r0, r3
 800096e:	e7ee      	b.n	800094e <__aeabi_d2iz+0x22>
 8000970:	4c08      	ldr	r4, [pc, #32]	; (8000994 <__aeabi_d2iz+0x68>)
 8000972:	40c5      	lsrs	r5, r0
 8000974:	46a4      	mov	ip, r4
 8000976:	4463      	add	r3, ip
 8000978:	4099      	lsls	r1, r3
 800097a:	000b      	movs	r3, r1
 800097c:	432b      	orrs	r3, r5
 800097e:	e7f2      	b.n	8000966 <__aeabi_d2iz+0x3a>
 8000980:	000003fe 	.word	0x000003fe
 8000984:	0000041d 	.word	0x0000041d
 8000988:	7fffffff 	.word	0x7fffffff
 800098c:	00000433 	.word	0x00000433
 8000990:	00000413 	.word	0x00000413
 8000994:	fffffbed 	.word	0xfffffbed

08000998 <__aeabi_i2d>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	2800      	cmp	r0, #0
 800099c:	d016      	beq.n	80009cc <__aeabi_i2d+0x34>
 800099e:	17c3      	asrs	r3, r0, #31
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	405d      	eors	r5, r3
 80009a4:	0fc4      	lsrs	r4, r0, #31
 80009a6:	0028      	movs	r0, r5
 80009a8:	f000 f826 	bl	80009f8 <__clzsi2>
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <__aeabi_i2d+0x5c>)
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	280a      	cmp	r0, #10
 80009b2:	dc16      	bgt.n	80009e2 <__aeabi_i2d+0x4a>
 80009b4:	0003      	movs	r3, r0
 80009b6:	002e      	movs	r6, r5
 80009b8:	3315      	adds	r3, #21
 80009ba:	409e      	lsls	r6, r3
 80009bc:	230b      	movs	r3, #11
 80009be:	1a18      	subs	r0, r3, r0
 80009c0:	40c5      	lsrs	r5, r0
 80009c2:	0552      	lsls	r2, r2, #21
 80009c4:	032d      	lsls	r5, r5, #12
 80009c6:	0b2d      	lsrs	r5, r5, #12
 80009c8:	0d53      	lsrs	r3, r2, #21
 80009ca:	e003      	b.n	80009d4 <__aeabi_i2d+0x3c>
 80009cc:	2400      	movs	r4, #0
 80009ce:	2300      	movs	r3, #0
 80009d0:	2500      	movs	r5, #0
 80009d2:	2600      	movs	r6, #0
 80009d4:	051b      	lsls	r3, r3, #20
 80009d6:	432b      	orrs	r3, r5
 80009d8:	07e4      	lsls	r4, r4, #31
 80009da:	4323      	orrs	r3, r4
 80009dc:	0030      	movs	r0, r6
 80009de:	0019      	movs	r1, r3
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	380b      	subs	r0, #11
 80009e4:	4085      	lsls	r5, r0
 80009e6:	0552      	lsls	r2, r2, #21
 80009e8:	032d      	lsls	r5, r5, #12
 80009ea:	2600      	movs	r6, #0
 80009ec:	0b2d      	lsrs	r5, r5, #12
 80009ee:	0d53      	lsrs	r3, r2, #21
 80009f0:	e7f0      	b.n	80009d4 <__aeabi_i2d+0x3c>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	0000041e 	.word	0x0000041e

080009f8 <__clzsi2>:
 80009f8:	211c      	movs	r1, #28
 80009fa:	2301      	movs	r3, #1
 80009fc:	041b      	lsls	r3, r3, #16
 80009fe:	4298      	cmp	r0, r3
 8000a00:	d301      	bcc.n	8000a06 <__clzsi2+0xe>
 8000a02:	0c00      	lsrs	r0, r0, #16
 8000a04:	3910      	subs	r1, #16
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	4298      	cmp	r0, r3
 8000a0a:	d301      	bcc.n	8000a10 <__clzsi2+0x18>
 8000a0c:	0a00      	lsrs	r0, r0, #8
 8000a0e:	3908      	subs	r1, #8
 8000a10:	091b      	lsrs	r3, r3, #4
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d301      	bcc.n	8000a1a <__clzsi2+0x22>
 8000a16:	0900      	lsrs	r0, r0, #4
 8000a18:	3904      	subs	r1, #4
 8000a1a:	a202      	add	r2, pc, #8	; (adr r2, 8000a24 <__clzsi2+0x2c>)
 8000a1c:	5c10      	ldrb	r0, [r2, r0]
 8000a1e:	1840      	adds	r0, r0, r1
 8000a20:	4770      	bx	lr
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	02020304 	.word	0x02020304
 8000a28:	01010101 	.word	0x01010101
	...

08000a34 <__clzdi2>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d103      	bne.n	8000a42 <__clzdi2+0xe>
 8000a3a:	f7ff ffdd 	bl	80009f8 <__clzsi2>
 8000a3e:	3020      	adds	r0, #32
 8000a40:	e002      	b.n	8000a48 <__clzdi2+0x14>
 8000a42:	0008      	movs	r0, r1
 8000a44:	f7ff ffd8 	bl	80009f8 <__clzsi2>
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)

08000a4c <Set_LED>:
volatile uint8_t datasentflag;

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	b2d9      	uxtb	r1, r3
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <Set_LED+0x58>)
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnum][1] = Green;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	b2d9      	uxtb	r1, r3
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <Set_LED+0x58>)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	1c0a      	adds	r2, r1, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	b2d9      	uxtb	r1, r3
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <Set_LED+0x58>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	3302      	adds	r3, #2
 8000a86:	1c0a      	adds	r2, r1, #0
 8000a88:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2d9      	uxtb	r1, r3
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <Set_LED+0x58>)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	3303      	adds	r3, #3
 8000a98:	1c0a      	adds	r2, r1, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b004      	add	sp, #16
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000002c 	.word	0x2000002c

08000aa8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness)  // 0-45
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
		}
	}

#endif
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <WS2812_Send>:

uint16_t pwmData[(24 * MAX_LED) + 50];

void WS2812_Send(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	e038      	b.n	8000b3a <WS2812_Send+0x82>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
#else
         color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000ac8:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <WS2812_Send+0xd4>)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18d3      	adds	r3, r2, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	041a      	lsls	r2, r3, #16
 8000ad6:	492d      	ldr	r1, [pc, #180]	; (8000b8c <WS2812_Send+0xd4>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18cb      	adds	r3, r1, r3
 8000ade:	3302      	adds	r3, #2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4929      	ldr	r1, [pc, #164]	; (8000b8c <WS2812_Send+0xd4>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	188a      	adds	r2, r1, r2
 8000aee:	3203      	adds	r2, #3
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	607b      	str	r3, [r7, #4]
   #endif

		for (int i = 23; i >= 0; i--) {
 8000af6:	2317      	movs	r3, #23
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e018      	b.n	8000b2e <WS2812_Send+0x76>
			if (color & (1 << i)) {
 8000afc:	2201      	movs	r2, #1
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	001a      	movs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d005      	beq.n	8000b18 <WS2812_Send+0x60>
				pwmData[indx] = 40 * 2 / 3;  // 2/3 of 90
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <WS2812_Send+0xd8>)
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	0052      	lsls	r2, r2, #1
 8000b12:	211a      	movs	r1, #26
 8000b14:	52d1      	strh	r1, [r2, r3]
 8000b16:	e004      	b.n	8000b22 <WS2812_Send+0x6a>
			} else {
				pwmData[indx] = 40 * 1 / 3;  // 1/3 of 90
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <WS2812_Send+0xd8>)
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	210d      	movs	r1, #13
 8000b20:	52d1      	strh	r1, [r2, r3]
			}
			indx++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dae3      	bge.n	8000afc <WS2812_Send+0x44>
	for (int i = 0; i < MAX_LED; i++) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	3301      	adds	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b0b      	cmp	r3, #11
 8000b3e:	ddc3      	ble.n	8000ac8 <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	e00a      	b.n	8000b5c <WS2812_Send+0xa4>
		pwmData[indx] = 0;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <WS2812_Send+0xd8>)
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	0052      	lsls	r2, r2, #1
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	52d1      	strh	r1, [r2, r3]
		indx++;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b31      	cmp	r3, #49	; 0x31
 8000b60:	ddf1      	ble.n	8000b46 <WS2812_Send+0x8e>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <WS2812_Send+0xd8>)
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <WS2812_Send+0xdc>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f001 fdaa 	bl	80026c4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <WS2812_Send+0xe0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0fa      	beq.n	8000b72 <WS2812_Send+0xba>
	};
	datasentflag = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <WS2812_Send+0xe0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b006      	add	sp, #24
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	2000002c 	.word	0x2000002c
 8000b90:	2000005c 	.word	0x2000005c
 8000b94:	20000300 	.word	0x20000300
 8000b98:	20000028 	.word	0x20000028

08000b9c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 ff15 	bl	80029d8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000300 	.word	0x20000300
 8000bc0:	20000028 	.word	0x20000028

08000bc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bca:	f000 fa57 	bl	800107c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bce:	f000 f857 	bl	8000c80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bd2:	f000 f94d 	bl	8000e70 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bd6:	f000 f92d 	bl	8000e34 <MX_DMA_Init>
	MX_TIM2_Init();
 8000bda:	f000 f8ad 	bl	8000d38 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	for (int i = 0; i < 12; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e023      	b.n	8000c2c <main+0x68>
		Set_LED(i, i * 21.25, 0x1A, (int) (i * 21.25));
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fed7 	bl	8000998 <__aeabi_i2d>
 8000bea:	2200      	movs	r2, #0
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <main+0xb8>)
 8000bee:	f7ff fc31 	bl	8000454 <__aeabi_dmul>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	000b      	movs	r3, r1
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	f7ff fe97 	bl	800092c <__aeabi_d2iz>
 8000bfe:	0004      	movs	r4, r0
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fec9 	bl	8000998 <__aeabi_i2d>
 8000c06:	2200      	movs	r2, #0
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <main+0xb8>)
 8000c0a:	f7ff fc23 	bl	8000454 <__aeabi_dmul>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	000b      	movs	r3, r1
 8000c12:	0010      	movs	r0, r2
 8000c14:	0019      	movs	r1, r3
 8000c16:	f7ff fe89 	bl	800092c <__aeabi_d2iz>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	221a      	movs	r2, #26
 8000c20:	0021      	movs	r1, r4
 8000c22:	f7ff ff13 	bl	8000a4c <Set_LED>
	for (int i = 0; i < 12; i++)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b0b      	cmp	r3, #11
 8000c30:	ddd8      	ble.n	8000be4 <main+0x20>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 46; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	e00b      	b.n	8000c50 <main+0x8c>
			Set_Brightness(i);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff34 	bl	8000aa8 <Set_Brightness>
			WS2812_Send();
 8000c40:	f7ff ff3a 	bl	8000ab8 <WS2812_Send>
			HAL_Delay(50);
 8000c44:	2032      	movs	r0, #50	; 0x32
 8000c46:	f000 fa89 	bl	800115c <HAL_Delay>
		for (int i = 0; i < 46; i++) {
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b2d      	cmp	r3, #45	; 0x2d
 8000c54:	ddf0      	ble.n	8000c38 <main+0x74>
		}

		for (int i = 45; i >= 0; i--) {
 8000c56:	232d      	movs	r3, #45	; 0x2d
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e00b      	b.n	8000c74 <main+0xb0>
			Set_Brightness(i);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff22 	bl	8000aa8 <Set_Brightness>
			WS2812_Send();
 8000c64:	f7ff ff28 	bl	8000ab8 <WS2812_Send>
			HAL_Delay(50);
 8000c68:	2032      	movs	r0, #50	; 0x32
 8000c6a:	f000 fa77 	bl	800115c <HAL_Delay>
		for (int i = 45; i >= 0; i--) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	daf0      	bge.n	8000c5c <main+0x98>
		for (int i = 0; i < 46; i++) {
 8000c7a:	e7da      	b.n	8000c32 <main+0x6e>
 8000c7c:	40354000 	.word	0x40354000

08000c80 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b095      	sub	sp, #84	; 0x54
 8000c84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c86:	2418      	movs	r4, #24
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2338      	movs	r3, #56	; 0x38
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f002 fc51 	bl	8003538 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f002 fc4a 	bl	8003538 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <SystemClock_Config+0xb0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <SystemClock_Config+0xb4>)
 8000caa:	401a      	ands	r2, r3
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <SystemClock_Config+0xb0>)
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0109      	lsls	r1, r1, #4
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2202      	movs	r2, #2
 8000cbc:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2202      	movs	r2, #2
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	02d2      	lsls	r2, r2, #11
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	03d2      	lsls	r2, r2, #15
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 feb1 	bl	8001a50 <HAL_RCC_OscConfig>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x76>
		Error_Handler();
 8000cf2:	f000 f8d3 	bl	8000e9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2203      	movs	r2, #3
 8000d00:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2101      	movs	r1, #1
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fa5d 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xa6>
		Error_Handler();
 8000d22:	f000 f8bb 	bl	8000e9c <Error_Handler>
	}
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b015      	add	sp, #84	; 0x54
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40007000 	.word	0x40007000
 8000d34:	ffffe7ff 	.word	0xffffe7ff

08000d38 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d3e:	2318      	movs	r3, #24
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	0018      	movs	r0, r3
 8000d44:	2310      	movs	r3, #16
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f002 fbf5 	bl	8003538 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d4e:	2310      	movs	r3, #16
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	0018      	movs	r0, r3
 8000d54:	2308      	movs	r3, #8
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f002 fbed 	bl	8003538 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f002 fbe6 	bl	8003538 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	05d2      	lsls	r2, r2, #23
 8000d72:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40 - 1;
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d82:	2227      	movs	r2, #39	; 0x27
 8000d84:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f001 fc0d 	bl	80025b4 <HAL_TIM_Base_Init>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000d9e:	f000 f87d 	bl	8000e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	2118      	movs	r1, #24
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	0152      	lsls	r2, r2, #5
 8000daa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 ff76 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000dbc:	f000 f86e 	bl	8000e9c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 fc36 	bl	8002634 <HAL_TIM_PWM_Init>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000dcc:	f000 f866 	bl	8000e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f002 fb2b 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8000dee:	f000 f855 	bl	8000e9c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2260      	movs	r2, #96	; 0x60
 8000df6:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000e0a:	0039      	movs	r1, r7
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 fe81 	bl	8002b18 <HAL_TIM_PWM_ConfigChannel>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 8000e1a:	f000 f83f 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <MX_TIM2_Init+0xf8>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 f89b 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b00a      	add	sp, #40	; 0x28
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000300 	.word	0x20000300

08000e34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	631a      	str	r2, [r3, #48]	; 0x30
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f000 fa50 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f000 fa62 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_GPIO_Init+0x28>)
 8000e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_GPIO_Init+0x28>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <MX_GPIO_Init+0x28>)
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000

08000e9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_MspInit+0x24>)
 8000eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x24>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_MspInit+0x24>)
 8000eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_MspInit+0x24>)
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0549      	lsls	r1, r1, #21
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d130      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_TIM_Base_MspInit+0x80>)
 8000ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_TIM_Base_MspInit+0x80>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_TIM_Base_MspInit+0x88>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	0052      	lsls	r2, r2, #1
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	00d2      	lsls	r2, r2, #3
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fa17 	bl	8001360 <HAL_DMA_Init>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8000f36:	f7ff ffb1 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f3e:	621a      	str	r2, [r3, #32]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40021000 	.word	0x40021000
 8000f54:	20000340 	.word	0x20000340
 8000f58:	40020058 	.word	0x40020058

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	240c      	movs	r4, #12
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f002 fae2 	bl	8003538 <memset>
  if(htim->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d122      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_MspPostInit+0x74>)
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_TIM_MspPostInit+0x74>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_TIM_MspPostInit+0x74>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2201      	movs	r2, #1
 8000f92:	4013      	ands	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	187a      	adds	r2, r7, r1
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fbcf 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b009      	add	sp, #36	; 0x24
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f894 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800100a:	0018      	movs	r0, r3
 800100c:	f000 facd 	bl	80015aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000340 	.word	0x20000340

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopForever+0xe>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopForever+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001052:	f7ff ffe3 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fa4b 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fdb3 	bl	8000bc4 <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
   ldr   r0, =_estack
 8001060:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800106c:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8001070:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001074:	2000038c 	.word	0x2000038c

08001078 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_COMP_IRQHandler>
	...

0800107c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x3c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Init+0x3c>)
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f811 	bl	80010bc <HAL_InitTick>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d003      	beq.n	80010a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e001      	b.n	80010aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a6:	f7ff feff 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_InitTick+0x5c>)
 80010c6:	681c      	ldr	r4, [r3, #0]
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	0019      	movs	r1, r3
 80010ce:	23fa      	movs	r3, #250	; 0xfa
 80010d0:	0098      	lsls	r0, r3, #2
 80010d2:	f7ff f819 	bl	8000108 <__udivsi3>
 80010d6:	0003      	movs	r3, r0
 80010d8:	0019      	movs	r1, r3
 80010da:	0020      	movs	r0, r4
 80010dc:	f7ff f814 	bl	8000108 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f92f 	bl	8001346 <HAL_SYSTICK_Config>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00f      	b.n	8001110 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d80b      	bhi.n	800110e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	2301      	movs	r3, #1
 80010fa:	425b      	negs	r3, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 f8fc 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_InitTick+0x64>)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b003      	add	sp, #12
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	20000008 	.word	0x20000008
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	18d2      	adds	r2, r2, r3
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_IncTick+0x20>)
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000008 	.word	0x20000008
 8001144:	20000388 	.word	0x20000388

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000388 	.word	0x20000388

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff0 	bl	8001148 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	001a      	movs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	189b      	adds	r3, r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	f7ff ffe0 	bl	8001148 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b7f      	cmp	r3, #127	; 0x7f
 80011b6:	d809      	bhi.n	80011cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	231f      	movs	r3, #31
 80011c0:	401a      	ands	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_EnableIRQ+0x30>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	4091      	lsls	r1, r2
 80011c8:	000a      	movs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
  }
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	0002      	movs	r2, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b7f      	cmp	r3, #127	; 0x7f
 80011ec:	d828      	bhi.n	8001240 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <__NVIC_SetPriority+0xd4>)
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	33c0      	adds	r3, #192	; 0xc0
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	589b      	ldr	r3, [r3, r2]
 80011fe:	1dfa      	adds	r2, r7, #7
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	0011      	movs	r1, r2
 8001204:	2203      	movs	r2, #3
 8001206:	400a      	ands	r2, r1
 8001208:	00d2      	lsls	r2, r2, #3
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	43d2      	mvns	r2, r2
 8001212:	401a      	ands	r2, r3
 8001214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	401a      	ands	r2, r3
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	2303      	movs	r3, #3
 8001226:	4003      	ands	r3, r0
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <__NVIC_SetPriority+0xd4>)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b25b      	sxtb	r3, r3
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	430a      	orrs	r2, r1
 8001238:	33c0      	adds	r3, #192	; 0xc0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800123e:	e031      	b.n	80012a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <__NVIC_SetPriority+0xd8>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0019      	movs	r1, r3
 8001248:	230f      	movs	r3, #15
 800124a:	400b      	ands	r3, r1
 800124c:	3b08      	subs	r3, #8
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3306      	adds	r3, #6
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1dfa      	adds	r2, r7, #7
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	0011      	movs	r1, r2
 8001260:	2203      	movs	r2, #3
 8001262:	400a      	ands	r2, r1
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	401a      	ands	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	2303      	movs	r3, #3
 8001282:	4003      	ands	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <__NVIC_SetPriority+0xd8>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	001c      	movs	r4, r3
 8001290:	230f      	movs	r3, #15
 8001292:	4023      	ands	r3, r4
 8001294:	3b08      	subs	r3, #8
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	430a      	orrs	r2, r1
 800129a:	3306      	adds	r3, #6
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	18c3      	adds	r3, r0, r3
 80012a0:	3304      	adds	r3, #4
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b003      	add	sp, #12
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	045b      	lsls	r3, r3, #17
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d301      	bcc.n	80012cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c8:	2301      	movs	r3, #1
 80012ca:	e010      	b.n	80012ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <SysTick_Config+0x44>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	3a01      	subs	r2, #1
 80012d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d4:	2301      	movs	r3, #1
 80012d6:	425b      	negs	r3, r3
 80012d8:	2103      	movs	r1, #3
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff ff7c 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x44>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	210f      	movs	r1, #15
 8001308:	187b      	adds	r3, r7, r1
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	187b      	adds	r3, r7, r1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	0002      	movs	r2, r0
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ff33 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ffaf 	bl	80012b4 <SysTick_Config>
 8001356:	0003      	movs	r3, r0
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e061      	b.n	8001436 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_DMA_Init+0xe0>)
 8001378:	4694      	mov	ip, r2
 800137a:	4463      	add	r3, ip
 800137c:	2114      	movs	r1, #20
 800137e:	0018      	movs	r0, r3
 8001380:	f7fe fec2 	bl	8000108 <__udivsi3>
 8001384:	0003      	movs	r3, r0
 8001386:	009a      	lsls	r2, r3, #2
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <HAL_DMA_Init+0xe4>)
 8001390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2225      	movs	r2, #37	; 0x25
 8001396:	2102      	movs	r1, #2
 8001398:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_DMA_Init+0xe8>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d018      	beq.n	800141e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_DMA_Init+0xec>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	211c      	movs	r1, #28
 80013f6:	400b      	ands	r3, r1
 80013f8:	210f      	movs	r1, #15
 80013fa:	4099      	lsls	r1, r3
 80013fc:	000b      	movs	r3, r1
 80013fe:	43d9      	mvns	r1, r3
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_DMA_Init+0xec>)
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_DMA_Init+0xec>)
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	201c      	movs	r0, #28
 8001414:	4003      	ands	r3, r0
 8001416:	409a      	lsls	r2, r3
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_DMA_Init+0xec>)
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2225      	movs	r2, #37	; 0x25
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	bffdfff8 	.word	0xbffdfff8
 8001444:	40020000 	.word	0x40020000
 8001448:	ffff800f 	.word	0xffff800f
 800144c:	400200a8 	.word	0x400200a8

08001450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2317      	movs	r3, #23
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2224      	movs	r2, #36	; 0x24
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_DMA_Start_IT+0x24>
 8001470:	2302      	movs	r3, #2
 8001472:	e04f      	b.n	8001514 <HAL_DMA_Start_IT+0xc4>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2224      	movs	r2, #36	; 0x24
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2225      	movs	r2, #37	; 0x25
 8001480:	5c9b      	ldrb	r3, [r3, r2]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d13a      	bne.n	80014fe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2225      	movs	r2, #37	; 0x25
 800148c:	2102      	movs	r1, #2
 800148e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f92a 	bl	8001706 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	210e      	movs	r1, #14
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e00f      	b.n	80014ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	210a      	movs	r1, #10
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2101      	movs	r1, #1
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e007      	b.n	800150e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2224      	movs	r2, #36	; 0x24
 8001502:	2100      	movs	r1, #0
 8001504:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001506:	2317      	movs	r3, #23
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2202      	movs	r2, #2
 800150c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800150e:	2317      	movs	r3, #23
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b006      	add	sp, #24
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001524:	210f      	movs	r1, #15
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2225      	movs	r2, #37	; 0x25
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d006      	beq.n	8001546 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2204      	movs	r2, #4
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e02a      	b.n	800159c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	210e      	movs	r1, #14
 8001552:	438a      	bics	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	438a      	bics	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	221c      	movs	r2, #28
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2101      	movs	r1, #1
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2225      	movs	r2, #37	; 0x25
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2224      	movs	r2, #36	; 0x24
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	0010      	movs	r0, r2
 800159a:	4798      	blx	r3
    }
  }
  return status;
 800159c:	230f      	movs	r3, #15
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	781b      	ldrb	r3, [r3, #0]
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	221c      	movs	r2, #28
 80015c8:	4013      	ands	r3, r2
 80015ca:	2204      	movs	r2, #4
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	d026      	beq.n	8001624 <HAL_DMA_IRQHandler+0x7a>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d022      	beq.n	8001624 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2220      	movs	r2, #32
 80015e6:	4013      	ands	r3, r2
 80015e8:	d107      	bne.n	80015fa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2104      	movs	r1, #4
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	221c      	movs	r2, #28
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2104      	movs	r1, #4
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	2b00      	cmp	r3, #0
 8001614:	d100      	bne.n	8001618 <HAL_DMA_IRQHandler+0x6e>
 8001616:	e071      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	0010      	movs	r0, r2
 8001620:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001622:	e06b      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	221c      	movs	r2, #28
 800162a:	4013      	ands	r3, r2
 800162c:	2202      	movs	r2, #2
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	d02d      	beq.n	8001694 <HAL_DMA_IRQHandler+0xea>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d029      	beq.n	8001694 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	4013      	ands	r3, r2
 800164a:	d10b      	bne.n	8001664 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	210a      	movs	r1, #10
 8001658:	438a      	bics	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2225      	movs	r2, #37	; 0x25
 8001660:	2101      	movs	r1, #1
 8001662:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	221c      	movs	r2, #28
 800166a:	401a      	ands	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2102      	movs	r1, #2
 8001672:	4091      	lsls	r1, r2
 8001674:	000a      	movs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d039      	beq.n	80016fc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	0010      	movs	r0, r2
 8001690:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001692:	e033      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	221c      	movs	r2, #28
 800169a:	4013      	ands	r3, r2
 800169c:	2208      	movs	r2, #8
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	d02a      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2208      	movs	r2, #8
 80016ac:	4013      	ands	r3, r2
 80016ae:	d026      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	210e      	movs	r1, #14
 80016bc:	438a      	bics	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	221c      	movs	r2, #28
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2101      	movs	r1, #1
 80016ce:	4091      	lsls	r1, r2
 80016d0:	000a      	movs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2225      	movs	r2, #37	; 0x25
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2224      	movs	r2, #36	; 0x24
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	0010      	movs	r0, r2
 80016fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46c0      	nop			; (mov r8, r8)
}
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	221c      	movs	r2, #28
 800171a:	401a      	ands	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2101      	movs	r1, #1
 8001722:	4091      	lsls	r1, r2
 8001724:	000a      	movs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b10      	cmp	r3, #16
 8001736:	d108      	bne.n	800174a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001748:	e007      	b.n	800175a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800177a:	e14f      	b.n	8001a1c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4091      	lsls	r1, r2
 8001786:	000a      	movs	r2, r1
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d100      	bne.n	8001794 <HAL_GPIO_Init+0x30>
 8001792:	e140      	b.n	8001a16 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	2b01      	cmp	r3, #1
 800179e:	d005      	beq.n	80017ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	2201      	movs	r2, #1
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b03      	cmp	r3, #3
 8001818:	d017      	beq.n	800184a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	4013      	ands	r3, r2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d123      	bne.n	800189e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	58d3      	ldr	r3, [r2, r3]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2207      	movs	r2, #7
 8001868:	4013      	ands	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2107      	movs	r1, #7
 8001882:	400b      	ands	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	6939      	ldr	r1, [r7, #16]
 800189c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	401a      	ands	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_GPIO_Init+0x17c>
 80018de:	e09a      	b.n	8001a16 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	4b54      	ldr	r3, [pc, #336]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80018e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x2d4>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	589b      	ldr	r3, [r3, r2]
 80018f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	429a      	cmp	r2, r3
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x1ea>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x1e6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <HAL_GPIO_Init+0x2dc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x1e2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a45      	ldr	r2, [pc, #276]	; (8001a44 <HAL_GPIO_Init+0x2e0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x1de>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <HAL_GPIO_Init+0x2e4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x1da>
 800193a:	2305      	movs	r3, #5
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x1ec>
 800193e:	2306      	movs	r3, #6
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x1ec>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x1ec>
 800194e:	2300      	movs	r3, #0
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	2103      	movs	r1, #3
 8001954:	400a      	ands	r2, r1
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2d4>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43da      	mvns	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	4013      	ands	r3, r2
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	4013      	ands	r3, r2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	039b      	lsls	r3, r3, #14
 8001a04:	4013      	ands	r3, r2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	40da      	lsrs	r2, r3
 8001a24:	1e13      	subs	r3, r2, #0
 8001a26:	d000      	beq.n	8001a2a <HAL_GPIO_Init+0x2c6>
 8001a28:	e6a8      	b.n	800177c <HAL_GPIO_Init+0x18>
  }
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b006      	add	sp, #24
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	50000800 	.word	0x50000800
 8001a44:	50000c00 	.word	0x50000c00
 8001a48:	50001c00 	.word	0x50001c00
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f000 fbaf 	bl	80021c2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a64:	4bcf      	ldr	r3, [pc, #828]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6e:	4bcd      	ldr	r3, [pc, #820]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	025b      	lsls	r3, r3, #9
 8001a76:	4013      	ands	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x36>
 8001a84:	e07e      	b.n	8001b84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d007      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x68>
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	4bc1      	ldr	r3, [pc, #772]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5a>
 8001aa8:	e06b      	b.n	8001b82 <HAL_RCC_OscConfig+0x132>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d167      	bne.n	8001b82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 fb85 	bl	80021c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x84>
 8001ac4:	4bb7      	ldr	r3, [pc, #732]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4bb6      	ldr	r3, [pc, #728]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0249      	lsls	r1, r1, #9
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e027      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	23a0      	movs	r3, #160	; 0xa0
 8001ada:	02db      	lsls	r3, r3, #11
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d10e      	bne.n	8001afe <HAL_RCC_OscConfig+0xae>
 8001ae0:	4bb0      	ldr	r3, [pc, #704]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4baf      	ldr	r3, [pc, #700]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	02c9      	lsls	r1, r1, #11
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4bad      	ldr	r3, [pc, #692]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4bac      	ldr	r3, [pc, #688]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0249      	lsls	r1, r1, #9
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e012      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001afe:	4ba9      	ldr	r3, [pc, #676]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4ba8      	ldr	r3, [pc, #672]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b04:	49a8      	ldr	r1, [pc, #672]	; (8001da8 <HAL_RCC_OscConfig+0x358>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4ba6      	ldr	r3, [pc, #664]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	4013      	ands	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4ba2      	ldr	r3, [pc, #648]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b1e:	49a3      	ldr	r1, [pc, #652]	; (8001dac <HAL_RCC_OscConfig+0x35c>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb0c 	bl	8001148 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff fb07 	bl	8001148 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d902      	bls.n	8001b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f000 fb3c 	bl	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b4a:	4b96      	ldr	r3, [pc, #600]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	029b      	lsls	r3, r3, #10
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0ef      	beq.n	8001b36 <HAL_RCC_OscConfig+0xe6>
 8001b56:	e015      	b.n	8001b84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff faf6 	bl	8001148 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b62:	f7ff faf1 	bl	8001148 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e326      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x112>
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d100      	bne.n	8001b90 <HAL_RCC_OscConfig+0x140>
 8001b8e:	e08b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d13e      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1d0>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d13b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ba8:	4b7e      	ldr	r3, [pc, #504]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d004      	beq.n	8001bbc <HAL_RCC_OscConfig+0x16c>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e302      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x360>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bd2:	4b74      	ldr	r3, [pc, #464]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2209      	movs	r2, #9
 8001bd8:	4393      	bics	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be4:	f000 fc40 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8001be8:	0001      	movs	r1, r0
 8001bea:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	4a6f      	ldr	r2, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x364>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	40da      	lsrs	r2, r3
 8001bfc:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x368>)
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c00:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x36c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2513      	movs	r5, #19
 8001c06:	197c      	adds	r4, r7, r5
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fa57 	bl	80010bc <HAL_InitTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d046      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001c1a:	197b      	adds	r3, r7, r5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	e2d0      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d027      	beq.n	8001c76 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2209      	movs	r2, #9
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fa86 	bl	8001148 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa81 	bl	8001148 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2b6      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f1      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a53      	ldr	r2, [pc, #332]	; (8001db0 <HAL_RCC_OscConfig+0x360>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	438a      	bics	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa61 	bl	8001148 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fa5c 	bl	8001148 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e291      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1f1      	bne.n	8001c8c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x264>
 8001cb2:	e0a1      	b.n	8001df8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d140      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x282>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e277      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a3a      	ldr	r2, [pc, #232]	; (8001dc0 <HAL_RCC_OscConfig+0x370>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	0a19      	lsrs	r1, r3, #8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	061a      	lsls	r2, r3, #24
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	0b5b      	lsrs	r3, r3, #13
 8001d00:	3301      	adds	r3, #1
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	210f      	movs	r1, #15
 8001d10:	400b      	ands	r3, r1
 8001d12:	4928      	ldr	r1, [pc, #160]	; (8001db4 <HAL_RCC_OscConfig+0x364>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x368>)
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x36c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2513      	movs	r5, #19
 8001d22:	197c      	adds	r4, r7, r5
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f9c9 	bl	80010bc <HAL_InitTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d2e:	197b      	adds	r3, r7, r5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001d36:	197b      	adds	r3, r7, r5
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	e242      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03f      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff f9f9 	bl	8001148 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f9f4 	bl	8001148 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e229      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_RCC_OscConfig+0x370>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	0a19      	lsrs	r1, r3, #8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	061a      	lsls	r2, r3, #24
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <HAL_RCC_OscConfig+0x354>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e029      	b.n	8001df8 <HAL_RCC_OscConfig+0x3a8>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	fffeffff 	.word	0xfffeffff
 8001dac:	fffbffff 	.word	0xfffbffff
 8001db0:	ffffe0ff 	.word	0xffffe0ff
 8001db4:	080035a0 	.word	0x080035a0
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc4:	4bbd      	ldr	r3, [pc, #756]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4bbc      	ldr	r3, [pc, #752]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001dca:	49bd      	ldr	r1, [pc, #756]	; (80020c0 <HAL_RCC_OscConfig+0x670>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f9ba 	bl	8001148 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dda:	f7ff f9b5 	bl	8001148 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e1ea      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dec:	4bb3      	ldr	r3, [pc, #716]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d036      	beq.n	8001e70 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4bac      	ldr	r3, [pc, #688]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0e:	4bab      	ldr	r3, [pc, #684]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f997 	bl	8001148 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff f992 	bl	8001148 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1c7      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e32:	4ba2      	ldr	r3, [pc, #648]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3d0>
 8001e3c:	e018      	b.n	8001e70 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b9f      	ldr	r3, [pc, #636]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e42:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	438a      	bics	r2, r1
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f97d 	bl	8001148 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f978 	bl	8001148 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ad      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e66:	4b95      	ldr	r3, [pc, #596]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d1f1      	bne.n	8001e54 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2204      	movs	r2, #4
 8001e76:	4013      	ands	r3, r2
 8001e78:	d100      	bne.n	8001e7c <HAL_RCC_OscConfig+0x42c>
 8001e7a:	e0ae      	b.n	8001fda <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7c:	2027      	movs	r0, #39	; 0x27
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e84:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	055b      	lsls	r3, r3, #21
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e94:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0549      	lsls	r1, r1, #21
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0x674>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d11a      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb0:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <HAL_RCC_OscConfig+0x674>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x674>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0049      	lsls	r1, r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f943 	bl	8001148 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7ff f93e 	bl	8001148 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e173      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b7a      	ldr	r3, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x674>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_OscConfig+0x4b2>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	0049      	lsls	r1, r1, #1
 8001efc:	430a      	orrs	r2, r1
 8001efe:	651a      	str	r2, [r3, #80]	; 0x50
 8001f00:	e031      	b.n	8001f66 <HAL_RCC_OscConfig+0x516>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4d4>
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f10:	496b      	ldr	r1, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x670>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	651a      	str	r2, [r3, #80]	; 0x50
 8001f16:	4b69      	ldr	r3, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1a:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f1c:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x678>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50
 8001f22:	e020      	b.n	8001f66 <HAL_RCC_OscConfig+0x516>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	23a0      	movs	r3, #160	; 0xa0
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10e      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4fe>
 8001f30:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f34:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	00c9      	lsls	r1, r1, #3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0049      	lsls	r1, r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x516>
 8001f4e:	4b5b      	ldr	r3, [pc, #364]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f54:	495a      	ldr	r1, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x670>)
 8001f56:	400a      	ands	r2, r1
 8001f58:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5a:	4b58      	ldr	r3, [pc, #352]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f60:	4959      	ldr	r1, [pc, #356]	; (80020c8 <HAL_RCC_OscConfig+0x678>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff f8eb 	bl	8001148 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff f8e6 	bl	8001148 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_RCC_OscConfig+0x67c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e11a      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x528>
 8001f98:	e014      	b.n	8001fc4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f8d5 	bl	8001148 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f8d0 	bl	8001148 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a47      	ldr	r2, [pc, #284]	; (80020cc <HAL_RCC_OscConfig+0x67c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e104      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1ef      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc4:	2327      	movs	r3, #39	; 0x27
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001fd4:	493e      	ldr	r1, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x680>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d049      	beq.n	8002078 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d026      	beq.n	800203a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x684>)
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_RCC_OscConfig+0x684>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0189      	lsls	r1, r1, #6
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff f899 	bl	8001148 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201c:	f7ff f894 	bl	8001148 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e0c9      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0f1      	beq.n	800201c <HAL_RCC_OscConfig+0x5cc>
 8002038:	e01e      	b.n	8002078 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0x684>)
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0x684>)
 800204c:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_OscConfig+0x688>)
 800204e:	400a      	ands	r2, r1
 8002050:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff f879 	bl	8001148 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205c:	f7ff f874 	bl	8001148 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0a9      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d1f1      	bne.n	800205c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d100      	bne.n	8002082 <HAL_RCC_OscConfig+0x632>
 8002080:	e09e      	b.n	80021c0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d100      	bne.n	800208a <HAL_RCC_OscConfig+0x63a>
 8002088:	e077      	b.n	800217a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	2b02      	cmp	r3, #2
 8002090:	d158      	bne.n	8002144 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x66c>)
 8002098:	4910      	ldr	r1, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x68c>)
 800209a:	400a      	ands	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7ff f853 	bl	8001148 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f84e 	bl	8001148 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d914      	bls.n	80020e0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e083      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	40007000 	.word	0x40007000
 80020c8:	fffffbff 	.word	0xfffffbff
 80020cc:	00001388 	.word	0x00001388
 80020d0:	efffffff 	.word	0xefffffff
 80020d4:	40010000 	.word	0x40010000
 80020d8:	ffffdfff 	.word	0xffffdfff
 80020dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1dd      	bne.n	80020a8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a37      	ldr	r2, [pc, #220]	; (80021d0 <HAL_RCC_OscConfig+0x780>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	431a      	orrs	r2, r3
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0449      	lsls	r1, r1, #17
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff f815 	bl	8001148 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f810 	bl	8001148 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e045      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	049b      	lsls	r3, r3, #18
 800213e:	4013      	ands	r3, r2
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x6d4>
 8002142:	e03d      	b.n	80021c0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 800214a:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_RCC_OscConfig+0x784>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fffa 	bl	8001148 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe fff5 	bl	8001148 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e02a      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	049b      	lsls	r3, r3, #18
 8002174:	4013      	ands	r3, r2
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x70a>
 8002178:	e022      	b.n	80021c0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e01d      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_RCC_OscConfig+0x77c>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	429a      	cmp	r2, r3
 800219a:	d10f      	bne.n	80021bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	23f0      	movs	r3, #240	; 0xf0
 80021a0:	039b      	lsls	r3, r3, #14
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b00a      	add	sp, #40	; 0x28
 80021c8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	40021000 	.word	0x40021000
 80021d0:	ff02ffff 	.word	0xff02ffff
 80021d4:	feffffff 	.word	0xfeffffff

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e128      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b96      	ldr	r3, [pc, #600]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d91e      	bls.n	8002238 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b93      	ldr	r3, [pc, #588]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	4b90      	ldr	r3, [pc, #576]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800220c:	f7fe ff9c 	bl	8001148 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	e009      	b.n	800222a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f7fe ff97 	bl	8001148 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a8a      	ldr	r2, [pc, #552]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e109      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002242:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	22f0      	movs	r2, #240	; 0xf0
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d100      	bne.n	8002262 <HAL_RCC_ClockConfig+0x8a>
 8002260:	e089      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226a:	4b79      	ldr	r3, [pc, #484]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	d120      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e1      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	049b      	lsls	r3, r3, #18
 800228a:	4013      	ands	r3, r2
 800228c:	d114      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0d5      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2204      	movs	r2, #4
 80022a0:	4013      	ands	r3, r2
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0ca      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0c2      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b8:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2203      	movs	r2, #3
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b62      	ldr	r3, [pc, #392]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022cc:	f7fe ff3c 	bl	8001148 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d111      	bne.n	8002300 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe ff33 	bl	8001148 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0a5      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	220c      	movs	r2, #12
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_ClockConfig+0x106>
 80022fe:	e03a      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d111      	bne.n	800232c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	e009      	b.n	800231e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230a:	f7fe ff1d 	bl	8001148 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e08f      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231e:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	220c      	movs	r2, #12
 8002324:	4013      	ands	r3, r2
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_ClockConfig+0x132>
 800232a:	e024      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11b      	bne.n	800236c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002334:	e009      	b.n	800234a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7fe ff07 	bl	8001148 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e079      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	220c      	movs	r2, #12
 8002350:	4013      	ands	r3, r2
 8002352:	2b04      	cmp	r3, #4
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_ClockConfig+0x15e>
 8002356:	e00e      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7fe fef6 	bl	8001148 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e068      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800236c:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	220c      	movs	r2, #12
 8002372:	4013      	ands	r3, r2
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d21e      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002396:	f7fe fed7 	bl	8001148 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fed2 	bl	8001148 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_RCC_ClockConfig+0x274>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e044      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d1ee      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2204      	movs	r2, #4
 80023c8:	4013      	ands	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCC_ClockConfig+0x27c>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2208      	movs	r2, #8
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCC_ClockConfig+0x280>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002400:	f000 f832 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002404:	0001      	movs	r1, r0
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	220f      	movs	r2, #15
 800240e:	4013      	ands	r3, r2
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_RCC_ClockConfig+0x284>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	000a      	movs	r2, r1
 8002416:	40da      	lsrs	r2, r3
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_RCC_ClockConfig+0x288>)
 800241a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_RCC_ClockConfig+0x28c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	250b      	movs	r5, #11
 8002422:	197c      	adds	r4, r7, r5
 8002424:	0018      	movs	r0, r3
 8002426:	f7fe fe49 	bl	80010bc <HAL_InitTick>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	e000      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bdb0      	pop	{r4, r5, r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40022000 	.word	0x40022000
 800244c:	00001388 	.word	0x00001388
 8002450:	40021000 	.word	0x40021000
 8002454:	fffff8ff 	.word	0xfffff8ff
 8002458:	ffffc7ff 	.word	0xffffc7ff
 800245c:	080035a0 	.word	0x080035a0
 8002460:	20000000 	.word	0x20000000
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	230c      	movs	r3, #12
 8002478:	4013      	ands	r3, r2
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d014      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x40>
 800247e:	d900      	bls.n	8002482 <HAL_RCC_GetSysClockFreq+0x1a>
 8002480:	e07b      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x112>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x24>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e076      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	4013      	ands	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800249a:	e07c      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a0:	e079      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_GetSysClockFreq+0x144>)
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a6:	e076      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	230f      	movs	r3, #15
 80024ae:	401a      	ands	r2, r3
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	0d9a      	lsrs	r2, r3, #22
 80024ba:	2303      	movs	r3, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	3301      	adds	r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	4013      	ands	r3, r2
 80024cc:	d01a      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	4a35      	ldr	r2, [pc, #212]	; (80025ac <HAL_RCC_GetSysClockFreq+0x144>)
 80024d8:	2300      	movs	r3, #0
 80024da:	69b8      	ldr	r0, [r7, #24]
 80024dc:	69f9      	ldr	r1, [r7, #28]
 80024de:	f7fd febf 	bl	8000260 <__aeabi_lmul>
 80024e2:	0002      	movs	r2, r0
 80024e4:	000b      	movs	r3, r1
 80024e6:	0010      	movs	r0, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f7fd fe93 	bl	8000220 <__aeabi_uldivmod>
 80024fa:	0002      	movs	r2, r0
 80024fc:	000b      	movs	r3, r1
 80024fe:	0013      	movs	r3, r2
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
 8002502:	e037      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	4013      	ands	r3, r2
 800250c:	d01a      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002518:	2300      	movs	r3, #0
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	f7fd fe9f 	bl	8000260 <__aeabi_lmul>
 8002522:	0002      	movs	r2, r0
 8002524:	000b      	movs	r3, r1
 8002526:	0010      	movs	r0, r2
 8002528:	0019      	movs	r1, r3
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f7fd fe73 	bl	8000220 <__aeabi_uldivmod>
 800253a:	0002      	movs	r2, r0
 800253c:	000b      	movs	r3, r1
 800253e:	0013      	movs	r3, r2
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
 8002542:	e017      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	0018      	movs	r0, r3
 8002548:	2300      	movs	r3, #0
 800254a:	0019      	movs	r1, r3
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800254e:	2300      	movs	r3, #0
 8002550:	f7fd fe86 	bl	8000260 <__aeabi_lmul>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	0010      	movs	r0, r2
 800255a:	0019      	movs	r1, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	001c      	movs	r4, r3
 8002560:	2300      	movs	r3, #0
 8002562:	001d      	movs	r5, r3
 8002564:	0022      	movs	r2, r4
 8002566:	002b      	movs	r3, r5
 8002568:	f7fd fe5a 	bl	8000220 <__aeabi_uldivmod>
 800256c:	0002      	movs	r2, r0
 800256e:	000b      	movs	r3, r1
 8002570:	0013      	movs	r3, r2
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002578:	e00d      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0b5b      	lsrs	r3, r3, #13
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	3301      	adds	r3, #1
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0212      	lsls	r2, r2, #8
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002594:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b00e      	add	sp, #56	; 0x38
 800259e:	bdb0      	pop	{r4, r5, r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	080035b0 	.word	0x080035b0

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e032      	b.n	800262c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2239      	movs	r2, #57	; 0x39
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2238      	movs	r2, #56	; 0x38
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7fe fc77 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2239      	movs	r2, #57	; 0x39
 80025e6:	2102      	movs	r1, #2
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f000 fd0d 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223e      	movs	r2, #62	; 0x3e
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223a      	movs	r2, #58	; 0x3a
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	223b      	movs	r2, #59	; 0x3b
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223c      	movs	r2, #60	; 0x3c
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223d      	movs	r2, #61	; 0x3d
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2239      	movs	r2, #57	; 0x39
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e032      	b.n	80026ac <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2239      	movs	r2, #57	; 0x39
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2238      	movs	r2, #56	; 0x38
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f829 	bl	80026b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2239      	movs	r2, #57	; 0x39
 8002666:	2102      	movs	r1, #2
 8002668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f000 fccd 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223e      	movs	r2, #62	; 0x3e
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	223a      	movs	r2, #58	; 0x3a
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	223b      	movs	r2, #59	; 0x3b
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223c      	movs	r2, #60	; 0x3c
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223d      	movs	r2, #61	; 0x3d
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2239      	movs	r2, #57	; 0x39
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	001a      	movs	r2, r3
 80026d2:	1cbb      	adds	r3, r7, #2
 80026d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2317      	movs	r3, #23
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d108      	bne.n	80026f6 <HAL_TIM_PWM_Start_DMA+0x32>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	223a      	movs	r2, #58	; 0x3a
 80026e8:	5c9b      	ldrb	r3, [r3, r2]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3b02      	subs	r3, #2
 80026ee:	425a      	negs	r2, r3
 80026f0:	4153      	adcs	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	e01f      	b.n	8002736 <HAL_TIM_PWM_Start_DMA+0x72>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d108      	bne.n	800270e <HAL_TIM_PWM_Start_DMA+0x4a>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	223b      	movs	r2, #59	; 0x3b
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3b02      	subs	r3, #2
 8002706:	425a      	negs	r2, r3
 8002708:	4153      	adcs	r3, r2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e013      	b.n	8002736 <HAL_TIM_PWM_Start_DMA+0x72>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d108      	bne.n	8002726 <HAL_TIM_PWM_Start_DMA+0x62>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	223c      	movs	r2, #60	; 0x3c
 8002718:	5c9b      	ldrb	r3, [r3, r2]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3b02      	subs	r3, #2
 800271e:	425a      	negs	r2, r3
 8002720:	4153      	adcs	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e007      	b.n	8002736 <HAL_TIM_PWM_Start_DMA+0x72>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	223d      	movs	r2, #61	; 0x3d
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3b02      	subs	r3, #2
 8002730:	425a      	negs	r2, r3
 8002732:	4153      	adcs	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	e13d      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d108      	bne.n	8002756 <HAL_TIM_PWM_Start_DMA+0x92>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	223a      	movs	r2, #58	; 0x3a
 8002748:	5c9b      	ldrb	r3, [r3, r2]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	425a      	negs	r2, r3
 8002750:	4153      	adcs	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e01f      	b.n	8002796 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d108      	bne.n	800276e <HAL_TIM_PWM_Start_DMA+0xaa>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	223b      	movs	r2, #59	; 0x3b
 8002760:	5c9b      	ldrb	r3, [r3, r2]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	425a      	negs	r2, r3
 8002768:	4153      	adcs	r3, r2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e013      	b.n	8002796 <HAL_TIM_PWM_Start_DMA+0xd2>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d108      	bne.n	8002786 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	223c      	movs	r2, #60	; 0x3c
 8002778:	5c9b      	ldrb	r3, [r3, r2]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	425a      	negs	r2, r3
 8002780:	4153      	adcs	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e007      	b.n	8002796 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	223d      	movs	r2, #61	; 0x3d
 800278a:	5c9b      	ldrb	r3, [r3, r2]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	425a      	negs	r2, r3
 8002792:	4153      	adcs	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d025      	beq.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_TIM_PWM_Start_DMA+0xe8>
 80027a0:	1cbb      	adds	r3, r7, #2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e106      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_TIM_PWM_Start_DMA+0xf8>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	223a      	movs	r2, #58	; 0x3a
 80027b6:	2102      	movs	r1, #2
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	e016      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x126>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d104      	bne.n	80027cc <HAL_TIM_PWM_Start_DMA+0x108>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	223b      	movs	r2, #59	; 0x3b
 80027c6:	2102      	movs	r1, #2
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	e00e      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x126>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d104      	bne.n	80027dc <HAL_TIM_PWM_Start_DMA+0x118>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	223c      	movs	r2, #60	; 0x3c
 80027d6:	2102      	movs	r1, #2
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	e006      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x126>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	223d      	movs	r2, #61	; 0x3d
 80027e0:	2102      	movs	r1, #2
 80027e2:	5499      	strb	r1, [r3, r2]
 80027e4:	e001      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0e7      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d100      	bne.n	80027f2 <HAL_TIM_PWM_Start_DMA+0x12e>
 80027f0:	e080      	b.n	80028f4 <HAL_TIM_PWM_Start_DMA+0x230>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d900      	bls.n	80027fa <HAL_TIM_PWM_Start_DMA+0x136>
 80027f8:	e0a1      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x27a>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d054      	beq.n	80028aa <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d900      	bls.n	8002808 <HAL_TIM_PWM_Start_DMA+0x144>
 8002806:	e09a      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x27a>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_PWM_Start_DMA+0x152>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d025      	beq.n	8002860 <HAL_TIM_PWM_Start_DMA+0x19c>
 8002814:	e093      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_TIM_PWM_Start_DMA+0x300>)
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002824:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a68      	ldr	r2, [pc, #416]	; (80029cc <HAL_TIM_PWM_Start_DMA+0x308>)
 800282c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a18      	ldr	r0, [r3, #32]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3334      	adds	r3, #52	; 0x34
 800283a:	001a      	movs	r2, r3
 800283c:	1cbb      	adds	r3, r7, #2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f7fe fe06 	bl	8001450 <HAL_DMA_Start_IT>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b6      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	0089      	lsls	r1, r1, #2
 800285a:	430a      	orrs	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
      break;
 800285e:	e073      	b.n	8002948 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	4a56      	ldr	r2, [pc, #344]	; (80029c8 <HAL_TIM_PWM_Start_DMA+0x304>)
 800286e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_TIM_PWM_Start_DMA+0x308>)
 8002876:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3338      	adds	r3, #56	; 0x38
 8002884:	001a      	movs	r2, r3
 8002886:	1cbb      	adds	r3, r7, #2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f7fe fde1 	bl	8001450 <HAL_DMA_Start_IT>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d001      	beq.n	8002896 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e091      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	00c9      	lsls	r1, r1, #3
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]
      break;
 80028a8:	e04e      	b.n	8002948 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	4a45      	ldr	r2, [pc, #276]	; (80029c4 <HAL_TIM_PWM_Start_DMA+0x300>)
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <HAL_TIM_PWM_Start_DMA+0x304>)
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	4a43      	ldr	r2, [pc, #268]	; (80029cc <HAL_TIM_PWM_Start_DMA+0x308>)
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	333c      	adds	r3, #60	; 0x3c
 80028ce:	001a      	movs	r2, r3
 80028d0:	1cbb      	adds	r3, r7, #2
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f7fe fdbc 	bl	8001450 <HAL_DMA_Start_IT>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e06c      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	0109      	lsls	r1, r1, #4
 80028ee:	430a      	orrs	r2, r1
 80028f0:	60da      	str	r2, [r3, #12]
      break;
 80028f2:	e029      	b.n	8002948 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_TIM_PWM_Start_DMA+0x300>)
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002902:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_TIM_PWM_Start_DMA+0x308>)
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3340      	adds	r3, #64	; 0x40
 8002918:	001a      	movs	r2, r3
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	f7fe fd97 	bl	8001450 <HAL_DMA_Start_IT>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e047      	b.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0149      	lsls	r1, r1, #5
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
      break;
 800293c:	e004      	b.n	8002948 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800293e:	2317      	movs	r3, #23
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
      break;
 8002946:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002948:	2317      	movs	r3, #23
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d130      	bne.n	80029b4 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	2201      	movs	r2, #1
 800295a:	0018      	movs	r0, r3
 800295c:	f000 fd4c 	bl	80033f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	429a      	cmp	r2, r3
 800296a:	d009      	beq.n	8002980 <HAL_TIM_PWM_Start_DMA+0x2bc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIM_PWM_Start_DMA+0x310>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2207      	movs	r2, #7
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d010      	beq.n	80029b4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	e007      	b.n	80029b4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029b4:	2317      	movs	r3, #23
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	781b      	ldrb	r3, [r3, #0]
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b006      	add	sp, #24
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	08002f01 	.word	0x08002f01
 80029c8:	08002fab 	.word	0x08002fab
 80029cc:	08002e6d 	.word	0x08002e6d
 80029d0:	40010800 	.word	0x40010800
 80029d4:	40011400 	.word	0x40011400

080029d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	230f      	movs	r3, #15
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d039      	beq.n	8002a64 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d844      	bhi.n	8002a80 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d025      	beq.n	8002a48 <HAL_TIM_PWM_Stop_DMA+0x70>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d83e      	bhi.n	8002a80 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_PWM_Stop_DMA+0x54>
 8002a0e:	e037      	b.n	8002a80 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	493a      	ldr	r1, [pc, #232]	; (8002b04 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe fd79 	bl	800151c <HAL_DMA_Abort_IT>
      break;
 8002a2a:	e02e      	b.n	8002a8a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4934      	ldr	r1, [pc, #208]	; (8002b08 <HAL_TIM_PWM_Stop_DMA+0x130>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe fd6b 	bl	800151c <HAL_DMA_Abort_IT>
      break;
 8002a46:	e020      	b.n	8002a8a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	492e      	ldr	r1, [pc, #184]	; (8002b0c <HAL_TIM_PWM_Stop_DMA+0x134>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fe fd5d 	bl	800151c <HAL_DMA_Abort_IT>
      break;
 8002a62:	e012      	b.n	8002a8a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4928      	ldr	r1, [pc, #160]	; (8002b10 <HAL_TIM_PWM_Stop_DMA+0x138>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fe fd4f 	bl	800151c <HAL_DMA_Abort_IT>
      break;
 8002a7e:	e004      	b.n	8002a8a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
      break;
 8002a88:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d130      	bne.n	8002af6 <HAL_TIM_PWM_Stop_DMA+0x11e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fcab 	bl	80033f8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_TIM_PWM_Stop_DMA+0x13c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_PWM_Stop_DMA+0xe6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	438a      	bics	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Stop_DMA+0xf6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223a      	movs	r2, #58	; 0x3a
 8002ac8:	2101      	movs	r1, #1
 8002aca:	5499      	strb	r1, [r3, r2]
 8002acc:	e013      	b.n	8002af6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Stop_DMA+0x106>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223b      	movs	r2, #59	; 0x3b
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Stop_DMA+0x116>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	223c      	movs	r2, #60	; 0x3c
 8002ae8:	2101      	movs	r1, #1
 8002aea:	5499      	strb	r1, [r3, r2]
 8002aec:	e003      	b.n	8002af6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223d      	movs	r2, #61	; 0x3d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002af6:	230f      	movs	r3, #15
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fffffdff 	.word	0xfffffdff
 8002b08:	fffffbff 	.word	0xfffffbff
 8002b0c:	fffff7ff 	.word	0xfffff7ff
 8002b10:	ffffefff 	.word	0xffffefff
 8002b14:	00001111 	.word	0x00001111

08002b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2317      	movs	r3, #23
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2238      	movs	r2, #56	; 0x38
 8002b30:	5c9b      	ldrb	r3, [r3, r2]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0ad      	b.n	8002c96 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2238      	movs	r2, #56	; 0x38
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d100      	bne.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b48:	e076      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d900      	bls.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b50:	e095      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d04e      	beq.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d900      	bls.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b5e:	e08e      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d021      	beq.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b6c:	e087      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	0011      	movs	r1, r2
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 faa0 	bl	80030bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2108      	movs	r1, #8
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2104      	movs	r1, #4
 8002b98:	438a      	bics	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	619a      	str	r2, [r3, #24]
      break;
 8002bae:	e06b      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fabb 	bl	8003134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4931      	ldr	r1, [pc, #196]	; (8002ca0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e048      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fada 	bl	80031b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2108      	movs	r1, #8
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2104      	movs	r1, #4
 8002c20:	438a      	bics	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69d9      	ldr	r1, [r3, #28]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	61da      	str	r2, [r3, #28]
      break;
 8002c36:	e027      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 faf9 	bl	8003238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0109      	lsls	r1, r1, #4
 8002c54:	430a      	orrs	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	490f      	ldr	r1, [pc, #60]	; (8002ca0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69d9      	ldr	r1, [r3, #28]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
      break;
 8002c7c:	e004      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c7e:	2317      	movs	r3, #23
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2238      	movs	r2, #56	; 0x38
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]

  return status;
 8002c90:	2317      	movs	r3, #23
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	781b      	ldrb	r3, [r3, #0]
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	fffffbff 	.word	0xfffffbff

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	230f      	movs	r3, #15
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2238      	movs	r2, #56	; 0x38
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_ConfigClockSource+0x20>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0bc      	b.n	8002e3e <HAL_TIM_ConfigClockSource+0x19a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2239      	movs	r2, #57	; 0x39
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2277      	movs	r2, #119	; 0x77
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	0192      	lsls	r2, r2, #6
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0xde>
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	0192      	lsls	r2, r2, #6
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d900      	bls.n	8002d0a <HAL_TIM_ConfigClockSource+0x66>
 8002d08:	e088      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	0152      	lsls	r2, r2, #5
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d100      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x70>
 8002d12:	e088      	b.n	8002e26 <HAL_TIM_ConfigClockSource+0x182>
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	0152      	lsls	r2, r2, #5
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d900      	bls.n	8002d1e <HAL_TIM_ConfigClockSource+0x7a>
 8002d1c:	e07e      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b70      	cmp	r3, #112	; 0x70
 8002d20:	d018      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0xb0>
 8002d22:	d900      	bls.n	8002d26 <HAL_TIM_ConfigClockSource+0x82>
 8002d24:	e07a      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d26:	2b60      	cmp	r3, #96	; 0x60
 8002d28:	d04f      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x126>
 8002d2a:	d900      	bls.n	8002d2e <HAL_TIM_ConfigClockSource+0x8a>
 8002d2c:	e076      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d2e:	2b50      	cmp	r3, #80	; 0x50
 8002d30:	d03b      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x106>
 8002d32:	d900      	bls.n	8002d36 <HAL_TIM_ConfigClockSource+0x92>
 8002d34:	e072      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d057      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x146>
 8002d3a:	d900      	bls.n	8002d3e <HAL_TIM_ConfigClockSource+0x9a>
 8002d3c:	e06e      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d3e:	2b30      	cmp	r3, #48	; 0x30
 8002d40:	d063      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x166>
 8002d42:	d86b      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d060      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x166>
 8002d48:	d868      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d05d      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x166>
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d05b      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x166>
 8002d52:	e063      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f000 fb28 	bl	80033b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2277      	movs	r2, #119	; 0x77
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
      break;
 8002d80:	e052      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f000 fb11 	bl	80033b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	01c9      	lsls	r1, r1, #7
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
      break;
 8002da8:	e03e      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	001a      	movs	r2, r3
 8002db8:	f000 fa84 	bl	80032c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2150      	movs	r1, #80	; 0x50
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 fade 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e02e      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	f000 faa2 	bl	8003320 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2160      	movs	r1, #96	; 0x60
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 face 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8002de8:	e01e      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	001a      	movs	r2, r3
 8002df8:	f000 fa64 	bl	80032c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fabe 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e00e      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0019      	movs	r1, r3
 8002e14:	0010      	movs	r0, r2
 8002e16:	f000 fab5 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8002e1a:	e005      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
      break;
 8002e24:	e000      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2239      	movs	r2, #57	; 0x39
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2238      	movs	r2, #56	; 0x38
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

  return status;
 8002e38:	230f      	movs	r3, #15
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b004      	add	sp, #16
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	ffff00ff 	.word	0xffff00ff

08002e4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	223a      	movs	r2, #58	; 0x3a
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	e02a      	b.n	8002eea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	223b      	movs	r2, #59	; 0x3b
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	5499      	strb	r1, [r3, r2]
 8002eac:	e01d      	b.n	8002eea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d107      	bne.n	8002ec8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	223c      	movs	r2, #60	; 0x3c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]
 8002ec6:	e010      	b.n	8002eea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d107      	bne.n	8002ee2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	223d      	movs	r2, #61	; 0x3d
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]
 8002ee0:	e003      	b.n	8002eea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2239      	movs	r2, #57	; 0x39
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ffb5 	bl	8002e5c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10b      	bne.n	8002f30 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d136      	bne.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	223a      	movs	r2, #58	; 0x3a
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	e031      	b.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10b      	bne.n	8002f52 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d125      	bne.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	223b      	movs	r2, #59	; 0x3b
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]
 8002f50:	e020      	b.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d10b      	bne.n	8002f74 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	223c      	movs	r2, #60	; 0x3c
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	e00f      	b.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d10a      	bne.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2208      	movs	r2, #8
 8002f82:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d103      	bne.n	8002f94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	223d      	movs	r2, #61	; 0x3d
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7fd fe00 	bl	8000b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	761a      	strb	r2, [r3, #24]
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d103      	bne.n	8002fca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	761a      	strb	r2, [r3, #24]
 8002fc8:	e019      	b.n	8002ffe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d103      	bne.n	8002fdc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	761a      	strb	r2, [r3, #24]
 8002fda:	e010      	b.n	8002ffe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d103      	bne.n	8002fee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	761a      	strb	r2, [r3, #24]
 8002fec:	e007      	b.n	8002ffe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d102      	bne.n	8002ffe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff ff23 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}

08003014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	05db      	lsls	r3, r3, #23
 800302a:	429a      	cmp	r2, r3
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x2a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <TIM_Base_SetConfig+0x9c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x2a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_Base_SetConfig+0xa0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2270      	movs	r2, #112	; 0x70
 8003042:	4393      	bics	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	05db      	lsls	r3, r3, #23
 8003056:	429a      	cmp	r2, r3
 8003058:	d007      	beq.n	800306a <TIM_Base_SetConfig+0x56>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <TIM_Base_SetConfig+0x9c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_Base_SetConfig+0x56>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <TIM_Base_SetConfig+0xa0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d108      	bne.n	800307c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <TIM_Base_SetConfig+0xa4>)
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	4393      	bics	r3, r2
 8003082:	001a      	movs	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	615a      	str	r2, [r3, #20]
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40010800 	.word	0x40010800
 80030b4:	40011400 	.word	0x40011400
 80030b8:	fffffcff 	.word	0xfffffcff

080030bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4393      	bics	r3, r2
 80030ce:	001a      	movs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2270      	movs	r2, #112	; 0x70
 80030ea:	4393      	bics	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2203      	movs	r2, #3
 80030f2:	4393      	bics	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2202      	movs	r2, #2
 8003104:	4393      	bics	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b006      	add	sp, #24
 8003132:	bd80      	pop	{r7, pc}

08003134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2210      	movs	r2, #16
 8003144:	4393      	bics	r3, r2
 8003146:	001a      	movs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <TIM_OC2_SetConfig+0x7c>)
 8003162:	4013      	ands	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <TIM_OC2_SetConfig+0x80>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2220      	movs	r2, #32
 800317e:	4393      	bics	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	ffff8fff 	.word	0xffff8fff
 80031b4:	fffffcff 	.word	0xfffffcff

080031b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <TIM_OC3_SetConfig+0x78>)
 80031c8:	401a      	ands	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2270      	movs	r2, #112	; 0x70
 80031e4:	4393      	bics	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2203      	movs	r2, #3
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <TIM_OC3_SetConfig+0x7c>)
 80031fe:	4013      	ands	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b006      	add	sp, #24
 800322e:	bd80      	pop	{r7, pc}
 8003230:	fffffeff 	.word	0xfffffeff
 8003234:	fffffdff 	.word	0xfffffdff

08003238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <TIM_OC4_SetConfig+0x7c>)
 8003248:	401a      	ands	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <TIM_OC4_SetConfig+0x80>)
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <TIM_OC4_SetConfig+0x84>)
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <TIM_OC4_SetConfig+0x88>)
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	031b      	lsls	r3, r3, #12
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b006      	add	sp, #24
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	ffffefff 	.word	0xffffefff
 80032b8:	ffff8fff 	.word	0xffff8fff
 80032bc:	fffffcff 	.word	0xfffffcff
 80032c0:	ffffdfff 	.word	0xffffdfff

080032c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	2201      	movs	r2, #1
 80032dc:	4393      	bics	r3, r2
 80032de:	001a      	movs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	22f0      	movs	r2, #240	; 0xf0
 80032ee:	4393      	bics	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	220a      	movs	r2, #10
 8003300:	4393      	bics	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b006      	add	sp, #24
 800331e:	bd80      	pop	{r7, pc}

08003320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2210      	movs	r2, #16
 8003332:	4393      	bics	r3, r2
 8003334:	001a      	movs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <TIM_TI2_ConfigInputStage+0x60>)
 800334a:	4013      	ands	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	031b      	lsls	r3, r3, #12
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	22a0      	movs	r2, #160	; 0xa0
 800335c:	4393      	bics	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b006      	add	sp, #24
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	ffff0fff 	.word	0xffff0fff

08003384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2270      	movs	r2, #112	; 0x70
 8003398:	4393      	bics	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	2207      	movs	r2, #7
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <TIM_ETR_SetConfig+0x3c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	021a      	lsls	r2, r3, #8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	431a      	orrs	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4313      	orrs	r3, r2
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	609a      	str	r2, [r3, #8]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b006      	add	sp, #24
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	ffff00ff 	.word	0xffff00ff

080033f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	221f      	movs	r2, #31
 8003408:	4013      	ands	r3, r2
 800340a:	2201      	movs	r2, #1
 800340c:	409a      	lsls	r2, r3
 800340e:	0013      	movs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	43d2      	mvns	r2, r2
 800341a:	401a      	ands	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	211f      	movs	r1, #31
 8003428:	400b      	ands	r3, r1
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4099      	lsls	r1, r3
 800342e:	000b      	movs	r3, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2238      	movs	r2, #56	; 0x38
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e042      	b.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2238      	movs	r2, #56	; 0x38
 800345c:	2101      	movs	r1, #1
 800345e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2239      	movs	r2, #57	; 0x39
 8003464:	2102      	movs	r1, #2
 8003466:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2270      	movs	r2, #112	; 0x70
 800347c:	4393      	bics	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	429a      	cmp	r2, r3
 800349c:	d009      	beq.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10c      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	4393      	bics	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2239      	movs	r2, #57	; 0x39
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2238      	movs	r2, #56	; 0x38
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40011400 	.word	0x40011400

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	2600      	movs	r6, #0
 80034f4:	4d0c      	ldr	r5, [pc, #48]	; (8003528 <__libc_init_array+0x38>)
 80034f6:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	2600      	movs	r6, #0
 8003502:	f000 f821 	bl	8003548 <_init>
 8003506:	4d0a      	ldr	r5, [pc, #40]	; (8003530 <__libc_init_array+0x40>)
 8003508:	4c0a      	ldr	r4, [pc, #40]	; (8003534 <__libc_init_array+0x44>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	00b3      	lsls	r3, r6, #2
 8003516:	58eb      	ldr	r3, [r5, r3]
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	00b3      	lsls	r3, r6, #2
 8003520:	58eb      	ldr	r3, [r5, r3]
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	080035c4 	.word	0x080035c4
 800352c:	080035c4 	.word	0x080035c4
 8003530:	080035c4 	.word	0x080035c4
 8003534:	080035c8 	.word	0x080035c8

08003538 <memset>:
 8003538:	0003      	movs	r3, r0
 800353a:	1882      	adds	r2, r0, r2
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
