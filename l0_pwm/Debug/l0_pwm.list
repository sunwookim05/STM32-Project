
l0_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002330  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002428  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007140  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001396  00000000  00000000  00027174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00028510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00028cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012735  00000000  00000000  000293e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009400  00000000  00000000  0003bb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073fe1  00000000  00000000  00044f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b84  00000000  00000000  000b8f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023d8 	.word	0x080023d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023d8 	.word	0x080023d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 f9fb 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f831 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f90d 	bl	80006c8 <MX_GPIO_Init>
  MX_TIM22_Init();
 80004ae:	f000 f889 	bl	80005c4 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <main+0x64>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fae2 	bl	8001a80 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t last;
	  uint32_t now = HAL_GetTick();
 80004bc:	f000 fa54 	bl	8000968 <HAL_GetTick>
 80004c0:	0003      	movs	r3, r0
 80004c2:	607b      	str	r3, [r7, #4]
	  static uint32_t pwmValue = 0;

	  if(now - last > 100){
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <main+0x68>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	2b64      	cmp	r3, #100	; 0x64
 80004ce:	d9f5      	bls.n	80004bc <main+0x20>
		  pwmValue += 50;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x6c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3332      	adds	r3, #50	; 0x32
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <main+0x6c>)
 80004da:	601a      	str	r2, [r3, #0]
		  if(pwmValue > 1000){
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <main+0x6c>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	23fa      	movs	r3, #250	; 0xfa
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d902      	bls.n	80004ee <main+0x52>
			  pwmValue = 0;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <main+0x6c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
		  }
		  htim22.Instance->CCR2 = pwmValue;
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <main+0x64>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <main+0x6c>)
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	639a      	str	r2, [r3, #56]	; 0x38
		  //__HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, pwmValue);
		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

		  last = now;
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <main+0x68>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
  {
 80004fe:	e7dd      	b.n	80004bc <main+0x20>
 8000500:	20000030 	.word	0x20000030
 8000504:	20000028 	.word	0x20000028
 8000508:	2000002c 	.word	0x2000002c

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b095      	sub	sp, #84	; 0x54
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	2418      	movs	r4, #24
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2338      	movs	r3, #56	; 0x38
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f001 ff53 	bl	80023c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f001 ff4c 	bl	80023c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xb0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a22      	ldr	r2, [pc, #136]	; (80005c0 <SystemClock_Config+0xb4>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <SystemClock_Config+0xb0>)
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	02d2      	lsls	r2, r2, #11
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	03d2      	lsls	r2, r2, #15
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	187b      	adds	r3, r7, r1
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fc49 	bl	8000e0c <HAL_RCC_OscConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800057e:	f000 f8d9 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	220f      	movs	r2, #15
 8000586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2101      	movs	r1, #1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fff5 	bl	8001594 <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ae:	f000 f8c1 	bl	8000734 <Error_Handler>
  }
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b015      	add	sp, #84	; 0x54
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40007000 	.word	0x40007000
 80005c0:	ffffe7ff 	.word	0xffffe7ff

080005c4 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	2318      	movs	r3, #24
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2310      	movs	r3, #16
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f001 fef7 	bl	80023c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	2310      	movs	r3, #16
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2308      	movs	r3, #8
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f001 feef 	bl	80023c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	2310      	movs	r3, #16
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 fee8 	bl	80023c8 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_TIM22_Init+0xf8>)
 80005fa:	4a31      	ldr	r2, [pc, #196]	; (80006c0 <MX_TIM22_Init+0xfc>)
 80005fc:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_TIM22_Init+0xf8>)
 8000600:	221f      	movs	r2, #31
 8000602:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_TIM22_Init+0xf8>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1000-1;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_TIM22_Init+0xf8>)
 800060c:	4a2d      	ldr	r2, [pc, #180]	; (80006c4 <MX_TIM22_Init+0x100>)
 800060e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_TIM22_Init+0xf8>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_TIM22_Init+0xf8>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_TIM22_Init+0xf8>)
 800061e:	0018      	movs	r0, r3
 8000620:	f001 f9a6 	bl	8001970 <HAL_TIM_Base_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8000628:	f000 f884 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062c:	2118      	movs	r1, #24
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0152      	lsls	r2, r2, #5
 8000634:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000636:	187a      	adds	r2, r7, r1
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_TIM22_Init+0xf8>)
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fb67 	bl	8001d10 <HAL_TIM_ConfigClockSource>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 8000646:	f000 f875 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM22_Init+0xf8>)
 800064c:	0018      	movs	r0, r3
 800064e:	f001 f9cf 	bl	80019f0 <HAL_TIM_PWM_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000656:	f000 f86d 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065a:	2110      	movs	r1, #16
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000668:	187a      	adds	r2, r7, r1
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_TIM22_Init+0xf8>)
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fe2e 	bl	80022d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM22_Init+0xb8>
  {
    Error_Handler();
 8000678:	f000 f85c 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067c:	003b      	movs	r3, r7
 800067e:	2260      	movs	r2, #96	; 0x60
 8000680:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000682:	003b      	movs	r3, r7
 8000684:	22fa      	movs	r2, #250	; 0xfa
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	003b      	movs	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	003b      	movs	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000696:	0039      	movs	r1, r7
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_TIM22_Init+0xf8>)
 800069a:	2204      	movs	r2, #4
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fa7b 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM22_Init+0xe6>
  {
    Error_Handler();
 80006a6:	f000 f845 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <MX_TIM22_Init+0xf8>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f873 	bl	8000798 <HAL_TIM_MspPostInit>

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b00a      	add	sp, #40	; 0x28
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000030 	.word	0x20000030
 80006c0:	40011400 	.word	0x40011400
 80006c4:	000003e7 	.word	0x000003e7

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f001 fe76 	bl	80023c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_GPIO_Init+0x68>)
 80006de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_GPIO_Init+0x68>)
 80006e2:	2101      	movs	r1, #1
 80006e4:	430a      	orrs	r2, r1
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_GPIO_Init+0x68>)
 80006ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ec:	2201      	movs	r2, #1
 80006ee:	4013      	ands	r3, r2
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2200      	movs	r2, #0
 80006fa:	2108      	movs	r1, #8
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fb67 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2208      	movs	r2, #8
 8000706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2201      	movs	r2, #1
 800070c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800071a:	1d3a      	adds	r2, r7, #4
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 f9de 	bl	8000ae4 <HAL_GPIO_Init>

}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b006      	add	sp, #24
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_MspInit+0x24>)
 8000746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x24>)
 800074a:	2101      	movs	r1, #1
 800074c:	430a      	orrs	r2, r1
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_MspInit+0x24>)
 8000752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_MspInit+0x24>)
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0549      	lsls	r1, r1, #21
 800075a:	430a      	orrs	r2, r1
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM22)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_TIM_Base_MspInit+0x28>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d105      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_TIM_Base_MspInit+0x2c>)
 800077c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_TIM_Base_MspInit+0x2c>)
 8000780:	2120      	movs	r1, #32
 8000782:	430a      	orrs	r2, r1
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40011400 	.word	0x40011400
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	240c      	movs	r4, #12
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2314      	movs	r3, #20
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f001 fe0c 	bl	80023c8 <memset>
  if(htim->Instance==TIM22)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_TIM_MspPostInit+0x70>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d122      	bne.n	8000800 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM22_MspPostInit 0 */

  /* USER CODE END TIM22_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_TIM_MspPostInit+0x74>)
 80007bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_TIM_MspPostInit+0x74>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_TIM_MspPostInit+0x74>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration
    PA7     ------> TIM22_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2205      	movs	r2, #5
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	187a      	adds	r2, r7, r1
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f972 	bl	8000ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b009      	add	sp, #36	; 0x24
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	40011400 	.word	0x40011400
 800080c:	40021000 	.word	0x40021000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f886 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490e      	ldr	r1, [pc, #56]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0b      	ldr	r4, [pc, #44]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000872:	f7ff ffe4 	bl	800083e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f001 fd83 	bl	8002380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe0f 	bl	800049c <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
   ldr   r0, =_estack
 8000880:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	20000074 	.word	0x20000074

08000898 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_COMP_IRQHandler>
	...

0800089c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Init+0x3c>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Init+0x3c>)
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	430a      	orrs	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f811 	bl	80008dc <HAL_InitTick>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e001      	b.n	80008ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008c6:	f7ff ff3b 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_InitTick+0x5c>)
 80008e6:	681c      	ldr	r4, [r3, #0]
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x60>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	23fa      	movs	r3, #250	; 0xfa
 80008f0:	0098      	lsls	r0, r3, #2
 80008f2:	f7ff fc09 	bl	8000108 <__udivsi3>
 80008f6:	0003      	movs	r3, r0
 80008f8:	0019      	movs	r1, r3
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff fc04 	bl	8000108 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f8e1 	bl	8000aca <HAL_SYSTICK_Config>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e00f      	b.n	8000930 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d80b      	bhi.n	800092e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2200      	movs	r2, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f8be 	bl	8000aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_InitTick+0x64>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000008 	.word	0x20000008
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	18d2      	adds	r2, r2, r3
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_IncTick+0x20>)
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000008 	.word	0x20000008
 8000964:	20000070 	.word	0x20000070

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000070 	.word	0x20000070

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	0002      	movs	r2, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b7f      	cmp	r3, #127	; 0x7f
 8000990:	d828      	bhi.n	80009e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000992:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	589b      	ldr	r3, [r3, r2]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	430a      	orrs	r2, r1
 80009dc:	33c0      	adds	r3, #192	; 0xc0
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009e2:	e031      	b.n	8000a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	400b      	ands	r3, r1
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3306      	adds	r3, #6
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	18d3      	adds	r3, r2, r3
 80009fa:	3304      	adds	r3, #4
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	001c      	movs	r4, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	4023      	ands	r3, r4
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	3306      	adds	r3, #6
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	18c3      	adds	r3, r0, r3
 8000a44:	3304      	adds	r3, #4
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	045b      	lsls	r3, r3, #17
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d301      	bcc.n	8000a70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e010      	b.n	8000a92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <SysTick_Config+0x44>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	3a01      	subs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ff7c 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x44>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x44>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	210f      	movs	r1, #15
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ffbf 	bl	8000a58 <SysTick_Config>
 8000ada:	0003      	movs	r3, r0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000afa:	e14f      	b.n	8000d9c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x30>
 8000b12:	e140      	b.n	8000d96 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d00b      	beq.n	8000b34 <HAL_GPIO_Init+0x50>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b28:	2b11      	cmp	r3, #17
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b12      	cmp	r3, #18
 8000b32:	d130      	bne.n	8000b96 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	091b      	lsrs	r3, r3, #4
 8000b80:	2201      	movs	r2, #1
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0xf2>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d123      	bne.n	8000c1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	0092      	lsls	r2, r2, #2
 8000be0:	58d3      	ldr	r3, [r2, r3]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2207      	movs	r2, #7
 8000be8:	4013      	ands	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2107      	movs	r1, #7
 8000c02:	400b      	ands	r3, r1
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	6939      	ldr	r1, [r7, #16]
 8000c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	055b      	lsls	r3, r3, #21
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d100      	bne.n	8000c60 <HAL_GPIO_Init+0x17c>
 8000c5e:	e09a      	b.n	8000d96 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c64:	4b53      	ldr	r3, [pc, #332]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6c:	4a52      	ldr	r2, [pc, #328]	; (8000db8 <HAL_GPIO_Init+0x2d4>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3302      	adds	r3, #2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	589b      	ldr	r3, [r3, r2]
 8000c78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4013      	ands	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x1ea>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_GPIO_Init+0x2d8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x1e6>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a46      	ldr	r2, [pc, #280]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x1e2>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_GPIO_Init+0x2e0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x1de>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a44      	ldr	r2, [pc, #272]	; (8000dc8 <HAL_GPIO_Init+0x2e4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x1da>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e008      	b.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e004      	b.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4093      	lsls	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce0:	4935      	ldr	r1, [pc, #212]	; (8000db8 <HAL_GPIO_Init+0x2d4>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	025b      	lsls	r3, r3, #9
 8000d06:	4013      	ands	r3, r2
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	4013      	ands	r3, r2
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	035b      	lsls	r3, r3, #13
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	039b      	lsls	r3, r3, #14
 8000d84:	4013      	ands	r3, r2
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_GPIO_Init+0x2e8>)
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	40da      	lsrs	r2, r3
 8000da4:	1e13      	subs	r3, r2, #0
 8000da6:	d000      	beq.n	8000daa <HAL_GPIO_Init+0x2c6>
 8000da8:	e6a8      	b.n	8000afc <HAL_GPIO_Init+0x18>
  }
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b006      	add	sp, #24
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	50000400 	.word	0x50000400
 8000dc0:	50000800 	.word	0x50000800
 8000dc4:	50000c00 	.word	0x50000c00
 8000dc8:	50001c00 	.word	0x50001c00
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	0008      	movs	r0, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	1c7b      	adds	r3, r7, #1
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de8:	1c7b      	adds	r3, r7, #1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000df8:	e003      	b.n	8000e02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dfa:	1cbb      	adds	r3, r7, #2
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 fbaf 	bl	800157e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e20:	4bcf      	ldr	r3, [pc, #828]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	220c      	movs	r2, #12
 8000e26:	4013      	ands	r3, r2
 8000e28:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2a:	4bcd      	ldr	r3, [pc, #820]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	4013      	ands	r3, r2
 8000e34:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d100      	bne.n	8000e42 <HAL_RCC_OscConfig+0x36>
 8000e40:	e07e      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d007      	beq.n	8000e58 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	2b0c      	cmp	r3, #12
 8000e4c:	d112      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d10d      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	4bc1      	ldr	r3, [pc, #772]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	4013      	ands	r3, r2
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5a>
 8000e64:	e06b      	b.n	8000f3e <HAL_RCC_OscConfig+0x132>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d167      	bne.n	8000f3e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f000 fb85 	bl	800157e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d107      	bne.n	8000e90 <HAL_RCC_OscConfig+0x84>
 8000e80:	4bb7      	ldr	r3, [pc, #732]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4bb6      	ldr	r3, [pc, #728]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e027      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	23a0      	movs	r3, #160	; 0xa0
 8000e96:	02db      	lsls	r3, r3, #11
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10e      	bne.n	8000eba <HAL_RCC_OscConfig+0xae>
 8000e9c:	4bb0      	ldr	r3, [pc, #704]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4baf      	ldr	r3, [pc, #700]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	02c9      	lsls	r1, r1, #11
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	4bad      	ldr	r3, [pc, #692]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4bac      	ldr	r3, [pc, #688]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0249      	lsls	r1, r1, #9
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e012      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000eba:	4ba9      	ldr	r3, [pc, #676]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4ba8      	ldr	r3, [pc, #672]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ec0:	49a8      	ldr	r1, [pc, #672]	; (8001164 <HAL_RCC_OscConfig+0x358>)
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	4ba6      	ldr	r3, [pc, #664]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	025b      	lsls	r3, r3, #9
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4ba2      	ldr	r3, [pc, #648]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4ba1      	ldr	r3, [pc, #644]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eda:	49a3      	ldr	r1, [pc, #652]	; (8001168 <HAL_RCC_OscConfig+0x35c>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d015      	beq.n	8000f14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fd3e 	bl	8000968 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ef0:	e009      	b.n	8000f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fd39 	bl	8000968 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d902      	bls.n	8000f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f000 fb3c 	bl	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f06:	4b96      	ldr	r3, [pc, #600]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	029b      	lsls	r3, r3, #10
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d0ef      	beq.n	8000ef2 <HAL_RCC_OscConfig+0xe6>
 8000f12:	e015      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fd28 	bl	8000968 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fd23 	bl	8000968 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e326      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f30:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f0      	bne.n	8000f1e <HAL_RCC_OscConfig+0x112>
 8000f3c:	e000      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d100      	bne.n	8000f4c <HAL_RCC_OscConfig+0x140>
 8000f4a:	e08b      	b.n	8001064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d13e      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d13b      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d004      	beq.n	8000f78 <HAL_RCC_OscConfig+0x16c>
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e302      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b79      	ldr	r3, [pc, #484]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a7b      	ldr	r2, [pc, #492]	; (800116c <HAL_RCC_OscConfig+0x360>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	0019      	movs	r1, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	021a      	lsls	r2, r3, #8
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2209      	movs	r2, #9
 8000f94:	4393      	bics	r3, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fa0:	f000 fc40 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	220f      	movs	r2, #15
 8000fae:	4013      	ands	r3, r2
 8000fb0:	4a6f      	ldr	r2, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x364>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x368>)
 8000fba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x36c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2513      	movs	r5, #19
 8000fc2:	197c      	adds	r4, r7, r5
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fc89 	bl	80008dc <HAL_InitTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fce:	197b      	adds	r3, r7, r5
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d046      	beq.n	8001064 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000fd6:	197b      	adds	r3, r7, r5
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	e2d0      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d027      	beq.n	8001032 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2209      	movs	r2, #9
 8000fe8:	4393      	bics	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fcb8 	bl	8000968 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fcb3 	bl	8000968 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e2b6      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d0f1      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a53      	ldr	r2, [pc, #332]	; (800116c <HAL_RCC_OscConfig+0x360>)
 8001020:	4013      	ands	r3, r2
 8001022:	0019      	movs	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	021a      	lsls	r2, r3, #8
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800102c:	430a      	orrs	r2, r1
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e018      	b.n	8001064 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001038:	2101      	movs	r1, #1
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc93 	bl	8000968 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff fc8e 	bl	8000968 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e291      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d1f1      	bne.n	8001048 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_RCC_OscConfig+0x264>
 800106e:	e0a1      	b.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d140      	bne.n	80010f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x282>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e277      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <HAL_RCC_OscConfig+0x370>)
 8001094:	4013      	ands	r3, r2
 8001096:	0019      	movs	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	0a19      	lsrs	r1, r3, #8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	061a      	lsls	r2, r3, #24
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	0b5b      	lsrs	r3, r3, #13
 80010bc:	3301      	adds	r3, #1
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0212      	lsls	r2, r2, #8
 80010c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	210f      	movs	r1, #15
 80010cc:	400b      	ands	r3, r1
 80010ce:	4928      	ldr	r1, [pc, #160]	; (8001170 <HAL_RCC_OscConfig+0x364>)
 80010d0:	5ccb      	ldrb	r3, [r1, r3]
 80010d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x368>)
 80010d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_RCC_OscConfig+0x36c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2513      	movs	r5, #19
 80010de:	197c      	adds	r4, r7, r5
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fbfb 	bl	80008dc <HAL_InitTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d060      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80010f2:	197b      	adds	r3, r7, r5
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03f      	beq.n	8001180 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	0049      	lsls	r1, r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc2b 	bl	8000968 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001118:	f7ff fc26 	bl	8000968 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e229      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_RCC_OscConfig+0x370>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	0a19      	lsrs	r1, r3, #8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	061a      	lsls	r2, r3, #24
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e029      	b.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
 8001160:	40021000 	.word	0x40021000
 8001164:	fffeffff 	.word	0xfffeffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffffe0ff 	.word	0xffffe0ff
 8001170:	080023f0 	.word	0x080023f0
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001180:	4bbd      	ldr	r3, [pc, #756]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4bbc      	ldr	r3, [pc, #752]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001186:	49bd      	ldr	r1, [pc, #756]	; (800147c <HAL_RCC_OscConfig+0x670>)
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fbec 	bl	8000968 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001196:	f7ff fbe7 	bl	8000968 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1ea      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011a8:	4bb3      	ldr	r3, [pc, #716]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2208      	movs	r2, #8
 80011ba:	4013      	ands	r3, r2
 80011bc:	d036      	beq.n	800122c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d019      	beq.n	80011fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c6:	4bac      	ldr	r3, [pc, #688]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ca:	4bab      	ldr	r3, [pc, #684]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbc9 	bl	8000968 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fbc4 	bl	8000968 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ee:	4ba2      	ldr	r3, [pc, #648]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f1      	beq.n	80011dc <HAL_RCC_OscConfig+0x3d0>
 80011f8:	e018      	b.n	800122c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fa:	4b9f      	ldr	r3, [pc, #636]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011fe:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001200:	2101      	movs	r1, #1
 8001202:	438a      	bics	r2, r1
 8001204:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fbaf 	bl	8000968 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fbaa 	bl	8000968 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1ad      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x42c>
 8001236:	e0ae      	b.n	8001396 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001238:	2027      	movs	r0, #39	; 0x27
 800123a:	183b      	adds	r3, r7, r0
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001240:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	055b      	lsls	r3, r3, #21
 8001248:	4013      	ands	r3, r2
 800124a:	d109      	bne.n	8001260 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	4b8a      	ldr	r3, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800124e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001250:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0549      	lsls	r1, r1, #21
 8001256:	430a      	orrs	r2, r1
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800125a:	183b      	adds	r3, r7, r0
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d11a      	bne.n	80012a2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b83      	ldr	r3, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0049      	lsls	r1, r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb75 	bl	8000968 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001284:	f7ff fb70 	bl	8000968 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e173      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b7a      	ldr	r3, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_OscConfig+0x4b2>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b2:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0049      	lsls	r1, r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	651a      	str	r2, [r3, #80]	; 0x50
 80012bc:	e031      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4d4>
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ca:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012cc:	496b      	ldr	r1, [pc, #428]	; (800147c <HAL_RCC_OscConfig+0x670>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	651a      	str	r2, [r3, #80]	; 0x50
 80012d2:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	496a      	ldr	r1, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x678>)
 80012da:	400a      	ands	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	; 0x50
 80012de:	e020      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10e      	bne.n	800130a <HAL_RCC_OscConfig+0x4fe>
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	00c9      	lsls	r1, r1, #3
 80012f6:	430a      	orrs	r2, r1
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0049      	lsls	r1, r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	651a      	str	r2, [r3, #80]	; 0x50
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130e:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001310:	495a      	ldr	r1, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x670>)
 8001312:	400a      	ands	r2, r1
 8001314:	651a      	str	r2, [r3, #80]	; 0x50
 8001316:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800131c:	4959      	ldr	r1, [pc, #356]	; (8001484 <HAL_RCC_OscConfig+0x678>)
 800131e:	400a      	ands	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb1d 	bl	8000968 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001332:	e009      	b.n	8001348 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff fb18 	bl	8000968 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e11a      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800134a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x528>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb07 	bl	8000968 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800135e:	e009      	b.n	8001374 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff fb02 	bl	8000968 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a47      	ldr	r2, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e104      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d1ef      	bne.n	8001360 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001380:	2327      	movs	r3, #39	; 0x27
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d105      	bne.n	8001396 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001390:	493e      	ldr	r1, [pc, #248]	; (800148c <HAL_RCC_OscConfig+0x680>)
 8001392:	400a      	ands	r2, r1
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2220      	movs	r2, #32
 800139c:	4013      	ands	r3, r2
 800139e:	d049      	beq.n	8001434 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d026      	beq.n	80013f6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0189      	lsls	r1, r1, #6
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff facb 	bl	8000968 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d8:	f7ff fac6 	bl	8000968 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0c9      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f1      	beq.n	80013d8 <HAL_RCC_OscConfig+0x5cc>
 80013f4:	e01e      	b.n	8001434 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	438a      	bics	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 8001408:	4922      	ldr	r1, [pc, #136]	; (8001494 <HAL_RCC_OscConfig+0x688>)
 800140a:	400a      	ands	r2, r1
 800140c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff faab 	bl	8000968 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001418:	f7ff faa6 	bl	8000968 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e0a9      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d1f1      	bne.n	8001418 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x632>
 800143c:	e09e      	b.n	800157c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d100      	bne.n	8001446 <HAL_RCC_OscConfig+0x63a>
 8001444:	e077      	b.n	8001536 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b02      	cmp	r3, #2
 800144c:	d158      	bne.n	8001500 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001454:	4910      	ldr	r1, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x68c>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fa85 	bl	8000968 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fa80 	bl	8000968 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d914      	bls.n	800149c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e083      	b.n	800157e <HAL_RCC_OscConfig+0x772>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	fffffeff 	.word	0xfffffeff
 8001480:	40007000 	.word	0x40007000
 8001484:	fffffbff 	.word	0xfffffbff
 8001488:	00001388 	.word	0x00001388
 800148c:	efffffff 	.word	0xefffffff
 8001490:	40010000 	.word	0x40010000
 8001494:	ffffdfff 	.word	0xffffdfff
 8001498:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	049b      	lsls	r3, r3, #18
 80014a4:	4013      	ands	r3, r2
 80014a6:	d1dd      	bne.n	8001464 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a37      	ldr	r2, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x780>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	431a      	orrs	r2, r3
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014c4:	430a      	orrs	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0449      	lsls	r1, r1, #17
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fa47 	bl	8000968 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fa42 	bl	8000968 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	049b      	lsls	r3, r3, #18
 80014fa:	4013      	ands	r3, r2
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x6d4>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001506:	4922      	ldr	r1, [pc, #136]	; (8001590 <HAL_RCC_OscConfig+0x784>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fa2c 	bl	8000968 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fa27 	bl	8000968 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e02a      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	049b      	lsls	r3, r3, #18
 8001530:	4013      	ands	r3, r2
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x70a>
 8001534:	e022      	b.n	800157c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01d      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	429a      	cmp	r2, r3
 8001556:	d10f      	bne.n	8001578 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	23f0      	movs	r3, #240	; 0xf0
 800155c:	039b      	lsls	r3, r3, #14
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	23c0      	movs	r3, #192	; 0xc0
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	401a      	ands	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b00a      	add	sp, #40	; 0x28
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000
 800158c:	ff02ffff 	.word	0xff02ffff
 8001590:	feffffff 	.word	0xfeffffff

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e128      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b96      	ldr	r3, [pc, #600]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d91e      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b93      	ldr	r3, [pc, #588]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4393      	bics	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	4b90      	ldr	r3, [pc, #576]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015c8:	f7ff f9ce 	bl	8000968 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d0:	e009      	b.n	80015e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff f9c9 	bl	8000968 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a8a      	ldr	r2, [pc, #552]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e109      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	22f0      	movs	r2, #240	; 0xf0
 8001604:	4393      	bics	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_ClockConfig+0x8a>
 800161c:	e089      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d120      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e1      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	049b      	lsls	r3, r3, #18
 8001646:	4013      	ands	r3, r2
 8001648:	d114      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0d5      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d106      	bne.n	8001664 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d109      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0ca      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001664:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0c2      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001674:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2203      	movs	r2, #3
 800167a:	4393      	bics	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001684:	430a      	orrs	r2, r1
 8001686:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff f96e 	bl	8000968 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d111      	bne.n	80016bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	e009      	b.n	80016ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7ff f965 	bl	8000968 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0a5      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	220c      	movs	r2, #12
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d1ef      	bne.n	800169a <HAL_RCC_ClockConfig+0x106>
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d111      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	e009      	b.n	80016da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c6:	f7ff f94f 	bl	8000968 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e08f      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	220c      	movs	r2, #12
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x132>
 80016e6:	e024      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f939 	bl	8000968 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e079      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	220c      	movs	r2, #12
 800170c:	4013      	ands	r3, r2
 800170e:	2b04      	cmp	r3, #4
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x15e>
 8001712:	e00e      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff f928 	bl	8000968 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e068      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d21e      	bcs.n	800177e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001752:	f7ff f909 	bl	8000968 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	e009      	b.n	8001770 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f904 	bl	8000968 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e044      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2204      	movs	r2, #4
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x27c>)
 800178e:	4013      	ands	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	4013      	ands	r3, r2
 80017a4:	d00a      	beq.n	80017bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_RCC_ClockConfig+0x280>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00da      	lsls	r2, r3, #3
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017bc:	f000 f832 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017c0:	0001      	movs	r1, r0
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	220f      	movs	r2, #15
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x284>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	000a      	movs	r2, r1
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_RCC_ClockConfig+0x288>)
 80017d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_ClockConfig+0x28c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	250b      	movs	r5, #11
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff f87b 	bl	80008dc <HAL_InitTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017f2:	197b      	adds	r3, r7, r5
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	e000      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40022000 	.word	0x40022000
 8001808:	00001388 	.word	0x00001388
 800180c:	40021000 	.word	0x40021000
 8001810:	fffff8ff 	.word	0xfffff8ff
 8001814:	ffffc7ff 	.word	0xffffc7ff
 8001818:	080023f0 	.word	0x080023f0
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	230c      	movs	r3, #12
 8001834:	4013      	ands	r3, r2
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d014      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x40>
 800183a:	d900      	bls.n	800183e <HAL_RCC_GetSysClockFreq+0x1a>
 800183c:	e07b      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x112>
 800183e:	2b04      	cmp	r3, #4
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x24>
 8001842:	2b08      	cmp	r3, #8
 8001844:	d00b      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e076      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001848:	4b44      	ldr	r3, [pc, #272]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001856:	e07c      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x140>)
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e079      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_RCC_GetSysClockFreq+0x144>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	e076      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	0c9a      	lsrs	r2, r3, #18
 8001868:	230f      	movs	r3, #15
 800186a:	401a      	ands	r2, r3
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_GetSysClockFreq+0x148>)
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	0d9a      	lsrs	r2, r3, #22
 8001876:	2303      	movs	r3, #3
 8001878:	4013      	ands	r3, r2
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	4013      	ands	r3, r2
 8001888:	d01a      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_RCC_GetSysClockFreq+0x144>)
 8001894:	2300      	movs	r3, #0
 8001896:	69b8      	ldr	r0, [r7, #24]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	f7fe fce1 	bl	8000260 <__aeabi_lmul>
 800189e:	0002      	movs	r2, r0
 80018a0:	000b      	movs	r3, r1
 80018a2:	0010      	movs	r0, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f7fe fcb5 	bl	8000220 <__aeabi_uldivmod>
 80018b6:	0002      	movs	r2, r0
 80018b8:	000b      	movs	r3, r1
 80018ba:	0013      	movs	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
 80018be:	e037      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	4013      	ands	r3, r2
 80018c8:	d01a      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	f7fe fcc1 	bl	8000260 <__aeabi_lmul>
 80018de:	0002      	movs	r2, r0
 80018e0:	000b      	movs	r3, r1
 80018e2:	0010      	movs	r0, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f7fe fc95 	bl	8000220 <__aeabi_uldivmod>
 80018f6:	0002      	movs	r2, r0
 80018f8:	000b      	movs	r3, r1
 80018fa:	0013      	movs	r3, r2
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
 80018fe:	e017      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	0018      	movs	r0, r3
 8001904:	2300      	movs	r3, #0
 8001906:	0019      	movs	r1, r3
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_RCC_GetSysClockFreq+0x140>)
 800190a:	2300      	movs	r3, #0
 800190c:	f7fe fca8 	bl	8000260 <__aeabi_lmul>
 8001910:	0002      	movs	r2, r0
 8001912:	000b      	movs	r3, r1
 8001914:	0010      	movs	r0, r2
 8001916:	0019      	movs	r1, r3
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	001c      	movs	r4, r3
 800191c:	2300      	movs	r3, #0
 800191e:	001d      	movs	r5, r3
 8001920:	0022      	movs	r2, r4
 8001922:	002b      	movs	r3, r5
 8001924:	f7fe fc7c 	bl	8000220 <__aeabi_uldivmod>
 8001928:	0002      	movs	r2, r0
 800192a:	000b      	movs	r3, r1
 800192c:	0013      	movs	r3, r2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001934:	e00d      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0b5b      	lsrs	r3, r3, #13
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	3301      	adds	r3, #1
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001950:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b00e      	add	sp, #56	; 0x38
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	003d0900 	.word	0x003d0900
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200
 800196c:	08002400 	.word	0x08002400

08001970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e032      	b.n	80019e8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2239      	movs	r2, #57	; 0x39
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2238      	movs	r2, #56	; 0x38
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f7fe fee5 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2239      	movs	r2, #57	; 0x39
 80019a2:	2102      	movs	r1, #2
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3304      	adds	r3, #4
 80019ae:	0019      	movs	r1, r3
 80019b0:	0010      	movs	r0, r2
 80019b2:	f000 fa77 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	223e      	movs	r2, #62	; 0x3e
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	223a      	movs	r2, #58	; 0x3a
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223b      	movs	r2, #59	; 0x3b
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	223c      	movs	r2, #60	; 0x3c
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	223d      	movs	r2, #61	; 0x3d
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2239      	movs	r2, #57	; 0x39
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e032      	b.n	8001a68 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2239      	movs	r2, #57	; 0x39
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2238      	movs	r2, #56	; 0x38
 8001a12:	2100      	movs	r1, #0
 8001a14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 f829 	bl	8001a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2239      	movs	r2, #57	; 0x39
 8001a22:	2102      	movs	r1, #2
 8001a24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	0019      	movs	r1, r3
 8001a30:	0010      	movs	r0, r2
 8001a32:	f000 fa37 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223e      	movs	r2, #62	; 0x3e
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223a      	movs	r2, #58	; 0x3a
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	223b      	movs	r2, #59	; 0x3b
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	223c      	movs	r2, #60	; 0x3c
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223d      	movs	r2, #61	; 0x3d
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2239      	movs	r2, #57	; 0x39
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x22>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	223a      	movs	r2, #58	; 0x3a
 8001a94:	5c9b      	ldrb	r3, [r3, r2]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	4193      	sbcs	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e01f      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x62>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d108      	bne.n	8001aba <HAL_TIM_PWM_Start+0x3a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	223b      	movs	r2, #59	; 0x3b
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	4193      	sbcs	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	e013      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x62>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d108      	bne.n	8001ad2 <HAL_TIM_PWM_Start+0x52>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	223c      	movs	r2, #60	; 0x3c
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	4193      	sbcs	r3, r2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	e007      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x62>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223d      	movs	r2, #61	; 0x3d
 8001ad6:	5c9b      	ldrb	r3, [r3, r2]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	4193      	sbcs	r3, r2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e04d      	b.n	8001b86 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_TIM_PWM_Start+0x7a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	223a      	movs	r2, #58	; 0x3a
 8001af4:	2102      	movs	r1, #2
 8001af6:	5499      	strb	r1, [r3, r2]
 8001af8:	e013      	b.n	8001b22 <HAL_TIM_PWM_Start+0xa2>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d104      	bne.n	8001b0a <HAL_TIM_PWM_Start+0x8a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	223b      	movs	r2, #59	; 0x3b
 8001b04:	2102      	movs	r1, #2
 8001b06:	5499      	strb	r1, [r3, r2]
 8001b08:	e00b      	b.n	8001b22 <HAL_TIM_PWM_Start+0xa2>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_PWM_Start+0x9a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	2102      	movs	r1, #2
 8001b16:	5499      	strb	r1, [r3, r2]
 8001b18:	e003      	b.n	8001b22 <HAL_TIM_PWM_Start+0xa2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	223d      	movs	r2, #61	; 0x3d
 8001b1e:	2102      	movs	r1, #2
 8001b20:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fbac 	bl	8002288 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d009      	beq.n	8001b50 <HAL_TIM_PWM_Start+0xd0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_TIM_PWM_Start+0x110>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d004      	beq.n	8001b50 <HAL_TIM_PWM_Start+0xd0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_TIM_PWM_Start+0x114>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d010      	beq.n	8001b84 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b72:	e007      	b.n	8001b84 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40011400 	.word	0x40011400

08001b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2238      	movs	r2, #56	; 0x38
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0a7      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2238      	movs	r2, #56	; 0x38
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d100      	bne.n	8001bc2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001bc0:	e076      	b.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d900      	bls.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x32>
 8001bc8:	e095      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d04e      	beq.n	8001c6e <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d900      	bls.n	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x40>
 8001bd6:	e08e      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d021      	beq.n	8001c28 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001be4:	e087      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	0011      	movs	r1, r2
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f9ac 	bl	8001f4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2108      	movs	r1, #8
 8001c00:	430a      	orrs	r2, r1
 8001c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2104      	movs	r1, #4
 8001c10:	438a      	bics	r2, r1
 8001c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6999      	ldr	r1, [r3, #24]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	619a      	str	r2, [r3, #24]
      break;
 8001c26:	e067      	b.n	8001cf8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	0011      	movs	r1, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f9c7 	bl	8001fc4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0109      	lsls	r1, r1, #4
 8001c44:	430a      	orrs	r2, r1
 8001c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	492e      	ldr	r1, [pc, #184]	; (8001d0c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6999      	ldr	r1, [r3, #24]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	021a      	lsls	r2, r3, #8
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	619a      	str	r2, [r3, #24]
      break;
 8001c6c:	e044      	b.n	8001cf8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	0011      	movs	r1, r2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f9e6 	bl	8002048 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2108      	movs	r1, #8
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2104      	movs	r1, #4
 8001c98:	438a      	bics	r2, r1
 8001c9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69d9      	ldr	r1, [r3, #28]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	61da      	str	r2, [r3, #28]
      break;
 8001cae:	e023      	b.n	8001cf8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fa05 	bl	80020c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0109      	lsls	r1, r1, #4
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	490c      	ldr	r1, [pc, #48]	; (8001d0c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69d9      	ldr	r1, [r3, #28]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	021a      	lsls	r2, r3, #8
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	61da      	str	r2, [r3, #28]
      break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001cf6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2238      	movs	r2, #56	; 0x38
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	fffffbff 	.word	0xfffffbff

08001d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2238      	movs	r2, #56	; 0x38
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_TIM_ConfigClockSource+0x18>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0b7      	b.n	8001e98 <HAL_TIM_ConfigClockSource+0x188>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2238      	movs	r2, #56	; 0x38
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2239      	movs	r2, #57	; 0x39
 8001d34:	2102      	movs	r1, #2
 8001d36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2277      	movs	r2, #119	; 0x77
 8001d44:	4393      	bics	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <HAL_TIM_ConfigClockSource+0x190>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0192      	lsls	r2, r2, #6
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0xd6>
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	0192      	lsls	r2, r2, #6
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d900      	bls.n	8001d6e <HAL_TIM_ConfigClockSource+0x5e>
 8001d6c:	e088      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	0152      	lsls	r2, r2, #5
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d100      	bne.n	8001d78 <HAL_TIM_ConfigClockSource+0x68>
 8001d76:	e085      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x174>
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	0152      	lsls	r2, r2, #5
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d900      	bls.n	8001d82 <HAL_TIM_ConfigClockSource+0x72>
 8001d80:	e07e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001d82:	2b70      	cmp	r3, #112	; 0x70
 8001d84:	d018      	beq.n	8001db8 <HAL_TIM_ConfigClockSource+0xa8>
 8001d86:	d900      	bls.n	8001d8a <HAL_TIM_ConfigClockSource+0x7a>
 8001d88:	e07a      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001d8a:	2b60      	cmp	r3, #96	; 0x60
 8001d8c:	d04f      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0x11e>
 8001d8e:	d900      	bls.n	8001d92 <HAL_TIM_ConfigClockSource+0x82>
 8001d90:	e076      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001d92:	2b50      	cmp	r3, #80	; 0x50
 8001d94:	d03b      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0xfe>
 8001d96:	d900      	bls.n	8001d9a <HAL_TIM_ConfigClockSource+0x8a>
 8001d98:	e072      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d057      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x13e>
 8001d9e:	d900      	bls.n	8001da2 <HAL_TIM_ConfigClockSource+0x92>
 8001da0:	e06e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001da2:	2b30      	cmp	r3, #48	; 0x30
 8001da4:	d063      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x15e>
 8001da6:	d86b      	bhi.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d060      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x15e>
 8001dac:	d868      	bhi.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d05d      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x15e>
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d05b      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001db6:	e063      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f000 fa3e 	bl	8002248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2277      	movs	r2, #119	; 0x77
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	609a      	str	r2, [r3, #8]
      break;
 8001de4:	e04f      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f000 fa27 	bl	8002248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	01c9      	lsls	r1, r1, #7
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
      break;
 8001e0c:	e03b      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	f000 f99a 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f9f4 	bl	8002214 <TIM_ITRx_SetConfig>
      break;
 8001e2c:	e02b      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	f000 f9b8 	bl	80021b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2160      	movs	r1, #96	; 0x60
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f9e4 	bl	8002214 <TIM_ITRx_SetConfig>
      break;
 8001e4c:	e01b      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	f000 f97a 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f9d4 	bl	8002214 <TIM_ITRx_SetConfig>
      break;
 8001e6c:	e00b      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0019      	movs	r1, r3
 8001e78:	0010      	movs	r0, r2
 8001e7a:	f000 f9cb 	bl	8002214 <TIM_ITRx_SetConfig>
        break;
 8001e7e:	e002      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	e000      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001e84:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2239      	movs	r2, #57	; 0x39
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2238      	movs	r2, #56	; 0x38
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	ffff00ff 	.word	0xffff00ff

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0x2a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <TIM_Base_SetConfig+0x9c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x2a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <TIM_Base_SetConfig+0xa0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2270      	movs	r2, #112	; 0x70
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0x56>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <TIM_Base_SetConfig+0x9c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0x56>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <TIM_Base_SetConfig+0xa0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <TIM_Base_SetConfig+0xa4>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	4393      	bics	r3, r2
 8001f12:	001a      	movs	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	615a      	str	r2, [r3, #20]
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40011400 	.word	0x40011400
 8001f48:	fffffcff 	.word	0xfffffcff

08001f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	001a      	movs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2270      	movs	r2, #112	; 0x70
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2203      	movs	r2, #3
 8001f82:	4393      	bics	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4393      	bics	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	621a      	str	r2, [r3, #32]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <TIM_OC2_SetConfig+0x7c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <TIM_OC2_SetConfig+0x80>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2220      	movs	r2, #32
 800200e:	4393      	bics	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	621a      	str	r2, [r3, #32]
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b006      	add	sp, #24
 800203e:	bd80      	pop	{r7, pc}
 8002040:	ffff8fff 	.word	0xffff8fff
 8002044:	fffffcff 	.word	0xfffffcff

08002048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <TIM_OC3_SetConfig+0x78>)
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2270      	movs	r2, #112	; 0x70
 8002074:	4393      	bics	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2203      	movs	r2, #3
 800207c:	4393      	bics	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <TIM_OC3_SetConfig+0x7c>)
 800208e:	4013      	ands	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b006      	add	sp, #24
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	fffffdff 	.word	0xfffffdff

080020c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <TIM_OC4_SetConfig+0x7c>)
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a15      	ldr	r2, [pc, #84]	; (8002148 <TIM_OC4_SetConfig+0x80>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a14      	ldr	r2, [pc, #80]	; (800214c <TIM_OC4_SetConfig+0x84>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <TIM_OC4_SetConfig+0x88>)
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	621a      	str	r2, [r3, #32]
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b006      	add	sp, #24
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	ffffefff 	.word	0xffffefff
 8002148:	ffff8fff 	.word	0xffff8fff
 800214c:	fffffcff 	.word	0xfffffcff
 8002150:	ffffdfff 	.word	0xffffdfff

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2201      	movs	r2, #1
 800216c:	4393      	bics	r3, r2
 800216e:	001a      	movs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	22f0      	movs	r2, #240	; 0xf0
 800217e:	4393      	bics	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	220a      	movs	r2, #10
 8002190:	4393      	bics	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	621a      	str	r2, [r3, #32]
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2210      	movs	r2, #16
 80021c2:	4393      	bics	r3, r2
 80021c4:	001a      	movs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <TIM_TI2_ConfigInputStage+0x60>)
 80021da:	4013      	ands	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	031b      	lsls	r3, r3, #12
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	22a0      	movs	r2, #160	; 0xa0
 80021ec:	4393      	bics	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b006      	add	sp, #24
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	ffff0fff 	.word	0xffff0fff

08002214 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2270      	movs	r2, #112	; 0x70
 8002228:	4393      	bics	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	2207      	movs	r2, #7
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	609a      	str	r2, [r3, #8]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <TIM_ETR_SetConfig+0x3c>)
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	431a      	orrs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b006      	add	sp, #24
 8002282:	bd80      	pop	{r7, pc}
 8002284:	ffff00ff 	.word	0xffff00ff

08002288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	221f      	movs	r2, #31
 8002298:	4013      	ands	r3, r2
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	401a      	ands	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	211f      	movs	r1, #31
 80022b8:	400b      	ands	r3, r1
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4099      	lsls	r1, r3
 80022be:	000b      	movs	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	621a      	str	r2, [r3, #32]
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b006      	add	sp, #24
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e042      	b.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2238      	movs	r2, #56	; 0x38
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2239      	movs	r2, #57	; 0x39
 80022f4:	2102      	movs	r1, #2
 80022f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2270      	movs	r2, #112	; 0x70
 800230c:	4393      	bics	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	05db      	lsls	r3, r3, #23
 800232a:	429a      	cmp	r2, r3
 800232c:	d009      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0f      	ldr	r2, [pc, #60]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	4393      	bics	r3, r2
 8002348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2239      	movs	r2, #57	; 0x39
 8002360:	2101      	movs	r1, #1
 8002362:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2238      	movs	r2, #56	; 0x38
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40010800 	.word	0x40010800
 800237c:	40011400 	.word	0x40011400

08002380 <__libc_init_array>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	2600      	movs	r6, #0
 8002384:	4d0c      	ldr	r5, [pc, #48]	; (80023b8 <__libc_init_array+0x38>)
 8002386:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <__libc_init_array+0x3c>)
 8002388:	1b64      	subs	r4, r4, r5
 800238a:	10a4      	asrs	r4, r4, #2
 800238c:	42a6      	cmp	r6, r4
 800238e:	d109      	bne.n	80023a4 <__libc_init_array+0x24>
 8002390:	2600      	movs	r6, #0
 8002392:	f000 f821 	bl	80023d8 <_init>
 8002396:	4d0a      	ldr	r5, [pc, #40]	; (80023c0 <__libc_init_array+0x40>)
 8002398:	4c0a      	ldr	r4, [pc, #40]	; (80023c4 <__libc_init_array+0x44>)
 800239a:	1b64      	subs	r4, r4, r5
 800239c:	10a4      	asrs	r4, r4, #2
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d105      	bne.n	80023ae <__libc_init_array+0x2e>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	00b3      	lsls	r3, r6, #2
 80023a6:	58eb      	ldr	r3, [r5, r3]
 80023a8:	4798      	blx	r3
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7ee      	b.n	800238c <__libc_init_array+0xc>
 80023ae:	00b3      	lsls	r3, r6, #2
 80023b0:	58eb      	ldr	r3, [r5, r3]
 80023b2:	4798      	blx	r3
 80023b4:	3601      	adds	r6, #1
 80023b6:	e7f2      	b.n	800239e <__libc_init_array+0x1e>
 80023b8:	08002414 	.word	0x08002414
 80023bc:	08002414 	.word	0x08002414
 80023c0:	08002414 	.word	0x08002414
 80023c4:	08002418 	.word	0x08002418

080023c8 <memset>:
 80023c8:	0003      	movs	r3, r0
 80023ca:	1882      	adds	r2, r0, r2
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d100      	bne.n	80023d2 <memset+0xa>
 80023d0:	4770      	bx	lr
 80023d2:	7019      	strb	r1, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	e7f9      	b.n	80023cc <memset+0x4>

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
