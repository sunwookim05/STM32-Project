
Gas_Range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  080054b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  20000088  08005540  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000032c  08005540  0002032c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   000057e0  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000014f7  00000000  00000000  00025890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000608  00000000  00000000  00026d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000550  00000000  00000000  00027390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000137b8  00000000  00000000  000278e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007588  00000000  00000000  0003b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000753b5  00000000  00000000  00042620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000b79d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001990  00000000  00000000  000b7a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005368 	.word	0x08005368

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08005368 	.word	0x08005368

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f001 fa75 	bl	800173c <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f001 f9d5 	bl	8001608 <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fe3c 	bl	8000ee4 <__aeabi_dsub>
 800026c:	f001 f9cc 	bl	8001608 <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_dadd>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	464f      	mov	r7, r9
 8000284:	4646      	mov	r6, r8
 8000286:	46d6      	mov	lr, sl
 8000288:	000d      	movs	r5, r1
 800028a:	0004      	movs	r4, r0
 800028c:	b5c0      	push	{r6, r7, lr}
 800028e:	001f      	movs	r7, r3
 8000290:	0011      	movs	r1, r2
 8000292:	0328      	lsls	r0, r5, #12
 8000294:	0f62      	lsrs	r2, r4, #29
 8000296:	0a40      	lsrs	r0, r0, #9
 8000298:	4310      	orrs	r0, r2
 800029a:	007a      	lsls	r2, r7, #1
 800029c:	0d52      	lsrs	r2, r2, #21
 800029e:	00e3      	lsls	r3, r4, #3
 80002a0:	033c      	lsls	r4, r7, #12
 80002a2:	4691      	mov	r9, r2
 80002a4:	0a64      	lsrs	r4, r4, #9
 80002a6:	0ffa      	lsrs	r2, r7, #31
 80002a8:	0f4f      	lsrs	r7, r1, #29
 80002aa:	006e      	lsls	r6, r5, #1
 80002ac:	4327      	orrs	r7, r4
 80002ae:	4692      	mov	sl, r2
 80002b0:	46b8      	mov	r8, r7
 80002b2:	0d76      	lsrs	r6, r6, #21
 80002b4:	0fed      	lsrs	r5, r5, #31
 80002b6:	00c9      	lsls	r1, r1, #3
 80002b8:	4295      	cmp	r5, r2
 80002ba:	d100      	bne.n	80002be <__aeabi_dadd+0x3e>
 80002bc:	e099      	b.n	80003f2 <__aeabi_dadd+0x172>
 80002be:	464c      	mov	r4, r9
 80002c0:	1b34      	subs	r4, r6, r4
 80002c2:	46a4      	mov	ip, r4
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	dc00      	bgt.n	80002ca <__aeabi_dadd+0x4a>
 80002c8:	e07c      	b.n	80003c4 <__aeabi_dadd+0x144>
 80002ca:	464a      	mov	r2, r9
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dadd+0x52>
 80002d0:	e0b8      	b.n	8000444 <__aeabi_dadd+0x1c4>
 80002d2:	4ac5      	ldr	r2, [pc, #788]	; (80005e8 <__aeabi_dadd+0x368>)
 80002d4:	4296      	cmp	r6, r2
 80002d6:	d100      	bne.n	80002da <__aeabi_dadd+0x5a>
 80002d8:	e11c      	b.n	8000514 <__aeabi_dadd+0x294>
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	003c      	movs	r4, r7
 80002de:	0412      	lsls	r2, r2, #16
 80002e0:	4314      	orrs	r4, r2
 80002e2:	46a0      	mov	r8, r4
 80002e4:	4662      	mov	r2, ip
 80002e6:	2a38      	cmp	r2, #56	; 0x38
 80002e8:	dd00      	ble.n	80002ec <__aeabi_dadd+0x6c>
 80002ea:	e161      	b.n	80005b0 <__aeabi_dadd+0x330>
 80002ec:	2a1f      	cmp	r2, #31
 80002ee:	dd00      	ble.n	80002f2 <__aeabi_dadd+0x72>
 80002f0:	e1cc      	b.n	800068c <__aeabi_dadd+0x40c>
 80002f2:	4664      	mov	r4, ip
 80002f4:	2220      	movs	r2, #32
 80002f6:	1b12      	subs	r2, r2, r4
 80002f8:	4644      	mov	r4, r8
 80002fa:	4094      	lsls	r4, r2
 80002fc:	000f      	movs	r7, r1
 80002fe:	46a1      	mov	r9, r4
 8000300:	4664      	mov	r4, ip
 8000302:	4091      	lsls	r1, r2
 8000304:	40e7      	lsrs	r7, r4
 8000306:	464c      	mov	r4, r9
 8000308:	1e4a      	subs	r2, r1, #1
 800030a:	4191      	sbcs	r1, r2
 800030c:	433c      	orrs	r4, r7
 800030e:	4642      	mov	r2, r8
 8000310:	4321      	orrs	r1, r4
 8000312:	4664      	mov	r4, ip
 8000314:	40e2      	lsrs	r2, r4
 8000316:	1a80      	subs	r0, r0, r2
 8000318:	1a5c      	subs	r4, r3, r1
 800031a:	42a3      	cmp	r3, r4
 800031c:	419b      	sbcs	r3, r3
 800031e:	425f      	negs	r7, r3
 8000320:	1bc7      	subs	r7, r0, r7
 8000322:	023b      	lsls	r3, r7, #8
 8000324:	d400      	bmi.n	8000328 <__aeabi_dadd+0xa8>
 8000326:	e0d0      	b.n	80004ca <__aeabi_dadd+0x24a>
 8000328:	027f      	lsls	r7, r7, #9
 800032a:	0a7f      	lsrs	r7, r7, #9
 800032c:	2f00      	cmp	r7, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_dadd+0xb2>
 8000330:	e0ff      	b.n	8000532 <__aeabi_dadd+0x2b2>
 8000332:	0038      	movs	r0, r7
 8000334:	f001 fa0c 	bl	8001750 <__clzsi2>
 8000338:	0001      	movs	r1, r0
 800033a:	3908      	subs	r1, #8
 800033c:	2320      	movs	r3, #32
 800033e:	0022      	movs	r2, r4
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	408f      	lsls	r7, r1
 8000344:	40da      	lsrs	r2, r3
 8000346:	408c      	lsls	r4, r1
 8000348:	4317      	orrs	r7, r2
 800034a:	42b1      	cmp	r1, r6
 800034c:	da00      	bge.n	8000350 <__aeabi_dadd+0xd0>
 800034e:	e0ff      	b.n	8000550 <__aeabi_dadd+0x2d0>
 8000350:	1b89      	subs	r1, r1, r6
 8000352:	1c4b      	adds	r3, r1, #1
 8000354:	2b1f      	cmp	r3, #31
 8000356:	dd00      	ble.n	800035a <__aeabi_dadd+0xda>
 8000358:	e0a8      	b.n	80004ac <__aeabi_dadd+0x22c>
 800035a:	2220      	movs	r2, #32
 800035c:	0039      	movs	r1, r7
 800035e:	1ad2      	subs	r2, r2, r3
 8000360:	0020      	movs	r0, r4
 8000362:	4094      	lsls	r4, r2
 8000364:	4091      	lsls	r1, r2
 8000366:	40d8      	lsrs	r0, r3
 8000368:	1e62      	subs	r2, r4, #1
 800036a:	4194      	sbcs	r4, r2
 800036c:	40df      	lsrs	r7, r3
 800036e:	2600      	movs	r6, #0
 8000370:	4301      	orrs	r1, r0
 8000372:	430c      	orrs	r4, r1
 8000374:	0763      	lsls	r3, r4, #29
 8000376:	d009      	beq.n	800038c <__aeabi_dadd+0x10c>
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	2b04      	cmp	r3, #4
 800037e:	d005      	beq.n	800038c <__aeabi_dadd+0x10c>
 8000380:	1d23      	adds	r3, r4, #4
 8000382:	42a3      	cmp	r3, r4
 8000384:	41a4      	sbcs	r4, r4
 8000386:	4264      	negs	r4, r4
 8000388:	193f      	adds	r7, r7, r4
 800038a:	001c      	movs	r4, r3
 800038c:	023b      	lsls	r3, r7, #8
 800038e:	d400      	bmi.n	8000392 <__aeabi_dadd+0x112>
 8000390:	e09e      	b.n	80004d0 <__aeabi_dadd+0x250>
 8000392:	4b95      	ldr	r3, [pc, #596]	; (80005e8 <__aeabi_dadd+0x368>)
 8000394:	3601      	adds	r6, #1
 8000396:	429e      	cmp	r6, r3
 8000398:	d100      	bne.n	800039c <__aeabi_dadd+0x11c>
 800039a:	e0b7      	b.n	800050c <__aeabi_dadd+0x28c>
 800039c:	4a93      	ldr	r2, [pc, #588]	; (80005ec <__aeabi_dadd+0x36c>)
 800039e:	08e4      	lsrs	r4, r4, #3
 80003a0:	4017      	ands	r7, r2
 80003a2:	077b      	lsls	r3, r7, #29
 80003a4:	0571      	lsls	r1, r6, #21
 80003a6:	027f      	lsls	r7, r7, #9
 80003a8:	4323      	orrs	r3, r4
 80003aa:	0b3f      	lsrs	r7, r7, #12
 80003ac:	0d4a      	lsrs	r2, r1, #21
 80003ae:	0512      	lsls	r2, r2, #20
 80003b0:	433a      	orrs	r2, r7
 80003b2:	07ed      	lsls	r5, r5, #31
 80003b4:	432a      	orrs	r2, r5
 80003b6:	0018      	movs	r0, r3
 80003b8:	0011      	movs	r1, r2
 80003ba:	bce0      	pop	{r5, r6, r7}
 80003bc:	46ba      	mov	sl, r7
 80003be:	46b1      	mov	r9, r6
 80003c0:	46a8      	mov	r8, r5
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	2c00      	cmp	r4, #0
 80003c6:	d04b      	beq.n	8000460 <__aeabi_dadd+0x1e0>
 80003c8:	464c      	mov	r4, r9
 80003ca:	1ba4      	subs	r4, r4, r6
 80003cc:	46a4      	mov	ip, r4
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d000      	beq.n	80003d4 <__aeabi_dadd+0x154>
 80003d2:	e123      	b.n	800061c <__aeabi_dadd+0x39c>
 80003d4:	0004      	movs	r4, r0
 80003d6:	431c      	orrs	r4, r3
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x15c>
 80003da:	e1af      	b.n	800073c <__aeabi_dadd+0x4bc>
 80003dc:	4662      	mov	r2, ip
 80003de:	1e54      	subs	r4, r2, #1
 80003e0:	2a01      	cmp	r2, #1
 80003e2:	d100      	bne.n	80003e6 <__aeabi_dadd+0x166>
 80003e4:	e215      	b.n	8000812 <__aeabi_dadd+0x592>
 80003e6:	4d80      	ldr	r5, [pc, #512]	; (80005e8 <__aeabi_dadd+0x368>)
 80003e8:	45ac      	cmp	ip, r5
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x16e>
 80003ec:	e1c8      	b.n	8000780 <__aeabi_dadd+0x500>
 80003ee:	46a4      	mov	ip, r4
 80003f0:	e11b      	b.n	800062a <__aeabi_dadd+0x3aa>
 80003f2:	464a      	mov	r2, r9
 80003f4:	1ab2      	subs	r2, r6, r2
 80003f6:	4694      	mov	ip, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	dc00      	bgt.n	80003fe <__aeabi_dadd+0x17e>
 80003fc:	e0ac      	b.n	8000558 <__aeabi_dadd+0x2d8>
 80003fe:	464a      	mov	r2, r9
 8000400:	2a00      	cmp	r2, #0
 8000402:	d043      	beq.n	800048c <__aeabi_dadd+0x20c>
 8000404:	4a78      	ldr	r2, [pc, #480]	; (80005e8 <__aeabi_dadd+0x368>)
 8000406:	4296      	cmp	r6, r2
 8000408:	d100      	bne.n	800040c <__aeabi_dadd+0x18c>
 800040a:	e1af      	b.n	800076c <__aeabi_dadd+0x4ec>
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	003c      	movs	r4, r7
 8000410:	0412      	lsls	r2, r2, #16
 8000412:	4314      	orrs	r4, r2
 8000414:	46a0      	mov	r8, r4
 8000416:	4662      	mov	r2, ip
 8000418:	2a38      	cmp	r2, #56	; 0x38
 800041a:	dc67      	bgt.n	80004ec <__aeabi_dadd+0x26c>
 800041c:	2a1f      	cmp	r2, #31
 800041e:	dc00      	bgt.n	8000422 <__aeabi_dadd+0x1a2>
 8000420:	e15f      	b.n	80006e2 <__aeabi_dadd+0x462>
 8000422:	4647      	mov	r7, r8
 8000424:	3a20      	subs	r2, #32
 8000426:	40d7      	lsrs	r7, r2
 8000428:	4662      	mov	r2, ip
 800042a:	2a20      	cmp	r2, #32
 800042c:	d005      	beq.n	800043a <__aeabi_dadd+0x1ba>
 800042e:	4664      	mov	r4, ip
 8000430:	2240      	movs	r2, #64	; 0x40
 8000432:	1b12      	subs	r2, r2, r4
 8000434:	4644      	mov	r4, r8
 8000436:	4094      	lsls	r4, r2
 8000438:	4321      	orrs	r1, r4
 800043a:	1e4a      	subs	r2, r1, #1
 800043c:	4191      	sbcs	r1, r2
 800043e:	000c      	movs	r4, r1
 8000440:	433c      	orrs	r4, r7
 8000442:	e057      	b.n	80004f4 <__aeabi_dadd+0x274>
 8000444:	003a      	movs	r2, r7
 8000446:	430a      	orrs	r2, r1
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x1cc>
 800044a:	e105      	b.n	8000658 <__aeabi_dadd+0x3d8>
 800044c:	0022      	movs	r2, r4
 800044e:	3a01      	subs	r2, #1
 8000450:	2c01      	cmp	r4, #1
 8000452:	d100      	bne.n	8000456 <__aeabi_dadd+0x1d6>
 8000454:	e182      	b.n	800075c <__aeabi_dadd+0x4dc>
 8000456:	4c64      	ldr	r4, [pc, #400]	; (80005e8 <__aeabi_dadd+0x368>)
 8000458:	45a4      	cmp	ip, r4
 800045a:	d05b      	beq.n	8000514 <__aeabi_dadd+0x294>
 800045c:	4694      	mov	ip, r2
 800045e:	e741      	b.n	80002e4 <__aeabi_dadd+0x64>
 8000460:	4c63      	ldr	r4, [pc, #396]	; (80005f0 <__aeabi_dadd+0x370>)
 8000462:	1c77      	adds	r7, r6, #1
 8000464:	4227      	tst	r7, r4
 8000466:	d000      	beq.n	800046a <__aeabi_dadd+0x1ea>
 8000468:	e0c4      	b.n	80005f4 <__aeabi_dadd+0x374>
 800046a:	0004      	movs	r4, r0
 800046c:	431c      	orrs	r4, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d000      	beq.n	8000474 <__aeabi_dadd+0x1f4>
 8000472:	e169      	b.n	8000748 <__aeabi_dadd+0x4c8>
 8000474:	2c00      	cmp	r4, #0
 8000476:	d100      	bne.n	800047a <__aeabi_dadd+0x1fa>
 8000478:	e1bf      	b.n	80007fa <__aeabi_dadd+0x57a>
 800047a:	4644      	mov	r4, r8
 800047c:	430c      	orrs	r4, r1
 800047e:	d000      	beq.n	8000482 <__aeabi_dadd+0x202>
 8000480:	e1d0      	b.n	8000824 <__aeabi_dadd+0x5a4>
 8000482:	0742      	lsls	r2, r0, #29
 8000484:	08db      	lsrs	r3, r3, #3
 8000486:	4313      	orrs	r3, r2
 8000488:	08c0      	lsrs	r0, r0, #3
 800048a:	e029      	b.n	80004e0 <__aeabi_dadd+0x260>
 800048c:	003a      	movs	r2, r7
 800048e:	430a      	orrs	r2, r1
 8000490:	d100      	bne.n	8000494 <__aeabi_dadd+0x214>
 8000492:	e170      	b.n	8000776 <__aeabi_dadd+0x4f6>
 8000494:	4662      	mov	r2, ip
 8000496:	4664      	mov	r4, ip
 8000498:	3a01      	subs	r2, #1
 800049a:	2c01      	cmp	r4, #1
 800049c:	d100      	bne.n	80004a0 <__aeabi_dadd+0x220>
 800049e:	e0e0      	b.n	8000662 <__aeabi_dadd+0x3e2>
 80004a0:	4c51      	ldr	r4, [pc, #324]	; (80005e8 <__aeabi_dadd+0x368>)
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x228>
 80004a6:	e161      	b.n	800076c <__aeabi_dadd+0x4ec>
 80004a8:	4694      	mov	ip, r2
 80004aa:	e7b4      	b.n	8000416 <__aeabi_dadd+0x196>
 80004ac:	003a      	movs	r2, r7
 80004ae:	391f      	subs	r1, #31
 80004b0:	40ca      	lsrs	r2, r1
 80004b2:	0011      	movs	r1, r2
 80004b4:	2b20      	cmp	r3, #32
 80004b6:	d003      	beq.n	80004c0 <__aeabi_dadd+0x240>
 80004b8:	2240      	movs	r2, #64	; 0x40
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	409f      	lsls	r7, r3
 80004be:	433c      	orrs	r4, r7
 80004c0:	1e63      	subs	r3, r4, #1
 80004c2:	419c      	sbcs	r4, r3
 80004c4:	2700      	movs	r7, #0
 80004c6:	2600      	movs	r6, #0
 80004c8:	430c      	orrs	r4, r1
 80004ca:	0763      	lsls	r3, r4, #29
 80004cc:	d000      	beq.n	80004d0 <__aeabi_dadd+0x250>
 80004ce:	e753      	b.n	8000378 <__aeabi_dadd+0xf8>
 80004d0:	46b4      	mov	ip, r6
 80004d2:	08e4      	lsrs	r4, r4, #3
 80004d4:	077b      	lsls	r3, r7, #29
 80004d6:	4323      	orrs	r3, r4
 80004d8:	08f8      	lsrs	r0, r7, #3
 80004da:	4a43      	ldr	r2, [pc, #268]	; (80005e8 <__aeabi_dadd+0x368>)
 80004dc:	4594      	cmp	ip, r2
 80004de:	d01d      	beq.n	800051c <__aeabi_dadd+0x29c>
 80004e0:	4662      	mov	r2, ip
 80004e2:	0307      	lsls	r7, r0, #12
 80004e4:	0552      	lsls	r2, r2, #21
 80004e6:	0b3f      	lsrs	r7, r7, #12
 80004e8:	0d52      	lsrs	r2, r2, #21
 80004ea:	e760      	b.n	80003ae <__aeabi_dadd+0x12e>
 80004ec:	4644      	mov	r4, r8
 80004ee:	430c      	orrs	r4, r1
 80004f0:	1e62      	subs	r2, r4, #1
 80004f2:	4194      	sbcs	r4, r2
 80004f4:	18e4      	adds	r4, r4, r3
 80004f6:	429c      	cmp	r4, r3
 80004f8:	419b      	sbcs	r3, r3
 80004fa:	425f      	negs	r7, r3
 80004fc:	183f      	adds	r7, r7, r0
 80004fe:	023b      	lsls	r3, r7, #8
 8000500:	d5e3      	bpl.n	80004ca <__aeabi_dadd+0x24a>
 8000502:	4b39      	ldr	r3, [pc, #228]	; (80005e8 <__aeabi_dadd+0x368>)
 8000504:	3601      	adds	r6, #1
 8000506:	429e      	cmp	r6, r3
 8000508:	d000      	beq.n	800050c <__aeabi_dadd+0x28c>
 800050a:	e0b5      	b.n	8000678 <__aeabi_dadd+0x3f8>
 800050c:	0032      	movs	r2, r6
 800050e:	2700      	movs	r7, #0
 8000510:	2300      	movs	r3, #0
 8000512:	e74c      	b.n	80003ae <__aeabi_dadd+0x12e>
 8000514:	0742      	lsls	r2, r0, #29
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	4313      	orrs	r3, r2
 800051a:	08c0      	lsrs	r0, r0, #3
 800051c:	001a      	movs	r2, r3
 800051e:	4302      	orrs	r2, r0
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x2a4>
 8000522:	e1e1      	b.n	80008e8 <__aeabi_dadd+0x668>
 8000524:	2780      	movs	r7, #128	; 0x80
 8000526:	033f      	lsls	r7, r7, #12
 8000528:	4307      	orrs	r7, r0
 800052a:	033f      	lsls	r7, r7, #12
 800052c:	4a2e      	ldr	r2, [pc, #184]	; (80005e8 <__aeabi_dadd+0x368>)
 800052e:	0b3f      	lsrs	r7, r7, #12
 8000530:	e73d      	b.n	80003ae <__aeabi_dadd+0x12e>
 8000532:	0020      	movs	r0, r4
 8000534:	f001 f90c 	bl	8001750 <__clzsi2>
 8000538:	0001      	movs	r1, r0
 800053a:	3118      	adds	r1, #24
 800053c:	291f      	cmp	r1, #31
 800053e:	dc00      	bgt.n	8000542 <__aeabi_dadd+0x2c2>
 8000540:	e6fc      	b.n	800033c <__aeabi_dadd+0xbc>
 8000542:	3808      	subs	r0, #8
 8000544:	4084      	lsls	r4, r0
 8000546:	0027      	movs	r7, r4
 8000548:	2400      	movs	r4, #0
 800054a:	42b1      	cmp	r1, r6
 800054c:	db00      	blt.n	8000550 <__aeabi_dadd+0x2d0>
 800054e:	e6ff      	b.n	8000350 <__aeabi_dadd+0xd0>
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <__aeabi_dadd+0x36c>)
 8000552:	1a76      	subs	r6, r6, r1
 8000554:	4017      	ands	r7, r2
 8000556:	e70d      	b.n	8000374 <__aeabi_dadd+0xf4>
 8000558:	2a00      	cmp	r2, #0
 800055a:	d02f      	beq.n	80005bc <__aeabi_dadd+0x33c>
 800055c:	464a      	mov	r2, r9
 800055e:	1b92      	subs	r2, r2, r6
 8000560:	4694      	mov	ip, r2
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_dadd+0x2e8>
 8000566:	e0ad      	b.n	80006c4 <__aeabi_dadd+0x444>
 8000568:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <__aeabi_dadd+0x368>)
 800056a:	4591      	cmp	r9, r2
 800056c:	d100      	bne.n	8000570 <__aeabi_dadd+0x2f0>
 800056e:	e10f      	b.n	8000790 <__aeabi_dadd+0x510>
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	4310      	orrs	r0, r2
 8000576:	4662      	mov	r2, ip
 8000578:	2a38      	cmp	r2, #56	; 0x38
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0x2fe>
 800057c:	e10f      	b.n	800079e <__aeabi_dadd+0x51e>
 800057e:	2a1f      	cmp	r2, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0x304>
 8000582:	e180      	b.n	8000886 <__aeabi_dadd+0x606>
 8000584:	4664      	mov	r4, ip
 8000586:	2220      	movs	r2, #32
 8000588:	001e      	movs	r6, r3
 800058a:	1b12      	subs	r2, r2, r4
 800058c:	4667      	mov	r7, ip
 800058e:	0004      	movs	r4, r0
 8000590:	4093      	lsls	r3, r2
 8000592:	4094      	lsls	r4, r2
 8000594:	40fe      	lsrs	r6, r7
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4193      	sbcs	r3, r2
 800059a:	40f8      	lsrs	r0, r7
 800059c:	4334      	orrs	r4, r6
 800059e:	431c      	orrs	r4, r3
 80005a0:	4480      	add	r8, r0
 80005a2:	1864      	adds	r4, r4, r1
 80005a4:	428c      	cmp	r4, r1
 80005a6:	41bf      	sbcs	r7, r7
 80005a8:	427f      	negs	r7, r7
 80005aa:	464e      	mov	r6, r9
 80005ac:	4447      	add	r7, r8
 80005ae:	e7a6      	b.n	80004fe <__aeabi_dadd+0x27e>
 80005b0:	4642      	mov	r2, r8
 80005b2:	430a      	orrs	r2, r1
 80005b4:	0011      	movs	r1, r2
 80005b6:	1e4a      	subs	r2, r1, #1
 80005b8:	4191      	sbcs	r1, r2
 80005ba:	e6ad      	b.n	8000318 <__aeabi_dadd+0x98>
 80005bc:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__aeabi_dadd+0x370>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	4222      	tst	r2, r4
 80005c2:	d000      	beq.n	80005c6 <__aeabi_dadd+0x346>
 80005c4:	e0a1      	b.n	800070a <__aeabi_dadd+0x48a>
 80005c6:	0002      	movs	r2, r0
 80005c8:	431a      	orrs	r2, r3
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d000      	beq.n	80005d0 <__aeabi_dadd+0x350>
 80005ce:	e0fa      	b.n	80007c6 <__aeabi_dadd+0x546>
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x356>
 80005d4:	e145      	b.n	8000862 <__aeabi_dadd+0x5e2>
 80005d6:	003a      	movs	r2, r7
 80005d8:	430a      	orrs	r2, r1
 80005da:	d000      	beq.n	80005de <__aeabi_dadd+0x35e>
 80005dc:	e146      	b.n	800086c <__aeabi_dadd+0x5ec>
 80005de:	0742      	lsls	r2, r0, #29
 80005e0:	08db      	lsrs	r3, r3, #3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	08c0      	lsrs	r0, r0, #3
 80005e6:	e77b      	b.n	80004e0 <__aeabi_dadd+0x260>
 80005e8:	000007ff 	.word	0x000007ff
 80005ec:	ff7fffff 	.word	0xff7fffff
 80005f0:	000007fe 	.word	0x000007fe
 80005f4:	4647      	mov	r7, r8
 80005f6:	1a5c      	subs	r4, r3, r1
 80005f8:	1bc2      	subs	r2, r0, r7
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	41bf      	sbcs	r7, r7
 80005fe:	427f      	negs	r7, r7
 8000600:	46b9      	mov	r9, r7
 8000602:	0017      	movs	r7, r2
 8000604:	464a      	mov	r2, r9
 8000606:	1abf      	subs	r7, r7, r2
 8000608:	023a      	lsls	r2, r7, #8
 800060a:	d500      	bpl.n	800060e <__aeabi_dadd+0x38e>
 800060c:	e08d      	b.n	800072a <__aeabi_dadd+0x4aa>
 800060e:	0023      	movs	r3, r4
 8000610:	433b      	orrs	r3, r7
 8000612:	d000      	beq.n	8000616 <__aeabi_dadd+0x396>
 8000614:	e68a      	b.n	800032c <__aeabi_dadd+0xac>
 8000616:	2000      	movs	r0, #0
 8000618:	2500      	movs	r5, #0
 800061a:	e761      	b.n	80004e0 <__aeabi_dadd+0x260>
 800061c:	4cb4      	ldr	r4, [pc, #720]	; (80008f0 <__aeabi_dadd+0x670>)
 800061e:	45a1      	cmp	r9, r4
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x3a4>
 8000622:	e0ad      	b.n	8000780 <__aeabi_dadd+0x500>
 8000624:	2480      	movs	r4, #128	; 0x80
 8000626:	0424      	lsls	r4, r4, #16
 8000628:	4320      	orrs	r0, r4
 800062a:	4664      	mov	r4, ip
 800062c:	2c38      	cmp	r4, #56	; 0x38
 800062e:	dc3d      	bgt.n	80006ac <__aeabi_dadd+0x42c>
 8000630:	4662      	mov	r2, ip
 8000632:	2c1f      	cmp	r4, #31
 8000634:	dd00      	ble.n	8000638 <__aeabi_dadd+0x3b8>
 8000636:	e0b7      	b.n	80007a8 <__aeabi_dadd+0x528>
 8000638:	2520      	movs	r5, #32
 800063a:	001e      	movs	r6, r3
 800063c:	1b2d      	subs	r5, r5, r4
 800063e:	0004      	movs	r4, r0
 8000640:	40ab      	lsls	r3, r5
 8000642:	40ac      	lsls	r4, r5
 8000644:	40d6      	lsrs	r6, r2
 8000646:	40d0      	lsrs	r0, r2
 8000648:	4642      	mov	r2, r8
 800064a:	1e5d      	subs	r5, r3, #1
 800064c:	41ab      	sbcs	r3, r5
 800064e:	4334      	orrs	r4, r6
 8000650:	1a12      	subs	r2, r2, r0
 8000652:	4690      	mov	r8, r2
 8000654:	4323      	orrs	r3, r4
 8000656:	e02c      	b.n	80006b2 <__aeabi_dadd+0x432>
 8000658:	0742      	lsls	r2, r0, #29
 800065a:	08db      	lsrs	r3, r3, #3
 800065c:	4313      	orrs	r3, r2
 800065e:	08c0      	lsrs	r0, r0, #3
 8000660:	e73b      	b.n	80004da <__aeabi_dadd+0x25a>
 8000662:	185c      	adds	r4, r3, r1
 8000664:	429c      	cmp	r4, r3
 8000666:	419b      	sbcs	r3, r3
 8000668:	4440      	add	r0, r8
 800066a:	425b      	negs	r3, r3
 800066c:	18c7      	adds	r7, r0, r3
 800066e:	2601      	movs	r6, #1
 8000670:	023b      	lsls	r3, r7, #8
 8000672:	d400      	bmi.n	8000676 <__aeabi_dadd+0x3f6>
 8000674:	e729      	b.n	80004ca <__aeabi_dadd+0x24a>
 8000676:	2602      	movs	r6, #2
 8000678:	4a9e      	ldr	r2, [pc, #632]	; (80008f4 <__aeabi_dadd+0x674>)
 800067a:	0863      	lsrs	r3, r4, #1
 800067c:	4017      	ands	r7, r2
 800067e:	2201      	movs	r2, #1
 8000680:	4014      	ands	r4, r2
 8000682:	431c      	orrs	r4, r3
 8000684:	07fb      	lsls	r3, r7, #31
 8000686:	431c      	orrs	r4, r3
 8000688:	087f      	lsrs	r7, r7, #1
 800068a:	e673      	b.n	8000374 <__aeabi_dadd+0xf4>
 800068c:	4644      	mov	r4, r8
 800068e:	3a20      	subs	r2, #32
 8000690:	40d4      	lsrs	r4, r2
 8000692:	4662      	mov	r2, ip
 8000694:	2a20      	cmp	r2, #32
 8000696:	d005      	beq.n	80006a4 <__aeabi_dadd+0x424>
 8000698:	4667      	mov	r7, ip
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	1bd2      	subs	r2, r2, r7
 800069e:	4647      	mov	r7, r8
 80006a0:	4097      	lsls	r7, r2
 80006a2:	4339      	orrs	r1, r7
 80006a4:	1e4a      	subs	r2, r1, #1
 80006a6:	4191      	sbcs	r1, r2
 80006a8:	4321      	orrs	r1, r4
 80006aa:	e635      	b.n	8000318 <__aeabi_dadd+0x98>
 80006ac:	4303      	orrs	r3, r0
 80006ae:	1e58      	subs	r0, r3, #1
 80006b0:	4183      	sbcs	r3, r0
 80006b2:	1acc      	subs	r4, r1, r3
 80006b4:	42a1      	cmp	r1, r4
 80006b6:	41bf      	sbcs	r7, r7
 80006b8:	4643      	mov	r3, r8
 80006ba:	427f      	negs	r7, r7
 80006bc:	4655      	mov	r5, sl
 80006be:	464e      	mov	r6, r9
 80006c0:	1bdf      	subs	r7, r3, r7
 80006c2:	e62e      	b.n	8000322 <__aeabi_dadd+0xa2>
 80006c4:	0002      	movs	r2, r0
 80006c6:	431a      	orrs	r2, r3
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x44c>
 80006ca:	e0bd      	b.n	8000848 <__aeabi_dadd+0x5c8>
 80006cc:	4662      	mov	r2, ip
 80006ce:	4664      	mov	r4, ip
 80006d0:	3a01      	subs	r2, #1
 80006d2:	2c01      	cmp	r4, #1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x458>
 80006d6:	e0e5      	b.n	80008a4 <__aeabi_dadd+0x624>
 80006d8:	4c85      	ldr	r4, [pc, #532]	; (80008f0 <__aeabi_dadd+0x670>)
 80006da:	45a4      	cmp	ip, r4
 80006dc:	d058      	beq.n	8000790 <__aeabi_dadd+0x510>
 80006de:	4694      	mov	ip, r2
 80006e0:	e749      	b.n	8000576 <__aeabi_dadd+0x2f6>
 80006e2:	4664      	mov	r4, ip
 80006e4:	2220      	movs	r2, #32
 80006e6:	1b12      	subs	r2, r2, r4
 80006e8:	4644      	mov	r4, r8
 80006ea:	4094      	lsls	r4, r2
 80006ec:	000f      	movs	r7, r1
 80006ee:	46a1      	mov	r9, r4
 80006f0:	4664      	mov	r4, ip
 80006f2:	4091      	lsls	r1, r2
 80006f4:	40e7      	lsrs	r7, r4
 80006f6:	464c      	mov	r4, r9
 80006f8:	1e4a      	subs	r2, r1, #1
 80006fa:	4191      	sbcs	r1, r2
 80006fc:	433c      	orrs	r4, r7
 80006fe:	4642      	mov	r2, r8
 8000700:	430c      	orrs	r4, r1
 8000702:	4661      	mov	r1, ip
 8000704:	40ca      	lsrs	r2, r1
 8000706:	1880      	adds	r0, r0, r2
 8000708:	e6f4      	b.n	80004f4 <__aeabi_dadd+0x274>
 800070a:	4c79      	ldr	r4, [pc, #484]	; (80008f0 <__aeabi_dadd+0x670>)
 800070c:	42a2      	cmp	r2, r4
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x492>
 8000710:	e6fd      	b.n	800050e <__aeabi_dadd+0x28e>
 8000712:	1859      	adds	r1, r3, r1
 8000714:	4299      	cmp	r1, r3
 8000716:	419b      	sbcs	r3, r3
 8000718:	4440      	add	r0, r8
 800071a:	425f      	negs	r7, r3
 800071c:	19c7      	adds	r7, r0, r7
 800071e:	07fc      	lsls	r4, r7, #31
 8000720:	0849      	lsrs	r1, r1, #1
 8000722:	0016      	movs	r6, r2
 8000724:	430c      	orrs	r4, r1
 8000726:	087f      	lsrs	r7, r7, #1
 8000728:	e6cf      	b.n	80004ca <__aeabi_dadd+0x24a>
 800072a:	1acc      	subs	r4, r1, r3
 800072c:	42a1      	cmp	r1, r4
 800072e:	41bf      	sbcs	r7, r7
 8000730:	4643      	mov	r3, r8
 8000732:	427f      	negs	r7, r7
 8000734:	1a18      	subs	r0, r3, r0
 8000736:	4655      	mov	r5, sl
 8000738:	1bc7      	subs	r7, r0, r7
 800073a:	e5f7      	b.n	800032c <__aeabi_dadd+0xac>
 800073c:	08c9      	lsrs	r1, r1, #3
 800073e:	077b      	lsls	r3, r7, #29
 8000740:	4655      	mov	r5, sl
 8000742:	430b      	orrs	r3, r1
 8000744:	08f8      	lsrs	r0, r7, #3
 8000746:	e6c8      	b.n	80004da <__aeabi_dadd+0x25a>
 8000748:	2c00      	cmp	r4, #0
 800074a:	d000      	beq.n	800074e <__aeabi_dadd+0x4ce>
 800074c:	e081      	b.n	8000852 <__aeabi_dadd+0x5d2>
 800074e:	4643      	mov	r3, r8
 8000750:	430b      	orrs	r3, r1
 8000752:	d115      	bne.n	8000780 <__aeabi_dadd+0x500>
 8000754:	2080      	movs	r0, #128	; 0x80
 8000756:	2500      	movs	r5, #0
 8000758:	0300      	lsls	r0, r0, #12
 800075a:	e6e3      	b.n	8000524 <__aeabi_dadd+0x2a4>
 800075c:	1a5c      	subs	r4, r3, r1
 800075e:	42a3      	cmp	r3, r4
 8000760:	419b      	sbcs	r3, r3
 8000762:	1bc7      	subs	r7, r0, r7
 8000764:	425b      	negs	r3, r3
 8000766:	2601      	movs	r6, #1
 8000768:	1aff      	subs	r7, r7, r3
 800076a:	e5da      	b.n	8000322 <__aeabi_dadd+0xa2>
 800076c:	0742      	lsls	r2, r0, #29
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	4313      	orrs	r3, r2
 8000772:	08c0      	lsrs	r0, r0, #3
 8000774:	e6d2      	b.n	800051c <__aeabi_dadd+0x29c>
 8000776:	0742      	lsls	r2, r0, #29
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	4313      	orrs	r3, r2
 800077c:	08c0      	lsrs	r0, r0, #3
 800077e:	e6ac      	b.n	80004da <__aeabi_dadd+0x25a>
 8000780:	4643      	mov	r3, r8
 8000782:	4642      	mov	r2, r8
 8000784:	08c9      	lsrs	r1, r1, #3
 8000786:	075b      	lsls	r3, r3, #29
 8000788:	4655      	mov	r5, sl
 800078a:	430b      	orrs	r3, r1
 800078c:	08d0      	lsrs	r0, r2, #3
 800078e:	e6c5      	b.n	800051c <__aeabi_dadd+0x29c>
 8000790:	4643      	mov	r3, r8
 8000792:	4642      	mov	r2, r8
 8000794:	075b      	lsls	r3, r3, #29
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	430b      	orrs	r3, r1
 800079a:	08d0      	lsrs	r0, r2, #3
 800079c:	e6be      	b.n	800051c <__aeabi_dadd+0x29c>
 800079e:	4303      	orrs	r3, r0
 80007a0:	001c      	movs	r4, r3
 80007a2:	1e63      	subs	r3, r4, #1
 80007a4:	419c      	sbcs	r4, r3
 80007a6:	e6fc      	b.n	80005a2 <__aeabi_dadd+0x322>
 80007a8:	0002      	movs	r2, r0
 80007aa:	3c20      	subs	r4, #32
 80007ac:	40e2      	lsrs	r2, r4
 80007ae:	0014      	movs	r4, r2
 80007b0:	4662      	mov	r2, ip
 80007b2:	2a20      	cmp	r2, #32
 80007b4:	d003      	beq.n	80007be <__aeabi_dadd+0x53e>
 80007b6:	2540      	movs	r5, #64	; 0x40
 80007b8:	1aad      	subs	r5, r5, r2
 80007ba:	40a8      	lsls	r0, r5
 80007bc:	4303      	orrs	r3, r0
 80007be:	1e58      	subs	r0, r3, #1
 80007c0:	4183      	sbcs	r3, r0
 80007c2:	4323      	orrs	r3, r4
 80007c4:	e775      	b.n	80006b2 <__aeabi_dadd+0x432>
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d0e2      	beq.n	8000790 <__aeabi_dadd+0x510>
 80007ca:	003a      	movs	r2, r7
 80007cc:	430a      	orrs	r2, r1
 80007ce:	d0cd      	beq.n	800076c <__aeabi_dadd+0x4ec>
 80007d0:	0742      	lsls	r2, r0, #29
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	08c0      	lsrs	r0, r0, #3
 80007da:	0312      	lsls	r2, r2, #12
 80007dc:	4210      	tst	r0, r2
 80007de:	d006      	beq.n	80007ee <__aeabi_dadd+0x56e>
 80007e0:	08fc      	lsrs	r4, r7, #3
 80007e2:	4214      	tst	r4, r2
 80007e4:	d103      	bne.n	80007ee <__aeabi_dadd+0x56e>
 80007e6:	0020      	movs	r0, r4
 80007e8:	08cb      	lsrs	r3, r1, #3
 80007ea:	077a      	lsls	r2, r7, #29
 80007ec:	4313      	orrs	r3, r2
 80007ee:	0f5a      	lsrs	r2, r3, #29
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	0752      	lsls	r2, r2, #29
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	e690      	b.n	800051c <__aeabi_dadd+0x29c>
 80007fa:	4643      	mov	r3, r8
 80007fc:	430b      	orrs	r3, r1
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x582>
 8000800:	e709      	b.n	8000616 <__aeabi_dadd+0x396>
 8000802:	4643      	mov	r3, r8
 8000804:	4642      	mov	r2, r8
 8000806:	08c9      	lsrs	r1, r1, #3
 8000808:	075b      	lsls	r3, r3, #29
 800080a:	4655      	mov	r5, sl
 800080c:	430b      	orrs	r3, r1
 800080e:	08d0      	lsrs	r0, r2, #3
 8000810:	e666      	b.n	80004e0 <__aeabi_dadd+0x260>
 8000812:	1acc      	subs	r4, r1, r3
 8000814:	42a1      	cmp	r1, r4
 8000816:	4189      	sbcs	r1, r1
 8000818:	1a3f      	subs	r7, r7, r0
 800081a:	4249      	negs	r1, r1
 800081c:	4655      	mov	r5, sl
 800081e:	2601      	movs	r6, #1
 8000820:	1a7f      	subs	r7, r7, r1
 8000822:	e57e      	b.n	8000322 <__aeabi_dadd+0xa2>
 8000824:	4642      	mov	r2, r8
 8000826:	1a5c      	subs	r4, r3, r1
 8000828:	1a87      	subs	r7, r0, r2
 800082a:	42a3      	cmp	r3, r4
 800082c:	4192      	sbcs	r2, r2
 800082e:	4252      	negs	r2, r2
 8000830:	1abf      	subs	r7, r7, r2
 8000832:	023a      	lsls	r2, r7, #8
 8000834:	d53d      	bpl.n	80008b2 <__aeabi_dadd+0x632>
 8000836:	1acc      	subs	r4, r1, r3
 8000838:	42a1      	cmp	r1, r4
 800083a:	4189      	sbcs	r1, r1
 800083c:	4643      	mov	r3, r8
 800083e:	4249      	negs	r1, r1
 8000840:	1a1f      	subs	r7, r3, r0
 8000842:	4655      	mov	r5, sl
 8000844:	1a7f      	subs	r7, r7, r1
 8000846:	e595      	b.n	8000374 <__aeabi_dadd+0xf4>
 8000848:	077b      	lsls	r3, r7, #29
 800084a:	08c9      	lsrs	r1, r1, #3
 800084c:	430b      	orrs	r3, r1
 800084e:	08f8      	lsrs	r0, r7, #3
 8000850:	e643      	b.n	80004da <__aeabi_dadd+0x25a>
 8000852:	4644      	mov	r4, r8
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	430c      	orrs	r4, r1
 8000858:	d130      	bne.n	80008bc <__aeabi_dadd+0x63c>
 800085a:	0742      	lsls	r2, r0, #29
 800085c:	4313      	orrs	r3, r2
 800085e:	08c0      	lsrs	r0, r0, #3
 8000860:	e65c      	b.n	800051c <__aeabi_dadd+0x29c>
 8000862:	077b      	lsls	r3, r7, #29
 8000864:	08c9      	lsrs	r1, r1, #3
 8000866:	430b      	orrs	r3, r1
 8000868:	08f8      	lsrs	r0, r7, #3
 800086a:	e639      	b.n	80004e0 <__aeabi_dadd+0x260>
 800086c:	185c      	adds	r4, r3, r1
 800086e:	429c      	cmp	r4, r3
 8000870:	419b      	sbcs	r3, r3
 8000872:	4440      	add	r0, r8
 8000874:	425b      	negs	r3, r3
 8000876:	18c7      	adds	r7, r0, r3
 8000878:	023b      	lsls	r3, r7, #8
 800087a:	d400      	bmi.n	800087e <__aeabi_dadd+0x5fe>
 800087c:	e625      	b.n	80004ca <__aeabi_dadd+0x24a>
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <__aeabi_dadd+0x674>)
 8000880:	2601      	movs	r6, #1
 8000882:	401f      	ands	r7, r3
 8000884:	e621      	b.n	80004ca <__aeabi_dadd+0x24a>
 8000886:	0004      	movs	r4, r0
 8000888:	3a20      	subs	r2, #32
 800088a:	40d4      	lsrs	r4, r2
 800088c:	4662      	mov	r2, ip
 800088e:	2a20      	cmp	r2, #32
 8000890:	d004      	beq.n	800089c <__aeabi_dadd+0x61c>
 8000892:	2240      	movs	r2, #64	; 0x40
 8000894:	4666      	mov	r6, ip
 8000896:	1b92      	subs	r2, r2, r6
 8000898:	4090      	lsls	r0, r2
 800089a:	4303      	orrs	r3, r0
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	4193      	sbcs	r3, r2
 80008a0:	431c      	orrs	r4, r3
 80008a2:	e67e      	b.n	80005a2 <__aeabi_dadd+0x322>
 80008a4:	185c      	adds	r4, r3, r1
 80008a6:	428c      	cmp	r4, r1
 80008a8:	4189      	sbcs	r1, r1
 80008aa:	4440      	add	r0, r8
 80008ac:	4249      	negs	r1, r1
 80008ae:	1847      	adds	r7, r0, r1
 80008b0:	e6dd      	b.n	800066e <__aeabi_dadd+0x3ee>
 80008b2:	0023      	movs	r3, r4
 80008b4:	433b      	orrs	r3, r7
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x63a>
 80008b8:	e6ad      	b.n	8000616 <__aeabi_dadd+0x396>
 80008ba:	e606      	b.n	80004ca <__aeabi_dadd+0x24a>
 80008bc:	0744      	lsls	r4, r0, #29
 80008be:	4323      	orrs	r3, r4
 80008c0:	2480      	movs	r4, #128	; 0x80
 80008c2:	08c0      	lsrs	r0, r0, #3
 80008c4:	0324      	lsls	r4, r4, #12
 80008c6:	4220      	tst	r0, r4
 80008c8:	d008      	beq.n	80008dc <__aeabi_dadd+0x65c>
 80008ca:	4642      	mov	r2, r8
 80008cc:	08d6      	lsrs	r6, r2, #3
 80008ce:	4226      	tst	r6, r4
 80008d0:	d104      	bne.n	80008dc <__aeabi_dadd+0x65c>
 80008d2:	4655      	mov	r5, sl
 80008d4:	0030      	movs	r0, r6
 80008d6:	08cb      	lsrs	r3, r1, #3
 80008d8:	0751      	lsls	r1, r2, #29
 80008da:	430b      	orrs	r3, r1
 80008dc:	0f5a      	lsrs	r2, r3, #29
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	0752      	lsls	r2, r2, #29
 80008e4:	4313      	orrs	r3, r2
 80008e6:	e619      	b.n	800051c <__aeabi_dadd+0x29c>
 80008e8:	2300      	movs	r3, #0
 80008ea:	4a01      	ldr	r2, [pc, #4]	; (80008f0 <__aeabi_dadd+0x670>)
 80008ec:	001f      	movs	r7, r3
 80008ee:	e55e      	b.n	80003ae <__aeabi_dadd+0x12e>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff

080008f8 <__aeabi_ddiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	4657      	mov	r7, sl
 80008fc:	464e      	mov	r6, r9
 80008fe:	4645      	mov	r5, r8
 8000900:	46de      	mov	lr, fp
 8000902:	b5e0      	push	{r5, r6, r7, lr}
 8000904:	4681      	mov	r9, r0
 8000906:	0005      	movs	r5, r0
 8000908:	030c      	lsls	r4, r1, #12
 800090a:	0048      	lsls	r0, r1, #1
 800090c:	4692      	mov	sl, r2
 800090e:	001f      	movs	r7, r3
 8000910:	b085      	sub	sp, #20
 8000912:	0b24      	lsrs	r4, r4, #12
 8000914:	0d40      	lsrs	r0, r0, #21
 8000916:	0fce      	lsrs	r6, r1, #31
 8000918:	2800      	cmp	r0, #0
 800091a:	d100      	bne.n	800091e <__aeabi_ddiv+0x26>
 800091c:	e156      	b.n	8000bcc <__aeabi_ddiv+0x2d4>
 800091e:	4bd4      	ldr	r3, [pc, #848]	; (8000c70 <__aeabi_ddiv+0x378>)
 8000920:	4298      	cmp	r0, r3
 8000922:	d100      	bne.n	8000926 <__aeabi_ddiv+0x2e>
 8000924:	e172      	b.n	8000c0c <__aeabi_ddiv+0x314>
 8000926:	0f6b      	lsrs	r3, r5, #29
 8000928:	00e4      	lsls	r4, r4, #3
 800092a:	431c      	orrs	r4, r3
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	041b      	lsls	r3, r3, #16
 8000930:	4323      	orrs	r3, r4
 8000932:	4698      	mov	r8, r3
 8000934:	4bcf      	ldr	r3, [pc, #828]	; (8000c74 <__aeabi_ddiv+0x37c>)
 8000936:	00ed      	lsls	r5, r5, #3
 8000938:	469b      	mov	fp, r3
 800093a:	2300      	movs	r3, #0
 800093c:	4699      	mov	r9, r3
 800093e:	4483      	add	fp, r0
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	033c      	lsls	r4, r7, #12
 8000944:	007b      	lsls	r3, r7, #1
 8000946:	4650      	mov	r0, sl
 8000948:	0b24      	lsrs	r4, r4, #12
 800094a:	0d5b      	lsrs	r3, r3, #21
 800094c:	0fff      	lsrs	r7, r7, #31
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_ddiv+0x5c>
 8000952:	e11f      	b.n	8000b94 <__aeabi_ddiv+0x29c>
 8000954:	4ac6      	ldr	r2, [pc, #792]	; (8000c70 <__aeabi_ddiv+0x378>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_ddiv+0x64>
 800095a:	e162      	b.n	8000c22 <__aeabi_ddiv+0x32a>
 800095c:	49c5      	ldr	r1, [pc, #788]	; (8000c74 <__aeabi_ddiv+0x37c>)
 800095e:	0f42      	lsrs	r2, r0, #29
 8000960:	468c      	mov	ip, r1
 8000962:	00e4      	lsls	r4, r4, #3
 8000964:	4659      	mov	r1, fp
 8000966:	4314      	orrs	r4, r2
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	4463      	add	r3, ip
 800096c:	0412      	lsls	r2, r2, #16
 800096e:	1acb      	subs	r3, r1, r3
 8000970:	4314      	orrs	r4, r2
 8000972:	469b      	mov	fp, r3
 8000974:	00c2      	lsls	r2, r0, #3
 8000976:	2000      	movs	r0, #0
 8000978:	0033      	movs	r3, r6
 800097a:	407b      	eors	r3, r7
 800097c:	469a      	mov	sl, r3
 800097e:	464b      	mov	r3, r9
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d827      	bhi.n	80009d4 <__aeabi_ddiv+0xdc>
 8000984:	49bc      	ldr	r1, [pc, #752]	; (8000c78 <__aeabi_ddiv+0x380>)
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	58cb      	ldr	r3, [r1, r3]
 800098a:	469f      	mov	pc, r3
 800098c:	46b2      	mov	sl, r6
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d016      	beq.n	80009c2 <__aeabi_ddiv+0xca>
 8000994:	2b03      	cmp	r3, #3
 8000996:	d100      	bne.n	800099a <__aeabi_ddiv+0xa2>
 8000998:	e28e      	b.n	8000eb8 <__aeabi_ddiv+0x5c0>
 800099a:	2b01      	cmp	r3, #1
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0xa8>
 800099e:	e0d9      	b.n	8000b54 <__aeabi_ddiv+0x25c>
 80009a0:	2300      	movs	r3, #0
 80009a2:	2400      	movs	r4, #0
 80009a4:	2500      	movs	r5, #0
 80009a6:	4652      	mov	r2, sl
 80009a8:	051b      	lsls	r3, r3, #20
 80009aa:	4323      	orrs	r3, r4
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4313      	orrs	r3, r2
 80009b0:	0028      	movs	r0, r5
 80009b2:	0019      	movs	r1, r3
 80009b4:	b005      	add	sp, #20
 80009b6:	bcf0      	pop	{r4, r5, r6, r7}
 80009b8:	46bb      	mov	fp, r7
 80009ba:	46b2      	mov	sl, r6
 80009bc:	46a9      	mov	r9, r5
 80009be:	46a0      	mov	r8, r4
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c2:	2400      	movs	r4, #0
 80009c4:	2500      	movs	r5, #0
 80009c6:	4baa      	ldr	r3, [pc, #680]	; (8000c70 <__aeabi_ddiv+0x378>)
 80009c8:	e7ed      	b.n	80009a6 <__aeabi_ddiv+0xae>
 80009ca:	46ba      	mov	sl, r7
 80009cc:	46a0      	mov	r8, r4
 80009ce:	0015      	movs	r5, r2
 80009d0:	9000      	str	r0, [sp, #0]
 80009d2:	e7dc      	b.n	800098e <__aeabi_ddiv+0x96>
 80009d4:	4544      	cmp	r4, r8
 80009d6:	d200      	bcs.n	80009da <__aeabi_ddiv+0xe2>
 80009d8:	e1c7      	b.n	8000d6a <__aeabi_ddiv+0x472>
 80009da:	d100      	bne.n	80009de <__aeabi_ddiv+0xe6>
 80009dc:	e1c2      	b.n	8000d64 <__aeabi_ddiv+0x46c>
 80009de:	2301      	movs	r3, #1
 80009e0:	425b      	negs	r3, r3
 80009e2:	469c      	mov	ip, r3
 80009e4:	002e      	movs	r6, r5
 80009e6:	4640      	mov	r0, r8
 80009e8:	2500      	movs	r5, #0
 80009ea:	44e3      	add	fp, ip
 80009ec:	0223      	lsls	r3, r4, #8
 80009ee:	0e14      	lsrs	r4, r2, #24
 80009f0:	431c      	orrs	r4, r3
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	4699      	mov	r9, r3
 80009f6:	0423      	lsls	r3, r4, #16
 80009f8:	0c1f      	lsrs	r7, r3, #16
 80009fa:	0212      	lsls	r2, r2, #8
 80009fc:	4649      	mov	r1, r9
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	9701      	str	r7, [sp, #4]
 8000a02:	f7ff fc19 	bl	8000238 <__aeabi_uidivmod>
 8000a06:	0002      	movs	r2, r0
 8000a08:	437a      	muls	r2, r7
 8000a0a:	040b      	lsls	r3, r1, #16
 8000a0c:	0c31      	lsrs	r1, r6, #16
 8000a0e:	4680      	mov	r8, r0
 8000a10:	4319      	orrs	r1, r3
 8000a12:	428a      	cmp	r2, r1
 8000a14:	d907      	bls.n	8000a26 <__aeabi_ddiv+0x12e>
 8000a16:	2301      	movs	r3, #1
 8000a18:	425b      	negs	r3, r3
 8000a1a:	469c      	mov	ip, r3
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	44e0      	add	r8, ip
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d800      	bhi.n	8000a26 <__aeabi_ddiv+0x12e>
 8000a24:	e207      	b.n	8000e36 <__aeabi_ddiv+0x53e>
 8000a26:	1a88      	subs	r0, r1, r2
 8000a28:	4649      	mov	r1, r9
 8000a2a:	f7ff fc05 	bl	8000238 <__aeabi_uidivmod>
 8000a2e:	0409      	lsls	r1, r1, #16
 8000a30:	468c      	mov	ip, r1
 8000a32:	0431      	lsls	r1, r6, #16
 8000a34:	4666      	mov	r6, ip
 8000a36:	9a01      	ldr	r2, [sp, #4]
 8000a38:	0c09      	lsrs	r1, r1, #16
 8000a3a:	4342      	muls	r2, r0
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	4331      	orrs	r1, r6
 8000a40:	428a      	cmp	r2, r1
 8000a42:	d904      	bls.n	8000a4e <__aeabi_ddiv+0x156>
 8000a44:	1909      	adds	r1, r1, r4
 8000a46:	3b01      	subs	r3, #1
 8000a48:	428c      	cmp	r4, r1
 8000a4a:	d800      	bhi.n	8000a4e <__aeabi_ddiv+0x156>
 8000a4c:	e1ed      	b.n	8000e2a <__aeabi_ddiv+0x532>
 8000a4e:	1a88      	subs	r0, r1, r2
 8000a50:	4642      	mov	r2, r8
 8000a52:	0412      	lsls	r2, r2, #16
 8000a54:	431a      	orrs	r2, r3
 8000a56:	4690      	mov	r8, r2
 8000a58:	4641      	mov	r1, r8
 8000a5a:	9b00      	ldr	r3, [sp, #0]
 8000a5c:	040e      	lsls	r6, r1, #16
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	001f      	movs	r7, r3
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	9b00      	ldr	r3, [sp, #0]
 8000a66:	0c36      	lsrs	r6, r6, #16
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	0c19      	lsrs	r1, r3, #16
 8000a6c:	000b      	movs	r3, r1
 8000a6e:	4373      	muls	r3, r6
 8000a70:	0c12      	lsrs	r2, r2, #16
 8000a72:	437e      	muls	r6, r7
 8000a74:	9103      	str	r1, [sp, #12]
 8000a76:	4351      	muls	r1, r2
 8000a78:	437a      	muls	r2, r7
 8000a7a:	0c1f      	lsrs	r7, r3, #16
 8000a7c:	46bc      	mov	ip, r7
 8000a7e:	1876      	adds	r6, r6, r1
 8000a80:	4466      	add	r6, ip
 8000a82:	42b1      	cmp	r1, r6
 8000a84:	d903      	bls.n	8000a8e <__aeabi_ddiv+0x196>
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	0249      	lsls	r1, r1, #9
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4462      	add	r2, ip
 8000a8e:	0c31      	lsrs	r1, r6, #16
 8000a90:	188a      	adds	r2, r1, r2
 8000a92:	0431      	lsls	r1, r6, #16
 8000a94:	041e      	lsls	r6, r3, #16
 8000a96:	0c36      	lsrs	r6, r6, #16
 8000a98:	198e      	adds	r6, r1, r6
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d302      	bcc.n	8000aa4 <__aeabi_ddiv+0x1ac>
 8000a9e:	d112      	bne.n	8000ac6 <__aeabi_ddiv+0x1ce>
 8000aa0:	42b5      	cmp	r5, r6
 8000aa2:	d210      	bcs.n	8000ac6 <__aeabi_ddiv+0x1ce>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	1e59      	subs	r1, r3, #1
 8000aa8:	9b00      	ldr	r3, [sp, #0]
 8000aaa:	469c      	mov	ip, r3
 8000aac:	4465      	add	r5, ip
 8000aae:	001f      	movs	r7, r3
 8000ab0:	429d      	cmp	r5, r3
 8000ab2:	419b      	sbcs	r3, r3
 8000ab4:	425b      	negs	r3, r3
 8000ab6:	191b      	adds	r3, r3, r4
 8000ab8:	18c0      	adds	r0, r0, r3
 8000aba:	4284      	cmp	r4, r0
 8000abc:	d200      	bcs.n	8000ac0 <__aeabi_ddiv+0x1c8>
 8000abe:	e1a0      	b.n	8000e02 <__aeabi_ddiv+0x50a>
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_ddiv+0x1cc>
 8000ac2:	e19b      	b.n	8000dfc <__aeabi_ddiv+0x504>
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	1bae      	subs	r6, r5, r6
 8000ac8:	42b5      	cmp	r5, r6
 8000aca:	41ad      	sbcs	r5, r5
 8000acc:	1a80      	subs	r0, r0, r2
 8000ace:	426d      	negs	r5, r5
 8000ad0:	1b40      	subs	r0, r0, r5
 8000ad2:	4284      	cmp	r4, r0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_ddiv+0x1e0>
 8000ad6:	e1d5      	b.n	8000e84 <__aeabi_ddiv+0x58c>
 8000ad8:	4649      	mov	r1, r9
 8000ada:	f7ff fbad 	bl	8000238 <__aeabi_uidivmod>
 8000ade:	9a01      	ldr	r2, [sp, #4]
 8000ae0:	040b      	lsls	r3, r1, #16
 8000ae2:	4342      	muls	r2, r0
 8000ae4:	0c31      	lsrs	r1, r6, #16
 8000ae6:	0005      	movs	r5, r0
 8000ae8:	4319      	orrs	r1, r3
 8000aea:	428a      	cmp	r2, r1
 8000aec:	d900      	bls.n	8000af0 <__aeabi_ddiv+0x1f8>
 8000aee:	e16c      	b.n	8000dca <__aeabi_ddiv+0x4d2>
 8000af0:	1a88      	subs	r0, r1, r2
 8000af2:	4649      	mov	r1, r9
 8000af4:	f7ff fba0 	bl	8000238 <__aeabi_uidivmod>
 8000af8:	9a01      	ldr	r2, [sp, #4]
 8000afa:	0436      	lsls	r6, r6, #16
 8000afc:	4342      	muls	r2, r0
 8000afe:	0409      	lsls	r1, r1, #16
 8000b00:	0c36      	lsrs	r6, r6, #16
 8000b02:	0003      	movs	r3, r0
 8000b04:	430e      	orrs	r6, r1
 8000b06:	42b2      	cmp	r2, r6
 8000b08:	d900      	bls.n	8000b0c <__aeabi_ddiv+0x214>
 8000b0a:	e153      	b.n	8000db4 <__aeabi_ddiv+0x4bc>
 8000b0c:	9803      	ldr	r0, [sp, #12]
 8000b0e:	1ab6      	subs	r6, r6, r2
 8000b10:	0002      	movs	r2, r0
 8000b12:	042d      	lsls	r5, r5, #16
 8000b14:	431d      	orrs	r5, r3
 8000b16:	9f02      	ldr	r7, [sp, #8]
 8000b18:	042b      	lsls	r3, r5, #16
 8000b1a:	0c1b      	lsrs	r3, r3, #16
 8000b1c:	435a      	muls	r2, r3
 8000b1e:	437b      	muls	r3, r7
 8000b20:	469c      	mov	ip, r3
 8000b22:	0c29      	lsrs	r1, r5, #16
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c13      	lsrs	r3, r2, #16
 8000b28:	4484      	add	ip, r0
 8000b2a:	4463      	add	r3, ip
 8000b2c:	4379      	muls	r1, r7
 8000b2e:	4298      	cmp	r0, r3
 8000b30:	d903      	bls.n	8000b3a <__aeabi_ddiv+0x242>
 8000b32:	2080      	movs	r0, #128	; 0x80
 8000b34:	0240      	lsls	r0, r0, #9
 8000b36:	4684      	mov	ip, r0
 8000b38:	4461      	add	r1, ip
 8000b3a:	0c18      	lsrs	r0, r3, #16
 8000b3c:	0412      	lsls	r2, r2, #16
 8000b3e:	041b      	lsls	r3, r3, #16
 8000b40:	0c12      	lsrs	r2, r2, #16
 8000b42:	1841      	adds	r1, r0, r1
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	428e      	cmp	r6, r1
 8000b48:	d200      	bcs.n	8000b4c <__aeabi_ddiv+0x254>
 8000b4a:	e0ff      	b.n	8000d4c <__aeabi_ddiv+0x454>
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_ddiv+0x258>
 8000b4e:	e0fa      	b.n	8000d46 <__aeabi_ddiv+0x44e>
 8000b50:	2301      	movs	r3, #1
 8000b52:	431d      	orrs	r5, r3
 8000b54:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <__aeabi_ddiv+0x384>)
 8000b56:	445a      	add	r2, fp
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_ddiv+0x266>
 8000b5c:	e0aa      	b.n	8000cb4 <__aeabi_ddiv+0x3bc>
 8000b5e:	076b      	lsls	r3, r5, #29
 8000b60:	d000      	beq.n	8000b64 <__aeabi_ddiv+0x26c>
 8000b62:	e13d      	b.n	8000de0 <__aeabi_ddiv+0x4e8>
 8000b64:	08ed      	lsrs	r5, r5, #3
 8000b66:	4643      	mov	r3, r8
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	d506      	bpl.n	8000b7a <__aeabi_ddiv+0x282>
 8000b6c:	4642      	mov	r2, r8
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <__aeabi_ddiv+0x388>)
 8000b70:	401a      	ands	r2, r3
 8000b72:	4690      	mov	r8, r2
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	00d2      	lsls	r2, r2, #3
 8000b78:	445a      	add	r2, fp
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <__aeabi_ddiv+0x38c>)
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dd00      	ble.n	8000b82 <__aeabi_ddiv+0x28a>
 8000b80:	e71f      	b.n	80009c2 <__aeabi_ddiv+0xca>
 8000b82:	4643      	mov	r3, r8
 8000b84:	075b      	lsls	r3, r3, #29
 8000b86:	431d      	orrs	r5, r3
 8000b88:	4643      	mov	r3, r8
 8000b8a:	0552      	lsls	r2, r2, #21
 8000b8c:	025c      	lsls	r4, r3, #9
 8000b8e:	0b24      	lsrs	r4, r4, #12
 8000b90:	0d53      	lsrs	r3, r2, #21
 8000b92:	e708      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000b94:	4652      	mov	r2, sl
 8000b96:	4322      	orrs	r2, r4
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x2a4>
 8000b9a:	e07b      	b.n	8000c94 <__aeabi_ddiv+0x39c>
 8000b9c:	2c00      	cmp	r4, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_ddiv+0x2aa>
 8000ba0:	e0fa      	b.n	8000d98 <__aeabi_ddiv+0x4a0>
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f000 fdd4 	bl	8001750 <__clzsi2>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	3a0b      	subs	r2, #11
 8000bac:	231d      	movs	r3, #29
 8000bae:	0001      	movs	r1, r0
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	4652      	mov	r2, sl
 8000bb4:	3908      	subs	r1, #8
 8000bb6:	40da      	lsrs	r2, r3
 8000bb8:	408c      	lsls	r4, r1
 8000bba:	4314      	orrs	r4, r2
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	408a      	lsls	r2, r1
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <__aeabi_ddiv+0x390>)
 8000bc2:	4458      	add	r0, fp
 8000bc4:	469b      	mov	fp, r3
 8000bc6:	4483      	add	fp, r0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e6d5      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000bcc:	464b      	mov	r3, r9
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	d044      	beq.n	8000c5e <__aeabi_ddiv+0x366>
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d100      	bne.n	8000bda <__aeabi_ddiv+0x2e2>
 8000bd8:	e0ce      	b.n	8000d78 <__aeabi_ddiv+0x480>
 8000bda:	0020      	movs	r0, r4
 8000bdc:	f000 fdb8 	bl	8001750 <__clzsi2>
 8000be0:	0001      	movs	r1, r0
 8000be2:	0002      	movs	r2, r0
 8000be4:	390b      	subs	r1, #11
 8000be6:	231d      	movs	r3, #29
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	4649      	mov	r1, r9
 8000bec:	0010      	movs	r0, r2
 8000bee:	40d9      	lsrs	r1, r3
 8000bf0:	3808      	subs	r0, #8
 8000bf2:	4084      	lsls	r4, r0
 8000bf4:	000b      	movs	r3, r1
 8000bf6:	464d      	mov	r5, r9
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	4085      	lsls	r5, r0
 8000bfe:	4823      	ldr	r0, [pc, #140]	; (8000c8c <__aeabi_ddiv+0x394>)
 8000c00:	1a83      	subs	r3, r0, r2
 8000c02:	469b      	mov	fp, r3
 8000c04:	2300      	movs	r3, #0
 8000c06:	4699      	mov	r9, r3
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	e69a      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c0c:	464b      	mov	r3, r9
 8000c0e:	4323      	orrs	r3, r4
 8000c10:	4698      	mov	r8, r3
 8000c12:	d11d      	bne.n	8000c50 <__aeabi_ddiv+0x358>
 8000c14:	2308      	movs	r3, #8
 8000c16:	4699      	mov	r9, r3
 8000c18:	3b06      	subs	r3, #6
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	4683      	mov	fp, r0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	e68f      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c22:	4652      	mov	r2, sl
 8000c24:	4322      	orrs	r2, r4
 8000c26:	d109      	bne.n	8000c3c <__aeabi_ddiv+0x344>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	4649      	mov	r1, r9
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <__aeabi_ddiv+0x398>)
 8000c30:	4689      	mov	r9, r1
 8000c32:	469c      	mov	ip, r3
 8000c34:	2400      	movs	r4, #0
 8000c36:	2002      	movs	r0, #2
 8000c38:	44e3      	add	fp, ip
 8000c3a:	e69d      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	464a      	mov	r2, r9
 8000c40:	431a      	orrs	r2, r3
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <__aeabi_ddiv+0x398>)
 8000c44:	4691      	mov	r9, r2
 8000c46:	469c      	mov	ip, r3
 8000c48:	4652      	mov	r2, sl
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	44e3      	add	fp, ip
 8000c4e:	e693      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000c50:	230c      	movs	r3, #12
 8000c52:	4699      	mov	r9, r3
 8000c54:	3b09      	subs	r3, #9
 8000c56:	46a0      	mov	r8, r4
 8000c58:	4683      	mov	fp, r0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	e671      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c5e:	2304      	movs	r3, #4
 8000c60:	4699      	mov	r9, r3
 8000c62:	2300      	movs	r3, #0
 8000c64:	469b      	mov	fp, r3
 8000c66:	3301      	adds	r3, #1
 8000c68:	2500      	movs	r5, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	e669      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	000007ff 	.word	0x000007ff
 8000c74:	fffffc01 	.word	0xfffffc01
 8000c78:	08005420 	.word	0x08005420
 8000c7c:	000003ff 	.word	0x000003ff
 8000c80:	feffffff 	.word	0xfeffffff
 8000c84:	000007fe 	.word	0x000007fe
 8000c88:	000003f3 	.word	0x000003f3
 8000c8c:	fffffc0d 	.word	0xfffffc0d
 8000c90:	fffff801 	.word	0xfffff801
 8000c94:	4649      	mov	r1, r9
 8000c96:	2301      	movs	r3, #1
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	4689      	mov	r9, r1
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e66a      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2480      	movs	r4, #128	; 0x80
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	2500      	movs	r5, #0
 8000caa:	4b8a      	ldr	r3, [pc, #552]	; (8000ed4 <__aeabi_ddiv+0x5dc>)
 8000cac:	0324      	lsls	r4, r4, #12
 8000cae:	e67a      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000cb0:	2501      	movs	r5, #1
 8000cb2:	426d      	negs	r5, r5
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	2b38      	cmp	r3, #56	; 0x38
 8000cba:	dd00      	ble.n	8000cbe <__aeabi_ddiv+0x3c6>
 8000cbc:	e670      	b.n	80009a0 <__aeabi_ddiv+0xa8>
 8000cbe:	2b1f      	cmp	r3, #31
 8000cc0:	dc00      	bgt.n	8000cc4 <__aeabi_ddiv+0x3cc>
 8000cc2:	e0bf      	b.n	8000e44 <__aeabi_ddiv+0x54c>
 8000cc4:	211f      	movs	r1, #31
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	4641      	mov	r1, r8
 8000ccc:	40d1      	lsrs	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	2b20      	cmp	r3, #32
 8000cd2:	d004      	beq.n	8000cde <__aeabi_ddiv+0x3e6>
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	4b80      	ldr	r3, [pc, #512]	; (8000ed8 <__aeabi_ddiv+0x5e0>)
 8000cd8:	445b      	add	r3, fp
 8000cda:	4099      	lsls	r1, r3
 8000cdc:	430d      	orrs	r5, r1
 8000cde:	1e6b      	subs	r3, r5, #1
 8000ce0:	419d      	sbcs	r5, r3
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	432a      	orrs	r2, r5
 8000ce6:	001d      	movs	r5, r3
 8000ce8:	2400      	movs	r4, #0
 8000cea:	4015      	ands	r5, r2
 8000cec:	4213      	tst	r3, r2
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x3fa>
 8000cf0:	e0d4      	b.n	8000e9c <__aeabi_ddiv+0x5a4>
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4011      	ands	r1, r2
 8000cf8:	2904      	cmp	r1, #4
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x406>
 8000cfc:	e0cb      	b.n	8000e96 <__aeabi_ddiv+0x59e>
 8000cfe:	1d11      	adds	r1, r2, #4
 8000d00:	4291      	cmp	r1, r2
 8000d02:	4192      	sbcs	r2, r2
 8000d04:	4252      	negs	r2, r2
 8000d06:	189b      	adds	r3, r3, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	0219      	lsls	r1, r3, #8
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_ddiv+0x418>
 8000d0e:	e0c2      	b.n	8000e96 <__aeabi_ddiv+0x59e>
 8000d10:	2301      	movs	r3, #1
 8000d12:	2400      	movs	r4, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	e646      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	4641      	mov	r1, r8
 8000d1c:	031b      	lsls	r3, r3, #12
 8000d1e:	4219      	tst	r1, r3
 8000d20:	d008      	beq.n	8000d34 <__aeabi_ddiv+0x43c>
 8000d22:	421c      	tst	r4, r3
 8000d24:	d106      	bne.n	8000d34 <__aeabi_ddiv+0x43c>
 8000d26:	431c      	orrs	r4, r3
 8000d28:	0324      	lsls	r4, r4, #12
 8000d2a:	46ba      	mov	sl, r7
 8000d2c:	0015      	movs	r5, r2
 8000d2e:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <__aeabi_ddiv+0x5dc>)
 8000d30:	0b24      	lsrs	r4, r4, #12
 8000d32:	e638      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	4643      	mov	r3, r8
 8000d38:	0324      	lsls	r4, r4, #12
 8000d3a:	431c      	orrs	r4, r3
 8000d3c:	0324      	lsls	r4, r4, #12
 8000d3e:	46b2      	mov	sl, r6
 8000d40:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <__aeabi_ddiv+0x5dc>)
 8000d42:	0b24      	lsrs	r4, r4, #12
 8000d44:	e62f      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x454>
 8000d4a:	e703      	b.n	8000b54 <__aeabi_ddiv+0x25c>
 8000d4c:	19a6      	adds	r6, r4, r6
 8000d4e:	1e68      	subs	r0, r5, #1
 8000d50:	42a6      	cmp	r6, r4
 8000d52:	d200      	bcs.n	8000d56 <__aeabi_ddiv+0x45e>
 8000d54:	e08d      	b.n	8000e72 <__aeabi_ddiv+0x57a>
 8000d56:	428e      	cmp	r6, r1
 8000d58:	d200      	bcs.n	8000d5c <__aeabi_ddiv+0x464>
 8000d5a:	e0a3      	b.n	8000ea4 <__aeabi_ddiv+0x5ac>
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x468>
 8000d5e:	e0b3      	b.n	8000ec8 <__aeabi_ddiv+0x5d0>
 8000d60:	0005      	movs	r5, r0
 8000d62:	e6f5      	b.n	8000b50 <__aeabi_ddiv+0x258>
 8000d64:	42aa      	cmp	r2, r5
 8000d66:	d900      	bls.n	8000d6a <__aeabi_ddiv+0x472>
 8000d68:	e639      	b.n	80009de <__aeabi_ddiv+0xe6>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	07de      	lsls	r6, r3, #31
 8000d6e:	0858      	lsrs	r0, r3, #1
 8000d70:	086b      	lsrs	r3, r5, #1
 8000d72:	431e      	orrs	r6, r3
 8000d74:	07ed      	lsls	r5, r5, #31
 8000d76:	e639      	b.n	80009ec <__aeabi_ddiv+0xf4>
 8000d78:	4648      	mov	r0, r9
 8000d7a:	f000 fce9 	bl	8001750 <__clzsi2>
 8000d7e:	0001      	movs	r1, r0
 8000d80:	0002      	movs	r2, r0
 8000d82:	3115      	adds	r1, #21
 8000d84:	3220      	adds	r2, #32
 8000d86:	291c      	cmp	r1, #28
 8000d88:	dc00      	bgt.n	8000d8c <__aeabi_ddiv+0x494>
 8000d8a:	e72c      	b.n	8000be6 <__aeabi_ddiv+0x2ee>
 8000d8c:	464b      	mov	r3, r9
 8000d8e:	3808      	subs	r0, #8
 8000d90:	4083      	lsls	r3, r0
 8000d92:	2500      	movs	r5, #0
 8000d94:	4698      	mov	r8, r3
 8000d96:	e732      	b.n	8000bfe <__aeabi_ddiv+0x306>
 8000d98:	f000 fcda 	bl	8001750 <__clzsi2>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	001a      	movs	r2, r3
 8000da0:	3215      	adds	r2, #21
 8000da2:	3020      	adds	r0, #32
 8000da4:	2a1c      	cmp	r2, #28
 8000da6:	dc00      	bgt.n	8000daa <__aeabi_ddiv+0x4b2>
 8000da8:	e700      	b.n	8000bac <__aeabi_ddiv+0x2b4>
 8000daa:	4654      	mov	r4, sl
 8000dac:	3b08      	subs	r3, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	409c      	lsls	r4, r3
 8000db2:	e705      	b.n	8000bc0 <__aeabi_ddiv+0x2c8>
 8000db4:	1936      	adds	r6, r6, r4
 8000db6:	3b01      	subs	r3, #1
 8000db8:	42b4      	cmp	r4, r6
 8000dba:	d900      	bls.n	8000dbe <__aeabi_ddiv+0x4c6>
 8000dbc:	e6a6      	b.n	8000b0c <__aeabi_ddiv+0x214>
 8000dbe:	42b2      	cmp	r2, r6
 8000dc0:	d800      	bhi.n	8000dc4 <__aeabi_ddiv+0x4cc>
 8000dc2:	e6a3      	b.n	8000b0c <__aeabi_ddiv+0x214>
 8000dc4:	1e83      	subs	r3, r0, #2
 8000dc6:	1936      	adds	r6, r6, r4
 8000dc8:	e6a0      	b.n	8000b0c <__aeabi_ddiv+0x214>
 8000dca:	1909      	adds	r1, r1, r4
 8000dcc:	3d01      	subs	r5, #1
 8000dce:	428c      	cmp	r4, r1
 8000dd0:	d900      	bls.n	8000dd4 <__aeabi_ddiv+0x4dc>
 8000dd2:	e68d      	b.n	8000af0 <__aeabi_ddiv+0x1f8>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	d800      	bhi.n	8000dda <__aeabi_ddiv+0x4e2>
 8000dd8:	e68a      	b.n	8000af0 <__aeabi_ddiv+0x1f8>
 8000dda:	1e85      	subs	r5, r0, #2
 8000ddc:	1909      	adds	r1, r1, r4
 8000dde:	e687      	b.n	8000af0 <__aeabi_ddiv+0x1f8>
 8000de0:	230f      	movs	r3, #15
 8000de2:	402b      	ands	r3, r5
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x4f2>
 8000de8:	e6bc      	b.n	8000b64 <__aeabi_ddiv+0x26c>
 8000dea:	2305      	movs	r3, #5
 8000dec:	425b      	negs	r3, r3
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	419b      	sbcs	r3, r3
 8000df2:	3504      	adds	r5, #4
 8000df4:	425b      	negs	r3, r3
 8000df6:	08ed      	lsrs	r5, r5, #3
 8000df8:	4498      	add	r8, r3
 8000dfa:	e6b4      	b.n	8000b66 <__aeabi_ddiv+0x26e>
 8000dfc:	42af      	cmp	r7, r5
 8000dfe:	d900      	bls.n	8000e02 <__aeabi_ddiv+0x50a>
 8000e00:	e660      	b.n	8000ac4 <__aeabi_ddiv+0x1cc>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	d804      	bhi.n	8000e10 <__aeabi_ddiv+0x518>
 8000e06:	d000      	beq.n	8000e0a <__aeabi_ddiv+0x512>
 8000e08:	e65c      	b.n	8000ac4 <__aeabi_ddiv+0x1cc>
 8000e0a:	42ae      	cmp	r6, r5
 8000e0c:	d800      	bhi.n	8000e10 <__aeabi_ddiv+0x518>
 8000e0e:	e659      	b.n	8000ac4 <__aeabi_ddiv+0x1cc>
 8000e10:	2302      	movs	r3, #2
 8000e12:	425b      	negs	r3, r3
 8000e14:	469c      	mov	ip, r3
 8000e16:	9b00      	ldr	r3, [sp, #0]
 8000e18:	44e0      	add	r8, ip
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	4465      	add	r5, ip
 8000e1e:	429d      	cmp	r5, r3
 8000e20:	419b      	sbcs	r3, r3
 8000e22:	425b      	negs	r3, r3
 8000e24:	191b      	adds	r3, r3, r4
 8000e26:	18c0      	adds	r0, r0, r3
 8000e28:	e64d      	b.n	8000ac6 <__aeabi_ddiv+0x1ce>
 8000e2a:	428a      	cmp	r2, r1
 8000e2c:	d800      	bhi.n	8000e30 <__aeabi_ddiv+0x538>
 8000e2e:	e60e      	b.n	8000a4e <__aeabi_ddiv+0x156>
 8000e30:	1e83      	subs	r3, r0, #2
 8000e32:	1909      	adds	r1, r1, r4
 8000e34:	e60b      	b.n	8000a4e <__aeabi_ddiv+0x156>
 8000e36:	428a      	cmp	r2, r1
 8000e38:	d800      	bhi.n	8000e3c <__aeabi_ddiv+0x544>
 8000e3a:	e5f4      	b.n	8000a26 <__aeabi_ddiv+0x12e>
 8000e3c:	1e83      	subs	r3, r0, #2
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	e5f0      	b.n	8000a26 <__aeabi_ddiv+0x12e>
 8000e44:	4925      	ldr	r1, [pc, #148]	; (8000edc <__aeabi_ddiv+0x5e4>)
 8000e46:	0028      	movs	r0, r5
 8000e48:	4459      	add	r1, fp
 8000e4a:	408d      	lsls	r5, r1
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	408a      	lsls	r2, r1
 8000e50:	1e69      	subs	r1, r5, #1
 8000e52:	418d      	sbcs	r5, r1
 8000e54:	4641      	mov	r1, r8
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	40d9      	lsrs	r1, r3
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	432a      	orrs	r2, r5
 8000e5e:	000b      	movs	r3, r1
 8000e60:	0751      	lsls	r1, r2, #29
 8000e62:	d100      	bne.n	8000e66 <__aeabi_ddiv+0x56e>
 8000e64:	e751      	b.n	8000d0a <__aeabi_ddiv+0x412>
 8000e66:	210f      	movs	r1, #15
 8000e68:	4011      	ands	r1, r2
 8000e6a:	2904      	cmp	r1, #4
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_ddiv+0x578>
 8000e6e:	e746      	b.n	8000cfe <__aeabi_ddiv+0x406>
 8000e70:	e74b      	b.n	8000d0a <__aeabi_ddiv+0x412>
 8000e72:	0005      	movs	r5, r0
 8000e74:	428e      	cmp	r6, r1
 8000e76:	d000      	beq.n	8000e7a <__aeabi_ddiv+0x582>
 8000e78:	e66a      	b.n	8000b50 <__aeabi_ddiv+0x258>
 8000e7a:	9a00      	ldr	r2, [sp, #0]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_ddiv+0x58a>
 8000e80:	e666      	b.n	8000b50 <__aeabi_ddiv+0x258>
 8000e82:	e667      	b.n	8000b54 <__aeabi_ddiv+0x25c>
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <__aeabi_ddiv+0x5e8>)
 8000e86:	445a      	add	r2, fp
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_ddiv+0x596>
 8000e8c:	e710      	b.n	8000cb0 <__aeabi_ddiv+0x3b8>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	4498      	add	r8, r3
 8000e94:	e667      	b.n	8000b66 <__aeabi_ddiv+0x26e>
 8000e96:	075d      	lsls	r5, r3, #29
 8000e98:	025b      	lsls	r3, r3, #9
 8000e9a:	0b1c      	lsrs	r4, r3, #12
 8000e9c:	08d2      	lsrs	r2, r2, #3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4315      	orrs	r5, r2
 8000ea2:	e580      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000ea4:	9800      	ldr	r0, [sp, #0]
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	0042      	lsls	r2, r0, #1
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	41bf      	sbcs	r7, r7
 8000eae:	427f      	negs	r7, r7
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	1936      	adds	r6, r6, r4
 8000eb4:	9200      	str	r2, [sp, #0]
 8000eb6:	e7dd      	b.n	8000e74 <__aeabi_ddiv+0x57c>
 8000eb8:	2480      	movs	r4, #128	; 0x80
 8000eba:	4643      	mov	r3, r8
 8000ebc:	0324      	lsls	r4, r4, #12
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__aeabi_ddiv+0x5dc>)
 8000ec4:	0b24      	lsrs	r4, r4, #12
 8000ec6:	e56e      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000ec8:	9a00      	ldr	r2, [sp, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3ea      	bcc.n	8000ea4 <__aeabi_ddiv+0x5ac>
 8000ece:	0005      	movs	r5, r0
 8000ed0:	e7d3      	b.n	8000e7a <__aeabi_ddiv+0x582>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	0000043e 	.word	0x0000043e
 8000edc:	0000041e 	.word	0x0000041e
 8000ee0:	000003ff 	.word	0x000003ff

08000ee4 <__aeabi_dsub>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	4657      	mov	r7, sl
 8000ee8:	464e      	mov	r6, r9
 8000eea:	4645      	mov	r5, r8
 8000eec:	46de      	mov	lr, fp
 8000eee:	b5e0      	push	{r5, r6, r7, lr}
 8000ef0:	001e      	movs	r6, r3
 8000ef2:	0017      	movs	r7, r2
 8000ef4:	004a      	lsls	r2, r1, #1
 8000ef6:	030b      	lsls	r3, r1, #12
 8000ef8:	0d52      	lsrs	r2, r2, #21
 8000efa:	0a5b      	lsrs	r3, r3, #9
 8000efc:	4690      	mov	r8, r2
 8000efe:	0f42      	lsrs	r2, r0, #29
 8000f00:	431a      	orrs	r2, r3
 8000f02:	0fcd      	lsrs	r5, r1, #31
 8000f04:	4ccd      	ldr	r4, [pc, #820]	; (800123c <__aeabi_dsub+0x358>)
 8000f06:	0331      	lsls	r1, r6, #12
 8000f08:	00c3      	lsls	r3, r0, #3
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	0070      	lsls	r0, r6, #1
 8000f0e:	0f7a      	lsrs	r2, r7, #29
 8000f10:	0a49      	lsrs	r1, r1, #9
 8000f12:	00ff      	lsls	r7, r7, #3
 8000f14:	469a      	mov	sl, r3
 8000f16:	46b9      	mov	r9, r7
 8000f18:	0d40      	lsrs	r0, r0, #21
 8000f1a:	0ff6      	lsrs	r6, r6, #31
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	42a0      	cmp	r0, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dsub+0x40>
 8000f22:	e0b1      	b.n	8001088 <__aeabi_dsub+0x1a4>
 8000f24:	2201      	movs	r2, #1
 8000f26:	4056      	eors	r6, r2
 8000f28:	46b3      	mov	fp, r6
 8000f2a:	42b5      	cmp	r5, r6
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dsub+0x4c>
 8000f2e:	e088      	b.n	8001042 <__aeabi_dsub+0x15e>
 8000f30:	4642      	mov	r2, r8
 8000f32:	1a12      	subs	r2, r2, r0
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dsub+0x56>
 8000f38:	e0ae      	b.n	8001098 <__aeabi_dsub+0x1b4>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dsub+0x5c>
 8000f3e:	e0c1      	b.n	80010c4 <__aeabi_dsub+0x1e0>
 8000f40:	48be      	ldr	r0, [pc, #760]	; (800123c <__aeabi_dsub+0x358>)
 8000f42:	4580      	cmp	r8, r0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x64>
 8000f46:	e151      	b.n	80011ec <__aeabi_dsub+0x308>
 8000f48:	2080      	movs	r0, #128	; 0x80
 8000f4a:	0400      	lsls	r0, r0, #16
 8000f4c:	4301      	orrs	r1, r0
 8000f4e:	2a38      	cmp	r2, #56	; 0x38
 8000f50:	dd00      	ble.n	8000f54 <__aeabi_dsub+0x70>
 8000f52:	e17b      	b.n	800124c <__aeabi_dsub+0x368>
 8000f54:	2a1f      	cmp	r2, #31
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_dsub+0x76>
 8000f58:	e1ee      	b.n	8001338 <__aeabi_dsub+0x454>
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	003e      	movs	r6, r7
 8000f5e:	1a80      	subs	r0, r0, r2
 8000f60:	000c      	movs	r4, r1
 8000f62:	40d6      	lsrs	r6, r2
 8000f64:	40d1      	lsrs	r1, r2
 8000f66:	4087      	lsls	r7, r0
 8000f68:	4662      	mov	r2, ip
 8000f6a:	4084      	lsls	r4, r0
 8000f6c:	1a52      	subs	r2, r2, r1
 8000f6e:	1e78      	subs	r0, r7, #1
 8000f70:	4187      	sbcs	r7, r0
 8000f72:	4694      	mov	ip, r2
 8000f74:	4334      	orrs	r4, r6
 8000f76:	4327      	orrs	r7, r4
 8000f78:	1bdc      	subs	r4, r3, r7
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	419b      	sbcs	r3, r3
 8000f7e:	4662      	mov	r2, ip
 8000f80:	425b      	negs	r3, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4699      	mov	r9, r3
 8000f86:	464b      	mov	r3, r9
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0xaa>
 8000f8c:	e118      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 8000f8e:	464b      	mov	r3, r9
 8000f90:	0258      	lsls	r0, r3, #9
 8000f92:	0a43      	lsrs	r3, r0, #9
 8000f94:	4699      	mov	r9, r3
 8000f96:	464b      	mov	r3, r9
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dsub+0xba>
 8000f9c:	e137      	b.n	800120e <__aeabi_dsub+0x32a>
 8000f9e:	4648      	mov	r0, r9
 8000fa0:	f000 fbd6 	bl	8001750 <__clzsi2>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	2320      	movs	r3, #32
 8000faa:	0022      	movs	r2, r4
 8000fac:	4648      	mov	r0, r9
 8000fae:	1a5b      	subs	r3, r3, r1
 8000fb0:	40da      	lsrs	r2, r3
 8000fb2:	4088      	lsls	r0, r1
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	4310      	orrs	r0, r2
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_dsub+0xdc>
 8000fbe:	e136      	b.n	800122e <__aeabi_dsub+0x34a>
 8000fc0:	1ac9      	subs	r1, r1, r3
 8000fc2:	1c4b      	adds	r3, r1, #1
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_dsub+0xe6>
 8000fc8:	e0ea      	b.n	80011a0 <__aeabi_dsub+0x2bc>
 8000fca:	2220      	movs	r2, #32
 8000fcc:	0026      	movs	r6, r4
 8000fce:	1ad2      	subs	r2, r2, r3
 8000fd0:	0001      	movs	r1, r0
 8000fd2:	4094      	lsls	r4, r2
 8000fd4:	40de      	lsrs	r6, r3
 8000fd6:	40d8      	lsrs	r0, r3
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	1e62      	subs	r2, r4, #1
 8000fde:	4194      	sbcs	r4, r2
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	4331      	orrs	r1, r6
 8000fe6:	430c      	orrs	r4, r1
 8000fe8:	0763      	lsls	r3, r4, #29
 8000fea:	d009      	beq.n	8001000 <__aeabi_dsub+0x11c>
 8000fec:	230f      	movs	r3, #15
 8000fee:	4023      	ands	r3, r4
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d005      	beq.n	8001000 <__aeabi_dsub+0x11c>
 8000ff4:	1d23      	adds	r3, r4, #4
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	41a4      	sbcs	r4, r4
 8000ffa:	4264      	negs	r4, r4
 8000ffc:	44a1      	add	r9, r4
 8000ffe:	001c      	movs	r4, r3
 8001000:	464b      	mov	r3, r9
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	d400      	bmi.n	8001008 <__aeabi_dsub+0x124>
 8001006:	e0de      	b.n	80011c6 <__aeabi_dsub+0x2e2>
 8001008:	4641      	mov	r1, r8
 800100a:	4b8c      	ldr	r3, [pc, #560]	; (800123c <__aeabi_dsub+0x358>)
 800100c:	3101      	adds	r1, #1
 800100e:	4299      	cmp	r1, r3
 8001010:	d100      	bne.n	8001014 <__aeabi_dsub+0x130>
 8001012:	e0e7      	b.n	80011e4 <__aeabi_dsub+0x300>
 8001014:	464b      	mov	r3, r9
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <__aeabi_dsub+0x35c>)
 8001018:	08e4      	lsrs	r4, r4, #3
 800101a:	4003      	ands	r3, r0
 800101c:	0018      	movs	r0, r3
 800101e:	0549      	lsls	r1, r1, #21
 8001020:	075b      	lsls	r3, r3, #29
 8001022:	0240      	lsls	r0, r0, #9
 8001024:	4323      	orrs	r3, r4
 8001026:	0d4a      	lsrs	r2, r1, #21
 8001028:	0b04      	lsrs	r4, r0, #12
 800102a:	0512      	lsls	r2, r2, #20
 800102c:	07ed      	lsls	r5, r5, #31
 800102e:	4322      	orrs	r2, r4
 8001030:	432a      	orrs	r2, r5
 8001032:	0018      	movs	r0, r3
 8001034:	0011      	movs	r1, r2
 8001036:	bcf0      	pop	{r4, r5, r6, r7}
 8001038:	46bb      	mov	fp, r7
 800103a:	46b2      	mov	sl, r6
 800103c:	46a9      	mov	r9, r5
 800103e:	46a0      	mov	r8, r4
 8001040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001042:	4642      	mov	r2, r8
 8001044:	1a12      	subs	r2, r2, r0
 8001046:	2a00      	cmp	r2, #0
 8001048:	dd52      	ble.n	80010f0 <__aeabi_dsub+0x20c>
 800104a:	2800      	cmp	r0, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_dsub+0x16c>
 800104e:	e09c      	b.n	800118a <__aeabi_dsub+0x2a6>
 8001050:	45a0      	cmp	r8, r4
 8001052:	d100      	bne.n	8001056 <__aeabi_dsub+0x172>
 8001054:	e0ca      	b.n	80011ec <__aeabi_dsub+0x308>
 8001056:	2080      	movs	r0, #128	; 0x80
 8001058:	0400      	lsls	r0, r0, #16
 800105a:	4301      	orrs	r1, r0
 800105c:	2a38      	cmp	r2, #56	; 0x38
 800105e:	dd00      	ble.n	8001062 <__aeabi_dsub+0x17e>
 8001060:	e149      	b.n	80012f6 <__aeabi_dsub+0x412>
 8001062:	2a1f      	cmp	r2, #31
 8001064:	dc00      	bgt.n	8001068 <__aeabi_dsub+0x184>
 8001066:	e197      	b.n	8001398 <__aeabi_dsub+0x4b4>
 8001068:	0010      	movs	r0, r2
 800106a:	000e      	movs	r6, r1
 800106c:	3820      	subs	r0, #32
 800106e:	40c6      	lsrs	r6, r0
 8001070:	2a20      	cmp	r2, #32
 8001072:	d004      	beq.n	800107e <__aeabi_dsub+0x19a>
 8001074:	2040      	movs	r0, #64	; 0x40
 8001076:	1a82      	subs	r2, r0, r2
 8001078:	4091      	lsls	r1, r2
 800107a:	430f      	orrs	r7, r1
 800107c:	46b9      	mov	r9, r7
 800107e:	464c      	mov	r4, r9
 8001080:	1e62      	subs	r2, r4, #1
 8001082:	4194      	sbcs	r4, r2
 8001084:	4334      	orrs	r4, r6
 8001086:	e13a      	b.n	80012fe <__aeabi_dsub+0x41a>
 8001088:	000a      	movs	r2, r1
 800108a:	433a      	orrs	r2, r7
 800108c:	d028      	beq.n	80010e0 <__aeabi_dsub+0x1fc>
 800108e:	46b3      	mov	fp, r6
 8001090:	42b5      	cmp	r5, r6
 8001092:	d02b      	beq.n	80010ec <__aeabi_dsub+0x208>
 8001094:	4a6b      	ldr	r2, [pc, #428]	; (8001244 <__aeabi_dsub+0x360>)
 8001096:	4442      	add	r2, r8
 8001098:	2a00      	cmp	r2, #0
 800109a:	d05d      	beq.n	8001158 <__aeabi_dsub+0x274>
 800109c:	4642      	mov	r2, r8
 800109e:	4644      	mov	r4, r8
 80010a0:	1a82      	subs	r2, r0, r2
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dsub+0x1c4>
 80010a6:	e0f5      	b.n	8001294 <__aeabi_dsub+0x3b0>
 80010a8:	4665      	mov	r5, ip
 80010aa:	431d      	orrs	r5, r3
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x1cc>
 80010ae:	e19c      	b.n	80013ea <__aeabi_dsub+0x506>
 80010b0:	1e55      	subs	r5, r2, #1
 80010b2:	2a01      	cmp	r2, #1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1d4>
 80010b6:	e1fb      	b.n	80014b0 <__aeabi_dsub+0x5cc>
 80010b8:	4c60      	ldr	r4, [pc, #384]	; (800123c <__aeabi_dsub+0x358>)
 80010ba:	42a2      	cmp	r2, r4
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1dc>
 80010be:	e1bd      	b.n	800143c <__aeabi_dsub+0x558>
 80010c0:	002a      	movs	r2, r5
 80010c2:	e0f0      	b.n	80012a6 <__aeabi_dsub+0x3c2>
 80010c4:	0008      	movs	r0, r1
 80010c6:	4338      	orrs	r0, r7
 80010c8:	d100      	bne.n	80010cc <__aeabi_dsub+0x1e8>
 80010ca:	e0c3      	b.n	8001254 <__aeabi_dsub+0x370>
 80010cc:	1e50      	subs	r0, r2, #1
 80010ce:	2a01      	cmp	r2, #1
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x1f0>
 80010d2:	e1a8      	b.n	8001426 <__aeabi_dsub+0x542>
 80010d4:	4c59      	ldr	r4, [pc, #356]	; (800123c <__aeabi_dsub+0x358>)
 80010d6:	42a2      	cmp	r2, r4
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1f8>
 80010da:	e087      	b.n	80011ec <__aeabi_dsub+0x308>
 80010dc:	0002      	movs	r2, r0
 80010de:	e736      	b.n	8000f4e <__aeabi_dsub+0x6a>
 80010e0:	2201      	movs	r2, #1
 80010e2:	4056      	eors	r6, r2
 80010e4:	46b3      	mov	fp, r6
 80010e6:	42b5      	cmp	r5, r6
 80010e8:	d000      	beq.n	80010ec <__aeabi_dsub+0x208>
 80010ea:	e721      	b.n	8000f30 <__aeabi_dsub+0x4c>
 80010ec:	4a55      	ldr	r2, [pc, #340]	; (8001244 <__aeabi_dsub+0x360>)
 80010ee:	4442      	add	r2, r8
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dsub+0x212>
 80010f4:	e0b5      	b.n	8001262 <__aeabi_dsub+0x37e>
 80010f6:	4642      	mov	r2, r8
 80010f8:	4644      	mov	r4, r8
 80010fa:	1a82      	subs	r2, r0, r2
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_dsub+0x21e>
 8001100:	e138      	b.n	8001374 <__aeabi_dsub+0x490>
 8001102:	4e4e      	ldr	r6, [pc, #312]	; (800123c <__aeabi_dsub+0x358>)
 8001104:	42b0      	cmp	r0, r6
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x226>
 8001108:	e1de      	b.n	80014c8 <__aeabi_dsub+0x5e4>
 800110a:	2680      	movs	r6, #128	; 0x80
 800110c:	4664      	mov	r4, ip
 800110e:	0436      	lsls	r6, r6, #16
 8001110:	4334      	orrs	r4, r6
 8001112:	46a4      	mov	ip, r4
 8001114:	2a38      	cmp	r2, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_dsub+0x236>
 8001118:	e196      	b.n	8001448 <__aeabi_dsub+0x564>
 800111a:	2a1f      	cmp	r2, #31
 800111c:	dd00      	ble.n	8001120 <__aeabi_dsub+0x23c>
 800111e:	e224      	b.n	800156a <__aeabi_dsub+0x686>
 8001120:	2620      	movs	r6, #32
 8001122:	1ab4      	subs	r4, r6, r2
 8001124:	46a2      	mov	sl, r4
 8001126:	4664      	mov	r4, ip
 8001128:	4656      	mov	r6, sl
 800112a:	40b4      	lsls	r4, r6
 800112c:	46a1      	mov	r9, r4
 800112e:	001c      	movs	r4, r3
 8001130:	464e      	mov	r6, r9
 8001132:	40d4      	lsrs	r4, r2
 8001134:	4326      	orrs	r6, r4
 8001136:	0034      	movs	r4, r6
 8001138:	4656      	mov	r6, sl
 800113a:	40b3      	lsls	r3, r6
 800113c:	1e5e      	subs	r6, r3, #1
 800113e:	41b3      	sbcs	r3, r6
 8001140:	431c      	orrs	r4, r3
 8001142:	4663      	mov	r3, ip
 8001144:	40d3      	lsrs	r3, r2
 8001146:	18c9      	adds	r1, r1, r3
 8001148:	19e4      	adds	r4, r4, r7
 800114a:	42bc      	cmp	r4, r7
 800114c:	41bf      	sbcs	r7, r7
 800114e:	427f      	negs	r7, r7
 8001150:	46b9      	mov	r9, r7
 8001152:	4680      	mov	r8, r0
 8001154:	4489      	add	r9, r1
 8001156:	e0d8      	b.n	800130a <__aeabi_dsub+0x426>
 8001158:	4640      	mov	r0, r8
 800115a:	4c3b      	ldr	r4, [pc, #236]	; (8001248 <__aeabi_dsub+0x364>)
 800115c:	3001      	adds	r0, #1
 800115e:	4220      	tst	r0, r4
 8001160:	d000      	beq.n	8001164 <__aeabi_dsub+0x280>
 8001162:	e0b4      	b.n	80012ce <__aeabi_dsub+0x3ea>
 8001164:	4640      	mov	r0, r8
 8001166:	2800      	cmp	r0, #0
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x288>
 800116a:	e144      	b.n	80013f6 <__aeabi_dsub+0x512>
 800116c:	4660      	mov	r0, ip
 800116e:	4318      	orrs	r0, r3
 8001170:	d100      	bne.n	8001174 <__aeabi_dsub+0x290>
 8001172:	e190      	b.n	8001496 <__aeabi_dsub+0x5b2>
 8001174:	0008      	movs	r0, r1
 8001176:	4338      	orrs	r0, r7
 8001178:	d000      	beq.n	800117c <__aeabi_dsub+0x298>
 800117a:	e1aa      	b.n	80014d2 <__aeabi_dsub+0x5ee>
 800117c:	4661      	mov	r1, ip
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	0749      	lsls	r1, r1, #29
 8001182:	430b      	orrs	r3, r1
 8001184:	4661      	mov	r1, ip
 8001186:	08cc      	lsrs	r4, r1, #3
 8001188:	e027      	b.n	80011da <__aeabi_dsub+0x2f6>
 800118a:	0008      	movs	r0, r1
 800118c:	4338      	orrs	r0, r7
 800118e:	d061      	beq.n	8001254 <__aeabi_dsub+0x370>
 8001190:	1e50      	subs	r0, r2, #1
 8001192:	2a01      	cmp	r2, #1
 8001194:	d100      	bne.n	8001198 <__aeabi_dsub+0x2b4>
 8001196:	e139      	b.n	800140c <__aeabi_dsub+0x528>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d027      	beq.n	80011ec <__aeabi_dsub+0x308>
 800119c:	0002      	movs	r2, r0
 800119e:	e75d      	b.n	800105c <__aeabi_dsub+0x178>
 80011a0:	0002      	movs	r2, r0
 80011a2:	391f      	subs	r1, #31
 80011a4:	40ca      	lsrs	r2, r1
 80011a6:	0011      	movs	r1, r2
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d003      	beq.n	80011b4 <__aeabi_dsub+0x2d0>
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4098      	lsls	r0, r3
 80011b2:	4304      	orrs	r4, r0
 80011b4:	1e63      	subs	r3, r4, #1
 80011b6:	419c      	sbcs	r4, r3
 80011b8:	2300      	movs	r3, #0
 80011ba:	4699      	mov	r9, r3
 80011bc:	4698      	mov	r8, r3
 80011be:	430c      	orrs	r4, r1
 80011c0:	0763      	lsls	r3, r4, #29
 80011c2:	d000      	beq.n	80011c6 <__aeabi_dsub+0x2e2>
 80011c4:	e712      	b.n	8000fec <__aeabi_dsub+0x108>
 80011c6:	464b      	mov	r3, r9
 80011c8:	464a      	mov	r2, r9
 80011ca:	08e4      	lsrs	r4, r4, #3
 80011cc:	075b      	lsls	r3, r3, #29
 80011ce:	4323      	orrs	r3, r4
 80011d0:	08d4      	lsrs	r4, r2, #3
 80011d2:	4642      	mov	r2, r8
 80011d4:	4919      	ldr	r1, [pc, #100]	; (800123c <__aeabi_dsub+0x358>)
 80011d6:	428a      	cmp	r2, r1
 80011d8:	d00e      	beq.n	80011f8 <__aeabi_dsub+0x314>
 80011da:	0324      	lsls	r4, r4, #12
 80011dc:	0552      	lsls	r2, r2, #21
 80011de:	0b24      	lsrs	r4, r4, #12
 80011e0:	0d52      	lsrs	r2, r2, #21
 80011e2:	e722      	b.n	800102a <__aeabi_dsub+0x146>
 80011e4:	000a      	movs	r2, r1
 80011e6:	2400      	movs	r4, #0
 80011e8:	2300      	movs	r3, #0
 80011ea:	e71e      	b.n	800102a <__aeabi_dsub+0x146>
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	4662      	mov	r2, ip
 80011f0:	0752      	lsls	r2, r2, #29
 80011f2:	4313      	orrs	r3, r2
 80011f4:	4662      	mov	r2, ip
 80011f6:	08d4      	lsrs	r4, r2, #3
 80011f8:	001a      	movs	r2, r3
 80011fa:	4322      	orrs	r2, r4
 80011fc:	d100      	bne.n	8001200 <__aeabi_dsub+0x31c>
 80011fe:	e1fc      	b.n	80015fa <__aeabi_dsub+0x716>
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4314      	orrs	r4, r2
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <__aeabi_dsub+0x358>)
 800120a:	0b24      	lsrs	r4, r4, #12
 800120c:	e70d      	b.n	800102a <__aeabi_dsub+0x146>
 800120e:	0020      	movs	r0, r4
 8001210:	f000 fa9e 	bl	8001750 <__clzsi2>
 8001214:	0001      	movs	r1, r0
 8001216:	3118      	adds	r1, #24
 8001218:	291f      	cmp	r1, #31
 800121a:	dc00      	bgt.n	800121e <__aeabi_dsub+0x33a>
 800121c:	e6c4      	b.n	8000fa8 <__aeabi_dsub+0xc4>
 800121e:	3808      	subs	r0, #8
 8001220:	4084      	lsls	r4, r0
 8001222:	4643      	mov	r3, r8
 8001224:	0020      	movs	r0, r4
 8001226:	2400      	movs	r4, #0
 8001228:	4588      	cmp	r8, r1
 800122a:	dc00      	bgt.n	800122e <__aeabi_dsub+0x34a>
 800122c:	e6c8      	b.n	8000fc0 <__aeabi_dsub+0xdc>
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__aeabi_dsub+0x35c>)
 8001230:	1a5b      	subs	r3, r3, r1
 8001232:	4010      	ands	r0, r2
 8001234:	4698      	mov	r8, r3
 8001236:	4681      	mov	r9, r0
 8001238:	e6d6      	b.n	8000fe8 <__aeabi_dsub+0x104>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	000007ff 	.word	0x000007ff
 8001240:	ff7fffff 	.word	0xff7fffff
 8001244:	fffff801 	.word	0xfffff801
 8001248:	000007fe 	.word	0x000007fe
 800124c:	430f      	orrs	r7, r1
 800124e:	1e7a      	subs	r2, r7, #1
 8001250:	4197      	sbcs	r7, r2
 8001252:	e691      	b.n	8000f78 <__aeabi_dsub+0x94>
 8001254:	4661      	mov	r1, ip
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	0749      	lsls	r1, r1, #29
 800125a:	430b      	orrs	r3, r1
 800125c:	4661      	mov	r1, ip
 800125e:	08cc      	lsrs	r4, r1, #3
 8001260:	e7b8      	b.n	80011d4 <__aeabi_dsub+0x2f0>
 8001262:	4640      	mov	r0, r8
 8001264:	4cd3      	ldr	r4, [pc, #844]	; (80015b4 <__aeabi_dsub+0x6d0>)
 8001266:	3001      	adds	r0, #1
 8001268:	4220      	tst	r0, r4
 800126a:	d000      	beq.n	800126e <__aeabi_dsub+0x38a>
 800126c:	e0a2      	b.n	80013b4 <__aeabi_dsub+0x4d0>
 800126e:	4640      	mov	r0, r8
 8001270:	2800      	cmp	r0, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x392>
 8001274:	e101      	b.n	800147a <__aeabi_dsub+0x596>
 8001276:	4660      	mov	r0, ip
 8001278:	4318      	orrs	r0, r3
 800127a:	d100      	bne.n	800127e <__aeabi_dsub+0x39a>
 800127c:	e15e      	b.n	800153c <__aeabi_dsub+0x658>
 800127e:	0008      	movs	r0, r1
 8001280:	4338      	orrs	r0, r7
 8001282:	d000      	beq.n	8001286 <__aeabi_dsub+0x3a2>
 8001284:	e15f      	b.n	8001546 <__aeabi_dsub+0x662>
 8001286:	4661      	mov	r1, ip
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	0749      	lsls	r1, r1, #29
 800128c:	430b      	orrs	r3, r1
 800128e:	4661      	mov	r1, ip
 8001290:	08cc      	lsrs	r4, r1, #3
 8001292:	e7a2      	b.n	80011da <__aeabi_dsub+0x2f6>
 8001294:	4dc8      	ldr	r5, [pc, #800]	; (80015b8 <__aeabi_dsub+0x6d4>)
 8001296:	42a8      	cmp	r0, r5
 8001298:	d100      	bne.n	800129c <__aeabi_dsub+0x3b8>
 800129a:	e0cf      	b.n	800143c <__aeabi_dsub+0x558>
 800129c:	2580      	movs	r5, #128	; 0x80
 800129e:	4664      	mov	r4, ip
 80012a0:	042d      	lsls	r5, r5, #16
 80012a2:	432c      	orrs	r4, r5
 80012a4:	46a4      	mov	ip, r4
 80012a6:	2a38      	cmp	r2, #56	; 0x38
 80012a8:	dc56      	bgt.n	8001358 <__aeabi_dsub+0x474>
 80012aa:	2a1f      	cmp	r2, #31
 80012ac:	dd00      	ble.n	80012b0 <__aeabi_dsub+0x3cc>
 80012ae:	e0d1      	b.n	8001454 <__aeabi_dsub+0x570>
 80012b0:	2520      	movs	r5, #32
 80012b2:	001e      	movs	r6, r3
 80012b4:	1aad      	subs	r5, r5, r2
 80012b6:	4664      	mov	r4, ip
 80012b8:	40ab      	lsls	r3, r5
 80012ba:	40ac      	lsls	r4, r5
 80012bc:	40d6      	lsrs	r6, r2
 80012be:	1e5d      	subs	r5, r3, #1
 80012c0:	41ab      	sbcs	r3, r5
 80012c2:	4334      	orrs	r4, r6
 80012c4:	4323      	orrs	r3, r4
 80012c6:	4664      	mov	r4, ip
 80012c8:	40d4      	lsrs	r4, r2
 80012ca:	1b09      	subs	r1, r1, r4
 80012cc:	e049      	b.n	8001362 <__aeabi_dsub+0x47e>
 80012ce:	4660      	mov	r0, ip
 80012d0:	1bdc      	subs	r4, r3, r7
 80012d2:	1a46      	subs	r6, r0, r1
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	4180      	sbcs	r0, r0
 80012d8:	4240      	negs	r0, r0
 80012da:	4681      	mov	r9, r0
 80012dc:	0030      	movs	r0, r6
 80012de:	464e      	mov	r6, r9
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	4681      	mov	r9, r0
 80012e4:	0200      	lsls	r0, r0, #8
 80012e6:	d476      	bmi.n	80013d6 <__aeabi_dsub+0x4f2>
 80012e8:	464b      	mov	r3, r9
 80012ea:	4323      	orrs	r3, r4
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dsub+0x40c>
 80012ee:	e652      	b.n	8000f96 <__aeabi_dsub+0xb2>
 80012f0:	2400      	movs	r4, #0
 80012f2:	2500      	movs	r5, #0
 80012f4:	e771      	b.n	80011da <__aeabi_dsub+0x2f6>
 80012f6:	4339      	orrs	r1, r7
 80012f8:	000c      	movs	r4, r1
 80012fa:	1e62      	subs	r2, r4, #1
 80012fc:	4194      	sbcs	r4, r2
 80012fe:	18e4      	adds	r4, r4, r3
 8001300:	429c      	cmp	r4, r3
 8001302:	419b      	sbcs	r3, r3
 8001304:	425b      	negs	r3, r3
 8001306:	4463      	add	r3, ip
 8001308:	4699      	mov	r9, r3
 800130a:	464b      	mov	r3, r9
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	d400      	bmi.n	8001312 <__aeabi_dsub+0x42e>
 8001310:	e756      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 8001312:	2301      	movs	r3, #1
 8001314:	469c      	mov	ip, r3
 8001316:	4ba8      	ldr	r3, [pc, #672]	; (80015b8 <__aeabi_dsub+0x6d4>)
 8001318:	44e0      	add	r8, ip
 800131a:	4598      	cmp	r8, r3
 800131c:	d038      	beq.n	8001390 <__aeabi_dsub+0x4ac>
 800131e:	464b      	mov	r3, r9
 8001320:	48a6      	ldr	r0, [pc, #664]	; (80015bc <__aeabi_dsub+0x6d8>)
 8001322:	2201      	movs	r2, #1
 8001324:	4003      	ands	r3, r0
 8001326:	0018      	movs	r0, r3
 8001328:	0863      	lsrs	r3, r4, #1
 800132a:	4014      	ands	r4, r2
 800132c:	431c      	orrs	r4, r3
 800132e:	07c3      	lsls	r3, r0, #31
 8001330:	431c      	orrs	r4, r3
 8001332:	0843      	lsrs	r3, r0, #1
 8001334:	4699      	mov	r9, r3
 8001336:	e657      	b.n	8000fe8 <__aeabi_dsub+0x104>
 8001338:	0010      	movs	r0, r2
 800133a:	000e      	movs	r6, r1
 800133c:	3820      	subs	r0, #32
 800133e:	40c6      	lsrs	r6, r0
 8001340:	2a20      	cmp	r2, #32
 8001342:	d004      	beq.n	800134e <__aeabi_dsub+0x46a>
 8001344:	2040      	movs	r0, #64	; 0x40
 8001346:	1a82      	subs	r2, r0, r2
 8001348:	4091      	lsls	r1, r2
 800134a:	430f      	orrs	r7, r1
 800134c:	46b9      	mov	r9, r7
 800134e:	464f      	mov	r7, r9
 8001350:	1e7a      	subs	r2, r7, #1
 8001352:	4197      	sbcs	r7, r2
 8001354:	4337      	orrs	r7, r6
 8001356:	e60f      	b.n	8000f78 <__aeabi_dsub+0x94>
 8001358:	4662      	mov	r2, ip
 800135a:	431a      	orrs	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	1e5a      	subs	r2, r3, #1
 8001360:	4193      	sbcs	r3, r2
 8001362:	1afc      	subs	r4, r7, r3
 8001364:	42a7      	cmp	r7, r4
 8001366:	41bf      	sbcs	r7, r7
 8001368:	427f      	negs	r7, r7
 800136a:	1bcb      	subs	r3, r1, r7
 800136c:	4699      	mov	r9, r3
 800136e:	465d      	mov	r5, fp
 8001370:	4680      	mov	r8, r0
 8001372:	e608      	b.n	8000f86 <__aeabi_dsub+0xa2>
 8001374:	4666      	mov	r6, ip
 8001376:	431e      	orrs	r6, r3
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x498>
 800137a:	e0be      	b.n	80014fa <__aeabi_dsub+0x616>
 800137c:	1e56      	subs	r6, r2, #1
 800137e:	2a01      	cmp	r2, #1
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x4a0>
 8001382:	e109      	b.n	8001598 <__aeabi_dsub+0x6b4>
 8001384:	4c8c      	ldr	r4, [pc, #560]	; (80015b8 <__aeabi_dsub+0x6d4>)
 8001386:	42a2      	cmp	r2, r4
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x4a8>
 800138a:	e119      	b.n	80015c0 <__aeabi_dsub+0x6dc>
 800138c:	0032      	movs	r2, r6
 800138e:	e6c1      	b.n	8001114 <__aeabi_dsub+0x230>
 8001390:	4642      	mov	r2, r8
 8001392:	2400      	movs	r4, #0
 8001394:	2300      	movs	r3, #0
 8001396:	e648      	b.n	800102a <__aeabi_dsub+0x146>
 8001398:	2020      	movs	r0, #32
 800139a:	000c      	movs	r4, r1
 800139c:	1a80      	subs	r0, r0, r2
 800139e:	003e      	movs	r6, r7
 80013a0:	4087      	lsls	r7, r0
 80013a2:	4084      	lsls	r4, r0
 80013a4:	40d6      	lsrs	r6, r2
 80013a6:	1e78      	subs	r0, r7, #1
 80013a8:	4187      	sbcs	r7, r0
 80013aa:	40d1      	lsrs	r1, r2
 80013ac:	4334      	orrs	r4, r6
 80013ae:	433c      	orrs	r4, r7
 80013b0:	448c      	add	ip, r1
 80013b2:	e7a4      	b.n	80012fe <__aeabi_dsub+0x41a>
 80013b4:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <__aeabi_dsub+0x6d4>)
 80013b6:	4290      	cmp	r0, r2
 80013b8:	d100      	bne.n	80013bc <__aeabi_dsub+0x4d8>
 80013ba:	e0e9      	b.n	8001590 <__aeabi_dsub+0x6ac>
 80013bc:	19df      	adds	r7, r3, r7
 80013be:	429f      	cmp	r7, r3
 80013c0:	419b      	sbcs	r3, r3
 80013c2:	4461      	add	r1, ip
 80013c4:	425b      	negs	r3, r3
 80013c6:	18c9      	adds	r1, r1, r3
 80013c8:	07cc      	lsls	r4, r1, #31
 80013ca:	087f      	lsrs	r7, r7, #1
 80013cc:	084b      	lsrs	r3, r1, #1
 80013ce:	4699      	mov	r9, r3
 80013d0:	4680      	mov	r8, r0
 80013d2:	433c      	orrs	r4, r7
 80013d4:	e6f4      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 80013d6:	1afc      	subs	r4, r7, r3
 80013d8:	42a7      	cmp	r7, r4
 80013da:	41bf      	sbcs	r7, r7
 80013dc:	4663      	mov	r3, ip
 80013de:	427f      	negs	r7, r7
 80013e0:	1ac9      	subs	r1, r1, r3
 80013e2:	1bcb      	subs	r3, r1, r7
 80013e4:	4699      	mov	r9, r3
 80013e6:	465d      	mov	r5, fp
 80013e8:	e5d5      	b.n	8000f96 <__aeabi_dsub+0xb2>
 80013ea:	08ff      	lsrs	r7, r7, #3
 80013ec:	074b      	lsls	r3, r1, #29
 80013ee:	465d      	mov	r5, fp
 80013f0:	433b      	orrs	r3, r7
 80013f2:	08cc      	lsrs	r4, r1, #3
 80013f4:	e6ee      	b.n	80011d4 <__aeabi_dsub+0x2f0>
 80013f6:	4662      	mov	r2, ip
 80013f8:	431a      	orrs	r2, r3
 80013fa:	d000      	beq.n	80013fe <__aeabi_dsub+0x51a>
 80013fc:	e082      	b.n	8001504 <__aeabi_dsub+0x620>
 80013fe:	000b      	movs	r3, r1
 8001400:	433b      	orrs	r3, r7
 8001402:	d11b      	bne.n	800143c <__aeabi_dsub+0x558>
 8001404:	2480      	movs	r4, #128	; 0x80
 8001406:	2500      	movs	r5, #0
 8001408:	0324      	lsls	r4, r4, #12
 800140a:	e6f9      	b.n	8001200 <__aeabi_dsub+0x31c>
 800140c:	19dc      	adds	r4, r3, r7
 800140e:	429c      	cmp	r4, r3
 8001410:	419b      	sbcs	r3, r3
 8001412:	4461      	add	r1, ip
 8001414:	4689      	mov	r9, r1
 8001416:	425b      	negs	r3, r3
 8001418:	4499      	add	r9, r3
 800141a:	464b      	mov	r3, r9
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	d444      	bmi.n	80014aa <__aeabi_dsub+0x5c6>
 8001420:	2301      	movs	r3, #1
 8001422:	4698      	mov	r8, r3
 8001424:	e6cc      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 8001426:	1bdc      	subs	r4, r3, r7
 8001428:	4662      	mov	r2, ip
 800142a:	42a3      	cmp	r3, r4
 800142c:	419b      	sbcs	r3, r3
 800142e:	1a51      	subs	r1, r2, r1
 8001430:	425b      	negs	r3, r3
 8001432:	1acb      	subs	r3, r1, r3
 8001434:	4699      	mov	r9, r3
 8001436:	2301      	movs	r3, #1
 8001438:	4698      	mov	r8, r3
 800143a:	e5a4      	b.n	8000f86 <__aeabi_dsub+0xa2>
 800143c:	08ff      	lsrs	r7, r7, #3
 800143e:	074b      	lsls	r3, r1, #29
 8001440:	465d      	mov	r5, fp
 8001442:	433b      	orrs	r3, r7
 8001444:	08cc      	lsrs	r4, r1, #3
 8001446:	e6d7      	b.n	80011f8 <__aeabi_dsub+0x314>
 8001448:	4662      	mov	r2, ip
 800144a:	431a      	orrs	r2, r3
 800144c:	0014      	movs	r4, r2
 800144e:	1e63      	subs	r3, r4, #1
 8001450:	419c      	sbcs	r4, r3
 8001452:	e679      	b.n	8001148 <__aeabi_dsub+0x264>
 8001454:	0015      	movs	r5, r2
 8001456:	4664      	mov	r4, ip
 8001458:	3d20      	subs	r5, #32
 800145a:	40ec      	lsrs	r4, r5
 800145c:	46a0      	mov	r8, r4
 800145e:	2a20      	cmp	r2, #32
 8001460:	d005      	beq.n	800146e <__aeabi_dsub+0x58a>
 8001462:	2540      	movs	r5, #64	; 0x40
 8001464:	4664      	mov	r4, ip
 8001466:	1aaa      	subs	r2, r5, r2
 8001468:	4094      	lsls	r4, r2
 800146a:	4323      	orrs	r3, r4
 800146c:	469a      	mov	sl, r3
 800146e:	4654      	mov	r4, sl
 8001470:	1e63      	subs	r3, r4, #1
 8001472:	419c      	sbcs	r4, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4323      	orrs	r3, r4
 8001478:	e773      	b.n	8001362 <__aeabi_dsub+0x47e>
 800147a:	4662      	mov	r2, ip
 800147c:	431a      	orrs	r2, r3
 800147e:	d023      	beq.n	80014c8 <__aeabi_dsub+0x5e4>
 8001480:	000a      	movs	r2, r1
 8001482:	433a      	orrs	r2, r7
 8001484:	d000      	beq.n	8001488 <__aeabi_dsub+0x5a4>
 8001486:	e0a0      	b.n	80015ca <__aeabi_dsub+0x6e6>
 8001488:	4662      	mov	r2, ip
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	0752      	lsls	r2, r2, #29
 800148e:	4313      	orrs	r3, r2
 8001490:	4662      	mov	r2, ip
 8001492:	08d4      	lsrs	r4, r2, #3
 8001494:	e6b0      	b.n	80011f8 <__aeabi_dsub+0x314>
 8001496:	000b      	movs	r3, r1
 8001498:	433b      	orrs	r3, r7
 800149a:	d100      	bne.n	800149e <__aeabi_dsub+0x5ba>
 800149c:	e728      	b.n	80012f0 <__aeabi_dsub+0x40c>
 800149e:	08ff      	lsrs	r7, r7, #3
 80014a0:	074b      	lsls	r3, r1, #29
 80014a2:	465d      	mov	r5, fp
 80014a4:	433b      	orrs	r3, r7
 80014a6:	08cc      	lsrs	r4, r1, #3
 80014a8:	e697      	b.n	80011da <__aeabi_dsub+0x2f6>
 80014aa:	2302      	movs	r3, #2
 80014ac:	4698      	mov	r8, r3
 80014ae:	e736      	b.n	800131e <__aeabi_dsub+0x43a>
 80014b0:	1afc      	subs	r4, r7, r3
 80014b2:	42a7      	cmp	r7, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	4663      	mov	r3, ip
 80014b8:	427f      	negs	r7, r7
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	1bcb      	subs	r3, r1, r7
 80014be:	4699      	mov	r9, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	465d      	mov	r5, fp
 80014c4:	4698      	mov	r8, r3
 80014c6:	e55e      	b.n	8000f86 <__aeabi_dsub+0xa2>
 80014c8:	074b      	lsls	r3, r1, #29
 80014ca:	08ff      	lsrs	r7, r7, #3
 80014cc:	433b      	orrs	r3, r7
 80014ce:	08cc      	lsrs	r4, r1, #3
 80014d0:	e692      	b.n	80011f8 <__aeabi_dsub+0x314>
 80014d2:	1bdc      	subs	r4, r3, r7
 80014d4:	4660      	mov	r0, ip
 80014d6:	42a3      	cmp	r3, r4
 80014d8:	41b6      	sbcs	r6, r6
 80014da:	1a40      	subs	r0, r0, r1
 80014dc:	4276      	negs	r6, r6
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	4681      	mov	r9, r0
 80014e2:	0200      	lsls	r0, r0, #8
 80014e4:	d560      	bpl.n	80015a8 <__aeabi_dsub+0x6c4>
 80014e6:	1afc      	subs	r4, r7, r3
 80014e8:	42a7      	cmp	r7, r4
 80014ea:	41bf      	sbcs	r7, r7
 80014ec:	4663      	mov	r3, ip
 80014ee:	427f      	negs	r7, r7
 80014f0:	1ac9      	subs	r1, r1, r3
 80014f2:	1bcb      	subs	r3, r1, r7
 80014f4:	4699      	mov	r9, r3
 80014f6:	465d      	mov	r5, fp
 80014f8:	e576      	b.n	8000fe8 <__aeabi_dsub+0x104>
 80014fa:	08ff      	lsrs	r7, r7, #3
 80014fc:	074b      	lsls	r3, r1, #29
 80014fe:	433b      	orrs	r3, r7
 8001500:	08cc      	lsrs	r4, r1, #3
 8001502:	e667      	b.n	80011d4 <__aeabi_dsub+0x2f0>
 8001504:	000a      	movs	r2, r1
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	433a      	orrs	r2, r7
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x62a>
 800150c:	e66f      	b.n	80011ee <__aeabi_dsub+0x30a>
 800150e:	4662      	mov	r2, ip
 8001510:	0752      	lsls	r2, r2, #29
 8001512:	4313      	orrs	r3, r2
 8001514:	4662      	mov	r2, ip
 8001516:	08d4      	lsrs	r4, r2, #3
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	0312      	lsls	r2, r2, #12
 800151c:	4214      	tst	r4, r2
 800151e:	d007      	beq.n	8001530 <__aeabi_dsub+0x64c>
 8001520:	08c8      	lsrs	r0, r1, #3
 8001522:	4210      	tst	r0, r2
 8001524:	d104      	bne.n	8001530 <__aeabi_dsub+0x64c>
 8001526:	465d      	mov	r5, fp
 8001528:	0004      	movs	r4, r0
 800152a:	08fb      	lsrs	r3, r7, #3
 800152c:	0749      	lsls	r1, r1, #29
 800152e:	430b      	orrs	r3, r1
 8001530:	0f5a      	lsrs	r2, r3, #29
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	0752      	lsls	r2, r2, #29
 8001538:	4313      	orrs	r3, r2
 800153a:	e65d      	b.n	80011f8 <__aeabi_dsub+0x314>
 800153c:	074b      	lsls	r3, r1, #29
 800153e:	08ff      	lsrs	r7, r7, #3
 8001540:	433b      	orrs	r3, r7
 8001542:	08cc      	lsrs	r4, r1, #3
 8001544:	e649      	b.n	80011da <__aeabi_dsub+0x2f6>
 8001546:	19dc      	adds	r4, r3, r7
 8001548:	429c      	cmp	r4, r3
 800154a:	419b      	sbcs	r3, r3
 800154c:	4461      	add	r1, ip
 800154e:	4689      	mov	r9, r1
 8001550:	425b      	negs	r3, r3
 8001552:	4499      	add	r9, r3
 8001554:	464b      	mov	r3, r9
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	d400      	bmi.n	800155c <__aeabi_dsub+0x678>
 800155a:	e631      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 800155c:	464a      	mov	r2, r9
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <__aeabi_dsub+0x6d8>)
 8001560:	401a      	ands	r2, r3
 8001562:	2301      	movs	r3, #1
 8001564:	4691      	mov	r9, r2
 8001566:	4698      	mov	r8, r3
 8001568:	e62a      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 800156a:	0016      	movs	r6, r2
 800156c:	4664      	mov	r4, ip
 800156e:	3e20      	subs	r6, #32
 8001570:	40f4      	lsrs	r4, r6
 8001572:	46a0      	mov	r8, r4
 8001574:	2a20      	cmp	r2, #32
 8001576:	d005      	beq.n	8001584 <__aeabi_dsub+0x6a0>
 8001578:	2640      	movs	r6, #64	; 0x40
 800157a:	4664      	mov	r4, ip
 800157c:	1ab2      	subs	r2, r6, r2
 800157e:	4094      	lsls	r4, r2
 8001580:	4323      	orrs	r3, r4
 8001582:	469a      	mov	sl, r3
 8001584:	4654      	mov	r4, sl
 8001586:	1e63      	subs	r3, r4, #1
 8001588:	419c      	sbcs	r4, r3
 800158a:	4643      	mov	r3, r8
 800158c:	431c      	orrs	r4, r3
 800158e:	e5db      	b.n	8001148 <__aeabi_dsub+0x264>
 8001590:	0002      	movs	r2, r0
 8001592:	2400      	movs	r4, #0
 8001594:	2300      	movs	r3, #0
 8001596:	e548      	b.n	800102a <__aeabi_dsub+0x146>
 8001598:	19dc      	adds	r4, r3, r7
 800159a:	42bc      	cmp	r4, r7
 800159c:	41bf      	sbcs	r7, r7
 800159e:	4461      	add	r1, ip
 80015a0:	4689      	mov	r9, r1
 80015a2:	427f      	negs	r7, r7
 80015a4:	44b9      	add	r9, r7
 80015a6:	e738      	b.n	800141a <__aeabi_dsub+0x536>
 80015a8:	464b      	mov	r3, r9
 80015aa:	4323      	orrs	r3, r4
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dsub+0x6cc>
 80015ae:	e69f      	b.n	80012f0 <__aeabi_dsub+0x40c>
 80015b0:	e606      	b.n	80011c0 <__aeabi_dsub+0x2dc>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	000007fe 	.word	0x000007fe
 80015b8:	000007ff 	.word	0x000007ff
 80015bc:	ff7fffff 	.word	0xff7fffff
 80015c0:	08ff      	lsrs	r7, r7, #3
 80015c2:	074b      	lsls	r3, r1, #29
 80015c4:	433b      	orrs	r3, r7
 80015c6:	08cc      	lsrs	r4, r1, #3
 80015c8:	e616      	b.n	80011f8 <__aeabi_dsub+0x314>
 80015ca:	4662      	mov	r2, ip
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	0752      	lsls	r2, r2, #29
 80015d0:	4313      	orrs	r3, r2
 80015d2:	4662      	mov	r2, ip
 80015d4:	08d4      	lsrs	r4, r2, #3
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4214      	tst	r4, r2
 80015dc:	d007      	beq.n	80015ee <__aeabi_dsub+0x70a>
 80015de:	08c8      	lsrs	r0, r1, #3
 80015e0:	4210      	tst	r0, r2
 80015e2:	d104      	bne.n	80015ee <__aeabi_dsub+0x70a>
 80015e4:	465d      	mov	r5, fp
 80015e6:	0004      	movs	r4, r0
 80015e8:	08fb      	lsrs	r3, r7, #3
 80015ea:	0749      	lsls	r1, r1, #29
 80015ec:	430b      	orrs	r3, r1
 80015ee:	0f5a      	lsrs	r2, r3, #29
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	0752      	lsls	r2, r2, #29
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	e5fe      	b.n	80011f8 <__aeabi_dsub+0x314>
 80015fa:	2300      	movs	r3, #0
 80015fc:	4a01      	ldr	r2, [pc, #4]	; (8001604 <__aeabi_dsub+0x720>)
 80015fe:	001c      	movs	r4, r3
 8001600:	e513      	b.n	800102a <__aeabi_dsub+0x146>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	000007ff 	.word	0x000007ff

08001608 <__aeabi_d2iz>:
 8001608:	000a      	movs	r2, r1
 800160a:	b530      	push	{r4, r5, lr}
 800160c:	4c13      	ldr	r4, [pc, #76]	; (800165c <__aeabi_d2iz+0x54>)
 800160e:	0053      	lsls	r3, r2, #1
 8001610:	0309      	lsls	r1, r1, #12
 8001612:	0005      	movs	r5, r0
 8001614:	0b09      	lsrs	r1, r1, #12
 8001616:	2000      	movs	r0, #0
 8001618:	0d5b      	lsrs	r3, r3, #21
 800161a:	0fd2      	lsrs	r2, r2, #31
 800161c:	42a3      	cmp	r3, r4
 800161e:	dd04      	ble.n	800162a <__aeabi_d2iz+0x22>
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <__aeabi_d2iz+0x58>)
 8001622:	4283      	cmp	r3, r0
 8001624:	dd02      	ble.n	800162c <__aeabi_d2iz+0x24>
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <__aeabi_d2iz+0x5c>)
 8001628:	18d0      	adds	r0, r2, r3
 800162a:	bd30      	pop	{r4, r5, pc}
 800162c:	2080      	movs	r0, #128	; 0x80
 800162e:	0340      	lsls	r0, r0, #13
 8001630:	4301      	orrs	r1, r0
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <__aeabi_d2iz+0x60>)
 8001634:	1ac0      	subs	r0, r0, r3
 8001636:	281f      	cmp	r0, #31
 8001638:	dd08      	ble.n	800164c <__aeabi_d2iz+0x44>
 800163a:	480c      	ldr	r0, [pc, #48]	; (800166c <__aeabi_d2iz+0x64>)
 800163c:	1ac3      	subs	r3, r0, r3
 800163e:	40d9      	lsrs	r1, r3
 8001640:	000b      	movs	r3, r1
 8001642:	4258      	negs	r0, r3
 8001644:	2a00      	cmp	r2, #0
 8001646:	d1f0      	bne.n	800162a <__aeabi_d2iz+0x22>
 8001648:	0018      	movs	r0, r3
 800164a:	e7ee      	b.n	800162a <__aeabi_d2iz+0x22>
 800164c:	4c08      	ldr	r4, [pc, #32]	; (8001670 <__aeabi_d2iz+0x68>)
 800164e:	40c5      	lsrs	r5, r0
 8001650:	46a4      	mov	ip, r4
 8001652:	4463      	add	r3, ip
 8001654:	4099      	lsls	r1, r3
 8001656:	000b      	movs	r3, r1
 8001658:	432b      	orrs	r3, r5
 800165a:	e7f2      	b.n	8001642 <__aeabi_d2iz+0x3a>
 800165c:	000003fe 	.word	0x000003fe
 8001660:	0000041d 	.word	0x0000041d
 8001664:	7fffffff 	.word	0x7fffffff
 8001668:	00000433 	.word	0x00000433
 800166c:	00000413 	.word	0x00000413
 8001670:	fffffbed 	.word	0xfffffbed

08001674 <__aeabi_i2d>:
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	2800      	cmp	r0, #0
 8001678:	d016      	beq.n	80016a8 <__aeabi_i2d+0x34>
 800167a:	17c3      	asrs	r3, r0, #31
 800167c:	18c5      	adds	r5, r0, r3
 800167e:	405d      	eors	r5, r3
 8001680:	0fc4      	lsrs	r4, r0, #31
 8001682:	0028      	movs	r0, r5
 8001684:	f000 f864 	bl	8001750 <__clzsi2>
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <__aeabi_i2d+0x5c>)
 800168a:	1a12      	subs	r2, r2, r0
 800168c:	280a      	cmp	r0, #10
 800168e:	dc16      	bgt.n	80016be <__aeabi_i2d+0x4a>
 8001690:	0003      	movs	r3, r0
 8001692:	002e      	movs	r6, r5
 8001694:	3315      	adds	r3, #21
 8001696:	409e      	lsls	r6, r3
 8001698:	230b      	movs	r3, #11
 800169a:	1a18      	subs	r0, r3, r0
 800169c:	40c5      	lsrs	r5, r0
 800169e:	0552      	lsls	r2, r2, #21
 80016a0:	032d      	lsls	r5, r5, #12
 80016a2:	0b2d      	lsrs	r5, r5, #12
 80016a4:	0d53      	lsrs	r3, r2, #21
 80016a6:	e003      	b.n	80016b0 <__aeabi_i2d+0x3c>
 80016a8:	2400      	movs	r4, #0
 80016aa:	2300      	movs	r3, #0
 80016ac:	2500      	movs	r5, #0
 80016ae:	2600      	movs	r6, #0
 80016b0:	051b      	lsls	r3, r3, #20
 80016b2:	432b      	orrs	r3, r5
 80016b4:	07e4      	lsls	r4, r4, #31
 80016b6:	4323      	orrs	r3, r4
 80016b8:	0030      	movs	r0, r6
 80016ba:	0019      	movs	r1, r3
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
 80016be:	380b      	subs	r0, #11
 80016c0:	4085      	lsls	r5, r0
 80016c2:	0552      	lsls	r2, r2, #21
 80016c4:	032d      	lsls	r5, r5, #12
 80016c6:	2600      	movs	r6, #0
 80016c8:	0b2d      	lsrs	r5, r5, #12
 80016ca:	0d53      	lsrs	r3, r2, #21
 80016cc:	e7f0      	b.n	80016b0 <__aeabi_i2d+0x3c>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	0000041e 	.word	0x0000041e

080016d4 <__aeabi_cdrcmple>:
 80016d4:	4684      	mov	ip, r0
 80016d6:	0010      	movs	r0, r2
 80016d8:	4662      	mov	r2, ip
 80016da:	468c      	mov	ip, r1
 80016dc:	0019      	movs	r1, r3
 80016de:	4663      	mov	r3, ip
 80016e0:	e000      	b.n	80016e4 <__aeabi_cdcmpeq>
 80016e2:	46c0      	nop			; (mov r8, r8)

080016e4 <__aeabi_cdcmpeq>:
 80016e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016e6:	f000 f8f9 	bl	80018dc <__ledf2>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d401      	bmi.n	80016f2 <__aeabi_cdcmpeq+0xe>
 80016ee:	2100      	movs	r1, #0
 80016f0:	42c8      	cmn	r0, r1
 80016f2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016f4 <__aeabi_dcmpeq>:
 80016f4:	b510      	push	{r4, lr}
 80016f6:	f000 f849 	bl	800178c <__eqdf2>
 80016fa:	4240      	negs	r0, r0
 80016fc:	3001      	adds	r0, #1
 80016fe:	bd10      	pop	{r4, pc}

08001700 <__aeabi_dcmplt>:
 8001700:	b510      	push	{r4, lr}
 8001702:	f000 f8eb 	bl	80018dc <__ledf2>
 8001706:	2800      	cmp	r0, #0
 8001708:	db01      	blt.n	800170e <__aeabi_dcmplt+0xe>
 800170a:	2000      	movs	r0, #0
 800170c:	bd10      	pop	{r4, pc}
 800170e:	2001      	movs	r0, #1
 8001710:	bd10      	pop	{r4, pc}
 8001712:	46c0      	nop			; (mov r8, r8)

08001714 <__aeabi_dcmple>:
 8001714:	b510      	push	{r4, lr}
 8001716:	f000 f8e1 	bl	80018dc <__ledf2>
 800171a:	2800      	cmp	r0, #0
 800171c:	dd01      	ble.n	8001722 <__aeabi_dcmple+0xe>
 800171e:	2000      	movs	r0, #0
 8001720:	bd10      	pop	{r4, pc}
 8001722:	2001      	movs	r0, #1
 8001724:	bd10      	pop	{r4, pc}
 8001726:	46c0      	nop			; (mov r8, r8)

08001728 <__aeabi_dcmpgt>:
 8001728:	b510      	push	{r4, lr}
 800172a:	f000 f871 	bl	8001810 <__gedf2>
 800172e:	2800      	cmp	r0, #0
 8001730:	dc01      	bgt.n	8001736 <__aeabi_dcmpgt+0xe>
 8001732:	2000      	movs	r0, #0
 8001734:	bd10      	pop	{r4, pc}
 8001736:	2001      	movs	r0, #1
 8001738:	bd10      	pop	{r4, pc}
 800173a:	46c0      	nop			; (mov r8, r8)

0800173c <__aeabi_dcmpge>:
 800173c:	b510      	push	{r4, lr}
 800173e:	f000 f867 	bl	8001810 <__gedf2>
 8001742:	2800      	cmp	r0, #0
 8001744:	da01      	bge.n	800174a <__aeabi_dcmpge+0xe>
 8001746:	2000      	movs	r0, #0
 8001748:	bd10      	pop	{r4, pc}
 800174a:	2001      	movs	r0, #1
 800174c:	bd10      	pop	{r4, pc}
 800174e:	46c0      	nop			; (mov r8, r8)

08001750 <__clzsi2>:
 8001750:	211c      	movs	r1, #28
 8001752:	2301      	movs	r3, #1
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	4298      	cmp	r0, r3
 8001758:	d301      	bcc.n	800175e <__clzsi2+0xe>
 800175a:	0c00      	lsrs	r0, r0, #16
 800175c:	3910      	subs	r1, #16
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	4298      	cmp	r0, r3
 8001762:	d301      	bcc.n	8001768 <__clzsi2+0x18>
 8001764:	0a00      	lsrs	r0, r0, #8
 8001766:	3908      	subs	r1, #8
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	4298      	cmp	r0, r3
 800176c:	d301      	bcc.n	8001772 <__clzsi2+0x22>
 800176e:	0900      	lsrs	r0, r0, #4
 8001770:	3904      	subs	r1, #4
 8001772:	a202      	add	r2, pc, #8	; (adr r2, 800177c <__clzsi2+0x2c>)
 8001774:	5c10      	ldrb	r0, [r2, r0]
 8001776:	1840      	adds	r0, r0, r1
 8001778:	4770      	bx	lr
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	02020304 	.word	0x02020304
 8001780:	01010101 	.word	0x01010101
	...

0800178c <__eqdf2>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	464e      	mov	r6, r9
 8001790:	4645      	mov	r5, r8
 8001792:	46de      	mov	lr, fp
 8001794:	4657      	mov	r7, sl
 8001796:	4690      	mov	r8, r2
 8001798:	b5e0      	push	{r5, r6, r7, lr}
 800179a:	0017      	movs	r7, r2
 800179c:	031a      	lsls	r2, r3, #12
 800179e:	0b12      	lsrs	r2, r2, #12
 80017a0:	0005      	movs	r5, r0
 80017a2:	4684      	mov	ip, r0
 80017a4:	4819      	ldr	r0, [pc, #100]	; (800180c <__eqdf2+0x80>)
 80017a6:	030e      	lsls	r6, r1, #12
 80017a8:	004c      	lsls	r4, r1, #1
 80017aa:	4691      	mov	r9, r2
 80017ac:	005a      	lsls	r2, r3, #1
 80017ae:	0fdb      	lsrs	r3, r3, #31
 80017b0:	469b      	mov	fp, r3
 80017b2:	0b36      	lsrs	r6, r6, #12
 80017b4:	0d64      	lsrs	r4, r4, #21
 80017b6:	0fc9      	lsrs	r1, r1, #31
 80017b8:	0d52      	lsrs	r2, r2, #21
 80017ba:	4284      	cmp	r4, r0
 80017bc:	d019      	beq.n	80017f2 <__eqdf2+0x66>
 80017be:	4282      	cmp	r2, r0
 80017c0:	d010      	beq.n	80017e4 <__eqdf2+0x58>
 80017c2:	2001      	movs	r0, #1
 80017c4:	4294      	cmp	r4, r2
 80017c6:	d10e      	bne.n	80017e6 <__eqdf2+0x5a>
 80017c8:	454e      	cmp	r6, r9
 80017ca:	d10c      	bne.n	80017e6 <__eqdf2+0x5a>
 80017cc:	2001      	movs	r0, #1
 80017ce:	45c4      	cmp	ip, r8
 80017d0:	d109      	bne.n	80017e6 <__eqdf2+0x5a>
 80017d2:	4559      	cmp	r1, fp
 80017d4:	d017      	beq.n	8001806 <__eqdf2+0x7a>
 80017d6:	2c00      	cmp	r4, #0
 80017d8:	d105      	bne.n	80017e6 <__eqdf2+0x5a>
 80017da:	0030      	movs	r0, r6
 80017dc:	4328      	orrs	r0, r5
 80017de:	1e43      	subs	r3, r0, #1
 80017e0:	4198      	sbcs	r0, r3
 80017e2:	e000      	b.n	80017e6 <__eqdf2+0x5a>
 80017e4:	2001      	movs	r0, #1
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	0033      	movs	r3, r6
 80017f4:	2001      	movs	r0, #1
 80017f6:	432b      	orrs	r3, r5
 80017f8:	d1f5      	bne.n	80017e6 <__eqdf2+0x5a>
 80017fa:	42a2      	cmp	r2, r4
 80017fc:	d1f3      	bne.n	80017e6 <__eqdf2+0x5a>
 80017fe:	464b      	mov	r3, r9
 8001800:	433b      	orrs	r3, r7
 8001802:	d1f0      	bne.n	80017e6 <__eqdf2+0x5a>
 8001804:	e7e2      	b.n	80017cc <__eqdf2+0x40>
 8001806:	2000      	movs	r0, #0
 8001808:	e7ed      	b.n	80017e6 <__eqdf2+0x5a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	4647      	mov	r7, r8
 8001814:	46ce      	mov	lr, r9
 8001816:	0004      	movs	r4, r0
 8001818:	0018      	movs	r0, r3
 800181a:	0016      	movs	r6, r2
 800181c:	031b      	lsls	r3, r3, #12
 800181e:	0b1b      	lsrs	r3, r3, #12
 8001820:	4d2d      	ldr	r5, [pc, #180]	; (80018d8 <__gedf2+0xc8>)
 8001822:	004a      	lsls	r2, r1, #1
 8001824:	4699      	mov	r9, r3
 8001826:	b580      	push	{r7, lr}
 8001828:	0043      	lsls	r3, r0, #1
 800182a:	030f      	lsls	r7, r1, #12
 800182c:	46a4      	mov	ip, r4
 800182e:	46b0      	mov	r8, r6
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d52      	lsrs	r2, r2, #21
 8001834:	0fc9      	lsrs	r1, r1, #31
 8001836:	0d5b      	lsrs	r3, r3, #21
 8001838:	0fc0      	lsrs	r0, r0, #31
 800183a:	42aa      	cmp	r2, r5
 800183c:	d021      	beq.n	8001882 <__gedf2+0x72>
 800183e:	42ab      	cmp	r3, r5
 8001840:	d013      	beq.n	800186a <__gedf2+0x5a>
 8001842:	2a00      	cmp	r2, #0
 8001844:	d122      	bne.n	800188c <__gedf2+0x7c>
 8001846:	433c      	orrs	r4, r7
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <__gedf2+0x42>
 800184c:	464d      	mov	r5, r9
 800184e:	432e      	orrs	r6, r5
 8001850:	d022      	beq.n	8001898 <__gedf2+0x88>
 8001852:	2c00      	cmp	r4, #0
 8001854:	d010      	beq.n	8001878 <__gedf2+0x68>
 8001856:	4281      	cmp	r1, r0
 8001858:	d022      	beq.n	80018a0 <__gedf2+0x90>
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bcc0      	pop	{r6, r7}
 8001864:	46b9      	mov	r9, r7
 8001866:	46b0      	mov	r8, r6
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186a:	464d      	mov	r5, r9
 800186c:	432e      	orrs	r6, r5
 800186e:	d129      	bne.n	80018c4 <__gedf2+0xb4>
 8001870:	2a00      	cmp	r2, #0
 8001872:	d1f0      	bne.n	8001856 <__gedf2+0x46>
 8001874:	433c      	orrs	r4, r7
 8001876:	d1ee      	bne.n	8001856 <__gedf2+0x46>
 8001878:	2800      	cmp	r0, #0
 800187a:	d1f2      	bne.n	8001862 <__gedf2+0x52>
 800187c:	2001      	movs	r0, #1
 800187e:	4240      	negs	r0, r0
 8001880:	e7ef      	b.n	8001862 <__gedf2+0x52>
 8001882:	003d      	movs	r5, r7
 8001884:	4325      	orrs	r5, r4
 8001886:	d11d      	bne.n	80018c4 <__gedf2+0xb4>
 8001888:	4293      	cmp	r3, r2
 800188a:	d0ee      	beq.n	800186a <__gedf2+0x5a>
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e2      	bne.n	8001856 <__gedf2+0x46>
 8001890:	464c      	mov	r4, r9
 8001892:	4326      	orrs	r6, r4
 8001894:	d1df      	bne.n	8001856 <__gedf2+0x46>
 8001896:	e7e0      	b.n	800185a <__gedf2+0x4a>
 8001898:	2000      	movs	r0, #0
 800189a:	2c00      	cmp	r4, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7dc      	b.n	800185a <__gedf2+0x4a>
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dc0a      	bgt.n	80018ba <__gedf2+0xaa>
 80018a4:	dbe8      	blt.n	8001878 <__gedf2+0x68>
 80018a6:	454f      	cmp	r7, r9
 80018a8:	d8d7      	bhi.n	800185a <__gedf2+0x4a>
 80018aa:	d00e      	beq.n	80018ca <__gedf2+0xba>
 80018ac:	2000      	movs	r0, #0
 80018ae:	454f      	cmp	r7, r9
 80018b0:	d2d7      	bcs.n	8001862 <__gedf2+0x52>
 80018b2:	2900      	cmp	r1, #0
 80018b4:	d0e2      	beq.n	800187c <__gedf2+0x6c>
 80018b6:	0008      	movs	r0, r1
 80018b8:	e7d3      	b.n	8001862 <__gedf2+0x52>
 80018ba:	4243      	negs	r3, r0
 80018bc:	4158      	adcs	r0, r3
 80018be:	0040      	lsls	r0, r0, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	e7ce      	b.n	8001862 <__gedf2+0x52>
 80018c4:	2002      	movs	r0, #2
 80018c6:	4240      	negs	r0, r0
 80018c8:	e7cb      	b.n	8001862 <__gedf2+0x52>
 80018ca:	45c4      	cmp	ip, r8
 80018cc:	d8c5      	bhi.n	800185a <__gedf2+0x4a>
 80018ce:	2000      	movs	r0, #0
 80018d0:	45c4      	cmp	ip, r8
 80018d2:	d2c6      	bcs.n	8001862 <__gedf2+0x52>
 80018d4:	e7ed      	b.n	80018b2 <__gedf2+0xa2>
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff

080018dc <__ledf2>:
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	4647      	mov	r7, r8
 80018e0:	46ce      	mov	lr, r9
 80018e2:	0004      	movs	r4, r0
 80018e4:	0018      	movs	r0, r3
 80018e6:	0016      	movs	r6, r2
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	0b1b      	lsrs	r3, r3, #12
 80018ec:	4d2c      	ldr	r5, [pc, #176]	; (80019a0 <__ledf2+0xc4>)
 80018ee:	004a      	lsls	r2, r1, #1
 80018f0:	4699      	mov	r9, r3
 80018f2:	b580      	push	{r7, lr}
 80018f4:	0043      	lsls	r3, r0, #1
 80018f6:	030f      	lsls	r7, r1, #12
 80018f8:	46a4      	mov	ip, r4
 80018fa:	46b0      	mov	r8, r6
 80018fc:	0b3f      	lsrs	r7, r7, #12
 80018fe:	0d52      	lsrs	r2, r2, #21
 8001900:	0fc9      	lsrs	r1, r1, #31
 8001902:	0d5b      	lsrs	r3, r3, #21
 8001904:	0fc0      	lsrs	r0, r0, #31
 8001906:	42aa      	cmp	r2, r5
 8001908:	d00d      	beq.n	8001926 <__ledf2+0x4a>
 800190a:	42ab      	cmp	r3, r5
 800190c:	d010      	beq.n	8001930 <__ledf2+0x54>
 800190e:	2a00      	cmp	r2, #0
 8001910:	d127      	bne.n	8001962 <__ledf2+0x86>
 8001912:	433c      	orrs	r4, r7
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <__ledf2+0x60>
 8001918:	464d      	mov	r5, r9
 800191a:	432e      	orrs	r6, r5
 800191c:	d10e      	bne.n	800193c <__ledf2+0x60>
 800191e:	2000      	movs	r0, #0
 8001920:	2c00      	cmp	r4, #0
 8001922:	d015      	beq.n	8001950 <__ledf2+0x74>
 8001924:	e00e      	b.n	8001944 <__ledf2+0x68>
 8001926:	003d      	movs	r5, r7
 8001928:	4325      	orrs	r5, r4
 800192a:	d110      	bne.n	800194e <__ledf2+0x72>
 800192c:	4293      	cmp	r3, r2
 800192e:	d118      	bne.n	8001962 <__ledf2+0x86>
 8001930:	464d      	mov	r5, r9
 8001932:	432e      	orrs	r6, r5
 8001934:	d10b      	bne.n	800194e <__ledf2+0x72>
 8001936:	2a00      	cmp	r2, #0
 8001938:	d102      	bne.n	8001940 <__ledf2+0x64>
 800193a:	433c      	orrs	r4, r7
 800193c:	2c00      	cmp	r4, #0
 800193e:	d00b      	beq.n	8001958 <__ledf2+0x7c>
 8001940:	4281      	cmp	r1, r0
 8001942:	d014      	beq.n	800196e <__ledf2+0x92>
 8001944:	2002      	movs	r0, #2
 8001946:	3901      	subs	r1, #1
 8001948:	4008      	ands	r0, r1
 800194a:	3801      	subs	r0, #1
 800194c:	e000      	b.n	8001950 <__ledf2+0x74>
 800194e:	2002      	movs	r0, #2
 8001950:	bcc0      	pop	{r6, r7}
 8001952:	46b9      	mov	r9, r7
 8001954:	46b0      	mov	r8, r6
 8001956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001958:	2800      	cmp	r0, #0
 800195a:	d1f9      	bne.n	8001950 <__ledf2+0x74>
 800195c:	2001      	movs	r0, #1
 800195e:	4240      	negs	r0, r0
 8001960:	e7f6      	b.n	8001950 <__ledf2+0x74>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ec      	bne.n	8001940 <__ledf2+0x64>
 8001966:	464c      	mov	r4, r9
 8001968:	4326      	orrs	r6, r4
 800196a:	d1e9      	bne.n	8001940 <__ledf2+0x64>
 800196c:	e7ea      	b.n	8001944 <__ledf2+0x68>
 800196e:	429a      	cmp	r2, r3
 8001970:	dd04      	ble.n	800197c <__ledf2+0xa0>
 8001972:	4243      	negs	r3, r0
 8001974:	4158      	adcs	r0, r3
 8001976:	0040      	lsls	r0, r0, #1
 8001978:	3801      	subs	r0, #1
 800197a:	e7e9      	b.n	8001950 <__ledf2+0x74>
 800197c:	429a      	cmp	r2, r3
 800197e:	dbeb      	blt.n	8001958 <__ledf2+0x7c>
 8001980:	454f      	cmp	r7, r9
 8001982:	d8df      	bhi.n	8001944 <__ledf2+0x68>
 8001984:	d006      	beq.n	8001994 <__ledf2+0xb8>
 8001986:	2000      	movs	r0, #0
 8001988:	454f      	cmp	r7, r9
 800198a:	d2e1      	bcs.n	8001950 <__ledf2+0x74>
 800198c:	2900      	cmp	r1, #0
 800198e:	d0e5      	beq.n	800195c <__ledf2+0x80>
 8001990:	0008      	movs	r0, r1
 8001992:	e7dd      	b.n	8001950 <__ledf2+0x74>
 8001994:	45c4      	cmp	ip, r8
 8001996:	d8d5      	bhi.n	8001944 <__ledf2+0x68>
 8001998:	2000      	movs	r0, #0
 800199a:	45c4      	cmp	ip, r8
 800199c:	d2d8      	bcs.n	8001950 <__ledf2+0x74>
 800199e:	e7f5      	b.n	800198c <__ledf2+0xb0>
 80019a0:	000007ff 	.word	0x000007ff

080019a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_Init+0x3c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Init+0x3c>)
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f811 	bl	80019e4 <HAL_InitTick>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d003      	beq.n	80019ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e001      	b.n	80019d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ce:	f002 ff31 	bl	8004834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	240f      	movs	r4, #15
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_InitTick+0x50>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	22fa      	movs	r2, #250	; 0xfa
 80019fa:	0091      	lsls	r1, r2, #2
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7fe fb95 	bl	800012c <__udivsi3>
 8001a02:	0003      	movs	r3, r0
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fd48 	bl	800249a <HAL_SYSTICK_Config>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_InitTick+0x32>
  {
    status = HAL_ERROR;
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e006      	b.n	8001a24 <HAL_InitTick+0x40>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fd26 	bl	8002470 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b005      	add	sp, #20
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	20000020 	.word	0x20000020

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick++;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_IncTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_IncTick+0x14>)
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000a4 	.word	0x200000a4

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	200000a4 	.word	0x200000a4

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d002      	beq.n	8001a84 <HAL_Delay+0x20>
  {
    wait++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	f7ff ffe3 	bl	8001a50 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d8f7      	bhi.n	8001a86 <HAL_Delay+0x22>
  {
  }
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e159      	b.n	8001d66 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2250      	movs	r2, #80	; 0x50
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f002 fec6 	bl	800485c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d005      	beq.n	8001ae8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ae6:	d00b      	beq.n	8001b00 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	2210      	movs	r2, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2250      	movs	r2, #80	; 0x50
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e132      	b.n	8001d66 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	4a9a      	ldr	r2, [pc, #616]	; (8001d70 <HAL_ADC_Init+0x2d0>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	2202      	movs	r2, #2
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2203      	movs	r2, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_ADC_Init+0x90>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_Init+0x90>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_ADC_Init+0x92>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d149      	bne.n	8001bca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d00b      	beq.n	8001b5a <HAL_ADC_Init+0xba>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d005      	beq.n	8001b5a <HAL_ADC_Init+0xba>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d111      	bne.n	8001b7e <HAL_ADC_Init+0xde>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	0892      	lsrs	r2, r2, #2
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6919      	ldr	r1, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	e014      	b.n	8001ba8 <HAL_ADC_Init+0x108>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	0892      	lsrs	r2, r2, #2
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001b94:	4978      	ldr	r1, [pc, #480]	; (8001d78 <HAL_ADC_Init+0x2d8>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4b74      	ldr	r3, [pc, #464]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2118      	movs	r1, #24
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001bd0:	496a      	ldr	r1, [pc, #424]	; (8001d7c <HAL_ADC_Init+0x2dc>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	065a      	lsls	r2, r3, #25
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_ADC_Init+0x2d4>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	055b      	lsls	r3, r3, #21
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d108      	bne.n	8001c06 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	0549      	lsls	r1, r1, #21
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	495b      	ldr	r1, [pc, #364]	; (8001d80 <HAL_ADC_Init+0x2e0>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68d9      	ldr	r1, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Init+0x18c>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_Init+0x18e>
 8001c2c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c2e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2020      	movs	r0, #32
 8001c34:	5c1b      	ldrb	r3, [r3, r0]
 8001c36:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c38:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	202c      	movs	r0, #44	; 0x2c
 8001c3e:	5c1b      	ldrb	r3, [r3, r0]
 8001c40:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c42:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c48:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c50:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c58:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c66:	23c2      	movs	r3, #194	; 0xc2
 8001c68:	33ff      	adds	r3, #255	; 0xff
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00b      	beq.n	8001c86 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68d9      	ldr	r1, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2221      	movs	r2, #33	; 0x21
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d11a      	bne.n	8001cc6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	5c9b      	ldrb	r3, [r3, r2]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0249      	lsls	r1, r1, #9
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e00b      	b.n	8001cc6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d11f      	bne.n	8001d0e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	492a      	ldr	r1, [pc, #168]	; (8001d84 <HAL_ADC_Init+0x2e4>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001cec:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001cf2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	e00e      	b.n	8001d2c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2107      	movs	r1, #7
 8001d38:	438a      	bics	r2, r1
 8001d3a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6959      	ldr	r1, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	fffffefd 	.word	0xfffffefd
 8001d74:	40012708 	.word	0x40012708
 8001d78:	ffc3ffff 	.word	0xffc3ffff
 8001d7c:	fdffffff 	.word	0xfdffffff
 8001d80:	fffe0219 	.word	0xfffe0219
 8001d84:	fffffc03 	.word	0xfffffc03

08001d88 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d138      	bne.n	8001e16 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2250      	movs	r2, #80	; 0x50
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Start+0x2a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e038      	b.n	8001e24 <HAL_ADC_Start+0x9c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2250      	movs	r2, #80	; 0x50
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d007      	beq.n	8001dd2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fc      	adds	r4, r7, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 f999 	bl	8002100 <ADC_Enable>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d120      	bne.n	8001e1e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_ADC_Start+0xa4>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2250      	movs	r2, #80	; 0x50
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	221c      	movs	r2, #28
 8001e02:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2104      	movs	r1, #4
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e16:	230f      	movs	r3, #15
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e1e:	230f      	movs	r3, #15
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	781b      	ldrb	r3, [r3, #0]
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b005      	add	sp, #20
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	fffff0fe 	.word	0xfffff0fe

08001e30 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2250      	movs	r2, #80	; 0x50
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Stop+0x1e>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e029      	b.n	8001ea2 <HAL_ADC_Stop+0x72>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2250      	movs	r2, #80	; 0x50
 8001e52:	2101      	movs	r1, #1
 8001e54:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001e56:	250f      	movs	r5, #15
 8001e58:	197c      	adds	r4, r7, r5
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 fa0f 	bl	8002280 <ADC_ConversionStop>
 8001e62:	0003      	movs	r3, r0
 8001e64:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e66:	197b      	adds	r3, r7, r5
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e6e:	197c      	adds	r4, r7, r5
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 f9a4 	bl	80021c0 <ADC_Disable>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e7c:	197b      	adds	r3, r7, r5
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_ADC_Stop+0x7c>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2250      	movs	r2, #80	; 0x50
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	fffffefe 	.word	0xfffffefe

08001eb0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d102      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e014      	b.n	8001efa <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10b      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2250      	movs	r2, #80	; 0x50
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06c      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001efa:	f7ff fda9 	bl	8001a50 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f02:	e019      	b.n	8001f38 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	d016      	beq.n	8001f38 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_ADC_PollForConversion+0x70>
 8001f10:	f7ff fd9e 	bl	8001a50 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d20b      	bcs.n	8001f38 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	2204      	movs	r2, #4
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2250      	movs	r2, #80	; 0x50
 8001f30:	2100      	movs	r1, #0
 8001f32:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e04b      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0df      	beq.n	8001f04 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d12e      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d129      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2208      	movs	r2, #8
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d122      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	d110      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	210c      	movs	r1, #12
 8001f90:	438a      	bics	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_ADC_PollForConversion+0x128>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
 8001fa4:	e00b      	b.n	8001fbe <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	2220      	movs	r2, #32
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	220c      	movs	r2, #12
 8001fcc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	fffffefe 	.word	0xfffffefe

08001fdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2250      	movs	r2, #80	; 0x50
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x18>
 8002008:	2302      	movs	r3, #2
 800200a:	e06c      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xf2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2250      	movs	r2, #80	; 0x50
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2204      	movs	r2, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d00b      	beq.n	8002038 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	2220      	movs	r2, #32
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2250      	movs	r2, #80	; 0x50
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e056      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <HAL_ADC_ConfigChannel+0xfc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d028      	beq.n	8002094 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	035b      	lsls	r3, r3, #13
 800204e:	0b5a      	lsrs	r2, r3, #13
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	02db      	lsls	r3, r3, #11
 8002060:	4013      	ands	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0409      	lsls	r1, r1, #16
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002072:	200a      	movs	r0, #10
 8002074:	f000 f94a 	bl	800230c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d02b      	beq.n	80020dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	03c9      	lsls	r1, r1, #15
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e023      	b.n	80020dc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	035b      	lsls	r3, r3, #13
 80020a0:	0b5b      	lsrs	r3, r3, #13
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	02db      	lsls	r3, r3, #11
 80020b4:	4013      	ands	r3, r2
 80020b6:	d005      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 80020be:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_ADC_ConfigChannel+0x104>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d005      	beq.n	80020dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_ADC_ConfigChannel+0x100>)
 80020d6:	4909      	ldr	r1, [pc, #36]	; (80020fc <HAL_ADC_ConfigChannel+0x108>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2250      	movs	r2, #80	; 0x50
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	00001001 	.word	0x00001001
 80020f4:	40012708 	.word	0x40012708
 80020f8:	ff7fffff 	.word	0xff7fffff
 80020fc:	ffbfffff 	.word	0xffbfffff

08002100 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <ADC_Enable+0x2c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <ADC_Enable+0x2c>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <ADC_Enable+0x2e>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13f      	bne.n	80021b2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <ADC_Enable+0xbc>)
 800213a:	4013      	ands	r3, r2
 800213c:	d00d      	beq.n	800215a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2210      	movs	r2, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	2201      	movs	r2, #1
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e02c      	b.n	80021b4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 f8ce 	bl	800230c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002170:	f7ff fc6e 	bl	8001a50 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002178:	e014      	b.n	80021a4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800217a:	f7ff fc69 	bl	8001a50 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b0a      	cmp	r3, #10
 8002186:	d90d      	bls.n	80021a4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2210      	movs	r2, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	2201      	movs	r2, #1
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d1e3      	bne.n	800217a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	80000017 	.word	0x80000017

080021c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2203      	movs	r2, #3
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <ADC_Disable+0x2c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <ADC_Disable+0x2c>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <ADC_Disable+0x2e>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d041      	beq.n	8002276 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2205      	movs	r2, #5
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d110      	bne.n	8002222 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2102      	movs	r1, #2
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2203      	movs	r2, #3
 8002216:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002218:	f7ff fc1a 	bl	8001a50 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002220:	e022      	b.n	8002268 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	2210      	movs	r2, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	2201      	movs	r2, #1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e01c      	b.n	8002278 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800223e:	f7ff fc07 	bl	8001a50 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b0a      	cmp	r3, #10
 800224a:	d90d      	bls.n	8002268 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2210      	movs	r2, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	2201      	movs	r2, #1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e007      	b.n	8002278 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	2b01      	cmp	r3, #1
 8002274:	d0e3      	beq.n	800223e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2204      	movs	r2, #4
 8002294:	4013      	ands	r3, r2
 8002296:	d034      	beq.n	8002302 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2204      	movs	r2, #4
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d10d      	bne.n	80022c2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80022b0:	d107      	bne.n	80022c2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2110      	movs	r1, #16
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022c2:	f7ff fbc5 	bl	8001a50 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022ca:	e014      	b.n	80022f6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022cc:	f7ff fbc0 	bl	8001a50 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d90d      	bls.n	80022f6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	2210      	movs	r2, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	2201      	movs	r2, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e006      	b.n	8002304 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	d1e4      	bne.n	80022cc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}

0800230c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <ADC_DelayMicroSecond+0x38>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	490b      	ldr	r1, [pc, #44]	; (8002348 <ADC_DelayMicroSecond+0x3c>)
 800231a:	0018      	movs	r0, r3
 800231c:	f7fd ff06 	bl	800012c <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	001a      	movs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4353      	muls	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800232a:	e002      	b.n	8002332 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3b01      	subs	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f9      	bne.n	800232c <ADC_DelayMicroSecond+0x20>
  } 
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000020 	.word	0x20000020
 8002348:	000f4240 	.word	0x000f4240

0800234c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	0002      	movs	r2, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b7f      	cmp	r3, #127	; 0x7f
 8002360:	d932      	bls.n	80023c8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002362:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <NVIC_SetPriority+0xd4>)
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	0019      	movs	r1, r3
 800236a:	230f      	movs	r3, #15
 800236c:	400b      	ands	r3, r1
 800236e:	3b08      	subs	r3, #8
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3306      	adds	r3, #6
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	18d3      	adds	r3, r2, r3
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	1dfa      	adds	r2, r7, #7
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	0011      	movs	r1, r2
 8002382:	2203      	movs	r2, #3
 8002384:	400a      	ands	r2, r1
 8002386:	00d2      	lsls	r2, r2, #3
 8002388:	21ff      	movs	r1, #255	; 0xff
 800238a:	4091      	lsls	r1, r2
 800238c:	000a      	movs	r2, r1
 800238e:	43d2      	mvns	r2, r2
 8002390:	401a      	ands	r2, r3
 8002392:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	401a      	ands	r2, r3
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	0018      	movs	r0, r3
 80023a2:	2303      	movs	r3, #3
 80023a4:	4003      	ands	r3, r0
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023aa:	481d      	ldr	r0, [pc, #116]	; (8002420 <NVIC_SetPriority+0xd4>)
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	001c      	movs	r4, r3
 80023b2:	230f      	movs	r3, #15
 80023b4:	4023      	ands	r3, r4
 80023b6:	3b08      	subs	r3, #8
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	430a      	orrs	r2, r1
 80023bc:	3306      	adds	r3, #6
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	18c3      	adds	r3, r0, r3
 80023c2:	3304      	adds	r3, #4
 80023c4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023c6:	e027      	b.n	8002418 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c8:	4a16      	ldr	r2, [pc, #88]	; (8002424 <NVIC_SetPriority+0xd8>)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	33c0      	adds	r3, #192	; 0xc0
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	589b      	ldr	r3, [r3, r2]
 80023d8:	1dfa      	adds	r2, r7, #7
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	0011      	movs	r1, r2
 80023de:	2203      	movs	r2, #3
 80023e0:	400a      	ands	r2, r1
 80023e2:	00d2      	lsls	r2, r2, #3
 80023e4:	21ff      	movs	r1, #255	; 0xff
 80023e6:	4091      	lsls	r1, r2
 80023e8:	000a      	movs	r2, r1
 80023ea:	43d2      	mvns	r2, r2
 80023ec:	401a      	ands	r2, r3
 80023ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	019b      	lsls	r3, r3, #6
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	401a      	ands	r2, r3
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	2303      	movs	r3, #3
 8002400:	4003      	ands	r3, r0
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002406:	4807      	ldr	r0, [pc, #28]	; (8002424 <NVIC_SetPriority+0xd8>)
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	430a      	orrs	r2, r1
 8002412:	33c0      	adds	r3, #192	; 0xc0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	501a      	str	r2, [r3, r0]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b003      	add	sp, #12
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	e000e100 	.word	0xe000e100

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	045b      	lsls	r3, r3, #17
 8002438:	429a      	cmp	r2, r3
 800243a:	d301      	bcc.n	8002440 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243c:	2301      	movs	r3, #1
 800243e:	e010      	b.n	8002462 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <SysTick_Config+0x44>)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	3a01      	subs	r2, #1
 8002446:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002448:	2301      	movs	r3, #1
 800244a:	425b      	negs	r3, r3
 800244c:	2103      	movs	r1, #3
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff ff7c 	bl	800234c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Config+0x44>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <SysTick_Config+0x44>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	210f      	movs	r1, #15
 800247c:	187b      	adds	r3, r7, r1
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	187b      	adds	r3, r7, r1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b25b      	sxtb	r3, r3
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff ff5d 	bl	800234c <NVIC_SetPriority>
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ffbf 	bl	8002428 <SysTick_Config>
 80024aa:	0003      	movs	r3, r0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024ca:	e14f      	b.n	800276c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <HAL_GPIO_Init+0x30>
 80024e2:	e140      	b.n	8002766 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x40>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	58d3      	ldr	r3, [r2, r3]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2207      	movs	r2, #7
 8002506:	4013      	ands	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	409a      	lsls	r2, r3
 800250e:	0013      	movs	r3, r2
 8002510:	43da      	mvns	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2107      	movs	r1, #7
 8002520:	400b      	ands	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	6939      	ldr	r1, [r7, #16]
 800253a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00b      	beq.n	800255c <HAL_GPIO_Init+0xa8>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	2b11      	cmp	r3, #17
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	2201      	movs	r2, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	43da      	mvns	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	401a      	ands	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4013      	ands	r3, r2
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_Init+0x17c>
 800262e:	e09a      	b.n	8002766 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b54      	ldr	r3, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002636:	2101      	movs	r1, #1
 8002638:	430a      	orrs	r2, r1
 800263a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_GPIO_Init+0x2d4>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	589b      	ldr	r3, [r3, r2]
 8002648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2203      	movs	r2, #3
 800264e:	4013      	ands	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	409a      	lsls	r2, r3
 8002656:	0013      	movs	r3, r2
 8002658:	43da      	mvns	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	23a0      	movs	r3, #160	; 0xa0
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	429a      	cmp	r2, r3
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x1ea>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a47      	ldr	r2, [pc, #284]	; (800278c <HAL_GPIO_Init+0x2d8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x1e6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_GPIO_Init+0x2dc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x1e2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_GPIO_Init+0x2e0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x1de>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_GPIO_Init+0x2e4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x1da>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x1ec>
 800268e:	2306      	movs	r3, #6
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x1ec>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x1ec>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x1ec>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x1ec>
 800269e:	2300      	movs	r3, #0
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	2103      	movs	r1, #3
 80026a4:	400a      	ands	r2, r1
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x2d4>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_GPIO_Init+0x2e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	4013      	ands	r3, r2
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_GPIO_Init+0x2e8>)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_GPIO_Init+0x2e8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_GPIO_Init+0x2e8>)
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43da      	mvns	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	035b      	lsls	r3, r3, #13
 800272a:	4013      	ands	r3, r2
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_GPIO_Init+0x2e8>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43da      	mvns	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4013      	ands	r3, r2
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	40da      	lsrs	r2, r3
 8002774:	1e13      	subs	r3, r2, #0
 8002776:	d000      	beq.n	800277a <HAL_GPIO_Init+0x2c6>
 8002778:	e6a8      	b.n	80024cc <HAL_GPIO_Init+0x18>
  }
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	50000400 	.word	0x50000400
 8002790:	50000800 	.word	0x50000800
 8002794:	50000c00 	.word	0x50000c00
 8002798:	50001c00 	.word	0x50001c00
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	000a      	movs	r2, r1
 80027aa:	1cbb      	adds	r3, r7, #2
 80027ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	1cba      	adds	r2, r7, #2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	0008      	movs	r0, r1
 80027e4:	0011      	movs	r1, r2
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	1c02      	adds	r2, r0, #0
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	1c7b      	adds	r3, r7, #1
 80027ee:	1c0a      	adds	r2, r1, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80027f2:	1c7b      	adds	r3, r7, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	1cbb      	adds	r3, r7, #2
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002802:	e003      	b.n	800280c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 fbab 	bl	8002f7e <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002828:	4bce      	ldr	r3, [pc, #824]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	220c      	movs	r2, #12
 800282e:	4013      	ands	r3, r2
 8002830:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002832:	4bcc      	ldr	r3, [pc, #816]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	4013      	ands	r3, r2
 800283c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d100      	bne.n	800284a <HAL_RCC_OscConfig+0x36>
 8002848:	e07e      	b.n	8002948 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d007      	beq.n	8002860 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d112      	bne.n	800287c <HAL_RCC_OscConfig+0x68>
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	429a      	cmp	r2, r3
 800285e:	d10d      	bne.n	800287c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	4bc0      	ldr	r3, [pc, #768]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	4013      	ands	r3, r2
 800286a:	d100      	bne.n	800286e <HAL_RCC_OscConfig+0x5a>
 800286c:	e06b      	b.n	8002946 <HAL_RCC_OscConfig+0x132>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d167      	bne.n	8002946 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f000 fb81 	bl	8002f7e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	025b      	lsls	r3, r3, #9
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x84>
 8002888:	4bb6      	ldr	r3, [pc, #728]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4bb5      	ldr	r3, [pc, #724]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	0249      	lsls	r1, r1, #9
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e027      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	23a0      	movs	r3, #160	; 0xa0
 800289e:	02db      	lsls	r3, r3, #11
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d10e      	bne.n	80028c2 <HAL_RCC_OscConfig+0xae>
 80028a4:	4baf      	ldr	r3, [pc, #700]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4bae      	ldr	r3, [pc, #696]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	02c9      	lsls	r1, r1, #11
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4bac      	ldr	r3, [pc, #688]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4bab      	ldr	r3, [pc, #684]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0249      	lsls	r1, r1, #9
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e012      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028c2:	4ba8      	ldr	r3, [pc, #672]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4ba7      	ldr	r3, [pc, #668]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028c8:	49a7      	ldr	r1, [pc, #668]	; (8002b68 <HAL_RCC_OscConfig+0x354>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	025b      	lsls	r3, r3, #9
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4ba1      	ldr	r3, [pc, #644]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80028e2:	49a2      	ldr	r1, [pc, #648]	; (8002b6c <HAL_RCC_OscConfig+0x358>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f8ae 	bl	8001a50 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f8:	e009      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fa:	f7ff f8a9 	bl	8001a50 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d902      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	f000 fb38 	bl	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290e:	4b95      	ldr	r3, [pc, #596]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	029b      	lsls	r3, r3, #10
 8002916:	4013      	ands	r3, r2
 8002918:	d0ef      	beq.n	80028fa <HAL_RCC_OscConfig+0xe6>
 800291a:	e015      	b.n	8002948 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff f898 	bl	8001a50 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002926:	f7ff f893 	bl	8001a50 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e322      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002938:	4b8a      	ldr	r3, [pc, #552]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x112>
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002946:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2202      	movs	r2, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d100      	bne.n	8002954 <HAL_RCC_OscConfig+0x140>
 8002952:	e08a      	b.n	8002a6a <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d13d      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1ce>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13a      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2204      	movs	r2, #4
 8002972:	4013      	ands	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_RCC_OscConfig+0x16c>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2fe      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a7a      	ldr	r2, [pc, #488]	; (8002b70 <HAL_RCC_OscConfig+0x35c>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	4b74      	ldr	r3, [pc, #464]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2209      	movs	r2, #9
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a8:	f000 fc1e 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80029ac:	0001      	movs	r1, r0
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	220f      	movs	r2, #15
 80029b6:	4013      	ands	r3, r2
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x360>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	000a      	movs	r2, r1
 80029be:	40da      	lsrs	r2, r3
 80029c0:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x364>)
 80029c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80029c4:	2513      	movs	r5, #19
 80029c6:	197c      	adds	r4, r7, r5
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff f80b 	bl	80019e4 <HAL_InitTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80029d2:	002a      	movs	r2, r5
 80029d4:	18bb      	adds	r3, r7, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d046      	beq.n	8002a6a <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80029dc:	18bb      	adds	r3, r7, r2
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	e2cd      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d027      	beq.n	8002a38 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029e8:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2209      	movs	r2, #9
 80029ee:	4393      	bics	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7ff f829 	bl	8001a50 <HAL_GetTick>
 80029fe:	0003      	movs	r3, r0
 8002a00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7ff f824 	bl	8001a50 <HAL_GetTick>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e2b3      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a16:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d0f1      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_OscConfig+0x35c>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	e018      	b.n	8002a6a <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	438a      	bics	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff f804 	bl	8001a50 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7fe ffff 	bl	8001a50 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e28e      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a60:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	4013      	ands	r3, r2
 8002a68:	d1f1      	bne.n	8002a4e <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	4013      	ands	r3, r2
 8002a72:	d100      	bne.n	8002a76 <HAL_RCC_OscConfig+0x262>
 8002a74:	e09e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13f      	bne.n	8002afc <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x280>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e274      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a38      	ldr	r2, [pc, #224]	; (8002b7c <HAL_RCC_OscConfig+0x368>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	0a19      	lsrs	r1, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	061a      	lsls	r2, r3, #24
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	0b5b      	lsrs	r3, r3, #13
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0212      	lsls	r2, r2, #8
 8002ac8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	210f      	movs	r1, #15
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	4927      	ldr	r1, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x360>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x364>)
 8002adc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002ade:	2513      	movs	r5, #19
 8002ae0:	197c      	adds	r4, r7, r5
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe ff7e 	bl	80019e4 <HAL_InitTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002aec:	002a      	movs	r2, r5
 8002aee:	18bb      	adds	r3, r7, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d05e      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002af6:	18bb      	adds	r3, r7, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	e240      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03d      	beq.n	8002b80 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0049      	lsls	r1, r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe ff9d 	bl	8001a50 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1c:	f7fe ff98 	bl	8001a50 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e227      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_RCC_OscConfig+0x368>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	0a19      	lsrs	r1, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	061a      	lsls	r2, r3, #24
 8002b5c:	4b01      	ldr	r3, [pc, #4]	; (8002b64 <HAL_RCC_OscConfig+0x350>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	e027      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3a0>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	fffeffff 	.word	0xfffeffff
 8002b6c:	fffbffff 	.word	0xfffbffff
 8002b70:	ffffe0ff 	.word	0xffffe0ff
 8002b74:	08005464 	.word	0x08005464
 8002b78:	20000020 	.word	0x20000020
 8002b7c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b80:	4bbd      	ldr	r3, [pc, #756]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4bbc      	ldr	r3, [pc, #752]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002b86:	49bd      	ldr	r1, [pc, #756]	; (8002e7c <HAL_RCC_OscConfig+0x668>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ff60 	bl	8001a50 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b96:	f7fe ff5b 	bl	8001a50 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e1ea      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ba8:	4bb3      	ldr	r3, [pc, #716]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4bac      	ldr	r3, [pc, #688]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bca:	4bab      	ldr	r3, [pc, #684]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe ff3d 	bl	8001a50 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7fe ff38 	bl	8001a50 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1c7      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bee:	4ba2      	ldr	r3, [pc, #648]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f1      	beq.n	8002bdc <HAL_RCC_OscConfig+0x3c8>
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b9f      	ldr	r3, [pc, #636]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfe:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	438a      	bics	r2, r1
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe ff23 	bl	8001a50 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe ff1e 	bl	8001a50 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1ad      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c22:	4b95      	ldr	r3, [pc, #596]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d1f1      	bne.n	8002c10 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2204      	movs	r2, #4
 8002c32:	4013      	ands	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_RCC_OscConfig+0x424>
 8002c36:	e0ae      	b.n	8002d96 <HAL_RCC_OscConfig+0x582>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c38:	2027      	movs	r0, #39	; 0x27
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c40:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	055b      	lsls	r3, r3, #21
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCC_OscConfig+0x44c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	0549      	lsls	r1, r1, #21
 8002c56:	430a      	orrs	r2, r1
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c5a:	183b      	adds	r3, r7, r0
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x66c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d11a      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6c:	4b84      	ldr	r3, [pc, #528]	; (8002e80 <HAL_RCC_OscConfig+0x66c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b83      	ldr	r3, [pc, #524]	; (8002e80 <HAL_RCC_OscConfig+0x66c>)
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	0049      	lsls	r1, r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fee9 	bl	8001a50 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x482>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fee4 	bl	8001a50 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x482>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e173      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x66c>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x470>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0049      	lsls	r1, r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	651a      	str	r2, [r3, #80]	; 0x50
 8002cbc:	e031      	b.n	8002d22 <HAL_RCC_OscConfig+0x50e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4cc>
 8002cc6:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cca:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002ccc:	496b      	ldr	r1, [pc, #428]	; (8002e7c <HAL_RCC_OscConfig+0x668>)
 8002cce:	400a      	ands	r2, r1
 8002cd0:	651a      	str	r2, [r3, #80]	; 0x50
 8002cd2:	4b69      	ldr	r3, [pc, #420]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd6:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cd8:	496a      	ldr	r1, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x670>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50
 8002cde:	e020      	b.n	8002d22 <HAL_RCC_OscConfig+0x50e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf0:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	00c9      	lsls	r1, r1, #3
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0049      	lsls	r1, r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	651a      	str	r2, [r3, #80]	; 0x50
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x50e>
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0e:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d10:	495a      	ldr	r1, [pc, #360]	; (8002e7c <HAL_RCC_OscConfig+0x668>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	651a      	str	r2, [r3, #80]	; 0x50
 8002d16:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d1c:	4959      	ldr	r1, [pc, #356]	; (8002e84 <HAL_RCC_OscConfig+0x670>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d015      	beq.n	8002d56 <HAL_RCC_OscConfig+0x542>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fe91 	bl	8001a50 <HAL_GetTick>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d32:	e009      	b.n	8002d48 <HAL_RCC_OscConfig+0x534>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fe8c 	bl	8001a50 <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_OscConfig+0x674>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x534>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e11a      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d48:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0ef      	beq.n	8002d34 <HAL_RCC_OscConfig+0x520>
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fe7b 	bl	8001a50 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d5e:	e009      	b.n	8002d74 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fe76 	bl	8001a50 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	4a47      	ldr	r2, [pc, #284]	; (8002e88 <HAL_RCC_OscConfig+0x674>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e104      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d74:	4b40      	ldr	r3, [pc, #256]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d1ef      	bne.n	8002d60 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d80:	2327      	movs	r3, #39	; 0x27
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x582>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002d90:	493e      	ldr	r1, [pc, #248]	; (8002e8c <HAL_RCC_OscConfig+0x678>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d049      	beq.n	8002e34 <HAL_RCC_OscConfig+0x620>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d026      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5e2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db8:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x67c>)
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCC_OscConfig+0x67c>)
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	0189      	lsls	r1, r1, #6
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fe3f 	bl	8001a50 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x5d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd8:	f7fe fe3a 	bl	8001a50 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0c9      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f1      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x5c4>
 8002df4:	e01e      	b.n	8002e34 <HAL_RCC_OscConfig+0x620>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	438a      	bics	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_OscConfig+0x67c>)
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCC_OscConfig+0x67c>)
 8002e08:	4922      	ldr	r1, [pc, #136]	; (8002e94 <HAL_RCC_OscConfig+0x680>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe1f 	bl	8001a50 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e18:	f7fe fe1a 	bl	8001a50 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0a9      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d1f1      	bne.n	8002e18 <HAL_RCC_OscConfig+0x604>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
 8002e3c:	e09e      	b.n	8002f7c <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d100      	bne.n	8002e46 <HAL_RCC_OscConfig+0x632>
 8002e44:	e077      	b.n	8002f36 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d158      	bne.n	8002f00 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_OscConfig+0x664>)
 8002e54:	4910      	ldr	r1, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x684>)
 8002e56:	400a      	ands	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fdf9 	bl	8001a50 <HAL_GetTick>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fdf4 	bl	8001a50 <HAL_GetTick>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d914      	bls.n	8002e9c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e083      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	fffffeff 	.word	0xfffffeff
 8002e80:	40007000 	.word	0x40007000
 8002e84:	fffffbff 	.word	0xfffffbff
 8002e88:	00001388 	.word	0x00001388
 8002e8c:	efffffff 	.word	0xefffffff
 8002e90:	40010000 	.word	0x40010000
 8002e94:	ffffdfff 	.word	0xffffdfff
 8002e98:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e9c:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	049b      	lsls	r3, r3, #18
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d1dd      	bne.n	8002e64 <HAL_RCC_OscConfig+0x650>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_RCC_OscConfig+0x778>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0449      	lsls	r1, r1, #17
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fdbb 	bl	8001a50 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fdb6 	bl	8001a50 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e045      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	049b      	lsls	r3, r3, #18
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x6cc>
 8002efe:	e03d      	b.n	8002f7c <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002f06:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_RCC_OscConfig+0x77c>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fda0 	bl	8001a50 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fd9b 	bl	8001a50 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e02a      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	049b      	lsls	r3, r3, #18
 8002f30:	4013      	ands	r3, r2
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x702>
 8002f34:	e022      	b.n	8002f7c <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e01d      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	025b      	lsls	r3, r3, #9
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d10f      	bne.n	8002f78 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	23f0      	movs	r3, #240	; 0xf0
 8002f5c:	039b      	lsls	r3, r3, #14
 8002f5e:	401a      	ands	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b00a      	add	sp, #40	; 0x28
 8002f84:	bdb0      	pop	{r4, r5, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	ff02ffff 	.word	0xff02ffff
 8002f90:	feffffff 	.word	0xfeffffff

08002f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e10d      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d911      	bls.n	8002fda <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b85      	ldr	r3, [pc, #532]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc8:	4b80      	ldr	r3, [pc, #512]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0f4      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	22f0      	movs	r2, #240	; 0xf0
 8002fea:	4393      	bics	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d100      	bne.n	8003004 <HAL_RCC_ClockConfig+0x70>
 8003002:	e089      	b.n	8003118 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800300c:	4b70      	ldr	r3, [pc, #448]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	4013      	ands	r3, r2
 8003016:	d120      	bne.n	800305a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d3      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	049b      	lsls	r3, r3, #18
 800302c:	4013      	ands	r3, r2
 800302e:	d114      	bne.n	800305a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0c7      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800303c:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2204      	movs	r2, #4
 8003042:	4013      	ands	r3, r2
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0bc      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0b4      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2203      	movs	r2, #3
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306e:	f7fe fcef 	bl	8001a50 <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d111      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800307e:	e009      	b.n	8003094 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe fce6 	bl	8001a50 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e097      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003094:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	220c      	movs	r2, #12
 800309a:	4013      	ands	r3, r2
 800309c:	2b08      	cmp	r3, #8
 800309e:	d1ef      	bne.n	8003080 <HAL_RCC_ClockConfig+0xec>
 80030a0:	e03a      	b.n	8003118 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d111      	bne.n	80030ce <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030aa:	e009      	b.n	80030c0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fcd0 	bl	8001a50 <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e081      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c0:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	220c      	movs	r2, #12
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d1ef      	bne.n	80030ac <HAL_RCC_ClockConfig+0x118>
 80030cc:	e024      	b.n	8003118 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d11b      	bne.n	800310e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	e009      	b.n	80030ec <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fe fcba 	bl	8001a50 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e06b      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	220c      	movs	r2, #12
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d1ef      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x144>
 80030f8:	e00e      	b.n	8003118 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fa:	f7fe fca9 	bl	8001a50 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e05a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	220c      	movs	r2, #12
 8003114:	4013      	ands	r3, r2
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d211      	bcs.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	4393      	bics	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_ClockConfig+0x238>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e03c      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2204      	movs	r2, #4
 8003150:	4013      	ands	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2208      	movs	r2, #8
 800316e:	4013      	ands	r3, r2
 8003170:	d00a      	beq.n	8003188 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x248>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	00da      	lsls	r2, r3, #3
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003184:	430a      	orrs	r2, r1
 8003186:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003188:	f000 f82e 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 800318c:	0001      	movs	r1, r0
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_ClockConfig+0x23c>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	220f      	movs	r2, #15
 8003196:	4013      	ands	r3, r2
 8003198:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_RCC_ClockConfig+0x24c>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	000a      	movs	r2, r1
 800319e:	40da      	lsrs	r2, r3
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_ClockConfig+0x250>)
 80031a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80031a4:	250b      	movs	r5, #11
 80031a6:	197c      	adds	r4, r7, r5
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe fc1b 	bl	80019e4 <HAL_InitTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80031b2:	002a      	movs	r2, r5
 80031b4:	18bb      	adds	r3, r7, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80031bc:	18bb      	adds	r3, r7, r2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bdb0      	pop	{r4, r5, r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	00001388 	.word	0x00001388
 80031d8:	fffff8ff 	.word	0xfffff8ff
 80031dc:	ffffc7ff 	.word	0xffffc7ff
 80031e0:	08005464 	.word	0x08005464
 80031e4:	20000020 	.word	0x20000020

080031e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	220c      	movs	r2, #12
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d013      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3e>
 80031fe:	d85c      	bhi.n	80032ba <HAL_RCC_GetSysClockFreq+0xd2>
 8003200:	2b04      	cmp	r3, #4
 8003202:	d002      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x22>
 8003204:	2b08      	cmp	r3, #8
 8003206:	d00b      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x38>
 8003208:	e057      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800320a:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	4013      	ands	r3, r2
 8003212:	d002      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003216:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003218:	e05d      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800321c:	613b      	str	r3, [r7, #16]
      break;
 800321e:	e05a      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003220:	4b32      	ldr	r3, [pc, #200]	; (80032ec <HAL_RCC_GetSysClockFreq+0x104>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	e057      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0c9b      	lsrs	r3, r3, #18
 800322a:	220f      	movs	r2, #15
 800322c:	4013      	ands	r3, r2
 800322e:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	0d9b      	lsrs	r3, r3, #22
 8003238:	2203      	movs	r2, #3
 800323a:	4013      	ands	r3, r2
 800323c:	3301      	adds	r3, #1
 800323e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	025b      	lsls	r3, r3, #9
 8003248:	4013      	ands	r3, r2
 800324a:	d00f      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	000a      	movs	r2, r1
 8003250:	0152      	lsls	r2, r2, #5
 8003252:	1a52      	subs	r2, r2, r1
 8003254:	0193      	lsls	r3, r2, #6
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	185b      	adds	r3, r3, r1
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fc ff63 	bl	800012c <__udivsi3>
 8003266:	0003      	movs	r3, r0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e023      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d00f      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	000a      	movs	r2, r1
 800327a:	0152      	lsls	r2, r2, #5
 800327c:	1a52      	subs	r2, r2, r1
 800327e:	0193      	lsls	r3, r2, #6
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	185b      	adds	r3, r3, r1
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f7fc ff4e 	bl	800012c <__udivsi3>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e00e      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	000a      	movs	r2, r1
 800329a:	0152      	lsls	r2, r2, #5
 800329c:	1a52      	subs	r2, r2, r1
 800329e:	0193      	lsls	r3, r2, #6
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	185b      	adds	r3, r3, r1
 80032a6:	029b      	lsls	r3, r3, #10
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fc ff3e 	bl	800012c <__udivsi3>
 80032b0:	0003      	movs	r3, r0
 80032b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
      break;
 80032b8:	e00d      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0b5b      	lsrs	r3, r3, #13
 80032c0:	2207      	movs	r2, #7
 80032c2:	4013      	ands	r3, r2
 80032c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	0212      	lsls	r2, r2, #8
 80032ce:	409a      	lsls	r2, r3
 80032d0:	0013      	movs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
      break;
 80032d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032d6:	693b      	ldr	r3, [r7, #16]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b006      	add	sp, #24
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	003d0900 	.word	0x003d0900
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	08005474 	.word	0x08005474

080032f4 <led_ring_bit>:
 */

#include "main.h"
#include "control_hardware.h"

void led_ring_bit(uint8_t x) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	0002      	movs	r2, r0
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
  if(x) {
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <led_ring_bit+0x40>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 8003308:	23a0      	movs	r3, #160	; 0xa0
 800330a:	05db      	lsls	r3, r3, #23
 800330c:	2220      	movs	r2, #32
 800330e:	619a      	str	r2, [r3, #24]
    NS800;
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 800332a:	23a0      	movs	r3, #160	; 0xa0
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	2220      	movs	r2, #32
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
  else {
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
    NS400;
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
  }
}
 8003332:	e00c      	b.n	800334e <led_ring_bit+0x5a>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 8003334:	23a0      	movs	r3, #160	; 0xa0
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	2220      	movs	r2, #32
 800333a:	619a      	str	r2, [r3, #24]
    NS400;
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 8003346:	23a0      	movs	r3, #160	; 0xa0
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	2220      	movs	r2, #32
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <led_ring_update>:

void led_ring_update(uint32_t *data_24bit)
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b0cc      	sub	sp, #304	; 0x130
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint8_t data_bit[288];

    for(i=0; i<288; i++)
 8003360:	2397      	movs	r3, #151	; 0x97
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e02b      	b.n	80033c4 <led_ring_update+0x6c>
    {
        data_bit[i]=data_24bit[i/24]>>(23-(i%24))&1;
 800336c:	2597      	movs	r5, #151	; 0x97
 800336e:	006d      	lsls	r5, r5, #1
 8003370:	197b      	adds	r3, r7, r5
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	2118      	movs	r1, #24
 8003376:	0018      	movs	r0, r3
 8003378:	f7fc fed8 	bl	800012c <__udivsi3>
 800337c:	0003      	movs	r3, r0
 800337e:	b29b      	uxth	r3, r3
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	197b      	adds	r3, r7, r5
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	2118      	movs	r1, #24
 800338e:	0018      	movs	r0, r3
 8003390:	f7fc ff52 	bl	8000238 <__aeabi_uidivmod>
 8003394:	000b      	movs	r3, r1
 8003396:	b29b      	uxth	r3, r3
 8003398:	001a      	movs	r2, r3
 800339a:	2317      	movs	r3, #23
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	40dc      	lsrs	r4, r3
 80033a0:	0023      	movs	r3, r4
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	197b      	adds	r3, r7, r5
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	400a      	ands	r2, r1
 80033ac:	b2d1      	uxtb	r1, r2
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <led_ring_update+0xc8>)
 80033b0:	2098      	movs	r0, #152	; 0x98
 80033b2:	0040      	lsls	r0, r0, #1
 80033b4:	1812      	adds	r2, r2, r0
 80033b6:	19d2      	adds	r2, r2, r7
 80033b8:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<288; i++)
 80033ba:	197b      	adds	r3, r7, r5
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	197b      	adds	r3, r7, r5
 80033c0:	3201      	adds	r2, #1
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	2197      	movs	r1, #151	; 0x97
 80033c6:	0049      	lsls	r1, r1, #1
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	2390      	movs	r3, #144	; 0x90
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3cb      	bcc.n	800336c <led_ring_update+0x14>
    }

    for(i=0; i<288; i++)
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	2200      	movs	r2, #0
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	e011      	b.n	8003400 <led_ring_update+0xa8>
    {
        led_ring_bit(data_bit[i]);
 80033dc:	2497      	movs	r4, #151	; 0x97
 80033de:	0064      	lsls	r4, r4, #1
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <led_ring_update+0xc8>)
 80033e6:	2198      	movs	r1, #152	; 0x98
 80033e8:	0049      	lsls	r1, r1, #1
 80033ea:	1852      	adds	r2, r2, r1
 80033ec:	19d2      	adds	r2, r2, r7
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ff7f 	bl	80032f4 <led_ring_bit>
    for(i=0; i<288; i++)
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	3201      	adds	r2, #1
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	2397      	movs	r3, #151	; 0x97
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	2390      	movs	r3, #144	; 0x90
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	429a      	cmp	r2, r3
 800340e:	d3e5      	bcc.n	80033dc <led_ring_update+0x84>
    }

    HAL_Delay(1);
 8003410:	2001      	movs	r0, #1
 8003412:	f7fe fb27 	bl	8001a64 <HAL_Delay>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b04c      	add	sp, #304	; 0x130
 800341c:	bdb0      	pop	{r4, r5, r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	fffffedc 	.word	0xfffffedc

08003424 <led_ring_rgb>:

uint32_t led_ring_rgb(uint8_t red, uint8_t green, uint8_t blue)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	0004      	movs	r4, r0
 800342c:	0008      	movs	r0, r1
 800342e:	0011      	movs	r1, r2
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	1c22      	adds	r2, r4, #0
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	1dbb      	adds	r3, r7, #6
 8003438:	1c02      	adds	r2, r0, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	1d7b      	adds	r3, r7, #5
 800343e:	1c0a      	adds	r2, r1, #0
 8003440:	701a      	strb	r2, [r3, #0]
  uint32_t data_24bit;

    data_24bit = (uint32_t)blue;
 8003442:	1d7b      	adds	r3, r7, #5
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)red<<8;
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)green<<16;
 8003454:	1dbb      	adds	r3, r7, #6
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    return data_24bit;
 8003460:	68fb      	ldr	r3, [r7, #12]
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b005      	add	sp, #20
 8003468:	bd90      	pop	{r4, r7, pc}
	...

0800346c <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8003472:	003b      	movs	r3, r7
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003478:	003b      	movs	r3, r7
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	003b      	movs	r3, r7
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8003484:	003b      	movs	r3, r7
 8003486:	4a22      	ldr	r2, [pc, #136]	; (8003510 <LcdReadByte+0xa4>)
 8003488:	0019      	movs	r1, r3
 800348a:	0010      	movs	r0, r2
 800348c:	f7ff f812 	bl	80024b4 <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <LcdReadByte+0xa4>)
 8003492:	2201      	movs	r2, #1
 8003494:	2102      	movs	r1, #2
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff f99f 	bl	80027da <HAL_GPIO_WritePin>
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <LcdReadByte+0xa4>)
 800349e:	2201      	movs	r2, #1
 80034a0:	2108      	movs	r1, #8
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff f999 	bl	80027da <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 80034a8:	2517      	movs	r5, #23
 80034aa:	197c      	adds	r4, r7, r5
 80034ac:	4b18      	ldr	r3, [pc, #96]	; (8003510 <LcdReadByte+0xa4>)
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff f975 	bl	80027a0 <HAL_GPIO_ReadPin>
 80034b6:	0003      	movs	r3, r0
 80034b8:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <LcdReadByte+0xa4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	2108      	movs	r1, #8
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7ff f98a 	bl	80027da <HAL_GPIO_WritePin>
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <LcdReadByte+0xa4>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	2108      	movs	r1, #8
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff f984 	bl	80027da <HAL_GPIO_WritePin>
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <LcdReadByte+0xa4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	2108      	movs	r1, #8
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff f97e 	bl	80027da <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 80034de:	003b      	movs	r3, r7
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e4:	003b      	movs	r3, r7
 80034e6:	2201      	movs	r2, #1
 80034e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	003b      	movs	r3, r7
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	003b      	movs	r3, r7
 80034f2:	2203      	movs	r2, #3
 80034f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 80034f6:	003b      	movs	r3, r7
 80034f8:	4a05      	ldr	r2, [pc, #20]	; (8003510 <LcdReadByte+0xa4>)
 80034fa:	0019      	movs	r1, r3
 80034fc:	0010      	movs	r0, r2
 80034fe:	f7fe ffd9 	bl	80024b4 <HAL_GPIO_Init>
  
  return lcdBusy;
 8003502:	197b      	adds	r3, r7, r5
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bdb0      	pop	{r4, r5, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	50000400 	.word	0x50000400

08003514 <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	0002      	movs	r2, r0
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	481c      	ldr	r0, [pc, #112]	; (800359c <LcdSendNibble+0x88>)
 800352c:	001a      	movs	r2, r3
 800352e:	2110      	movs	r1, #16
 8003530:	f7ff f953 	bl	80027da <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2201      	movs	r2, #1
 800353e:	4013      	ands	r3, r2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4816      	ldr	r0, [pc, #88]	; (800359c <LcdSendNibble+0x88>)
 8003544:	001a      	movs	r2, r3
 8003546:	2120      	movs	r1, #32
 8003548:	f7ff f947 	bl	80027da <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 800354c:	1dfb      	adds	r3, r7, #7
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4810      	ldr	r0, [pc, #64]	; (800359c <LcdSendNibble+0x88>)
 800355c:	001a      	movs	r2, r3
 800355e:	2140      	movs	r1, #64	; 0x40
 8003560:	f7ff f93b 	bl	80027da <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 8003564:	1dfb      	adds	r3, r7, #7
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2201      	movs	r2, #1
 800356e:	4013      	ands	r3, r2
 8003570:	b2db      	uxtb	r3, r3
 8003572:	480a      	ldr	r0, [pc, #40]	; (800359c <LcdSendNibble+0x88>)
 8003574:	001a      	movs	r2, r3
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	f7ff f92f 	bl	80027da <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <LcdSendNibble+0x88>)
 800357e:	2201      	movs	r2, #1
 8003580:	2108      	movs	r1, #8
 8003582:	0018      	movs	r0, r3
 8003584:	f7ff f929 	bl	80027da <HAL_GPIO_WritePin>
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <LcdSendNibble+0x88>)
 800358a:	2200      	movs	r2, #0
 800358c:	2108      	movs	r1, #8
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff f923 	bl	80027da <HAL_GPIO_WritePin>
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}
 800359c:	50000400 	.word	0x50000400

080035a0 <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	0002      	movs	r2, r0
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	1c0a      	adds	r2, r1, #0
 80035b0:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <LcdSendByte+0x74>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	2101      	movs	r1, #1
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff f90e 	bl	80027da <HAL_GPIO_WritePin>
  while(LcdReadByte());
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	f7ff ff54 	bl	800346c <LcdReadByte>
 80035c4:	1e03      	subs	r3, r0, #0
 80035c6:	d1fb      	bne.n	80035c0 <LcdSendByte+0x20>
  LCD_RS(address);
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4811      	ldr	r0, [pc, #68]	; (8003614 <LcdSendByte+0x74>)
 80035ce:	001a      	movs	r2, r3
 80035d0:	2101      	movs	r1, #1
 80035d2:	f7ff f902 	bl	80027da <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <LcdSendByte+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	2102      	movs	r1, #2
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff f8fc 	bl	80027da <HAL_GPIO_WritePin>
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LcdSendByte+0x74>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	2108      	movs	r1, #8
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff f8f6 	bl	80027da <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 80035ee:	1dbb      	adds	r3, r7, #6
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff8c 	bl	8003514 <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 80035fc:	1dbb      	adds	r3, r7, #6
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	220f      	movs	r2, #15
 8003602:	4013      	ands	r3, r2
 8003604:	b2db      	uxtb	r3, r3
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff ff84 	bl	8003514 <LcdSendNibble>
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	50000400 	.word	0x50000400

08003618 <LcdInit>:

void LcdInit() {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <LcdInit+0x90>)
 8003620:	2200      	movs	r2, #0
 8003622:	2101      	movs	r1, #1
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff f8d8 	bl	80027da <HAL_GPIO_WritePin>
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <LcdInit+0x90>)
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff f8d2 	bl	80027da <HAL_GPIO_WritePin>
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <LcdInit+0x90>)
 8003638:	2200      	movs	r2, #0
 800363a:	2108      	movs	r1, #8
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff f8cc 	bl	80027da <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8003642:	200f      	movs	r0, #15
 8003644:	f7fe fa0e 	bl	8001a64 <HAL_Delay>
  for(i=0; i<3; i++) {
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e00a      	b.n	8003666 <LcdInit+0x4e>
    LcdSendNibble(3);
 8003650:	2003      	movs	r0, #3
 8003652:	f7ff ff5f 	bl	8003514 <LcdSendNibble>
    HAL_Delay(5);
 8003656:	2005      	movs	r0, #5
 8003658:	f7fe fa04 	bl	8001a64 <HAL_Delay>
  for(i=0; i<3; i++) {
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	3201      	adds	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d9f0      	bls.n	8003650 <LcdInit+0x38>
  }
  LcdSendNibble(2);
 800366e:	2002      	movs	r0, #2
 8003670:	f7ff ff50 	bl	8003514 <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e00c      	b.n	8003696 <LcdInit+0x7e>
 800367c:	1dfb      	adds	r3, r7, #7
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <LcdInit+0x94>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	0019      	movs	r1, r3
 8003686:	2000      	movs	r0, #0
 8003688:	f7ff ff8a 	bl	80035a0 <LcdSendByte>
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	3201      	adds	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d9ee      	bls.n	800367c <LcdInit+0x64>
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	50000400 	.word	0x50000400
 80036ac:	08005460 	.word	0x08005460

080036b0 <lcd_gotoxy>:

void lcd_gotoxy(uint8_t x, uint8_t y) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	0002      	movs	r2, r0
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	1dbb      	adds	r3, r7, #6
 80036be:	1c0a      	adds	r2, r1, #0
 80036c0:	701a      	strb	r2, [r3, #0]
  uint8_t address;
  if(y != 1) address = 0x40;
 80036c2:	1dbb      	adds	r3, r7, #6
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d004      	beq.n	80036d4 <lcd_gotoxy+0x24>
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e003      	b.n	80036dc <lcd_gotoxy+0x2c>
  else address = 0;
 80036d4:	230f      	movs	r3, #15
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  address += x-1;
 80036dc:	1dfa      	adds	r2, r7, #7
 80036de:	210f      	movs	r1, #15
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
  LcdSendByte(0, 0x80 | address);
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	4252      	negs	r2, r2
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	0019      	movs	r1, r3
 80036fe:	2000      	movs	r0, #0
 8003700:	f7ff ff4e 	bl	80035a0 <LcdSendByte>
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b004      	add	sp, #16
 800370a:	bd80      	pop	{r7, pc}

0800370c <lcd_putc>:

void lcd_putc(uint8_t c) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	0002      	movs	r2, r0
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	701a      	strb	r2, [r3, #0]
  if(c == '\f') {
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d107      	bne.n	8003730 <lcd_putc+0x24>
    LcdSendByte(0, 1);
 8003720:	2101      	movs	r1, #1
 8003722:	2000      	movs	r0, #0
 8003724:	f7ff ff3c 	bl	80035a0 <LcdSendByte>
    HAL_Delay(2);
 8003728:	2002      	movs	r0, #2
 800372a:	f7fe f99b 	bl	8001a64 <HAL_Delay>
  }
  else if(c == '\n') lcd_gotoxy(1, 2);
  else if(c == '\b') LcdSendByte(0, 0x10);
  else LcdSendByte(1, c);
}
 800372e:	e017      	b.n	8003760 <lcd_putc+0x54>
  else if(c == '\n') lcd_gotoxy(1, 2);
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b0a      	cmp	r3, #10
 8003736:	d104      	bne.n	8003742 <lcd_putc+0x36>
 8003738:	2102      	movs	r1, #2
 800373a:	2001      	movs	r0, #1
 800373c:	f7ff ffb8 	bl	80036b0 <lcd_gotoxy>
}
 8003740:	e00e      	b.n	8003760 <lcd_putc+0x54>
  else if(c == '\b') LcdSendByte(0, 0x10);
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d104      	bne.n	8003754 <lcd_putc+0x48>
 800374a:	2110      	movs	r1, #16
 800374c:	2000      	movs	r0, #0
 800374e:	f7ff ff27 	bl	80035a0 <LcdSendByte>
}
 8003752:	e005      	b.n	8003760 <lcd_putc+0x54>
  else LcdSendByte(1, c);
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	0019      	movs	r1, r3
 800375a:	2001      	movs	r0, #1
 800375c:	f7ff ff20 	bl	80035a0 <LcdSendByte>
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <lcd_puts>:

void lcd_puts(const char* str) {
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<strlen(str); i++) {
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e00d      	b.n	8003796 <lcd_puts+0x2e>
    lcd_putc(str[i]);
 800377a:	240f      	movs	r4, #15
 800377c:	193b      	adds	r3, r7, r4
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff ffc0 	bl	800370c <lcd_putc>
  for(i=0; i<strlen(str); i++) {
 800378c:	193b      	adds	r3, r7, r4
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	193b      	adds	r3, r7, r4
 8003792:	3201      	adds	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	230f      	movs	r3, #15
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781c      	ldrb	r4, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fc fcb2 	bl	8000108 <strlen>
 80037a4:	0003      	movs	r3, r0
 80037a6:	429c      	cmp	r4, r3
 80037a8:	d3e7      	bcc.n	800377a <lcd_puts+0x12>
  }
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b005      	add	sp, #20
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <lcd_cgram>:

void lcd_cgram(uint8_t room, uint8_t n) {
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	0002      	movs	r2, r0
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	1c0a      	adds	r2, r1, #0
 80037c4:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  const uint8_t data[2][8]={{0x04, 0x04, 0x0E, 0x0F, 0x1B, 0x19, 0x11, 0x0A}, // FIRE SYMBOL
 80037c6:	230c      	movs	r3, #12
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <lcd_cgram+0x80>)
 80037cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80037ce:	c313      	stmia	r3!, {r0, r1, r4}
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	601a      	str	r2, [r3, #0]
                            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}; //
  
  for(i=0; i<8; i++) {
 80037d4:	231f      	movs	r3, #31
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e020      	b.n	8003820 <lcd_cgram+0x6c>
    LcdSendByte(0, 0x40+i+(room*8));
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	241f      	movs	r4, #31
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3340      	adds	r3, #64	; 0x40
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	0019      	movs	r1, r3
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7ff fed2 	bl	80035a0 <LcdSendByte>
    LcdSendByte(1, data[n][i]);
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	193b      	adds	r3, r7, r4
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	210c      	movs	r1, #12
 8003806:	1879      	adds	r1, r7, r1
 8003808:	00d2      	lsls	r2, r2, #3
 800380a:	188a      	adds	r2, r1, r2
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	0019      	movs	r1, r3
 8003810:	2001      	movs	r0, #1
 8003812:	f7ff fec5 	bl	80035a0 <LcdSendByte>
  for(i=0; i<8; i++) {
 8003816:	193b      	adds	r3, r7, r4
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	193b      	adds	r3, r7, r4
 800381c:	3201      	adds	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	231f      	movs	r3, #31
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b07      	cmp	r3, #7
 8003828:	d9d9      	bls.n	80037de <lcd_cgram+0x2a>
  }
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b009      	add	sp, #36	; 0x24
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	08005380 	.word	0x08005380

08003838 <adc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adc(uint16_t *vr, uint16_t *cds) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start(&hadc);
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <adc+0x60>)
 8003844:	0018      	movs	r0, r3
 8003846:	f7fe fa9f 	bl	8001d88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 800384a:	23fa      	movs	r3, #250	; 0xfa
 800384c:	009a      	lsls	r2, r3, #2
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <adc+0x60>)
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f7fe fb2c 	bl	8001eb0 <HAL_ADC_PollForConversion>
	*cds = HAL_ADC_GetValue(&hadc);
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <adc+0x60>)
 800385a:	0018      	movs	r0, r3
 800385c:	f7fe fbbe 	bl	8001fdc <HAL_ADC_GetValue>
 8003860:	0003      	movs	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc, 1000);
 8003868:	23fa      	movs	r3, #250	; 0xfa
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <adc+0x60>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f7fe fb1d 	bl	8001eb0 <HAL_ADC_PollForConversion>
	*vr = HAL_ADC_GetValue(&hadc);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <adc+0x60>)
 8003878:	0018      	movs	r0, r3
 800387a:	f7fe fbaf 	bl	8001fdc <HAL_ADC_GetValue>
 800387e:	0003      	movs	r3, r0
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <adc+0x60>)
 8003888:	0018      	movs	r0, r3
 800388a:	f7fe fad1 	bl	8001e30 <HAL_ADC_Stop>
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200000a8 	.word	0x200000a8

0800389c <ledRing>:

void ledRing() {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 12; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	e00c      	b.n	80038c2 <ledRing+0x26>
		led_ring_data[0][i] = led_ring_rgb(0, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7ff fdb9 	bl	8003424 <led_ring_rgb>
 80038b2:	0001      	movs	r1, r0
 80038b4:	4bc2      	ldr	r3, [pc, #776]	; (8003bc0 <ledRing+0x324>)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3301      	adds	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	ddef      	ble.n	80038a8 <ledRing+0xc>
	for (i = 0; i < 12; i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e022      	b.n	8003914 <ledRing+0x78>
		if (i == 0 || i == 4 || i == 8)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <ledRing+0x44>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d002      	beq.n	80038e0 <ledRing+0x44>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d10b      	bne.n	80038f8 <ledRing+0x5c>
			led_ring_data[1][i] = led_ring_rgb(0, 0, 13);
 80038e0:	220d      	movs	r2, #13
 80038e2:	2100      	movs	r1, #0
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7ff fd9d 	bl	8003424 <led_ring_rgb>
 80038ea:	0001      	movs	r1, r0
 80038ec:	4bb4      	ldr	r3, [pc, #720]	; (8003bc0 <ledRing+0x324>)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	320c      	adds	r2, #12
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	50d1      	str	r1, [r2, r3]
 80038f6:	e00a      	b.n	800390e <ledRing+0x72>
		else
			led_ring_data[1][i] = led_ring_rgb(0, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7ff fd91 	bl	8003424 <led_ring_rgb>
 8003902:	0001      	movs	r1, r0
 8003904:	4bae      	ldr	r3, [pc, #696]	; (8003bc0 <ledRing+0x324>)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	320c      	adds	r2, #12
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3301      	adds	r3, #1
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b0b      	cmp	r3, #11
 8003918:	ddd9      	ble.n	80038ce <ledRing+0x32>
	for (i = 0; i < 12; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	e022      	b.n	8003966 <ledRing+0xca>
		if (i == 0 || i == 4 || i == 8)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <ledRing+0x96>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d002      	beq.n	8003932 <ledRing+0x96>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d10b      	bne.n	800394a <ledRing+0xae>
			led_ring_data[2][i] = led_ring_rgb(0, 0, 76);
 8003932:	224c      	movs	r2, #76	; 0x4c
 8003934:	2100      	movs	r1, #0
 8003936:	2000      	movs	r0, #0
 8003938:	f7ff fd74 	bl	8003424 <led_ring_rgb>
 800393c:	0001      	movs	r1, r0
 800393e:	4ba0      	ldr	r3, [pc, #640]	; (8003bc0 <ledRing+0x324>)
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	3218      	adds	r2, #24
 8003944:	0092      	lsls	r2, r2, #2
 8003946:	50d1      	str	r1, [r2, r3]
 8003948:	e00a      	b.n	8003960 <ledRing+0xc4>
		else
			led_ring_data[2][i] = led_ring_rgb(0, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2000      	movs	r0, #0
 8003950:	f7ff fd68 	bl	8003424 <led_ring_rgb>
 8003954:	0001      	movs	r1, r0
 8003956:	4b9a      	ldr	r3, [pc, #616]	; (8003bc0 <ledRing+0x324>)
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	3218      	adds	r2, #24
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3301      	adds	r3, #1
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b0b      	cmp	r3, #11
 800396a:	ddd9      	ble.n	8003920 <ledRing+0x84>
	for (i = 0; i < 12; i++)
 800396c:	2300      	movs	r3, #0
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e022      	b.n	80039b8 <ledRing+0x11c>
		if (i == 0 || i == 4 || i == 8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <ledRing+0xe8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <ledRing+0xe8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d10b      	bne.n	800399c <ledRing+0x100>
			led_ring_data[3][i] = led_ring_rgb(0, 0, 255);
 8003984:	22ff      	movs	r2, #255	; 0xff
 8003986:	2100      	movs	r1, #0
 8003988:	2000      	movs	r0, #0
 800398a:	f7ff fd4b 	bl	8003424 <led_ring_rgb>
 800398e:	0001      	movs	r1, r0
 8003990:	4b8b      	ldr	r3, [pc, #556]	; (8003bc0 <ledRing+0x324>)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	3224      	adds	r2, #36	; 0x24
 8003996:	0092      	lsls	r2, r2, #2
 8003998:	50d1      	str	r1, [r2, r3]
 800399a:	e00a      	b.n	80039b2 <ledRing+0x116>
		else
			led_ring_data[3][i] = led_ring_rgb(0, 0, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff fd3f 	bl	8003424 <led_ring_rgb>
 80039a6:	0001      	movs	r1, r0
 80039a8:	4b85      	ldr	r3, [pc, #532]	; (8003bc0 <ledRing+0x324>)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	3224      	adds	r2, #36	; 0x24
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b0b      	cmp	r3, #11
 80039bc:	ddd9      	ble.n	8003972 <ledRing+0xd6>
	for (i = 0; i < 12; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	e037      	b.n	8003a34 <ledRing+0x198>
		if (i == 0 || i == 4 || i == 8)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <ledRing+0x13a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d002      	beq.n	80039d6 <ledRing+0x13a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d10b      	bne.n	80039ee <ledRing+0x152>
			led_ring_data[4][i] = led_ring_rgb(0, 0, 255);
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	2100      	movs	r1, #0
 80039da:	2000      	movs	r0, #0
 80039dc:	f7ff fd22 	bl	8003424 <led_ring_rgb>
 80039e0:	0001      	movs	r1, r0
 80039e2:	4b77      	ldr	r3, [pc, #476]	; (8003bc0 <ledRing+0x324>)
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	3230      	adds	r2, #48	; 0x30
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	50d1      	str	r1, [r2, r3]
 80039ec:	e01f      	b.n	8003a2e <ledRing+0x192>
		else if (i == 2 || i == 6 || i == 10)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d005      	beq.n	8003a00 <ledRing+0x164>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d002      	beq.n	8003a00 <ledRing+0x164>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b0a      	cmp	r3, #10
 80039fe:	d10b      	bne.n	8003a18 <ledRing+0x17c>
			led_ring_data[4][i] = led_ring_rgb(0, 0, 13);
 8003a00:	220d      	movs	r2, #13
 8003a02:	2100      	movs	r1, #0
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7ff fd0d 	bl	8003424 <led_ring_rgb>
 8003a0a:	0001      	movs	r1, r0
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <ledRing+0x324>)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	3230      	adds	r2, #48	; 0x30
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	50d1      	str	r1, [r2, r3]
 8003a16:	e00a      	b.n	8003a2e <ledRing+0x192>
		else
			led_ring_data[4][i] = led_ring_rgb(0, 0, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7ff fd01 	bl	8003424 <led_ring_rgb>
 8003a22:	0001      	movs	r1, r0
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <ledRing+0x324>)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	3230      	adds	r2, #48	; 0x30
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3301      	adds	r3, #1
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b0b      	cmp	r3, #11
 8003a38:	ddc4      	ble.n	80039c4 <ledRing+0x128>
	for (i = 0; i < 12; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	e037      	b.n	8003ab0 <ledRing+0x214>
		if (i == 0 || i == 4 || i == 8)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <ledRing+0x1b6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d002      	beq.n	8003a52 <ledRing+0x1b6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d10b      	bne.n	8003a6a <ledRing+0x1ce>
			led_ring_data[5][i] = led_ring_rgb(0, 0, 255);
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	2100      	movs	r1, #0
 8003a56:	2000      	movs	r0, #0
 8003a58:	f7ff fce4 	bl	8003424 <led_ring_rgb>
 8003a5c:	0001      	movs	r1, r0
 8003a5e:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <ledRing+0x324>)
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	323c      	adds	r2, #60	; 0x3c
 8003a64:	0092      	lsls	r2, r2, #2
 8003a66:	50d1      	str	r1, [r2, r3]
 8003a68:	e01f      	b.n	8003aaa <ledRing+0x20e>
		else if (i == 2 || i == 6 || i == 10)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d005      	beq.n	8003a7c <ledRing+0x1e0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d002      	beq.n	8003a7c <ledRing+0x1e0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0a      	cmp	r3, #10
 8003a7a:	d10b      	bne.n	8003a94 <ledRing+0x1f8>
			led_ring_data[5][i] = led_ring_rgb(0, 0, 76);
 8003a7c:	224c      	movs	r2, #76	; 0x4c
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7ff fccf 	bl	8003424 <led_ring_rgb>
 8003a86:	0001      	movs	r1, r0
 8003a88:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <ledRing+0x324>)
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	323c      	adds	r2, #60	; 0x3c
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	50d1      	str	r1, [r2, r3]
 8003a92:	e00a      	b.n	8003aaa <ledRing+0x20e>
		else
			led_ring_data[5][i] = led_ring_rgb(0, 0, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7ff fcc3 	bl	8003424 <led_ring_rgb>
 8003a9e:	0001      	movs	r1, r0
 8003aa0:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <ledRing+0x324>)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	323c      	adds	r2, #60	; 0x3c
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3301      	adds	r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b0b      	cmp	r3, #11
 8003ab4:	ddc4      	ble.n	8003a40 <ledRing+0x1a4>
	for (i = 0; i < 12; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	e02b      	b.n	8003b14 <ledRing+0x278>
		if (i == 0 || i == 2 || i == 4 || i == 6 || i == 8 || i == 10)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00e      	beq.n	8003ae0 <ledRing+0x244>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d00b      	beq.n	8003ae0 <ledRing+0x244>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d008      	beq.n	8003ae0 <ledRing+0x244>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d005      	beq.n	8003ae0 <ledRing+0x244>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d002      	beq.n	8003ae0 <ledRing+0x244>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d10b      	bne.n	8003af8 <ledRing+0x25c>
			led_ring_data[6][i] = led_ring_rgb(0, 0, 255);
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7ff fc9d 	bl	8003424 <led_ring_rgb>
 8003aea:	0001      	movs	r1, r0
 8003aec:	4b34      	ldr	r3, [pc, #208]	; (8003bc0 <ledRing+0x324>)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	3248      	adds	r2, #72	; 0x48
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	50d1      	str	r1, [r2, r3]
 8003af6:	e00a      	b.n	8003b0e <ledRing+0x272>
		else
			led_ring_data[6][i] = led_ring_rgb(0, 0, 0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2100      	movs	r1, #0
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff fc91 	bl	8003424 <led_ring_rgb>
 8003b02:	0001      	movs	r1, r0
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <ledRing+0x324>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	3248      	adds	r2, #72	; 0x48
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3301      	adds	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b0b      	cmp	r3, #11
 8003b18:	ddd0      	ble.n	8003abc <ledRing+0x220>
	for (i = 0; i < 12; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e02b      	b.n	8003b78 <ledRing+0x2dc>
		if (i == 0 || i == 2 || i == 4 || i == 6 || i == 8 || i == 10)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <ledRing+0x2a8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d00b      	beq.n	8003b44 <ledRing+0x2a8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d008      	beq.n	8003b44 <ledRing+0x2a8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d005      	beq.n	8003b44 <ledRing+0x2a8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d002      	beq.n	8003b44 <ledRing+0x2a8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0a      	cmp	r3, #10
 8003b42:	d10b      	bne.n	8003b5c <ledRing+0x2c0>
			led_ring_data[7][i] = led_ring_rgb(0, 0, 255);
 8003b44:	22ff      	movs	r2, #255	; 0xff
 8003b46:	2100      	movs	r1, #0
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7ff fc6b 	bl	8003424 <led_ring_rgb>
 8003b4e:	0001      	movs	r1, r0
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <ledRing+0x324>)
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	3254      	adds	r2, #84	; 0x54
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	50d1      	str	r1, [r2, r3]
 8003b5a:	e00a      	b.n	8003b72 <ledRing+0x2d6>
		else
			led_ring_data[7][i] = led_ring_rgb(0, 0, 13);
 8003b5c:	220d      	movs	r2, #13
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7ff fc5f 	bl	8003424 <led_ring_rgb>
 8003b66:	0001      	movs	r1, r0
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <ledRing+0x324>)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	3254      	adds	r2, #84	; 0x54
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3301      	adds	r3, #1
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b0b      	cmp	r3, #11
 8003b7c:	ddd0      	ble.n	8003b20 <ledRing+0x284>
	for (i = 0; i < 12; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	e02d      	b.n	8003be0 <ledRing+0x344>
		if (i == 0 || i == 2 || i == 4 || i == 6 || i == 8 || i == 10)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <ledRing+0x30c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <ledRing+0x30c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d008      	beq.n	8003ba8 <ledRing+0x30c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d005      	beq.n	8003ba8 <ledRing+0x30c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d002      	beq.n	8003ba8 <ledRing+0x30c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0a      	cmp	r3, #10
 8003ba6:	d10d      	bne.n	8003bc4 <ledRing+0x328>
			led_ring_data[8][i] = led_ring_rgb(0, 0, 255);
 8003ba8:	22ff      	movs	r2, #255	; 0xff
 8003baa:	2100      	movs	r1, #0
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff fc39 	bl	8003424 <led_ring_rgb>
 8003bb2:	0001      	movs	r1, r0
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <ledRing+0x324>)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	3260      	adds	r2, #96	; 0x60
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	50d1      	str	r1, [r2, r3]
 8003bbe:	e00c      	b.n	8003bda <ledRing+0x33e>
 8003bc0:	20000138 	.word	0x20000138
		else
			led_ring_data[8][i] = led_ring_rgb(0, 0, 76);
 8003bc4:	224c      	movs	r2, #76	; 0x4c
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff fc2b 	bl	8003424 <led_ring_rgb>
 8003bce:	0001      	movs	r1, r0
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <ledRing+0x37c>)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	3260      	adds	r2, #96	; 0x60
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b0b      	cmp	r3, #11
 8003be4:	ddce      	ble.n	8003b84 <ledRing+0x2e8>
	for (i = 0; i < 12; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e00d      	b.n	8003c08 <ledRing+0x36c>
		led_ring_data[9][i] = led_ring_rgb(0, 0, 255);
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff fc17 	bl	8003424 <led_ring_rgb>
 8003bf6:	0001      	movs	r1, r0
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <ledRing+0x37c>)
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	326c      	adds	r2, #108	; 0x6c
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 12; i++)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3301      	adds	r3, #1
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b0b      	cmp	r3, #11
 8003c0c:	ddee      	ble.n	8003bec <ledRing+0x350>
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000138 	.word	0x20000138

08003c1c <lcd_print>:

void lcd_print() {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af02      	add	r7, sp, #8
	sprintf(bf, "TEMP:%03d%cC  %c:%d", temp, 0xDF, 1, power);
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <lcd_print+0x5c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <lcd_print+0x60>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4915      	ldr	r1, [pc, #84]	; (8003c80 <lcd_print+0x64>)
 8003c2c:	4815      	ldr	r0, [pc, #84]	; (8003c84 <lcd_print+0x68>)
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	2301      	movs	r3, #1
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	23df      	movs	r3, #223	; 0xdf
 8003c36:	f000 ff2d 	bl	8004a94 <siprintf>
	lcd_gotoxy(0, 1);
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f7ff fd37 	bl	80036b0 <lcd_gotoxy>
	lcd_puts(bf);
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <lcd_print+0x68>)
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7ff fd8f 	bl	8003768 <lcd_puts>
	sprintf(bf, "[%.9s][%03d]", uistat[uNum], altemp);
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <lcd_print+0x6c>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <lcd_print+0x70>)
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	58d2      	ldr	r2, [r2, r3]
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <lcd_print+0x74>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	490e      	ldr	r1, [pc, #56]	; (8003c94 <lcd_print+0x78>)
 8003c5a:	480a      	ldr	r0, [pc, #40]	; (8003c84 <lcd_print+0x68>)
 8003c5c:	f000 ff1a 	bl	8004a94 <siprintf>
	lcd_gotoxy(0, 0);
 8003c60:	2100      	movs	r1, #0
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7ff fd24 	bl	80036b0 <lcd_gotoxy>
	lcd_puts(bf);
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <lcd_print+0x68>)
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7ff fd7c 	bl	8003768 <lcd_puts>
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	20000104 	.word	0x20000104
 8003c80:	080053d8 	.word	0x080053d8
 8003c84:	20000124 	.word	0x20000124
 8003c88:	2000010c 	.word	0x2000010c
 8003c8c:	20000008 	.word	0x20000008
 8003c90:	20000004 	.word	0x20000004
 8003c94:	080053ec 	.word	0x080053ec

08003c98 <gasOn>:

void gasOn(uint16_t vr, uint16_t cds) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	1dbb      	adds	r3, r7, #6
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	1c0a      	adds	r2, r1, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
	if (cds > 3000) {
 8003caa:	1d3b      	adds	r3, r7, #4
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <gasOn+0x6c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d91d      	bls.n	8003cf0 <gasOn+0x58>
		uNum = 1;
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <gasOn+0x70>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
		powerSet = vr / 511.875 + 1;
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7fd fcd8 	bl	8001674 <__aeabi_i2d>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <gasOn+0x74>)
 8003cc8:	f7fc fe16 	bl	80008f8 <__aeabi_ddiv>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	000b      	movs	r3, r1
 8003cd0:	0010      	movs	r0, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <gasOn+0x78>)
 8003cd8:	f7fc fad2 	bl	8000280 <__aeabi_dadd>
 8003cdc:	0002      	movs	r2, r0
 8003cde:	000b      	movs	r3, r1
 8003ce0:	0010      	movs	r0, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	f7fd fc90 	bl	8001608 <__aeabi_d2iz>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <gasOn+0x7c>)
 8003cec:	601a      	str	r2, [r3, #0]
	} else {
		uNum = 2;
		powerSet = 1;
	}
}
 8003cee:	e005      	b.n	8003cfc <gasOn+0x64>
		uNum = 2;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <gasOn+0x70>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	601a      	str	r2, [r3, #0]
		powerSet = 1;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <gasOn+0x7c>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00000bb8 	.word	0x00000bb8
 8003d08:	2000010c 	.word	0x2000010c
 8003d0c:	407ffe00 	.word	0x407ffe00
 8003d10:	3ff00000 	.word	0x3ff00000
 8003d14:	20000108 	.word	0x20000108

08003d18 <ledClear>:

void ledClear() {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	LED(1, 0);
 8003d1c:	23a0      	movs	r3, #160	; 0xa0
 8003d1e:	05db      	lsls	r3, r3, #23
 8003d20:	2201      	movs	r2, #1
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fe fd58 	bl	80027da <HAL_GPIO_WritePin>
	LED(2, 0);
 8003d2a:	23a0      	movs	r3, #160	; 0xa0
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7fe fd51 	bl	80027da <HAL_GPIO_WritePin>
	LED(3, 0);
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	0059      	lsls	r1, r3, #1
 8003d3c:	23a0      	movs	r3, #160	; 0xa0
 8003d3e:	05db      	lsls	r3, r3, #23
 8003d40:	2201      	movs	r2, #1
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fe fd49 	bl	80027da <HAL_GPIO_WritePin>
	LED(4, 0);
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	0099      	lsls	r1, r3, #2
 8003d4c:	23a0      	movs	r3, #160	; 0xa0
 8003d4e:	05db      	lsls	r3, r3, #23
 8003d50:	2201      	movs	r2, #1
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fe fd41 	bl	80027da <HAL_GPIO_WritePin>
	LED(5, 0);
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	00d9      	lsls	r1, r3, #3
 8003d5c:	23a0      	movs	r3, #160	; 0xa0
 8003d5e:	05db      	lsls	r3, r3, #23
 8003d60:	2201      	movs	r2, #1
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fe fd39 	bl	80027da <HAL_GPIO_WritePin>
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <ledControl>:

void ledControl(uint16_t x) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	0002      	movs	r2, r0
 8003d78:	1dbb      	adds	r3, r7, #6
 8003d7a:	801a      	strh	r2, [r3, #0]
	ledClear();
 8003d7c:	f7ff ffcc 	bl	8003d18 <ledClear>
	if (x == 1) {
 8003d80:	1dbb      	adds	r3, r7, #6
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10a      	bne.n	8003d9e <ledControl+0x2e>
		LED(1, 1);
 8003d88:	23a0      	movs	r3, #160	; 0xa0
 8003d8a:	05db      	lsls	r3, r3, #23
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe fd22 	bl	80027da <HAL_GPIO_WritePin>
		asetTemp = 80;
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <ledControl+0xb4>)
 8003d98:	2250      	movs	r2, #80	; 0x50
 8003d9a:	601a      	str	r2, [r3, #0]
		asetTemp = 180;
	} else if (x == 5) {
		LED(5, 1);
		asetTemp = 220;
	}
}
 8003d9c:	e03d      	b.n	8003e1a <ledControl+0xaa>
	} else if (x == 2) {
 8003d9e:	1dbb      	adds	r3, r7, #6
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d10a      	bne.n	8003dbc <ledControl+0x4c>
		LED(2, 1);
 8003da6:	23a0      	movs	r3, #160	; 0xa0
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	2200      	movs	r2, #0
 8003dac:	2180      	movs	r1, #128	; 0x80
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fe fd13 	bl	80027da <HAL_GPIO_WritePin>
		asetTemp = 100;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <ledControl+0xb4>)
 8003db6:	2264      	movs	r2, #100	; 0x64
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	e02e      	b.n	8003e1a <ledControl+0xaa>
	} else if (x == 3) {
 8003dbc:	1dbb      	adds	r3, r7, #6
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d10b      	bne.n	8003ddc <ledControl+0x6c>
		LED(3, 1);
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	0059      	lsls	r1, r3, #1
 8003dc8:	23a0      	movs	r3, #160	; 0xa0
 8003dca:	05db      	lsls	r3, r3, #23
 8003dcc:	2200      	movs	r2, #0
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7fe fd03 	bl	80027da <HAL_GPIO_WritePin>
		asetTemp = 140;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <ledControl+0xb4>)
 8003dd6:	228c      	movs	r2, #140	; 0x8c
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	e01e      	b.n	8003e1a <ledControl+0xaa>
	} else if (x == 4) {
 8003ddc:	1dbb      	adds	r3, r7, #6
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d10b      	bne.n	8003dfc <ledControl+0x8c>
		LED(4, 1);
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	23a0      	movs	r3, #160	; 0xa0
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	2200      	movs	r2, #0
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7fe fcf3 	bl	80027da <HAL_GPIO_WritePin>
		asetTemp = 180;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <ledControl+0xb4>)
 8003df6:	22b4      	movs	r2, #180	; 0xb4
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	e00e      	b.n	8003e1a <ledControl+0xaa>
	} else if (x == 5) {
 8003dfc:	1dbb      	adds	r3, r7, #6
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d10a      	bne.n	8003e1a <ledControl+0xaa>
		LED(5, 1);
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	00d9      	lsls	r1, r3, #3
 8003e08:	23a0      	movs	r3, #160	; 0xa0
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fe fce3 	bl	80027da <HAL_GPIO_WritePin>
		asetTemp = 220;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <ledControl+0xb4>)
 8003e16:	22dc      	movs	r2, #220	; 0xdc
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	20000120 	.word	0x20000120

08003e28 <autoOn>:

void autoOn(uint16_t vr, uint16_t cds) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	0002      	movs	r2, r0
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	1c0a      	adds	r2, r1, #0
 8003e38:	801a      	strh	r2, [r3, #0]
	int i = asetTemp - temp;
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <autoOn+0x94>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <autoOn+0x98>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	60fb      	str	r3, [r7, #12]
	if (cds > 3000) {
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <autoOn+0x9c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d92b      	bls.n	8003ea8 <autoOn+0x80>
		ledControl((vr / 1023.75 + 1));
 8003e50:	1dbb      	adds	r3, r7, #6
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fd fc0d 	bl	8001674 <__aeabi_i2d>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <autoOn+0xa0>)
 8003e5e:	f7fc fd4b 	bl	80008f8 <__aeabi_ddiv>
 8003e62:	0002      	movs	r2, r0
 8003e64:	000b      	movs	r3, r1
 8003e66:	0010      	movs	r0, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <autoOn+0xa4>)
 8003e6e:	f7fc fa07 	bl	8000280 <__aeabi_dadd>
 8003e72:	0002      	movs	r2, r0
 8003e74:	000b      	movs	r3, r1
 8003e76:	0010      	movs	r0, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	f7fc f9e3 	bl	8000244 <__aeabi_d2uiz>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff ff74 	bl	8003d70 <ledControl>
		uNum = 4;
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <autoOn+0xa8>)
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	601a      	str	r2, [r3, #0]
		if (i < -1)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	da02      	bge.n	8003e9a <autoOn+0x72>
			powerSet = 1;
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <autoOn+0xac>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
		if (1 < i)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	dd09      	ble.n	8003eb4 <autoOn+0x8c>
			powerSet = 9;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <autoOn+0xac>)
 8003ea2:	2209      	movs	r2, #9
 8003ea4:	601a      	str	r2, [r3, #0]
	} else {
		uNum = 2;
		powerSet = 1;
	}
}
 8003ea6:	e005      	b.n	8003eb4 <autoOn+0x8c>
		uNum = 2;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <autoOn+0xa8>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	601a      	str	r2, [r3, #0]
		powerSet = 1;
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <autoOn+0xac>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000120 	.word	0x20000120
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	00000bb8 	.word	0x00000bb8
 8003ec8:	408ffe00 	.word	0x408ffe00
 8003ecc:	3ff00000 	.word	0x3ff00000
 8003ed0:	2000010c 	.word	0x2000010c
 8003ed4:	20000108 	.word	0x20000108

08003ed8 <safemode>:

void safemode() {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	uNum = 5;
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <safemode+0x18>)
 8003ede:	2205      	movs	r2, #5
 8003ee0:	601a      	str	r2, [r3, #0]
	powerSet = 0;
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <safemode+0x1c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	2000010c 	.word	0x2000010c
 8003ef4:	20000108 	.word	0x20000108

08003ef8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int buzflag = 0, swFlag = 0, alflag = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
	uint16_t vr, cds;
	uint32_t last = NOW;
 8003f0a:	f7fd fda1 	bl	8001a50 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	61bb      	str	r3, [r7, #24]
	uint32_t plast = NOW;
 8003f12:	f7fd fd9d 	bl	8001a50 <HAL_GetTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	617b      	str	r3, [r7, #20]
	uint32_t tdownlast = NOW;
 8003f1a:	f7fd fd99 	bl	8001a50 <HAL_GetTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	613b      	str	r3, [r7, #16]
	uint32_t tuplast = NOW;
 8003f22:	f7fd fd95 	bl	8001a50 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	60fb      	str	r3, [r7, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f2a:	f7fd fd3b 	bl	80019a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003f2e:	f000 fb01 	bl	8004534 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f32:	f000 fbcd 	bl	80046d0 <MX_GPIO_Init>
	MX_ADC_Init();
 8003f36:	f000 fb59 	bl	80045ec <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	LcdInit();
 8003f3a:	f7ff fb6d 	bl	8003618 <LcdInit>
	ledRing();
 8003f3e:	f7ff fcad 	bl	800389c <ledRing>
	lcd_cgram(1, 0);
 8003f42:	2100      	movs	r1, #0
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fc35 	bl	80037b4 <lcd_cgram>
	lcd_puts("\fSmart Gas Range\n              01");
 8003f4a:	4ba5      	ldr	r3, [pc, #660]	; (80041e0 <main+0x2e8>)
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff fc0b 	bl	8003768 <lcd_puts>
	HAL_Delay(2000);
 8003f52:	23fa      	movs	r3, #250	; 0xfa
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fd fd84 	bl	8001a64 <HAL_Delay>
	lcd_print();
 8003f5c:	f7ff fe5e 	bl	8003c1c <lcd_print>
	ledRing();
 8003f60:	f7ff fc9c 	bl	800389c <ledRing>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (gasflag) {
 8003f64:	4b9f      	ldr	r3, [pc, #636]	; (80041e4 <main+0x2ec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01c      	beq.n	8003fa6 <main+0xae>
			if (safeflag)
 8003f6c:	4b9e      	ldr	r3, [pc, #632]	; (80041e8 <main+0x2f0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <main+0x82>
				safemode();
 8003f74:	f7ff ffb0 	bl	8003ed8 <safemode>
 8003f78:	e01b      	b.n	8003fb2 <main+0xba>
			else if (autoFlag)
 8003f7a:	4b9c      	ldr	r3, [pc, #624]	; (80041ec <main+0x2f4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <main+0x9c>
				autoOn(vr, cds);
 8003f82:	1cbb      	adds	r3, r7, #2
 8003f84:	881a      	ldrh	r2, [r3, #0]
 8003f86:	003b      	movs	r3, r7
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	0010      	movs	r0, r2
 8003f8e:	f7ff ff4b 	bl	8003e28 <autoOn>
 8003f92:	e00e      	b.n	8003fb2 <main+0xba>
			else
				gasOn(vr, cds);
 8003f94:	1cbb      	adds	r3, r7, #2
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	003b      	movs	r3, r7
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	0010      	movs	r0, r2
 8003fa0:	f7ff fe7a 	bl	8003c98 <gasOn>
 8003fa4:	e005      	b.n	8003fb2 <main+0xba>
		} else {
			uNum = 0;
 8003fa6:	4b92      	ldr	r3, [pc, #584]	; (80041f0 <main+0x2f8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
			powerSet = 0;
 8003fac:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <main+0x2fc>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
		}
		if (highflag) {
 8003fb2:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <main+0x300>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d062      	beq.n	8004080 <main+0x188>
			uNum = 3;
 8003fba:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <main+0x2f8>)
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	601a      	str	r2, [r3, #0]
			powerSet = 0;
 8003fc0:	4b8c      	ldr	r3, [pc, #560]	; (80041f4 <main+0x2fc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
			if (!buzflag) {
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <main+0xe0>
				buzlast = NOW;
 8003fcc:	f7fd fd40 	bl	8001a50 <HAL_GetTick>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	60bb      	str	r3, [r7, #8]
				buzflag = 1;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if ((NOW - buzlast >= 100 && NOW - buzlast <= 200)
 8003fd8:	f7fd fd3a 	bl	8001a50 <HAL_GetTick>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b63      	cmp	r3, #99	; 0x63
 8003fe4:	d906      	bls.n	8003ff4 <main+0xfc>
 8003fe6:	f7fd fd33 	bl	8001a50 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2bc8      	cmp	r3, #200	; 0xc8
 8003ff2:	d923      	bls.n	800403c <main+0x144>
					|| (NOW - buzlast >= 300 && NOW - buzlast <= 400)
 8003ff4:	f7fd fd2c 	bl	8001a50 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad2      	subs	r2, r2, r3
 8003ffe:	2396      	movs	r3, #150	; 0x96
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	429a      	cmp	r2, r3
 8004004:	d308      	bcc.n	8004018 <main+0x120>
 8004006:	f7fd fd23 	bl	8001a50 <HAL_GetTick>
 800400a:	0002      	movs	r2, r0
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	23c8      	movs	r3, #200	; 0xc8
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	429a      	cmp	r2, r3
 8004016:	d911      	bls.n	800403c <main+0x144>
					|| (NOW - buzlast >= 500 && NOW - buzlast <= 600)) {
 8004018:	f7fd fd1a 	bl	8001a50 <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad2      	subs	r2, r2, r3
 8004022:	23fa      	movs	r3, #250	; 0xfa
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	429a      	cmp	r2, r3
 8004028:	d311      	bcc.n	800404e <main+0x156>
 800402a:	f7fd fd11 	bl	8001a50 <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	2396      	movs	r3, #150	; 0x96
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d808      	bhi.n	800404e <main+0x156>
				BUZZER(1);
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	0219      	lsls	r1, r3, #8
 8004040:	23a0      	movs	r3, #160	; 0xa0
 8004042:	05db      	lsls	r3, r3, #23
 8004044:	2201      	movs	r2, #1
 8004046:	0018      	movs	r0, r3
 8004048:	f7fe fbc7 	bl	80027da <HAL_GPIO_WritePin>
 800404c:	e007      	b.n	800405e <main+0x166>
			} else {
				BUZZER(0);
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	0219      	lsls	r1, r3, #8
 8004052:	23a0      	movs	r3, #160	; 0xa0
 8004054:	05db      	lsls	r3, r3, #23
 8004056:	2200      	movs	r2, #0
 8004058:	0018      	movs	r0, r3
 800405a:	f7fe fbbe 	bl	80027da <HAL_GPIO_WritePin>
			}
			if (temp < 150 && !SW1) {
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <main+0x304>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b95      	cmp	r3, #149	; 0x95
 8004064:	dc0c      	bgt.n	8004080 <main+0x188>
 8004066:	23a0      	movs	r3, #160	; 0xa0
 8004068:	05db      	lsls	r3, r3, #23
 800406a:	2104      	movs	r1, #4
 800406c:	0018      	movs	r0, r3
 800406e:	f7fe fb97 	bl	80027a0 <HAL_GPIO_ReadPin>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d104      	bne.n	8004080 <main+0x188>
				highflag = 0;
 8004076:	4b60      	ldr	r3, [pc, #384]	; (80041f8 <main+0x300>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
				buzflag = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
		if (!SW3 || !SW4 || !SW5) {
 8004080:	23a0      	movs	r3, #160	; 0xa0
 8004082:	05db      	lsls	r3, r3, #23
 8004084:	2108      	movs	r1, #8
 8004086:	0018      	movs	r0, r3
 8004088:	f7fe fb8a 	bl	80027a0 <HAL_GPIO_ReadPin>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d011      	beq.n	80040b4 <main+0x1bc>
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4a5a      	ldr	r2, [pc, #360]	; (8004200 <main+0x308>)
 8004096:	0019      	movs	r1, r3
 8004098:	0010      	movs	r0, r2
 800409a:	f7fe fb81 	bl	80027a0 <HAL_GPIO_ReadPin>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d008      	beq.n	80040b4 <main+0x1bc>
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	4a56      	ldr	r2, [pc, #344]	; (8004200 <main+0x308>)
 80040a8:	0019      	movs	r1, r3
 80040aa:	0010      	movs	r0, r2
 80040ac:	f7fe fb78 	bl	80027a0 <HAL_GPIO_ReadPin>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d14f      	bne.n	8004154 <main+0x25c>
			if (!SW3 && !swFlag) {
 80040b4:	23a0      	movs	r3, #160	; 0xa0
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	2108      	movs	r1, #8
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7fe fb70 	bl	80027a0 <HAL_GPIO_ReadPin>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d10f      	bne.n	80040e4 <main+0x1ec>
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <main+0x1ec>
				if (!autoFlag) {
 80040ca:	4b48      	ldr	r3, [pc, #288]	; (80041ec <main+0x2f4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <main+0x1e2>
					autoFlag = 1;
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <main+0x2f4>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e004      	b.n	80040e4 <main+0x1ec>
				} else {
					autoFlag = 0;
 80040da:	4b44      	ldr	r3, [pc, #272]	; (80041ec <main+0x2f4>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
					ledClear();
 80040e0:	f7ff fe1a 	bl	8003d18 <ledClear>
				}
			}
			if (!SW4 && !swFlag)
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4a45      	ldr	r2, [pc, #276]	; (8004200 <main+0x308>)
 80040ea:	0019      	movs	r1, r3
 80040ec:	0010      	movs	r0, r2
 80040ee:	f7fe fb57 	bl	80027a0 <HAL_GPIO_ReadPin>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d108      	bne.n	8004108 <main+0x210>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <main+0x210>
				altemp -= 20;
 80040fc:	4b41      	ldr	r3, [pc, #260]	; (8004204 <main+0x30c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3b14      	subs	r3, #20
 8004102:	001a      	movs	r2, r3
 8004104:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <main+0x30c>)
 8004106:	601a      	str	r2, [r3, #0]
			if (!SW5 && !swFlag)
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <main+0x308>)
 800410e:	0019      	movs	r1, r3
 8004110:	0010      	movs	r0, r2
 8004112:	f7fe fb45 	bl	80027a0 <HAL_GPIO_ReadPin>
 8004116:	1e03      	subs	r3, r0, #0
 8004118:	d108      	bne.n	800412c <main+0x234>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <main+0x234>
				altemp += 20;
 8004120:	4b38      	ldr	r3, [pc, #224]	; (8004204 <main+0x30c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	001a      	movs	r2, r3
 8004128:	4b36      	ldr	r3, [pc, #216]	; (8004204 <main+0x30c>)
 800412a:	601a      	str	r2, [r3, #0]
			if (altemp > 280)
 800412c:	4b35      	ldr	r3, [pc, #212]	; (8004204 <main+0x30c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	238c      	movs	r3, #140	; 0x8c
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	429a      	cmp	r2, r3
 8004136:	dd03      	ble.n	8004140 <main+0x248>
				altemp = 280;
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <main+0x30c>)
 800413a:	228c      	movs	r2, #140	; 0x8c
 800413c:	0052      	lsls	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
			if (altemp < 20)
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <main+0x30c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b13      	cmp	r3, #19
 8004146:	dc02      	bgt.n	800414e <main+0x256>
				altemp = 20;
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <main+0x30c>)
 800414a:	2214      	movs	r2, #20
 800414c:	601a      	str	r2, [r3, #0]
			swFlag = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	e001      	b.n	8004158 <main+0x260>
		} else {
			swFlag = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	623b      	str	r3, [r7, #32]
		}
		if (altemp < temp && altemp > 20) {
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <main+0x30c>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <main+0x304>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	da0d      	bge.n	8004180 <main+0x288>
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <main+0x30c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b14      	cmp	r3, #20
 800416a:	dd09      	ble.n	8004180 <main+0x288>
			if (!alflag) {
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <main+0x29c>
				allast = NOW;
 8004172:	f7fd fc6d 	bl	8001a50 <HAL_GetTick>
 8004176:	0003      	movs	r3, r0
 8004178:	607b      	str	r3, [r7, #4]
				alflag = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
			if (!alflag) {
 800417e:	e009      	b.n	8004194 <main+0x29c>
			}
		} else {
			BUZZER(0);
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	0219      	lsls	r1, r3, #8
 8004184:	23a0      	movs	r3, #160	; 0xa0
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	2200      	movs	r2, #0
 800418a:	0018      	movs	r0, r3
 800418c:	f7fe fb25 	bl	80027da <HAL_GPIO_WritePin>
			alflag = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
		}
		if (alflag) {
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04b      	beq.n	8004232 <main+0x33a>
			if ((NOW - allast >= 0 && NOW - allast <= 100)
 800419a:	f7fd fc59 	bl	8001a50 <HAL_GetTick>
 800419e:	f7fd fc57 	bl	8001a50 <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d90f      	bls.n	80041cc <main+0x2d4>
					|| (NOW - allast >= 200 && NOW - allast <= 300))
 80041ac:	f7fd fc50 	bl	8001a50 <HAL_GetTick>
 80041b0:	0002      	movs	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2bc7      	cmp	r3, #199	; 0xc7
 80041b8:	d926      	bls.n	8004208 <main+0x310>
 80041ba:	f7fd fc49 	bl	8001a50 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	2396      	movs	r3, #150	; 0x96
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d81d      	bhi.n	8004208 <main+0x310>
				BUZZER(1);
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	0219      	lsls	r1, r3, #8
 80041d0:	23a0      	movs	r3, #160	; 0xa0
 80041d2:	05db      	lsls	r3, r3, #23
 80041d4:	2201      	movs	r2, #1
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7fe faff 	bl	80027da <HAL_GPIO_WritePin>
 80041dc:	e01c      	b.n	8004218 <main+0x320>
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	080053fc 	.word	0x080053fc
 80041e4:	20000110 	.word	0x20000110
 80041e8:	20000114 	.word	0x20000114
 80041ec:	2000011c 	.word	0x2000011c
 80041f0:	2000010c 	.word	0x2000010c
 80041f4:	20000108 	.word	0x20000108
 80041f8:	20000118 	.word	0x20000118
 80041fc:	20000000 	.word	0x20000000
 8004200:	50000800 	.word	0x50000800
 8004204:	20000004 	.word	0x20000004
			else
				BUZZER(0);
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	0219      	lsls	r1, r3, #8
 800420c:	23a0      	movs	r3, #160	; 0xa0
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	2200      	movs	r2, #0
 8004212:	0018      	movs	r0, r3
 8004214:	f7fe fae1 	bl	80027da <HAL_GPIO_WritePin>
			if (NOW - allast >= 1000)
 8004218:	f7fd fc1a 	bl	8001a50 <HAL_GetTick>
 800421c:	0002      	movs	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1ad2      	subs	r2, r2, r3
 8004222:	23fa      	movs	r3, #250	; 0xfa
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	429a      	cmp	r2, r3
 8004228:	d303      	bcc.n	8004232 <main+0x33a>
				allast = NOW;
 800422a:	f7fd fc11 	bl	8001a50 <HAL_GetTick>
 800422e:	0003      	movs	r3, r0
 8004230:	607b      	str	r3, [r7, #4]
		}
		if (SW1 && !safeflag)
 8004232:	23a0      	movs	r3, #160	; 0xa0
 8004234:	05db      	lsls	r3, r3, #23
 8004236:	2104      	movs	r1, #4
 8004238:	0018      	movs	r0, r3
 800423a:	f7fe fab1 	bl	80027a0 <HAL_GPIO_ReadPin>
 800423e:	1e03      	subs	r3, r0, #0
 8004240:	d006      	beq.n	8004250 <main+0x358>
 8004242:	4bb2      	ldr	r3, [pc, #712]	; (800450c <main+0x614>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <main+0x358>
			gasflag = 1;
 800424a:	4bb1      	ldr	r3, [pc, #708]	; (8004510 <main+0x618>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
		if (!SW1 && !safeflag)
 8004250:	23a0      	movs	r3, #160	; 0xa0
 8004252:	05db      	lsls	r3, r3, #23
 8004254:	2104      	movs	r1, #4
 8004256:	0018      	movs	r0, r3
 8004258:	f7fe faa2 	bl	80027a0 <HAL_GPIO_ReadPin>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d106      	bne.n	800426e <main+0x376>
 8004260:	4baa      	ldr	r3, [pc, #680]	; (800450c <main+0x614>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <main+0x376>
			gasflag = 0;
 8004268:	4ba9      	ldr	r3, [pc, #676]	; (8004510 <main+0x618>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
		if (SW2)
 800426e:	23a0      	movs	r3, #160	; 0xa0
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	2110      	movs	r1, #16
 8004274:	0018      	movs	r0, r3
 8004276:	f7fe fa93 	bl	80027a0 <HAL_GPIO_ReadPin>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d002      	beq.n	8004284 <main+0x38c>
			safeflag = 1;
 800427e:	4ba3      	ldr	r3, [pc, #652]	; (800450c <main+0x614>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
		if(!SW2 && SW1)
 8004284:	23a0      	movs	r3, #160	; 0xa0
 8004286:	05db      	lsls	r3, r3, #23
 8004288:	2110      	movs	r1, #16
 800428a:	0018      	movs	r0, r3
 800428c:	f7fe fa88 	bl	80027a0 <HAL_GPIO_ReadPin>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d10a      	bne.n	80042aa <main+0x3b2>
 8004294:	23a0      	movs	r3, #160	; 0xa0
 8004296:	05db      	lsls	r3, r3, #23
 8004298:	2104      	movs	r1, #4
 800429a:	0018      	movs	r0, r3
 800429c:	f7fe fa80 	bl	80027a0 <HAL_GPIO_ReadPin>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d002      	beq.n	80042aa <main+0x3b2>
			safeflag = 0;
 80042a4:	4b99      	ldr	r3, [pc, #612]	; (800450c <main+0x614>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
		if (NOW - last >= 10) {
 80042aa:	f7fd fbd1 	bl	8001a50 <HAL_GetTick>
 80042ae:	0002      	movs	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	d937      	bls.n	8004328 <main+0x430>
			adc(&vr, &cds);
 80042b8:	003a      	movs	r2, r7
 80042ba:	1cbb      	adds	r3, r7, #2
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f7ff faba 	bl	8003838 <adc>
			if (NOW - plast >= 100) {
 80042c4:	f7fd fbc4 	bl	8001a50 <HAL_GetTick>
 80042c8:	0002      	movs	r2, r0
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b63      	cmp	r3, #99	; 0x63
 80042d0:	d924      	bls.n	800431c <main+0x424>
				if (power < powerSet)
 80042d2:	4b90      	ldr	r3, [pc, #576]	; (8004514 <main+0x61c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b90      	ldr	r3, [pc, #576]	; (8004518 <main+0x620>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	da04      	bge.n	80042e8 <main+0x3f0>
					power++;
 80042de:	4b8d      	ldr	r3, [pc, #564]	; (8004514 <main+0x61c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	4b8b      	ldr	r3, [pc, #556]	; (8004514 <main+0x61c>)
 80042e6:	601a      	str	r2, [r3, #0]
				if (power > powerSet)
 80042e8:	4b8a      	ldr	r3, [pc, #552]	; (8004514 <main+0x61c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b8a      	ldr	r3, [pc, #552]	; (8004518 <main+0x620>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dd04      	ble.n	80042fe <main+0x406>
					power--;
 80042f4:	4b87      	ldr	r3, [pc, #540]	; (8004514 <main+0x61c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	4b86      	ldr	r3, [pc, #536]	; (8004514 <main+0x61c>)
 80042fc:	601a      	str	r2, [r3, #0]
				led_ring_update(led_ring_data[power]);
 80042fe:	4b85      	ldr	r3, [pc, #532]	; (8004514 <main+0x61c>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	0013      	movs	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	189b      	adds	r3, r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4a84      	ldr	r2, [pc, #528]	; (800451c <main+0x624>)
 800430c:	189b      	adds	r3, r3, r2
 800430e:	0018      	movs	r0, r3
 8004310:	f7ff f822 	bl	8003358 <led_ring_update>
				plast = NOW;
 8004314:	f7fd fb9c 	bl	8001a50 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	617b      	str	r3, [r7, #20]
			}
			lcd_print();
 800431c:	f7ff fc7e 	bl	8003c1c <lcd_print>
			last = NOW;
 8004320:	f7fd fb96 	bl	8001a50 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	61bb      	str	r3, [r7, #24]
		}
		if (NOW - tuplast >= TEMPUP(power) && TEMPUP(power) != 0) {
 8004328:	f7fd fb92 	bl	8001a50 <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	4b78      	ldr	r3, [pc, #480]	; (8004514 <main+0x61c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d037      	beq.n	80043aa <main+0x4b2>
 800433a:	4b76      	ldr	r3, [pc, #472]	; (8004514 <main+0x61c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d030      	beq.n	80043a4 <main+0x4ac>
 8004342:	4b74      	ldr	r3, [pc, #464]	; (8004514 <main+0x61c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d029      	beq.n	800439e <main+0x4a6>
 800434a:	4b72      	ldr	r3, [pc, #456]	; (8004514 <main+0x61c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d022      	beq.n	8004398 <main+0x4a0>
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <main+0x61c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d01b      	beq.n	8004392 <main+0x49a>
 800435a:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <main+0x61c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b06      	cmp	r3, #6
 8004360:	d014      	beq.n	800438c <main+0x494>
 8004362:	4b6c      	ldr	r3, [pc, #432]	; (8004514 <main+0x61c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b07      	cmp	r3, #7
 8004368:	d00d      	beq.n	8004386 <main+0x48e>
 800436a:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <main+0x61c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d007      	beq.n	8004382 <main+0x48a>
 8004372:	4b68      	ldr	r3, [pc, #416]	; (8004514 <main+0x61c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b09      	cmp	r3, #9
 8004378:	d101      	bne.n	800437e <main+0x486>
 800437a:	2364      	movs	r3, #100	; 0x64
 800437c:	e017      	b.n	80043ae <main+0x4b6>
 800437e:	2300      	movs	r3, #0
 8004380:	e015      	b.n	80043ae <main+0x4b6>
 8004382:	23c8      	movs	r3, #200	; 0xc8
 8004384:	e013      	b.n	80043ae <main+0x4b6>
 8004386:	2396      	movs	r3, #150	; 0x96
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	e010      	b.n	80043ae <main+0x4b6>
 800438c:	23c8      	movs	r3, #200	; 0xc8
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	e00d      	b.n	80043ae <main+0x4b6>
 8004392:	23fa      	movs	r3, #250	; 0xfa
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	e00a      	b.n	80043ae <main+0x4b6>
 8004398:	2396      	movs	r3, #150	; 0x96
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	e007      	b.n	80043ae <main+0x4b6>
 800439e:	23af      	movs	r3, #175	; 0xaf
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	e004      	b.n	80043ae <main+0x4b6>
 80043a4:	23c8      	movs	r3, #200	; 0xc8
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	e001      	b.n	80043ae <main+0x4b6>
 80043aa:	23e1      	movs	r3, #225	; 0xe1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d837      	bhi.n	8004422 <main+0x52a>
 80043b2:	4b58      	ldr	r3, [pc, #352]	; (8004514 <main+0x61c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d01f      	beq.n	80043fa <main+0x502>
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <main+0x61c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d01b      	beq.n	80043fa <main+0x502>
 80043c2:	4b54      	ldr	r3, [pc, #336]	; (8004514 <main+0x61c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d017      	beq.n	80043fa <main+0x502>
 80043ca:	4b52      	ldr	r3, [pc, #328]	; (8004514 <main+0x61c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d013      	beq.n	80043fa <main+0x502>
 80043d2:	4b50      	ldr	r3, [pc, #320]	; (8004514 <main+0x61c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d00f      	beq.n	80043fa <main+0x502>
 80043da:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <main+0x61c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d00b      	beq.n	80043fa <main+0x502>
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <main+0x61c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b07      	cmp	r3, #7
 80043e8:	d007      	beq.n	80043fa <main+0x502>
 80043ea:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <main+0x61c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d003      	beq.n	80043fa <main+0x502>
 80043f2:	4b48      	ldr	r3, [pc, #288]	; (8004514 <main+0x61c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d113      	bne.n	8004422 <main+0x52a>
			temp++;
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <main+0x628>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	4b47      	ldr	r3, [pc, #284]	; (8004520 <main+0x628>)
 8004402:	601a      	str	r2, [r3, #0]
			if (temp > 300)
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <main+0x628>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	2396      	movs	r3, #150	; 0x96
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	429a      	cmp	r2, r3
 800440e:	dd02      	ble.n	8004416 <main+0x51e>
				highflag = 1;
 8004410:	4b44      	ldr	r3, [pc, #272]	; (8004524 <main+0x62c>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
			tuplast = NOW;
 8004416:	f7fd fb1b 	bl	8001a50 <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	60fb      	str	r3, [r7, #12]
			lcd_print();
 800441e:	f7ff fbfd 	bl	8003c1c <lcd_print>
		}
		if (NOW - tdownlast >= TEMPDOWN(temp - 20) && TEMPDOWN(temp - 20) != 0) {
 8004422:	f7fd fb15 	bl	8001a50 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad2      	subs	r2, r2, r3
 800442c:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <main+0x628>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b1d      	cmp	r3, #29
 8004432:	dd30      	ble.n	8004496 <main+0x59e>
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <main+0x628>)
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	23a0      	movs	r3, #160	; 0xa0
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4299      	cmp	r1, r3
 800443e:	da28      	bge.n	8004492 <main+0x59a>
 8004440:	4b37      	ldr	r3, [pc, #220]	; (8004520 <main+0x628>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2bdb      	cmp	r3, #219	; 0xdb
 8004446:	dc22      	bgt.n	800448e <main+0x596>
 8004448:	4b35      	ldr	r3, [pc, #212]	; (8004520 <main+0x628>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b77      	cmp	r3, #119	; 0x77
 800444e:	dc1b      	bgt.n	8004488 <main+0x590>
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <main+0x628>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b3b      	cmp	r3, #59	; 0x3b
 8004456:	dc14      	bgt.n	8004482 <main+0x58a>
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <main+0x628>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b27      	cmp	r3, #39	; 0x27
 800445e:	dc0e      	bgt.n	800447e <main+0x586>
 8004460:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <main+0x628>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b22      	cmp	r3, #34	; 0x22
 8004466:	dc07      	bgt.n	8004478 <main+0x580>
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <main+0x628>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b1d      	cmp	r3, #29
 800446e:	dd01      	ble.n	8004474 <main+0x57c>
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <main+0x630>)
 8004472:	e011      	b.n	8004498 <main+0x5a0>
 8004474:	2300      	movs	r3, #0
 8004476:	e00f      	b.n	8004498 <main+0x5a0>
 8004478:	23c8      	movs	r3, #200	; 0xc8
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	e00c      	b.n	8004498 <main+0x5a0>
 800447e:	4b2b      	ldr	r3, [pc, #172]	; (800452c <main+0x634>)
 8004480:	e00a      	b.n	8004498 <main+0x5a0>
 8004482:	23af      	movs	r3, #175	; 0xaf
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	e007      	b.n	8004498 <main+0x5a0>
 8004488:	23c8      	movs	r3, #200	; 0xc8
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	e004      	b.n	8004498 <main+0x5a0>
 800448e:	23c8      	movs	r3, #200	; 0xc8
 8004490:	e002      	b.n	8004498 <main+0x5a0>
 8004492:	2364      	movs	r3, #100	; 0x64
 8004494:	e000      	b.n	8004498 <main+0x5a0>
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <main+0x638>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d900      	bls.n	800449e <main+0x5a6>
 800449c:	e562      	b.n	8003f64 <main+0x6c>
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <main+0x628>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b1d      	cmp	r3, #29
 80044a4:	dd1e      	ble.n	80044e4 <main+0x5ec>
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <main+0x628>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	23a0      	movs	r3, #160	; 0xa0
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	429a      	cmp	r2, r3
 80044b0:	da18      	bge.n	80044e4 <main+0x5ec>
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <main+0x628>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2bdb      	cmp	r3, #219	; 0xdb
 80044b8:	dc14      	bgt.n	80044e4 <main+0x5ec>
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <main+0x628>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b77      	cmp	r3, #119	; 0x77
 80044c0:	dc10      	bgt.n	80044e4 <main+0x5ec>
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <main+0x628>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b3b      	cmp	r3, #59	; 0x3b
 80044c8:	dc0c      	bgt.n	80044e4 <main+0x5ec>
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <main+0x628>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b27      	cmp	r3, #39	; 0x27
 80044d0:	dc08      	bgt.n	80044e4 <main+0x5ec>
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <main+0x628>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b22      	cmp	r3, #34	; 0x22
 80044d8:	dc04      	bgt.n	80044e4 <main+0x5ec>
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <main+0x628>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b1d      	cmp	r3, #29
 80044e0:	dc00      	bgt.n	80044e4 <main+0x5ec>
 80044e2:	e53f      	b.n	8003f64 <main+0x6c>
			temp--;
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <main+0x628>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <main+0x628>)
 80044ec:	601a      	str	r2, [r3, #0]
			if (temp < 20)
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <main+0x628>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b13      	cmp	r3, #19
 80044f4:	dc02      	bgt.n	80044fc <main+0x604>
				temp = 20;
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <main+0x628>)
 80044f8:	2214      	movs	r2, #20
 80044fa:	601a      	str	r2, [r3, #0]
			tdownlast = NOW;
 80044fc:	f7fd faa8 	bl	8001a50 <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	613b      	str	r3, [r7, #16]
			lcd_print();
 8004504:	f7ff fb8a 	bl	8003c1c <lcd_print>
		if (gasflag) {
 8004508:	e52c      	b.n	8003f64 <main+0x6c>
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	20000114 	.word	0x20000114
 8004510:	20000110 	.word	0x20000110
 8004514:	20000104 	.word	0x20000104
 8004518:	20000108 	.word	0x20000108
 800451c:	20000138 	.word	0x20000138
 8004520:	20000000 	.word	0x20000000
 8004524:	20000118 	.word	0x20000118
 8004528:	00000898 	.word	0x00000898
 800452c:	0000044c 	.word	0x0000044c
 8004530:	00000b54 	.word	0x00000b54

08004534 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b095      	sub	sp, #84	; 0x54
 8004538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800453a:	2418      	movs	r4, #24
 800453c:	193b      	adds	r3, r7, r4
 800453e:	0018      	movs	r0, r3
 8004540:	2338      	movs	r3, #56	; 0x38
 8004542:	001a      	movs	r2, r3
 8004544:	2100      	movs	r1, #0
 8004546:	f000 fa9d 	bl	8004a84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	0018      	movs	r0, r3
 800454e:	2314      	movs	r3, #20
 8004550:	001a      	movs	r2, r3
 8004552:	2100      	movs	r1, #0
 8004554:	f000 fa96 	bl	8004a84 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <SystemClock_Config+0xb0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a22      	ldr	r2, [pc, #136]	; (80045e8 <SystemClock_Config+0xb4>)
 800455e:	401a      	ands	r2, r3
 8004560:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <SystemClock_Config+0xb0>)
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	0109      	lsls	r1, r1, #4
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800456a:	0021      	movs	r1, r4
 800456c:	187b      	adds	r3, r7, r1
 800456e:	2202      	movs	r2, #2
 8004570:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	2201      	movs	r2, #1
 8004576:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004578:	187b      	adds	r3, r7, r1
 800457a:	2210      	movs	r2, #16
 800457c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800457e:	187b      	adds	r3, r7, r1
 8004580:	2202      	movs	r2, #2
 8004582:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004584:	187b      	adds	r3, r7, r1
 8004586:	2200      	movs	r2, #0
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800458a:	187b      	adds	r3, r7, r1
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	02d2      	lsls	r2, r2, #11
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004592:	187b      	adds	r3, r7, r1
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	03d2      	lsls	r2, r2, #15
 8004598:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800459a:	187b      	adds	r3, r7, r1
 800459c:	0018      	movs	r0, r3
 800459e:	f7fe f939 	bl	8002814 <HAL_RCC_OscConfig>
 80045a2:	1e03      	subs	r3, r0, #0
 80045a4:	d001      	beq.n	80045aa <SystemClock_Config+0x76>
		Error_Handler();
 80045a6:	f000 f93f 	bl	8004828 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	220f      	movs	r2, #15
 80045ae:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	2203      	movs	r2, #3
 80045b4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	2101      	movs	r1, #1
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fe fce1 	bl	8002f94 <HAL_RCC_ClockConfig>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d001      	beq.n	80045da <SystemClock_Config+0xa6>
		Error_Handler();
 80045d6:	f000 f927 	bl	8004828 <Error_Handler>
	}
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b015      	add	sp, #84	; 0x54
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	40007000 	.word	0x40007000
 80045e8:	ffffe7ff 	.word	0xffffe7ff

080045ec <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80045f2:	003b      	movs	r3, r7
 80045f4:	0018      	movs	r0, r3
 80045f6:	2308      	movs	r3, #8
 80045f8:	001a      	movs	r2, r3
 80045fa:	2100      	movs	r1, #0
 80045fc:	f000 fa42 	bl	8004a84 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8004600:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004602:	4a31      	ldr	r2, [pc, #196]	; (80046c8 <MX_ADC_Init+0xdc>)
 8004604:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8004606:	4b2f      	ldr	r3, [pc, #188]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004608:	2200      	movs	r2, #0
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <MX_ADC_Init+0xd8>)
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	05d2      	lsls	r2, r2, #23
 8004612:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <MX_ADC_Init+0xd8>)
 800461c:	2207      	movs	r2, #7
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004620:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004622:	2201      	movs	r2, #1
 8004624:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <MX_ADC_Init+0xd8>)
 800462e:	2220      	movs	r2, #32
 8004630:	2100      	movs	r1, #0
 8004632:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	2100      	movs	r1, #0
 800463a:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800463c:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <MX_ADC_Init+0xd8>)
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004644:	22c2      	movs	r2, #194	; 0xc2
 8004646:	32ff      	adds	r2, #255	; 0xff
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <MX_ADC_Init+0xd8>)
 800464c:	222c      	movs	r2, #44	; 0x2c
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004652:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004654:	2204      	movs	r2, #4
 8004656:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <MX_ADC_Init+0xd8>)
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004666:	2200      	movs	r2, #0
 8004668:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <MX_ADC_Init+0xd8>)
 800466c:	2200      	movs	r2, #0
 800466e:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004672:	0018      	movs	r0, r3
 8004674:	f7fd fa14 	bl	8001aa0 <HAL_ADC_Init>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d001      	beq.n	8004680 <MX_ADC_Init+0x94>
		Error_Handler();
 800467c:	f000 f8d4 	bl	8004828 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8004680:	003b      	movs	r3, r7
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004686:	003b      	movs	r3, r7
 8004688:	2280      	movs	r2, #128	; 0x80
 800468a:	0152      	lsls	r2, r2, #5
 800468c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800468e:	003a      	movs	r2, r7
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <MX_ADC_Init+0xd8>)
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f7fd fcad 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d001      	beq.n	80046a2 <MX_ADC_Init+0xb6>
		Error_Handler();
 800469e:	f000 f8c3 	bl	8004828 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80046a2:	003b      	movs	r3, r7
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <MX_ADC_Init+0xe0>)
 80046a6:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80046a8:	003a      	movs	r2, r7
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <MX_ADC_Init+0xd8>)
 80046ac:	0011      	movs	r1, r2
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7fd fca0 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 80046b4:	1e03      	subs	r3, r0, #0
 80046b6:	d001      	beq.n	80046bc <MX_ADC_Init+0xd0>
		Error_Handler();
 80046b8:	f000 f8b6 	bl	8004828 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b002      	add	sp, #8
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	200000a8 	.word	0x200000a8
 80046c8:	40012400 	.word	0x40012400
 80046cc:	04000002 	.word	0x04000002

080046d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80046d6:	240c      	movs	r4, #12
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	0018      	movs	r0, r3
 80046dc:	2314      	movs	r3, #20
 80046de:	001a      	movs	r2, r3
 80046e0:	2100      	movs	r1, #0
 80046e2:	f000 f9cf 	bl	8004a84 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80046e6:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <MX_GPIO_Init+0x144>)
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <MX_GPIO_Init+0x144>)
 80046ec:	2104      	movs	r1, #4
 80046ee:	430a      	orrs	r2, r1
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046f2:	4b48      	ldr	r3, [pc, #288]	; (8004814 <MX_GPIO_Init+0x144>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	2204      	movs	r2, #4
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <MX_GPIO_Init+0x144>)
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b44      	ldr	r3, [pc, #272]	; (8004814 <MX_GPIO_Init+0x144>)
 8004704:	2101      	movs	r1, #1
 8004706:	430a      	orrs	r2, r1
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c
 800470a:	4b42      	ldr	r3, [pc, #264]	; (8004814 <MX_GPIO_Init+0x144>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	2201      	movs	r2, #1
 8004710:	4013      	ands	r3, r2
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <MX_GPIO_Init+0x144>)
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <MX_GPIO_Init+0x144>)
 800471c:	2102      	movs	r1, #2
 800471e:	430a      	orrs	r2, r1
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c
 8004722:	4b3c      	ldr	r3, [pc, #240]	; (8004814 <MX_GPIO_Init+0x144>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	2202      	movs	r2, #2
 8004728:	4013      	ands	r3, r2
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_RING_Pin | BUZZ_Pin, GPIO_PIN_RESET);
 800472e:	493a      	ldr	r1, [pc, #232]	; (8004818 <MX_GPIO_Init+0x148>)
 8004730:	23a0      	movs	r3, #160	; 0xa0
 8004732:	05db      	lsls	r3, r3, #23
 8004734:	2200      	movs	r2, #0
 8004736:	0018      	movs	r0, r3
 8004738:	f7fe f84f 	bl	80027da <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800473c:	23f8      	movs	r3, #248	; 0xf8
 800473e:	00d9      	lsls	r1, r3, #3
 8004740:	23a0      	movs	r3, #160	; 0xa0
 8004742:	05db      	lsls	r3, r3, #23
 8004744:	2201      	movs	r2, #1
 8004746:	0018      	movs	r0, r3
 8004748:	f7fe f847 	bl	80027da <HAL_GPIO_WritePin>
	LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800474c:	4b33      	ldr	r3, [pc, #204]	; (800481c <MX_GPIO_Init+0x14c>)
 800474e:	2200      	movs	r2, #0
 8004750:	21fb      	movs	r1, #251	; 0xfb
 8004752:	0018      	movs	r0, r3
 8004754:	f7fe f841 	bl	80027da <HAL_GPIO_WritePin>
			LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin
					| LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SW_A_Pin SW_B_Pin */
	GPIO_InitStruct.Pin = SW_A_Pin | SW_B_Pin;
 8004758:	193b      	adds	r3, r7, r4
 800475a:	22c0      	movs	r2, #192	; 0xc0
 800475c:	0212      	lsls	r2, r2, #8
 800475e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004760:	193b      	adds	r3, r7, r4
 8004762:	2200      	movs	r2, #0
 8004764:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004766:	193b      	adds	r3, r7, r4
 8004768:	2201      	movs	r2, #1
 800476a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476c:	193b      	adds	r3, r7, r4
 800476e:	4a2c      	ldr	r2, [pc, #176]	; (8004820 <MX_GPIO_Init+0x150>)
 8004770:	0019      	movs	r1, r3
 8004772:	0010      	movs	r0, r2
 8004774:	f7fd fe9e 	bl	80024b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
	GPIO_InitStruct.Pin = SW_ON_Pin | SW_AUTO_Pin | SW_LOCK_Pin;
 8004778:	193b      	adds	r3, r7, r4
 800477a:	221c      	movs	r2, #28
 800477c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800477e:	193b      	adds	r3, r7, r4
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004784:	193b      	adds	r3, r7, r4
 8004786:	2201      	movs	r2, #1
 8004788:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478a:	193a      	adds	r2, r7, r4
 800478c:	23a0      	movs	r3, #160	; 0xa0
 800478e:	05db      	lsls	r3, r3, #23
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7fd fe8e 	bl	80024b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RING_Pin */
	GPIO_InitStruct.Pin = LED_RING_Pin;
 8004798:	193b      	adds	r3, r7, r4
 800479a:	2220      	movs	r2, #32
 800479c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	2211      	movs	r2, #17
 80047a2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	2203      	movs	r2, #3
 80047ae:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_RING_GPIO_Port, &GPIO_InitStruct);
 80047b0:	193a      	adds	r2, r7, r4
 80047b2:	23a0      	movs	r3, #160	; 0xa0
 80047b4:	05db      	lsls	r3, r3, #23
 80047b6:	0011      	movs	r1, r2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd fe7b 	bl	80024b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
	 LED5_Pin BUZZ_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <MX_GPIO_Init+0x154>)
 80047c2:	601a      	str	r2, [r3, #0]
			| BUZZ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	2201      	movs	r2, #1
 80047c8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	193b      	adds	r3, r7, r4
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d0:	193b      	adds	r3, r7, r4
 80047d2:	2203      	movs	r2, #3
 80047d4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d6:	193a      	adds	r2, r7, r4
 80047d8:	23a0      	movs	r3, #160	; 0xa0
 80047da:	05db      	lsls	r3, r3, #23
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7fd fe68 	bl	80024b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin
	 LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin
 80047e4:	0021      	movs	r1, r4
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	22fb      	movs	r2, #251	; 0xfb
 80047ea:	601a      	str	r2, [r3, #0]
			| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	2201      	movs	r2, #1
 80047f0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f8:	187b      	adds	r3, r7, r1
 80047fa:	2203      	movs	r2, #3
 80047fc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047fe:	187b      	adds	r3, r7, r1
 8004800:	4a06      	ldr	r2, [pc, #24]	; (800481c <MX_GPIO_Init+0x14c>)
 8004802:	0019      	movs	r1, r3
 8004804:	0010      	movs	r0, r2
 8004806:	f7fd fe55 	bl	80024b4 <HAL_GPIO_Init>

}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46bd      	mov	sp, r7
 800480e:	b009      	add	sp, #36	; 0x24
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	40021000 	.word	0x40021000
 8004818:	00008020 	.word	0x00008020
 800481c:	50000400 	.word	0x50000400
 8004820:	50000800 	.word	0x50000800
 8004824:	000087c0 	.word	0x000087c0

08004828 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_MspInit+0x24>)
 800483a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_MspInit+0x24>)
 800483e:	2101      	movs	r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <HAL_MspInit+0x24>)
 8004846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004848:	4b03      	ldr	r3, [pc, #12]	; (8004858 <HAL_MspInit+0x24>)
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	0549      	lsls	r1, r1, #21
 800484e:	430a      	orrs	r2, r1
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000

0800485c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	240c      	movs	r4, #12
 8004866:	193b      	adds	r3, r7, r4
 8004868:	0018      	movs	r0, r3
 800486a:	2314      	movs	r3, #20
 800486c:	001a      	movs	r2, r3
 800486e:	2100      	movs	r1, #0
 8004870:	f000 f908 	bl	8004a84 <memset>
  if(hadc->Instance==ADC1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <HAL_ADC_MspInit+0x70>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d122      	bne.n	80048c4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <HAL_ADC_MspInit+0x74>)
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <HAL_ADC_MspInit+0x74>)
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	0089      	lsls	r1, r1, #2
 8004888:	430a      	orrs	r2, r1
 800488a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_ADC_MspInit+0x74>)
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <HAL_ADC_MspInit+0x74>)
 8004892:	2101      	movs	r1, #1
 8004894:	430a      	orrs	r2, r1
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_ADC_MspInit+0x74>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2201      	movs	r2, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048a4:	193b      	adds	r3, r7, r4
 80048a6:	2203      	movs	r2, #3
 80048a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048aa:	193b      	adds	r3, r7, r4
 80048ac:	2203      	movs	r2, #3
 80048ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	193b      	adds	r3, r7, r4
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b6:	193a      	adds	r2, r7, r4
 80048b8:	23a0      	movs	r3, #160	; 0xa0
 80048ba:	05db      	lsls	r3, r3, #23
 80048bc:	0011      	movs	r1, r2
 80048be:	0018      	movs	r0, r3
 80048c0:	f7fd fdf8 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b009      	add	sp, #36	; 0x24
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	40012400 	.word	0x40012400
 80048d0:	40021000 	.word	0x40021000

080048d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048e2:	e7fe      	b.n	80048e2 <HardFault_Handler+0x4>

080048e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048fc:	f7fd f89c 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <_sbrk+0x50>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <_sbrk+0x16>
		heap_end = &end;
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <_sbrk+0x50>)
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <_sbrk+0x54>)
 800491c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <_sbrk+0x50>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <_sbrk+0x50>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	18d2      	adds	r2, r2, r3
 800492c:	466b      	mov	r3, sp
 800492e:	429a      	cmp	r2, r3
 8004930:	d907      	bls.n	8004942 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004932:	f000 f87d 	bl	8004a30 <__errno>
 8004936:	0003      	movs	r3, r0
 8004938:	220c      	movs	r2, #12
 800493a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800493c:	2301      	movs	r3, #1
 800493e:	425b      	negs	r3, r3
 8004940:	e006      	b.n	8004950 <_sbrk+0x48>
	}

	heap_end += incr;
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <_sbrk+0x50>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	18d2      	adds	r2, r2, r3
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <_sbrk+0x50>)
 800494c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000318 	.word	0x20000318
 800495c:	2000032c 	.word	0x2000032c

08004960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <SystemInit+0x64>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <SystemInit+0x64>)
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	0049      	lsls	r1, r1, #1
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <SystemInit+0x64>)
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <SystemInit+0x64>)
 8004978:	4913      	ldr	r1, [pc, #76]	; (80049c8 <SystemInit+0x68>)
 800497a:	400a      	ands	r2, r1
 800497c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <SystemInit+0x64>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <SystemInit+0x64>)
 8004984:	4911      	ldr	r1, [pc, #68]	; (80049cc <SystemInit+0x6c>)
 8004986:	400a      	ands	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <SystemInit+0x64>)
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <SystemInit+0x64>)
 8004990:	2101      	movs	r1, #1
 8004992:	438a      	bics	r2, r1
 8004994:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <SystemInit+0x64>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <SystemInit+0x64>)
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <SystemInit+0x70>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <SystemInit+0x64>)
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <SystemInit+0x64>)
 80049a8:	490a      	ldr	r1, [pc, #40]	; (80049d4 <SystemInit+0x74>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <SystemInit+0x64>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <SystemInit+0x78>)
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	0512      	lsls	r2, r2, #20
 80049ba:	609a      	str	r2, [r3, #8]
#endif
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	40021000 	.word	0x40021000
 80049c8:	88ff400c 	.word	0x88ff400c
 80049cc:	fef6fff6 	.word	0xfef6fff6
 80049d0:	fffbffff 	.word	0xfffbffff
 80049d4:	ff02ffff 	.word	0xff02ffff
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80049dc:	480d      	ldr	r0, [pc, #52]	; (8004a14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80049de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80049e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049e2:	e003      	b.n	80049ec <LoopCopyDataInit>

080049e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80049e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049ea:	3104      	adds	r1, #4

080049ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80049ec:	480b      	ldr	r0, [pc, #44]	; (8004a1c <LoopForever+0xa>)
  ldr  r3, =_edata
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <LoopForever+0xe>)
  adds  r2, r0, r1
 80049f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049f4:	d3f6      	bcc.n	80049e4 <CopyDataInit>
  ldr  r2, =_sbss
 80049f6:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <LoopForever+0x12>)
  b  LoopFillZerobss
 80049f8:	e002      	b.n	8004a00 <LoopFillZerobss>

080049fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80049fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80049fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049fe:	3204      	adds	r2, #4

08004a00 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <LoopForever+0x16>)
  cmp  r2, r3
 8004a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a04:	d3f9      	bcc.n	80049fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004a06:	f7ff ffab 	bl	8004960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a0a:	f000 f817 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0e:	f7ff fa73 	bl	8003ef8 <main>

08004a12 <LoopForever>:

LoopForever:
    b LoopForever
 8004a12:	e7fe      	b.n	8004a12 <LoopForever>
   ldr   r0, =_estack
 8004a14:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8004a18:	080054b8 	.word	0x080054b8
  ldr  r0, =_sdata
 8004a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a20:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8004a24:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004a28:	2000032c 	.word	0x2000032c

08004a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a2c:	e7fe      	b.n	8004a2c <ADC1_COMP_IRQHandler>
	...

08004a30 <__errno>:
 8004a30:	4b01      	ldr	r3, [pc, #4]	; (8004a38 <__errno+0x8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	4770      	bx	lr
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000024 	.word	0x20000024

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	2600      	movs	r6, #0
 8004a40:	4d0c      	ldr	r5, [pc, #48]	; (8004a74 <__libc_init_array+0x38>)
 8004a42:	4c0d      	ldr	r4, [pc, #52]	; (8004a78 <__libc_init_array+0x3c>)
 8004a44:	1b64      	subs	r4, r4, r5
 8004a46:	10a4      	asrs	r4, r4, #2
 8004a48:	42a6      	cmp	r6, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	f000 fc8b 	bl	8005368 <_init>
 8004a52:	4d0a      	ldr	r5, [pc, #40]	; (8004a7c <__libc_init_array+0x40>)
 8004a54:	4c0a      	ldr	r4, [pc, #40]	; (8004a80 <__libc_init_array+0x44>)
 8004a56:	1b64      	subs	r4, r4, r5
 8004a58:	10a4      	asrs	r4, r4, #2
 8004a5a:	42a6      	cmp	r6, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	00b3      	lsls	r3, r6, #2
 8004a62:	58eb      	ldr	r3, [r5, r3]
 8004a64:	4798      	blx	r3
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	00b3      	lsls	r3, r6, #2
 8004a6c:	58eb      	ldr	r3, [r5, r3]
 8004a6e:	4798      	blx	r3
 8004a70:	3601      	adds	r6, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	080054b0 	.word	0x080054b0
 8004a78:	080054b0 	.word	0x080054b0
 8004a7c:	080054b0 	.word	0x080054b0
 8004a80:	080054b4 	.word	0x080054b4

08004a84 <memset>:
 8004a84:	0003      	movs	r3, r0
 8004a86:	1882      	adds	r2, r0, r2
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <memset+0xa>
 8004a8c:	4770      	bx	lr
 8004a8e:	7019      	strb	r1, [r3, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	e7f9      	b.n	8004a88 <memset+0x4>

08004a94 <siprintf>:
 8004a94:	b40e      	push	{r1, r2, r3}
 8004a96:	b500      	push	{lr}
 8004a98:	490b      	ldr	r1, [pc, #44]	; (8004ac8 <siprintf+0x34>)
 8004a9a:	b09c      	sub	sp, #112	; 0x70
 8004a9c:	ab1d      	add	r3, sp, #116	; 0x74
 8004a9e:	9002      	str	r0, [sp, #8]
 8004aa0:	9006      	str	r0, [sp, #24]
 8004aa2:	9107      	str	r1, [sp, #28]
 8004aa4:	9104      	str	r1, [sp, #16]
 8004aa6:	4809      	ldr	r0, [pc, #36]	; (8004acc <siprintf+0x38>)
 8004aa8:	4909      	ldr	r1, [pc, #36]	; (8004ad0 <siprintf+0x3c>)
 8004aaa:	cb04      	ldmia	r3!, {r2}
 8004aac:	9105      	str	r1, [sp, #20]
 8004aae:	6800      	ldr	r0, [r0, #0]
 8004ab0:	a902      	add	r1, sp, #8
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	f000 f870 	bl	8004b98 <_svfiprintf_r>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9a02      	ldr	r2, [sp, #8]
 8004abc:	7013      	strb	r3, [r2, #0]
 8004abe:	b01c      	add	sp, #112	; 0x70
 8004ac0:	bc08      	pop	{r3}
 8004ac2:	b003      	add	sp, #12
 8004ac4:	4718      	bx	r3
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	7fffffff 	.word	0x7fffffff
 8004acc:	20000024 	.word	0x20000024
 8004ad0:	ffff0208 	.word	0xffff0208

08004ad4 <__ssputs_r>:
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	688e      	ldr	r6, [r1, #8]
 8004ad8:	b085      	sub	sp, #20
 8004ada:	0007      	movs	r7, r0
 8004adc:	000c      	movs	r4, r1
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	429e      	cmp	r6, r3
 8004ae4:	d83c      	bhi.n	8004b60 <__ssputs_r+0x8c>
 8004ae6:	2390      	movs	r3, #144	; 0x90
 8004ae8:	898a      	ldrh	r2, [r1, #12]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	421a      	tst	r2, r3
 8004aee:	d034      	beq.n	8004b5a <__ssputs_r+0x86>
 8004af0:	6909      	ldr	r1, [r1, #16]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	6960      	ldr	r0, [r4, #20]
 8004af6:	1a5b      	subs	r3, r3, r1
 8004af8:	9302      	str	r3, [sp, #8]
 8004afa:	2303      	movs	r3, #3
 8004afc:	4343      	muls	r3, r0
 8004afe:	0fdd      	lsrs	r5, r3, #31
 8004b00:	18ed      	adds	r5, r5, r3
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	9802      	ldr	r0, [sp, #8]
 8004b06:	3301      	adds	r3, #1
 8004b08:	181b      	adds	r3, r3, r0
 8004b0a:	106d      	asrs	r5, r5, #1
 8004b0c:	42ab      	cmp	r3, r5
 8004b0e:	d900      	bls.n	8004b12 <__ssputs_r+0x3e>
 8004b10:	001d      	movs	r5, r3
 8004b12:	0553      	lsls	r3, r2, #21
 8004b14:	d532      	bpl.n	8004b7c <__ssputs_r+0xa8>
 8004b16:	0029      	movs	r1, r5
 8004b18:	0038      	movs	r0, r7
 8004b1a:	f000 fb53 	bl	80051c4 <_malloc_r>
 8004b1e:	1e06      	subs	r6, r0, #0
 8004b20:	d109      	bne.n	8004b36 <__ssputs_r+0x62>
 8004b22:	230c      	movs	r3, #12
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	2001      	movs	r0, #1
 8004b2a:	89a2      	ldrh	r2, [r4, #12]
 8004b2c:	4240      	negs	r0, r0
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	b005      	add	sp, #20
 8004b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b36:	9a02      	ldr	r2, [sp, #8]
 8004b38:	6921      	ldr	r1, [r4, #16]
 8004b3a:	f000 faba 	bl	80050b2 <memcpy>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <__ssputs_r+0xc0>)
 8004b42:	401a      	ands	r2, r3
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	4313      	orrs	r3, r2
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	9b02      	ldr	r3, [sp, #8]
 8004b4c:	6126      	str	r6, [r4, #16]
 8004b4e:	18f6      	adds	r6, r6, r3
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	6165      	str	r5, [r4, #20]
 8004b54:	9e01      	ldr	r6, [sp, #4]
 8004b56:	1aed      	subs	r5, r5, r3
 8004b58:	60a5      	str	r5, [r4, #8]
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	429e      	cmp	r6, r3
 8004b5e:	d900      	bls.n	8004b62 <__ssputs_r+0x8e>
 8004b60:	9e01      	ldr	r6, [sp, #4]
 8004b62:	0032      	movs	r2, r6
 8004b64:	9903      	ldr	r1, [sp, #12]
 8004b66:	6820      	ldr	r0, [r4, #0]
 8004b68:	f000 faac 	bl	80050c4 <memmove>
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	2000      	movs	r0, #0
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	199e      	adds	r6, r3, r6
 8004b78:	6026      	str	r6, [r4, #0]
 8004b7a:	e7da      	b.n	8004b32 <__ssputs_r+0x5e>
 8004b7c:	002a      	movs	r2, r5
 8004b7e:	0038      	movs	r0, r7
 8004b80:	f000 fb96 	bl	80052b0 <_realloc_r>
 8004b84:	1e06      	subs	r6, r0, #0
 8004b86:	d1e0      	bne.n	8004b4a <__ssputs_r+0x76>
 8004b88:	0038      	movs	r0, r7
 8004b8a:	6921      	ldr	r1, [r4, #16]
 8004b8c:	f000 faae 	bl	80050ec <_free_r>
 8004b90:	e7c7      	b.n	8004b22 <__ssputs_r+0x4e>
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	fffffb7f 	.word	0xfffffb7f

08004b98 <_svfiprintf_r>:
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b0a1      	sub	sp, #132	; 0x84
 8004b9c:	9003      	str	r0, [sp, #12]
 8004b9e:	001d      	movs	r5, r3
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	000f      	movs	r7, r1
 8004ba4:	0016      	movs	r6, r2
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	d511      	bpl.n	8004bce <_svfiprintf_r+0x36>
 8004baa:	690b      	ldr	r3, [r1, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <_svfiprintf_r+0x36>
 8004bb0:	2140      	movs	r1, #64	; 0x40
 8004bb2:	f000 fb07 	bl	80051c4 <_malloc_r>
 8004bb6:	6038      	str	r0, [r7, #0]
 8004bb8:	6138      	str	r0, [r7, #16]
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d105      	bne.n	8004bca <_svfiprintf_r+0x32>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	9a03      	ldr	r2, [sp, #12]
 8004bc2:	3801      	subs	r0, #1
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	b021      	add	sp, #132	; 0x84
 8004bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bca:	2340      	movs	r3, #64	; 0x40
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	ac08      	add	r4, sp, #32
 8004bd2:	6163      	str	r3, [r4, #20]
 8004bd4:	3320      	adds	r3, #32
 8004bd6:	7663      	strb	r3, [r4, #25]
 8004bd8:	3310      	adds	r3, #16
 8004bda:	76a3      	strb	r3, [r4, #26]
 8004bdc:	9507      	str	r5, [sp, #28]
 8004bde:	0035      	movs	r5, r6
 8004be0:	782b      	ldrb	r3, [r5, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <_svfiprintf_r+0x52>
 8004be6:	2b25      	cmp	r3, #37	; 0x25
 8004be8:	d147      	bne.n	8004c7a <_svfiprintf_r+0xe2>
 8004bea:	1bab      	subs	r3, r5, r6
 8004bec:	9305      	str	r3, [sp, #20]
 8004bee:	42b5      	cmp	r5, r6
 8004bf0:	d00c      	beq.n	8004c0c <_svfiprintf_r+0x74>
 8004bf2:	0032      	movs	r2, r6
 8004bf4:	0039      	movs	r1, r7
 8004bf6:	9803      	ldr	r0, [sp, #12]
 8004bf8:	f7ff ff6c 	bl	8004ad4 <__ssputs_r>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d100      	bne.n	8004c02 <_svfiprintf_r+0x6a>
 8004c00:	e0ae      	b.n	8004d60 <_svfiprintf_r+0x1c8>
 8004c02:	6962      	ldr	r2, [r4, #20]
 8004c04:	9b05      	ldr	r3, [sp, #20]
 8004c06:	4694      	mov	ip, r2
 8004c08:	4463      	add	r3, ip
 8004c0a:	6163      	str	r3, [r4, #20]
 8004c0c:	782b      	ldrb	r3, [r5, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d100      	bne.n	8004c14 <_svfiprintf_r+0x7c>
 8004c12:	e0a5      	b.n	8004d60 <_svfiprintf_r+0x1c8>
 8004c14:	2201      	movs	r2, #1
 8004c16:	2300      	movs	r3, #0
 8004c18:	4252      	negs	r2, r2
 8004c1a:	6062      	str	r2, [r4, #4]
 8004c1c:	a904      	add	r1, sp, #16
 8004c1e:	3254      	adds	r2, #84	; 0x54
 8004c20:	1852      	adds	r2, r2, r1
 8004c22:	1c6e      	adds	r6, r5, #1
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	60e3      	str	r3, [r4, #12]
 8004c28:	60a3      	str	r3, [r4, #8]
 8004c2a:	7013      	strb	r3, [r2, #0]
 8004c2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c2e:	2205      	movs	r2, #5
 8004c30:	7831      	ldrb	r1, [r6, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_svfiprintf_r+0x1ec>)
 8004c34:	f000 fa32 	bl	800509c <memchr>
 8004c38:	1c75      	adds	r5, r6, #1
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d11f      	bne.n	8004c7e <_svfiprintf_r+0xe6>
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	06d3      	lsls	r3, r2, #27
 8004c42:	d504      	bpl.n	8004c4e <_svfiprintf_r+0xb6>
 8004c44:	2353      	movs	r3, #83	; 0x53
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	185b      	adds	r3, r3, r1
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	7019      	strb	r1, [r3, #0]
 8004c4e:	0713      	lsls	r3, r2, #28
 8004c50:	d504      	bpl.n	8004c5c <_svfiprintf_r+0xc4>
 8004c52:	2353      	movs	r3, #83	; 0x53
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	185b      	adds	r3, r3, r1
 8004c58:	212b      	movs	r1, #43	; 0x2b
 8004c5a:	7019      	strb	r1, [r3, #0]
 8004c5c:	7833      	ldrb	r3, [r6, #0]
 8004c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c60:	d016      	beq.n	8004c90 <_svfiprintf_r+0xf8>
 8004c62:	0035      	movs	r5, r6
 8004c64:	2100      	movs	r1, #0
 8004c66:	200a      	movs	r0, #10
 8004c68:	68e3      	ldr	r3, [r4, #12]
 8004c6a:	782a      	ldrb	r2, [r5, #0]
 8004c6c:	1c6e      	adds	r6, r5, #1
 8004c6e:	3a30      	subs	r2, #48	; 0x30
 8004c70:	2a09      	cmp	r2, #9
 8004c72:	d94e      	bls.n	8004d12 <_svfiprintf_r+0x17a>
 8004c74:	2900      	cmp	r1, #0
 8004c76:	d111      	bne.n	8004c9c <_svfiprintf_r+0x104>
 8004c78:	e017      	b.n	8004caa <_svfiprintf_r+0x112>
 8004c7a:	3501      	adds	r5, #1
 8004c7c:	e7b0      	b.n	8004be0 <_svfiprintf_r+0x48>
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <_svfiprintf_r+0x1ec>)
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	1ac0      	subs	r0, r0, r3
 8004c84:	2301      	movs	r3, #1
 8004c86:	4083      	lsls	r3, r0
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	002e      	movs	r6, r5
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	e7ce      	b.n	8004c2e <_svfiprintf_r+0x96>
 8004c90:	9b07      	ldr	r3, [sp, #28]
 8004c92:	1d19      	adds	r1, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9107      	str	r1, [sp, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db01      	blt.n	8004ca0 <_svfiprintf_r+0x108>
 8004c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c9e:	e004      	b.n	8004caa <_svfiprintf_r+0x112>
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	60e3      	str	r3, [r4, #12]
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	782b      	ldrb	r3, [r5, #0]
 8004cac:	2b2e      	cmp	r3, #46	; 0x2e
 8004cae:	d10a      	bne.n	8004cc6 <_svfiprintf_r+0x12e>
 8004cb0:	786b      	ldrb	r3, [r5, #1]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d135      	bne.n	8004d22 <_svfiprintf_r+0x18a>
 8004cb6:	9b07      	ldr	r3, [sp, #28]
 8004cb8:	3502      	adds	r5, #2
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	db2b      	blt.n	8004d1c <_svfiprintf_r+0x184>
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	4e30      	ldr	r6, [pc, #192]	; (8004d88 <_svfiprintf_r+0x1f0>)
 8004cc8:	2203      	movs	r2, #3
 8004cca:	0030      	movs	r0, r6
 8004ccc:	7829      	ldrb	r1, [r5, #0]
 8004cce:	f000 f9e5 	bl	800509c <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d006      	beq.n	8004ce4 <_svfiprintf_r+0x14c>
 8004cd6:	2340      	movs	r3, #64	; 0x40
 8004cd8:	1b80      	subs	r0, r0, r6
 8004cda:	4083      	lsls	r3, r0
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	3501      	adds	r5, #1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	7829      	ldrb	r1, [r5, #0]
 8004ce6:	2206      	movs	r2, #6
 8004ce8:	4828      	ldr	r0, [pc, #160]	; (8004d8c <_svfiprintf_r+0x1f4>)
 8004cea:	1c6e      	adds	r6, r5, #1
 8004cec:	7621      	strb	r1, [r4, #24]
 8004cee:	f000 f9d5 	bl	800509c <memchr>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d03c      	beq.n	8004d70 <_svfiprintf_r+0x1d8>
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <_svfiprintf_r+0x1f8>)
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d125      	bne.n	8004d48 <_svfiprintf_r+0x1b0>
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	9b07      	ldr	r3, [sp, #28]
 8004d00:	3307      	adds	r3, #7
 8004d02:	4393      	bics	r3, r2
 8004d04:	3308      	adds	r3, #8
 8004d06:	9307      	str	r3, [sp, #28]
 8004d08:	6963      	ldr	r3, [r4, #20]
 8004d0a:	9a04      	ldr	r2, [sp, #16]
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	6163      	str	r3, [r4, #20]
 8004d10:	e765      	b.n	8004bde <_svfiprintf_r+0x46>
 8004d12:	4343      	muls	r3, r0
 8004d14:	0035      	movs	r5, r6
 8004d16:	2101      	movs	r1, #1
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	e7a6      	b.n	8004c6a <_svfiprintf_r+0xd2>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	425b      	negs	r3, r3
 8004d20:	e7d0      	b.n	8004cc4 <_svfiprintf_r+0x12c>
 8004d22:	2300      	movs	r3, #0
 8004d24:	200a      	movs	r0, #10
 8004d26:	001a      	movs	r2, r3
 8004d28:	3501      	adds	r5, #1
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	7829      	ldrb	r1, [r5, #0]
 8004d2e:	1c6e      	adds	r6, r5, #1
 8004d30:	3930      	subs	r1, #48	; 0x30
 8004d32:	2909      	cmp	r1, #9
 8004d34:	d903      	bls.n	8004d3e <_svfiprintf_r+0x1a6>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0c5      	beq.n	8004cc6 <_svfiprintf_r+0x12e>
 8004d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3c:	e7c3      	b.n	8004cc6 <_svfiprintf_r+0x12e>
 8004d3e:	4342      	muls	r2, r0
 8004d40:	0035      	movs	r5, r6
 8004d42:	2301      	movs	r3, #1
 8004d44:	1852      	adds	r2, r2, r1
 8004d46:	e7f1      	b.n	8004d2c <_svfiprintf_r+0x194>
 8004d48:	ab07      	add	r3, sp, #28
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	003a      	movs	r2, r7
 8004d4e:	0021      	movs	r1, r4
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <_svfiprintf_r+0x1fc>)
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	e000      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d56:	bf00      	nop
 8004d58:	9004      	str	r0, [sp, #16]
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d1d3      	bne.n	8004d08 <_svfiprintf_r+0x170>
 8004d60:	89bb      	ldrh	r3, [r7, #12]
 8004d62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d64:	065b      	lsls	r3, r3, #25
 8004d66:	d400      	bmi.n	8004d6a <_svfiprintf_r+0x1d2>
 8004d68:	e72d      	b.n	8004bc6 <_svfiprintf_r+0x2e>
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	4240      	negs	r0, r0
 8004d6e:	e72a      	b.n	8004bc6 <_svfiprintf_r+0x2e>
 8004d70:	ab07      	add	r3, sp, #28
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	003a      	movs	r2, r7
 8004d76:	0021      	movs	r1, r4
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <_svfiprintf_r+0x1fc>)
 8004d7a:	9803      	ldr	r0, [sp, #12]
 8004d7c:	f000 f87c 	bl	8004e78 <_printf_i>
 8004d80:	e7ea      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	0800547d 	.word	0x0800547d
 8004d88:	08005483 	.word	0x08005483
 8004d8c:	08005487 	.word	0x08005487
 8004d90:	00000000 	.word	0x00000000
 8004d94:	08004ad5 	.word	0x08004ad5

08004d98 <_printf_common>:
 8004d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9a:	0015      	movs	r5, r2
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	688a      	ldr	r2, [r1, #8]
 8004da0:	690b      	ldr	r3, [r1, #16]
 8004da2:	000c      	movs	r4, r1
 8004da4:	9000      	str	r0, [sp, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	da00      	bge.n	8004dac <_printf_common+0x14>
 8004daa:	0013      	movs	r3, r2
 8004dac:	0022      	movs	r2, r4
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	3243      	adds	r2, #67	; 0x43
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d001      	beq.n	8004dbc <_printf_common+0x24>
 8004db8:	3301      	adds	r3, #1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	069b      	lsls	r3, r3, #26
 8004dc0:	d502      	bpl.n	8004dc8 <_printf_common+0x30>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	2306      	movs	r3, #6
 8004dcc:	0017      	movs	r7, r2
 8004dce:	401f      	ands	r7, r3
 8004dd0:	421a      	tst	r2, r3
 8004dd2:	d027      	beq.n	8004e24 <_printf_common+0x8c>
 8004dd4:	0023      	movs	r3, r4
 8004dd6:	3343      	adds	r3, #67	; 0x43
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	4193      	sbcs	r3, r2
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	0692      	lsls	r2, r2, #26
 8004de2:	d430      	bmi.n	8004e46 <_printf_common+0xae>
 8004de4:	0022      	movs	r2, r4
 8004de6:	9901      	ldr	r1, [sp, #4]
 8004de8:	9800      	ldr	r0, [sp, #0]
 8004dea:	9e08      	ldr	r6, [sp, #32]
 8004dec:	3243      	adds	r2, #67	; 0x43
 8004dee:	47b0      	blx	r6
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d025      	beq.n	8004e40 <_printf_common+0xa8>
 8004df4:	2306      	movs	r3, #6
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	682a      	ldr	r2, [r5, #0]
 8004dfa:	68e1      	ldr	r1, [r4, #12]
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	4003      	ands	r3, r0
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d103      	bne.n	8004e0c <_printf_common+0x74>
 8004e04:	1a8d      	subs	r5, r1, r2
 8004e06:	43eb      	mvns	r3, r5
 8004e08:	17db      	asrs	r3, r3, #31
 8004e0a:	401d      	ands	r5, r3
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	dd01      	ble.n	8004e18 <_printf_common+0x80>
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	18ed      	adds	r5, r5, r3
 8004e18:	2700      	movs	r7, #0
 8004e1a:	42bd      	cmp	r5, r7
 8004e1c:	d120      	bne.n	8004e60 <_printf_common+0xc8>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e010      	b.n	8004e44 <_printf_common+0xac>
 8004e22:	3701      	adds	r7, #1
 8004e24:	68e3      	ldr	r3, [r4, #12]
 8004e26:	682a      	ldr	r2, [r5, #0]
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	42bb      	cmp	r3, r7
 8004e2c:	ddd2      	ble.n	8004dd4 <_printf_common+0x3c>
 8004e2e:	0022      	movs	r2, r4
 8004e30:	2301      	movs	r3, #1
 8004e32:	9901      	ldr	r1, [sp, #4]
 8004e34:	9800      	ldr	r0, [sp, #0]
 8004e36:	9e08      	ldr	r6, [sp, #32]
 8004e38:	3219      	adds	r2, #25
 8004e3a:	47b0      	blx	r6
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d1f0      	bne.n	8004e22 <_printf_common+0x8a>
 8004e40:	2001      	movs	r0, #1
 8004e42:	4240      	negs	r0, r0
 8004e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e46:	2030      	movs	r0, #48	; 0x30
 8004e48:	18e1      	adds	r1, r4, r3
 8004e4a:	3143      	adds	r1, #67	; 0x43
 8004e4c:	7008      	strb	r0, [r1, #0]
 8004e4e:	0021      	movs	r1, r4
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	3145      	adds	r1, #69	; 0x45
 8004e54:	7809      	ldrb	r1, [r1, #0]
 8004e56:	18a2      	adds	r2, r4, r2
 8004e58:	3243      	adds	r2, #67	; 0x43
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	7011      	strb	r1, [r2, #0]
 8004e5e:	e7c1      	b.n	8004de4 <_printf_common+0x4c>
 8004e60:	0022      	movs	r2, r4
 8004e62:	2301      	movs	r3, #1
 8004e64:	9901      	ldr	r1, [sp, #4]
 8004e66:	9800      	ldr	r0, [sp, #0]
 8004e68:	9e08      	ldr	r6, [sp, #32]
 8004e6a:	321a      	adds	r2, #26
 8004e6c:	47b0      	blx	r6
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d0e6      	beq.n	8004e40 <_printf_common+0xa8>
 8004e72:	3701      	adds	r7, #1
 8004e74:	e7d1      	b.n	8004e1a <_printf_common+0x82>
	...

08004e78 <_printf_i>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b08b      	sub	sp, #44	; 0x2c
 8004e7c:	9206      	str	r2, [sp, #24]
 8004e7e:	000a      	movs	r2, r1
 8004e80:	3243      	adds	r2, #67	; 0x43
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	9005      	str	r0, [sp, #20]
 8004e86:	9204      	str	r2, [sp, #16]
 8004e88:	7e0a      	ldrb	r2, [r1, #24]
 8004e8a:	000c      	movs	r4, r1
 8004e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e8e:	2a78      	cmp	r2, #120	; 0x78
 8004e90:	d807      	bhi.n	8004ea2 <_printf_i+0x2a>
 8004e92:	2a62      	cmp	r2, #98	; 0x62
 8004e94:	d809      	bhi.n	8004eaa <_printf_i+0x32>
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d100      	bne.n	8004e9c <_printf_i+0x24>
 8004e9a:	e0c1      	b.n	8005020 <_printf_i+0x1a8>
 8004e9c:	2a58      	cmp	r2, #88	; 0x58
 8004e9e:	d100      	bne.n	8004ea2 <_printf_i+0x2a>
 8004ea0:	e08c      	b.n	8004fbc <_printf_i+0x144>
 8004ea2:	0026      	movs	r6, r4
 8004ea4:	3642      	adds	r6, #66	; 0x42
 8004ea6:	7032      	strb	r2, [r6, #0]
 8004ea8:	e022      	b.n	8004ef0 <_printf_i+0x78>
 8004eaa:	0010      	movs	r0, r2
 8004eac:	3863      	subs	r0, #99	; 0x63
 8004eae:	2815      	cmp	r0, #21
 8004eb0:	d8f7      	bhi.n	8004ea2 <_printf_i+0x2a>
 8004eb2:	f7fb f931 	bl	8000118 <__gnu_thumb1_case_shi>
 8004eb6:	0016      	.short	0x0016
 8004eb8:	fff6001f 	.word	0xfff6001f
 8004ebc:	fff6fff6 	.word	0xfff6fff6
 8004ec0:	001ffff6 	.word	0x001ffff6
 8004ec4:	fff6fff6 	.word	0xfff6fff6
 8004ec8:	fff6fff6 	.word	0xfff6fff6
 8004ecc:	003600a8 	.word	0x003600a8
 8004ed0:	fff6009a 	.word	0xfff6009a
 8004ed4:	00b9fff6 	.word	0x00b9fff6
 8004ed8:	0036fff6 	.word	0x0036fff6
 8004edc:	fff6fff6 	.word	0xfff6fff6
 8004ee0:	009e      	.short	0x009e
 8004ee2:	0026      	movs	r6, r4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	3642      	adds	r6, #66	; 0x42
 8004ee8:	1d11      	adds	r1, r2, #4
 8004eea:	6019      	str	r1, [r3, #0]
 8004eec:	6813      	ldr	r3, [r2, #0]
 8004eee:	7033      	strb	r3, [r6, #0]
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0a7      	b.n	8005044 <_printf_i+0x1cc>
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	1d0a      	adds	r2, r1, #4
 8004efa:	0605      	lsls	r5, r0, #24
 8004efc:	d50b      	bpl.n	8004f16 <_printf_i+0x9e>
 8004efe:	680d      	ldr	r5, [r1, #0]
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	da03      	bge.n	8004f0e <_printf_i+0x96>
 8004f06:	232d      	movs	r3, #45	; 0x2d
 8004f08:	9a04      	ldr	r2, [sp, #16]
 8004f0a:	426d      	negs	r5, r5
 8004f0c:	7013      	strb	r3, [r2, #0]
 8004f0e:	4b61      	ldr	r3, [pc, #388]	; (8005094 <_printf_i+0x21c>)
 8004f10:	270a      	movs	r7, #10
 8004f12:	9303      	str	r3, [sp, #12]
 8004f14:	e01b      	b.n	8004f4e <_printf_i+0xd6>
 8004f16:	680d      	ldr	r5, [r1, #0]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	0641      	lsls	r1, r0, #25
 8004f1c:	d5f1      	bpl.n	8004f02 <_printf_i+0x8a>
 8004f1e:	b22d      	sxth	r5, r5
 8004f20:	e7ef      	b.n	8004f02 <_printf_i+0x8a>
 8004f22:	680d      	ldr	r5, [r1, #0]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	1d08      	adds	r0, r1, #4
 8004f28:	6018      	str	r0, [r3, #0]
 8004f2a:	062e      	lsls	r6, r5, #24
 8004f2c:	d501      	bpl.n	8004f32 <_printf_i+0xba>
 8004f2e:	680d      	ldr	r5, [r1, #0]
 8004f30:	e003      	b.n	8004f3a <_printf_i+0xc2>
 8004f32:	066d      	lsls	r5, r5, #25
 8004f34:	d5fb      	bpl.n	8004f2e <_printf_i+0xb6>
 8004f36:	680d      	ldr	r5, [r1, #0]
 8004f38:	b2ad      	uxth	r5, r5
 8004f3a:	4b56      	ldr	r3, [pc, #344]	; (8005094 <_printf_i+0x21c>)
 8004f3c:	2708      	movs	r7, #8
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	2a6f      	cmp	r2, #111	; 0x6f
 8004f42:	d000      	beq.n	8004f46 <_printf_i+0xce>
 8004f44:	3702      	adds	r7, #2
 8004f46:	0023      	movs	r3, r4
 8004f48:	2200      	movs	r2, #0
 8004f4a:	3343      	adds	r3, #67	; 0x43
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	db03      	blt.n	8004f5e <_printf_i+0xe6>
 8004f56:	2204      	movs	r2, #4
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	4391      	bics	r1, r2
 8004f5c:	6021      	str	r1, [r4, #0]
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	d102      	bne.n	8004f68 <_printf_i+0xf0>
 8004f62:	9e04      	ldr	r6, [sp, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <_printf_i+0x10a>
 8004f68:	9e04      	ldr	r6, [sp, #16]
 8004f6a:	0028      	movs	r0, r5
 8004f6c:	0039      	movs	r1, r7
 8004f6e:	f7fb f963 	bl	8000238 <__aeabi_uidivmod>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	3e01      	subs	r6, #1
 8004f76:	5c5b      	ldrb	r3, [r3, r1]
 8004f78:	7033      	strb	r3, [r6, #0]
 8004f7a:	002b      	movs	r3, r5
 8004f7c:	0005      	movs	r5, r0
 8004f7e:	429f      	cmp	r7, r3
 8004f80:	d9f3      	bls.n	8004f6a <_printf_i+0xf2>
 8004f82:	2f08      	cmp	r7, #8
 8004f84:	d109      	bne.n	8004f9a <_printf_i+0x122>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	07db      	lsls	r3, r3, #31
 8004f8a:	d506      	bpl.n	8004f9a <_printf_i+0x122>
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	6922      	ldr	r2, [r4, #16]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	dc02      	bgt.n	8004f9a <_printf_i+0x122>
 8004f94:	2330      	movs	r3, #48	; 0x30
 8004f96:	3e01      	subs	r6, #1
 8004f98:	7033      	strb	r3, [r6, #0]
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	1b9b      	subs	r3, r3, r6
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	9b07      	ldr	r3, [sp, #28]
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	9805      	ldr	r0, [sp, #20]
 8004fa8:	9b06      	ldr	r3, [sp, #24]
 8004faa:	aa09      	add	r2, sp, #36	; 0x24
 8004fac:	f7ff fef4 	bl	8004d98 <_printf_common>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d14c      	bne.n	800504e <_printf_i+0x1d6>
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	4240      	negs	r0, r0
 8004fb8:	b00b      	add	sp, #44	; 0x2c
 8004fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fbc:	3145      	adds	r1, #69	; 0x45
 8004fbe:	700a      	strb	r2, [r1, #0]
 8004fc0:	4a34      	ldr	r2, [pc, #208]	; (8005094 <_printf_i+0x21c>)
 8004fc2:	9203      	str	r2, [sp, #12]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	ca20      	ldmia	r2!, {r5}
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	0608      	lsls	r0, r1, #24
 8004fce:	d516      	bpl.n	8004ffe <_printf_i+0x186>
 8004fd0:	07cb      	lsls	r3, r1, #31
 8004fd2:	d502      	bpl.n	8004fda <_printf_i+0x162>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	4319      	orrs	r1, r3
 8004fd8:	6021      	str	r1, [r4, #0]
 8004fda:	2710      	movs	r7, #16
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	d1b2      	bne.n	8004f46 <_printf_i+0xce>
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	439a      	bics	r2, r3
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	e7ad      	b.n	8004f46 <_printf_i+0xce>
 8004fea:	2220      	movs	r2, #32
 8004fec:	6809      	ldr	r1, [r1, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	6022      	str	r2, [r4, #0]
 8004ff2:	0022      	movs	r2, r4
 8004ff4:	2178      	movs	r1, #120	; 0x78
 8004ff6:	3245      	adds	r2, #69	; 0x45
 8004ff8:	7011      	strb	r1, [r2, #0]
 8004ffa:	4a27      	ldr	r2, [pc, #156]	; (8005098 <_printf_i+0x220>)
 8004ffc:	e7e1      	b.n	8004fc2 <_printf_i+0x14a>
 8004ffe:	0648      	lsls	r0, r1, #25
 8005000:	d5e6      	bpl.n	8004fd0 <_printf_i+0x158>
 8005002:	b2ad      	uxth	r5, r5
 8005004:	e7e4      	b.n	8004fd0 <_printf_i+0x158>
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	680d      	ldr	r5, [r1, #0]
 800500a:	1d10      	adds	r0, r2, #4
 800500c:	6949      	ldr	r1, [r1, #20]
 800500e:	6018      	str	r0, [r3, #0]
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	062e      	lsls	r6, r5, #24
 8005014:	d501      	bpl.n	800501a <_printf_i+0x1a2>
 8005016:	6019      	str	r1, [r3, #0]
 8005018:	e002      	b.n	8005020 <_printf_i+0x1a8>
 800501a:	066d      	lsls	r5, r5, #25
 800501c:	d5fb      	bpl.n	8005016 <_printf_i+0x19e>
 800501e:	8019      	strh	r1, [r3, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	9e04      	ldr	r6, [sp, #16]
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	e7bb      	b.n	8004fa0 <_printf_i+0x128>
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	1d11      	adds	r1, r2, #4
 800502c:	6019      	str	r1, [r3, #0]
 800502e:	6816      	ldr	r6, [r2, #0]
 8005030:	2100      	movs	r1, #0
 8005032:	0030      	movs	r0, r6
 8005034:	6862      	ldr	r2, [r4, #4]
 8005036:	f000 f831 	bl	800509c <memchr>
 800503a:	2800      	cmp	r0, #0
 800503c:	d001      	beq.n	8005042 <_printf_i+0x1ca>
 800503e:	1b80      	subs	r0, r0, r6
 8005040:	6060      	str	r0, [r4, #4]
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	2300      	movs	r3, #0
 8005048:	9a04      	ldr	r2, [sp, #16]
 800504a:	7013      	strb	r3, [r2, #0]
 800504c:	e7a8      	b.n	8004fa0 <_printf_i+0x128>
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	0032      	movs	r2, r6
 8005052:	9906      	ldr	r1, [sp, #24]
 8005054:	9805      	ldr	r0, [sp, #20]
 8005056:	9d07      	ldr	r5, [sp, #28]
 8005058:	47a8      	blx	r5
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	d0aa      	beq.n	8004fb4 <_printf_i+0x13c>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	079b      	lsls	r3, r3, #30
 8005062:	d415      	bmi.n	8005090 <_printf_i+0x218>
 8005064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005066:	68e0      	ldr	r0, [r4, #12]
 8005068:	4298      	cmp	r0, r3
 800506a:	daa5      	bge.n	8004fb8 <_printf_i+0x140>
 800506c:	0018      	movs	r0, r3
 800506e:	e7a3      	b.n	8004fb8 <_printf_i+0x140>
 8005070:	0022      	movs	r2, r4
 8005072:	2301      	movs	r3, #1
 8005074:	9906      	ldr	r1, [sp, #24]
 8005076:	9805      	ldr	r0, [sp, #20]
 8005078:	9e07      	ldr	r6, [sp, #28]
 800507a:	3219      	adds	r2, #25
 800507c:	47b0      	blx	r6
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d098      	beq.n	8004fb4 <_printf_i+0x13c>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	42ab      	cmp	r3, r5
 800508c:	dcf0      	bgt.n	8005070 <_printf_i+0x1f8>
 800508e:	e7e9      	b.n	8005064 <_printf_i+0x1ec>
 8005090:	2500      	movs	r5, #0
 8005092:	e7f7      	b.n	8005084 <_printf_i+0x20c>
 8005094:	0800548e 	.word	0x0800548e
 8005098:	0800549f 	.word	0x0800549f

0800509c <memchr>:
 800509c:	b2c9      	uxtb	r1, r1
 800509e:	1882      	adds	r2, r0, r2
 80050a0:	4290      	cmp	r0, r2
 80050a2:	d101      	bne.n	80050a8 <memchr+0xc>
 80050a4:	2000      	movs	r0, #0
 80050a6:	4770      	bx	lr
 80050a8:	7803      	ldrb	r3, [r0, #0]
 80050aa:	428b      	cmp	r3, r1
 80050ac:	d0fb      	beq.n	80050a6 <memchr+0xa>
 80050ae:	3001      	adds	r0, #1
 80050b0:	e7f6      	b.n	80050a0 <memchr+0x4>

080050b2 <memcpy>:
 80050b2:	2300      	movs	r3, #0
 80050b4:	b510      	push	{r4, lr}
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d100      	bne.n	80050bc <memcpy+0xa>
 80050ba:	bd10      	pop	{r4, pc}
 80050bc:	5ccc      	ldrb	r4, [r1, r3]
 80050be:	54c4      	strb	r4, [r0, r3]
 80050c0:	3301      	adds	r3, #1
 80050c2:	e7f8      	b.n	80050b6 <memcpy+0x4>

080050c4 <memmove>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4288      	cmp	r0, r1
 80050c8:	d902      	bls.n	80050d0 <memmove+0xc>
 80050ca:	188b      	adds	r3, r1, r2
 80050cc:	4298      	cmp	r0, r3
 80050ce:	d303      	bcc.n	80050d8 <memmove+0x14>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e007      	b.n	80050e4 <memmove+0x20>
 80050d4:	5c8b      	ldrb	r3, [r1, r2]
 80050d6:	5483      	strb	r3, [r0, r2]
 80050d8:	3a01      	subs	r2, #1
 80050da:	d2fb      	bcs.n	80050d4 <memmove+0x10>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	5ccc      	ldrb	r4, [r1, r3]
 80050e0:	54c4      	strb	r4, [r0, r3]
 80050e2:	3301      	adds	r3, #1
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1fa      	bne.n	80050de <memmove+0x1a>
 80050e8:	e7f8      	b.n	80050dc <memmove+0x18>
	...

080050ec <_free_r>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	0005      	movs	r5, r0
 80050f0:	2900      	cmp	r1, #0
 80050f2:	d010      	beq.n	8005116 <_free_r+0x2a>
 80050f4:	1f0c      	subs	r4, r1, #4
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da00      	bge.n	80050fe <_free_r+0x12>
 80050fc:	18e4      	adds	r4, r4, r3
 80050fe:	0028      	movs	r0, r5
 8005100:	f000 f918 	bl	8005334 <__malloc_lock>
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <_free_r+0x90>)
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <_free_r+0x2c>
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	6014      	str	r4, [r2, #0]
 8005110:	0028      	movs	r0, r5
 8005112:	f000 f917 	bl	8005344 <__malloc_unlock>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	42a3      	cmp	r3, r4
 800511a:	d908      	bls.n	800512e <_free_r+0x42>
 800511c:	6821      	ldr	r1, [r4, #0]
 800511e:	1860      	adds	r0, r4, r1
 8005120:	4283      	cmp	r3, r0
 8005122:	d1f3      	bne.n	800510c <_free_r+0x20>
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	1841      	adds	r1, r0, r1
 800512a:	6021      	str	r1, [r4, #0]
 800512c:	e7ee      	b.n	800510c <_free_r+0x20>
 800512e:	001a      	movs	r2, r3
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <_free_r+0x4e>
 8005136:	42a3      	cmp	r3, r4
 8005138:	d9f9      	bls.n	800512e <_free_r+0x42>
 800513a:	6811      	ldr	r1, [r2, #0]
 800513c:	1850      	adds	r0, r2, r1
 800513e:	42a0      	cmp	r0, r4
 8005140:	d10b      	bne.n	800515a <_free_r+0x6e>
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	1809      	adds	r1, r1, r0
 8005146:	1850      	adds	r0, r2, r1
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	4283      	cmp	r3, r0
 800514c:	d1e0      	bne.n	8005110 <_free_r+0x24>
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	1841      	adds	r1, r0, r1
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	6053      	str	r3, [r2, #4]
 8005158:	e7da      	b.n	8005110 <_free_r+0x24>
 800515a:	42a0      	cmp	r0, r4
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	e7d5      	b.n	8005110 <_free_r+0x24>
 8005164:	6821      	ldr	r1, [r4, #0]
 8005166:	1860      	adds	r0, r4, r1
 8005168:	4283      	cmp	r3, r0
 800516a:	d103      	bne.n	8005174 <_free_r+0x88>
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	1841      	adds	r1, r0, r1
 8005172:	6021      	str	r1, [r4, #0]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6054      	str	r4, [r2, #4]
 8005178:	e7ca      	b.n	8005110 <_free_r+0x24>
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	2000031c 	.word	0x2000031c

08005180 <sbrk_aligned>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	4e0f      	ldr	r6, [pc, #60]	; (80051c0 <sbrk_aligned+0x40>)
 8005184:	000d      	movs	r5, r1
 8005186:	6831      	ldr	r1, [r6, #0]
 8005188:	0004      	movs	r4, r0
 800518a:	2900      	cmp	r1, #0
 800518c:	d102      	bne.n	8005194 <sbrk_aligned+0x14>
 800518e:	f000 f8bf 	bl	8005310 <_sbrk_r>
 8005192:	6030      	str	r0, [r6, #0]
 8005194:	0029      	movs	r1, r5
 8005196:	0020      	movs	r0, r4
 8005198:	f000 f8ba 	bl	8005310 <_sbrk_r>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d00a      	beq.n	80051b6 <sbrk_aligned+0x36>
 80051a0:	2303      	movs	r3, #3
 80051a2:	1cc5      	adds	r5, r0, #3
 80051a4:	439d      	bics	r5, r3
 80051a6:	42a8      	cmp	r0, r5
 80051a8:	d007      	beq.n	80051ba <sbrk_aligned+0x3a>
 80051aa:	1a29      	subs	r1, r5, r0
 80051ac:	0020      	movs	r0, r4
 80051ae:	f000 f8af 	bl	8005310 <_sbrk_r>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d101      	bne.n	80051ba <sbrk_aligned+0x3a>
 80051b6:	2501      	movs	r5, #1
 80051b8:	426d      	negs	r5, r5
 80051ba:	0028      	movs	r0, r5
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	20000320 	.word	0x20000320

080051c4 <_malloc_r>:
 80051c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c6:	2203      	movs	r2, #3
 80051c8:	1ccb      	adds	r3, r1, #3
 80051ca:	4393      	bics	r3, r2
 80051cc:	3308      	adds	r3, #8
 80051ce:	0006      	movs	r6, r0
 80051d0:	001f      	movs	r7, r3
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d232      	bcs.n	800523c <_malloc_r+0x78>
 80051d6:	270c      	movs	r7, #12
 80051d8:	42b9      	cmp	r1, r7
 80051da:	d831      	bhi.n	8005240 <_malloc_r+0x7c>
 80051dc:	0030      	movs	r0, r6
 80051de:	f000 f8a9 	bl	8005334 <__malloc_lock>
 80051e2:	4d32      	ldr	r5, [pc, #200]	; (80052ac <_malloc_r+0xe8>)
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	001c      	movs	r4, r3
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	d12e      	bne.n	800524a <_malloc_r+0x86>
 80051ec:	0039      	movs	r1, r7
 80051ee:	0030      	movs	r0, r6
 80051f0:	f7ff ffc6 	bl	8005180 <sbrk_aligned>
 80051f4:	0004      	movs	r4, r0
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	d11e      	bne.n	8005238 <_malloc_r+0x74>
 80051fa:	682c      	ldr	r4, [r5, #0]
 80051fc:	0025      	movs	r5, r4
 80051fe:	2d00      	cmp	r5, #0
 8005200:	d14a      	bne.n	8005298 <_malloc_r+0xd4>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0029      	movs	r1, r5
 8005206:	18e3      	adds	r3, r4, r3
 8005208:	0030      	movs	r0, r6
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f000 f880 	bl	8005310 <_sbrk_r>
 8005210:	9b01      	ldr	r3, [sp, #4]
 8005212:	4283      	cmp	r3, r0
 8005214:	d143      	bne.n	800529e <_malloc_r+0xda>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	3703      	adds	r7, #3
 800521a:	1aff      	subs	r7, r7, r3
 800521c:	2303      	movs	r3, #3
 800521e:	439f      	bics	r7, r3
 8005220:	3708      	adds	r7, #8
 8005222:	2f0c      	cmp	r7, #12
 8005224:	d200      	bcs.n	8005228 <_malloc_r+0x64>
 8005226:	270c      	movs	r7, #12
 8005228:	0039      	movs	r1, r7
 800522a:	0030      	movs	r0, r6
 800522c:	f7ff ffa8 	bl	8005180 <sbrk_aligned>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d034      	beq.n	800529e <_malloc_r+0xda>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	19df      	adds	r7, r3, r7
 8005238:	6027      	str	r7, [r4, #0]
 800523a:	e013      	b.n	8005264 <_malloc_r+0xa0>
 800523c:	2b00      	cmp	r3, #0
 800523e:	dacb      	bge.n	80051d8 <_malloc_r+0x14>
 8005240:	230c      	movs	r3, #12
 8005242:	2500      	movs	r5, #0
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	0028      	movs	r0, r5
 8005248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	1bd1      	subs	r1, r2, r7
 800524e:	d420      	bmi.n	8005292 <_malloc_r+0xce>
 8005250:	290b      	cmp	r1, #11
 8005252:	d917      	bls.n	8005284 <_malloc_r+0xc0>
 8005254:	19e2      	adds	r2, r4, r7
 8005256:	6027      	str	r7, [r4, #0]
 8005258:	42a3      	cmp	r3, r4
 800525a:	d111      	bne.n	8005280 <_malloc_r+0xbc>
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	6053      	str	r3, [r2, #4]
 8005264:	0030      	movs	r0, r6
 8005266:	0025      	movs	r5, r4
 8005268:	f000 f86c 	bl	8005344 <__malloc_unlock>
 800526c:	2207      	movs	r2, #7
 800526e:	350b      	adds	r5, #11
 8005270:	1d23      	adds	r3, r4, #4
 8005272:	4395      	bics	r5, r2
 8005274:	1aea      	subs	r2, r5, r3
 8005276:	429d      	cmp	r5, r3
 8005278:	d0e5      	beq.n	8005246 <_malloc_r+0x82>
 800527a:	1b5b      	subs	r3, r3, r5
 800527c:	50a3      	str	r3, [r4, r2]
 800527e:	e7e2      	b.n	8005246 <_malloc_r+0x82>
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	e7ec      	b.n	800525e <_malloc_r+0x9a>
 8005284:	6862      	ldr	r2, [r4, #4]
 8005286:	42a3      	cmp	r3, r4
 8005288:	d101      	bne.n	800528e <_malloc_r+0xca>
 800528a:	602a      	str	r2, [r5, #0]
 800528c:	e7ea      	b.n	8005264 <_malloc_r+0xa0>
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	e7e8      	b.n	8005264 <_malloc_r+0xa0>
 8005292:	0023      	movs	r3, r4
 8005294:	6864      	ldr	r4, [r4, #4]
 8005296:	e7a7      	b.n	80051e8 <_malloc_r+0x24>
 8005298:	002c      	movs	r4, r5
 800529a:	686d      	ldr	r5, [r5, #4]
 800529c:	e7af      	b.n	80051fe <_malloc_r+0x3a>
 800529e:	230c      	movs	r3, #12
 80052a0:	0030      	movs	r0, r6
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	f000 f84e 	bl	8005344 <__malloc_unlock>
 80052a8:	e7cd      	b.n	8005246 <_malloc_r+0x82>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	2000031c 	.word	0x2000031c

080052b0 <_realloc_r>:
 80052b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b2:	0007      	movs	r7, r0
 80052b4:	000e      	movs	r6, r1
 80052b6:	0014      	movs	r4, r2
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d105      	bne.n	80052c8 <_realloc_r+0x18>
 80052bc:	0011      	movs	r1, r2
 80052be:	f7ff ff81 	bl	80051c4 <_malloc_r>
 80052c2:	0005      	movs	r5, r0
 80052c4:	0028      	movs	r0, r5
 80052c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	d103      	bne.n	80052d4 <_realloc_r+0x24>
 80052cc:	f7ff ff0e 	bl	80050ec <_free_r>
 80052d0:	0025      	movs	r5, r4
 80052d2:	e7f7      	b.n	80052c4 <_realloc_r+0x14>
 80052d4:	f000 f83e 	bl	8005354 <_malloc_usable_size_r>
 80052d8:	9001      	str	r0, [sp, #4]
 80052da:	4284      	cmp	r4, r0
 80052dc:	d803      	bhi.n	80052e6 <_realloc_r+0x36>
 80052de:	0035      	movs	r5, r6
 80052e0:	0843      	lsrs	r3, r0, #1
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	d3ee      	bcc.n	80052c4 <_realloc_r+0x14>
 80052e6:	0021      	movs	r1, r4
 80052e8:	0038      	movs	r0, r7
 80052ea:	f7ff ff6b 	bl	80051c4 <_malloc_r>
 80052ee:	1e05      	subs	r5, r0, #0
 80052f0:	d0e8      	beq.n	80052c4 <_realloc_r+0x14>
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	0022      	movs	r2, r4
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d900      	bls.n	80052fc <_realloc_r+0x4c>
 80052fa:	001a      	movs	r2, r3
 80052fc:	0031      	movs	r1, r6
 80052fe:	0028      	movs	r0, r5
 8005300:	f7ff fed7 	bl	80050b2 <memcpy>
 8005304:	0031      	movs	r1, r6
 8005306:	0038      	movs	r0, r7
 8005308:	f7ff fef0 	bl	80050ec <_free_r>
 800530c:	e7da      	b.n	80052c4 <_realloc_r+0x14>
	...

08005310 <_sbrk_r>:
 8005310:	2300      	movs	r3, #0
 8005312:	b570      	push	{r4, r5, r6, lr}
 8005314:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_sbrk_r+0x20>)
 8005316:	0004      	movs	r4, r0
 8005318:	0008      	movs	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7ff faf4 	bl	8004908 <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d103      	bne.n	800532c <_sbrk_r+0x1c>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d000      	beq.n	800532c <_sbrk_r+0x1c>
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	bd70      	pop	{r4, r5, r6, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	20000324 	.word	0x20000324

08005334 <__malloc_lock>:
 8005334:	b510      	push	{r4, lr}
 8005336:	4802      	ldr	r0, [pc, #8]	; (8005340 <__malloc_lock+0xc>)
 8005338:	f000 f814 	bl	8005364 <__retarget_lock_acquire_recursive>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000328 	.word	0x20000328

08005344 <__malloc_unlock>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4802      	ldr	r0, [pc, #8]	; (8005350 <__malloc_unlock+0xc>)
 8005348:	f000 f80d 	bl	8005366 <__retarget_lock_release_recursive>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	20000328 	.word	0x20000328

08005354 <_malloc_usable_size_r>:
 8005354:	1f0b      	subs	r3, r1, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1f18      	subs	r0, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	da01      	bge.n	8005362 <_malloc_usable_size_r+0xe>
 800535e:	580b      	ldr	r3, [r1, r0]
 8005360:	18c0      	adds	r0, r0, r3
 8005362:	4770      	bx	lr

08005364 <__retarget_lock_acquire_recursive>:
 8005364:	4770      	bx	lr

08005366 <__retarget_lock_release_recursive>:
 8005366:	4770      	bx	lr

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
