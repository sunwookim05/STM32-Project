
Gas_Range_Provide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08003f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  20000078  08003fc8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000418  08003fc8  00020418  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009659  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c6c  00000000  00000000  000296f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000009b8  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000008d0  00000000  00000000  0002bd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00014fa4  00000000  00000000  0002c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ae90  00000000  00000000  00041594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007e324  00000000  00000000  0004c424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000ca748  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000262c  00000000  00000000  000ca798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ea4 	.word	0x08003ea4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003ea4 	.word	0x08003ea4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 80004e4:	003b      	movs	r3, r7
 80004e6:	4a22      	ldr	r2, [pc, #136]	; (8000570 <LcdReadByte+0xa4>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f000 fe3e 	bl	800116c <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <LcdReadByte+0xa4>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 ffcb 	bl	8001492 <HAL_GPIO_WritePin>
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <LcdReadByte+0xa4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ffc5 	bl	8001492 <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 8000508:	2517      	movs	r5, #23
 800050a:	197c      	adds	r4, r7, r5
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <LcdReadByte+0xa4>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0018      	movs	r0, r3
 8000512:	f000 ffa1 	bl	8001458 <HAL_GPIO_ReadPin>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <LcdReadByte+0xa4>)
 800051c:	2200      	movs	r2, #0
 800051e:	2108      	movs	r1, #8
 8000520:	0018      	movs	r0, r3
 8000522:	f000 ffb6 	bl	8001492 <HAL_GPIO_WritePin>
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <LcdReadByte+0xa4>)
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	0018      	movs	r0, r3
 800052e:	f000 ffb0 	bl	8001492 <HAL_GPIO_WritePin>
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <LcdReadByte+0xa4>)
 8000534:	2200      	movs	r2, #0
 8000536:	2108      	movs	r1, #8
 8000538:	0018      	movs	r0, r3
 800053a:	f000 ffaa 	bl	8001492 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 800053e:	003b      	movs	r3, r7
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	003b      	movs	r3, r7
 8000546:	2201      	movs	r2, #1
 8000548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	003b      	movs	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000550:	003b      	movs	r3, r7
 8000552:	2203      	movs	r2, #3
 8000554:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000556:	003b      	movs	r3, r7
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <LcdReadByte+0xa4>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f000 fe05 	bl	800116c <HAL_GPIO_Init>
  
  return lcdBusy;
 8000562:	197b      	adds	r3, r7, r5
 8000564:	781b      	ldrb	r3, [r3, #0]
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b006      	add	sp, #24
 800056c:	bdb0      	pop	{r4, r5, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	50000400 	.word	0x50000400

08000574 <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	4013      	ands	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	481c      	ldr	r0, [pc, #112]	; (80005fc <LcdSendNibble+0x88>)
 800058c:	001a      	movs	r2, r3
 800058e:	2110      	movs	r1, #16
 8000590:	f000 ff7f 	bl	8001492 <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2201      	movs	r2, #1
 800059e:	4013      	ands	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4816      	ldr	r0, [pc, #88]	; (80005fc <LcdSendNibble+0x88>)
 80005a4:	001a      	movs	r2, r3
 80005a6:	2120      	movs	r1, #32
 80005a8:	f000 ff73 	bl	8001492 <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2201      	movs	r2, #1
 80005b6:	4013      	ands	r3, r2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <LcdSendNibble+0x88>)
 80005bc:	001a      	movs	r2, r3
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	f000 ff67 	bl	8001492 <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	08db      	lsrs	r3, r3, #3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <LcdSendNibble+0x88>)
 80005d4:	001a      	movs	r2, r3
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	f000 ff5b 	bl	8001492 <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <LcdSendNibble+0x88>)
 80005de:	2201      	movs	r2, #1
 80005e0:	2108      	movs	r1, #8
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 ff55 	bl	8001492 <HAL_GPIO_WritePin>
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <LcdSendNibble+0x88>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	2108      	movs	r1, #8
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 ff4f 	bl	8001492 <HAL_GPIO_WritePin>
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	50000400 	.word	0x50000400

08000600 <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	0002      	movs	r2, r0
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	1dbb      	adds	r3, r7, #6
 800060e:	1c0a      	adds	r2, r1, #0
 8000610:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <LcdSendByte+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	0018      	movs	r0, r3
 800061a:	f000 ff3a 	bl	8001492 <HAL_GPIO_WritePin>
  while(LcdReadByte());
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	f7ff ff54 	bl	80004cc <LcdReadByte>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d1fb      	bne.n	8000620 <LcdSendByte+0x20>
  LCD_RS(address);
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <LcdSendByte+0x74>)
 800062e:	001a      	movs	r2, r3
 8000630:	2101      	movs	r1, #1
 8000632:	f000 ff2e 	bl	8001492 <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <LcdSendByte+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 ff28 	bl	8001492 <HAL_GPIO_WritePin>
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <LcdSendByte+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	2108      	movs	r1, #8
 8000648:	0018      	movs	r0, r3
 800064a:	f000 ff22 	bl	8001492 <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 800064e:	1dbb      	adds	r3, r7, #6
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff8c 	bl	8000574 <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	220f      	movs	r2, #15
 8000662:	4013      	ands	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff84 	bl	8000574 <LcdSendNibble>
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	50000400 	.word	0x50000400

08000678 <LcdInit>:

void LcdInit() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <LcdInit+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	0018      	movs	r0, r3
 8000686:	f000 ff04 	bl	8001492 <HAL_GPIO_WritePin>
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <LcdInit+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	2102      	movs	r1, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fefe 	bl	8001492 <HAL_GPIO_WritePin>
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <LcdInit+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	2108      	movs	r1, #8
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fef8 	bl	8001492 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 fa5e 	bl	8000b64 <HAL_Delay>
  for(i=0; i<3; i++) {
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e00a      	b.n	80006c6 <LcdInit+0x4e>
    LcdSendNibble(3);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f7ff ff5f 	bl	8000574 <LcdSendNibble>
    HAL_Delay(5);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fa54 	bl	8000b64 <HAL_Delay>
  for(i=0; i<3; i++) {
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	3201      	adds	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d9f0      	bls.n	80006b0 <LcdInit+0x38>
  }
  LcdSendNibble(2);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff50 	bl	8000574 <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e00c      	b.n	80006f6 <LcdInit+0x7e>
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LcdInit+0x94>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	0019      	movs	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff8a 	bl	8000600 <LcdSendByte>
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	3201      	adds	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d9ee      	bls.n	80006dc <LcdInit+0x64>
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	50000400 	.word	0x50000400
 800070c:	08003ef0 	.word	0x08003ef0

08000710 <lcd_gotoxy>:

void lcd_gotoxy(uint8_t x, uint8_t y) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	701a      	strb	r2, [r3, #0]
  uint8_t address;
  if(y != 1) address = 0x40;
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d004      	beq.n	8000734 <lcd_gotoxy+0x24>
 800072a:	230f      	movs	r3, #15
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	2240      	movs	r2, #64	; 0x40
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e003      	b.n	800073c <lcd_gotoxy+0x2c>
  else address = 0;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  address += x-1;
 800073c:	1dfa      	adds	r2, r7, #7
 800073e:	210f      	movs	r1, #15
 8000740:	187b      	adds	r3, r7, r1
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	b2da      	uxtb	r2, r3
 800074a:	187b      	adds	r3, r7, r1
 800074c:	3a01      	subs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
  LcdSendByte(0, 0x80 | address);
 8000750:	187b      	adds	r3, r7, r1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	4252      	negs	r2, r2
 8000758:	4313      	orrs	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	0019      	movs	r1, r3
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff4e 	bl	8000600 <LcdSendByte>
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b004      	add	sp, #16
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_putc>:

void lcd_putc(uint8_t c) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	0002      	movs	r2, r0
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	701a      	strb	r2, [r3, #0]
  if(c == '\f') {
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b0c      	cmp	r3, #12
 800077e:	d107      	bne.n	8000790 <lcd_putc+0x24>
    LcdSendByte(0, 1);
 8000780:	2101      	movs	r1, #1
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff3c 	bl	8000600 <LcdSendByte>
    HAL_Delay(2);
 8000788:	2002      	movs	r0, #2
 800078a:	f000 f9eb 	bl	8000b64 <HAL_Delay>
  }
  else if(c == '\n') lcd_gotoxy(1, 2);
  else if(c == '\b') LcdSendByte(0, 0x10);
  else LcdSendByte(1, c);
}
 800078e:	e017      	b.n	80007c0 <lcd_putc+0x54>
  else if(c == '\n') lcd_gotoxy(1, 2);
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b0a      	cmp	r3, #10
 8000796:	d104      	bne.n	80007a2 <lcd_putc+0x36>
 8000798:	2102      	movs	r1, #2
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff ffb8 	bl	8000710 <lcd_gotoxy>
}
 80007a0:	e00e      	b.n	80007c0 <lcd_putc+0x54>
  else if(c == '\b') LcdSendByte(0, 0x10);
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d104      	bne.n	80007b4 <lcd_putc+0x48>
 80007aa:	2110      	movs	r1, #16
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff27 	bl	8000600 <LcdSendByte>
}
 80007b2:	e005      	b.n	80007c0 <lcd_putc+0x54>
  else LcdSendByte(1, c);
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	0019      	movs	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff20 	bl	8000600 <LcdSendByte>
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_puts>:

void lcd_puts(const char* str) {
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<strlen(str); i++) {
 80007d0:	230f      	movs	r3, #15
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e00d      	b.n	80007f6 <lcd_puts+0x2e>
    lcd_putc(str[i]);
 80007da:	240f      	movs	r4, #15
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	18d3      	adds	r3, r2, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ffc0 	bl	800076c <lcd_putc>
  for(i=0; i<strlen(str); i++) {
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	3201      	adds	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	781c      	ldrb	r4, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fc82 	bl	8000108 <strlen>
 8000804:	0003      	movs	r3, r0
 8000806:	429c      	cmp	r4, r3
 8000808:	d3e7      	bcc.n	80007da <lcd_puts+0x12>
  }
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b005      	add	sp, #20
 8000812:	bd90      	pop	{r4, r7, pc}

08000814 <setUp>:
boolean i = false;
uint32_t last;
String bool[2] = { "false", "true "};
String str;

void setUp() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	str = malloc(sizeof(char) * 16);
 800081a:	2010      	movs	r0, #16
 800081c:	f002 fec8 	bl	80035b0 <malloc>
 8000820:	0003      	movs	r3, r0
 8000822:	001a      	movs	r2, r3
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <setUp+0x44>)
 8000826:	601a      	str	r2, [r3, #0]
	LcdInit();
 8000828:	f7ff ff26 	bl	8000678 <LcdInit>
	for (int i = 0; i < 12; i++) {
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	e00a      	b.n	8000848 <setUp+0x34>
		Set_LED(i, 0, 0, 0);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	2300      	movs	r3, #0
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	f000 f86f 	bl	800091c <Set_LED>
		WS2812_Send();
 800083e:	f000 f89b 	bl	8000978 <WS2812_Send>
	for (int i = 0; i < 12; i++) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b0b      	cmp	r3, #11
 800084c:	ddf1      	ble.n	8000832 <setUp+0x1e>
	}
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000009c 	.word	0x2000009c

0800085c <appLoop>:

void appLoop() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	lcd_gotoxy(0, 1);
 8000860:	2101      	movs	r1, #1
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff54 	bl	8000710 <lcd_gotoxy>
	sprintf(str, "Hello World!");
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <appLoop+0xa4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a25      	ldr	r2, [pc, #148]	; (8000904 <appLoop+0xa8>)
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f002 ffa3 	bl	80037bc <siprintf>
	lcd_puts(str);
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <appLoop+0xa4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff ffa4 	bl	80007c8 <lcd_puts>
	lcd_gotoxy(0, 0);
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff ff44 	bl	8000710 <lcd_gotoxy>
	sprintf(str, "%s",bool[i]);
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <appLoop+0xa4>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <appLoop+0xac>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <appLoop+0xb0>)
 8000894:	0092      	lsls	r2, r2, #2
 8000896:	58d2      	ldr	r2, [r2, r3]
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <appLoop+0xb4>)
 800089a:	0019      	movs	r1, r3
 800089c:	f002 ff8e 	bl	80037bc <siprintf>
	lcd_puts(str);
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <appLoop+0xa4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff8f 	bl	80007c8 <lcd_puts>
	if (NOW - last >= 10) {
 80008aa:	f000 f951 	bl	8000b50 <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <appLoop+0xb8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b09      	cmp	r3, #9
 80008b8:	d91f      	bls.n	80008fa <appLoop+0x9e>
		if (!SW3) {
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2108      	movs	r1, #8
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fdc9 	bl	8001458 <HAL_GPIO_ReadPin>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d10f      	bne.n	80008ea <appLoop+0x8e>
			if(!swFlag){
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <appLoop+0xbc>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10e      	bne.n	80008f0 <appLoop+0x94>
				i = !i;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <appLoop+0xac>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	425a      	negs	r2, r3
 80008d8:	4153      	adcs	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	001a      	movs	r2, r3
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <appLoop+0xac>)
 80008e0:	701a      	strb	r2, [r3, #0]
				swFlag = true;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <appLoop+0xbc>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e002      	b.n	80008f0 <appLoop+0x94>
			}
		}else{
			swFlag = false;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <appLoop+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
		}
		last = NOW;
 80008f0:	f000 f92e 	bl	8000b50 <HAL_GetTick>
 80008f4:	0002      	movs	r2, r0
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <appLoop+0xb8>)
 80008f8:	601a      	str	r2, [r3, #0]
	}
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000009c 	.word	0x2000009c
 8000904:	08003edc 	.word	0x08003edc
 8000908:	20000095 	.word	0x20000095
 800090c:	20000000 	.word	0x20000000
 8000910:	08003eec 	.word	0x08003eec
 8000914:	20000098 	.word	0x20000098
 8000918:	20000094 	.word	0x20000094

0800091c <Set_LED>:
volatile uint8_t datasentflag;

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	b2d9      	uxtb	r1, r3
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <Set_LED+0x58>)
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnum][1] = Green;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	b2d9      	uxtb	r1, r3
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <Set_LED+0x58>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	3301      	adds	r3, #1
 8000944:	1c0a      	adds	r2, r1, #0
 8000946:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	b2d9      	uxtb	r1, r3
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <Set_LED+0x58>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	3302      	adds	r3, #2
 8000956:	1c0a      	adds	r2, r1, #0
 8000958:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <Set_LED+0x58>)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	18d3      	adds	r3, r2, r3
 8000966:	3303      	adds	r3, #3
 8000968:	1c0a      	adds	r2, r1, #0
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000a4 	.word	0x200000a4

08000978 <WS2812_Send>:
#endif
}

uint16_t pwmData[(24 * MAX_LED) + 50];

void WS2812_Send(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e038      	b.n	80009fa <WS2812_Send+0x82>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
#else
         color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <WS2812_Send+0xd4>)
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	18d3      	adds	r3, r2, r3
 8000990:	3301      	adds	r3, #1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	041a      	lsls	r2, r3, #16
 8000996:	492d      	ldr	r1, [pc, #180]	; (8000a4c <WS2812_Send+0xd4>)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	18cb      	adds	r3, r1, r3
 800099e:	3302      	adds	r3, #2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	4313      	orrs	r3, r2
 80009a6:	4929      	ldr	r1, [pc, #164]	; (8000a4c <WS2812_Send+0xd4>)
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	188a      	adds	r2, r1, r2
 80009ae:	3203      	adds	r2, #3
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	607b      	str	r3, [r7, #4]
   #endif

		for (int i = 23; i >= 0; i--) {
 80009b6:	2317      	movs	r3, #23
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e018      	b.n	80009ee <WS2812_Send+0x76>
			if (color & (1 << i)) {
 80009bc:	2201      	movs	r2, #1
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	001a      	movs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4013      	ands	r3, r2
 80009ca:	d005      	beq.n	80009d8 <WS2812_Send+0x60>
				pwmData[indx] = 40 * 2 / 3;  // 2/3 of 90
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <WS2812_Send+0xd8>)
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	0052      	lsls	r2, r2, #1
 80009d2:	211a      	movs	r1, #26
 80009d4:	52d1      	strh	r1, [r2, r3]
 80009d6:	e004      	b.n	80009e2 <WS2812_Send+0x6a>
			} else {
				pwmData[indx] = 40 * 1 / 3;  // 1/3 of 90
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <WS2812_Send+0xd8>)
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	210d      	movs	r1, #13
 80009e0:	52d1      	strh	r1, [r2, r3]
			}
			indx++;
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dae3      	bge.n	80009bc <WS2812_Send+0x44>
	for (int i = 0; i < MAX_LED; i++) {
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	3301      	adds	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2b0b      	cmp	r3, #11
 80009fe:	ddc3      	ble.n	8000988 <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	e00a      	b.n	8000a1c <WS2812_Send+0xa4>
		pwmData[indx] = 0;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <WS2812_Send+0xd8>)
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	52d1      	strh	r1, [r2, r3]
		indx++;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2b31      	cmp	r3, #49	; 0x31
 8000a20:	ddf1      	ble.n	8000a06 <WS2812_Send+0x8e>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <WS2812_Send+0xd8>)
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <WS2812_Send+0xdc>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f001 fb88 	bl	8002140 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <WS2812_Send+0xe0>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0fa      	beq.n	8000a32 <WS2812_Send+0xba>
	};
	datasentflag = 0;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <WS2812_Send+0xe0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b006      	add	sp, #24
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200000d4 	.word	0x200000d4
 8000a54:	2000037c 	.word	0x2000037c
 8000a58:	200000a0 	.word	0x200000a0

08000a5c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fcf3 	bl	8002454 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000037c 	.word	0x2000037c
 8000a80:	200000a0 	.word	0x200000a0

08000a84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x3c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Init+0x3c>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f811 	bl	8000ac4 <HAL_InitTick>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f002 fc05 	bl	80032bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_InitTick+0x5c>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_InitTick+0x60>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	23fa      	movs	r3, #250	; 0xfa
 8000ad8:	0098      	lsls	r0, r3, #2
 8000ada:	f7ff fb27 	bl	800012c <__udivsi3>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f7ff fb22 	bl	800012c <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f92f 	bl	8000d4e <HAL_SYSTICK_Config>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e00f      	b.n	8000b18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d80b      	bhi.n	8000b16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f8fc 	bl	8000d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_InitTick+0x64>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	20000010 	.word	0x20000010
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	001a      	movs	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000378 	.word	0x20000378

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000378 	.word	0x20000378

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	001a      	movs	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	0002      	movs	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	2000000c 	.word	0x2000000c

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bbe:	d809      	bhi.n	8000bd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	231f      	movs	r3, #31
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_EnableIRQ+0x30>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
  }
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	; 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	; 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d301      	bcc.n	8000cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <SysTick_Config+0x44>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff7c 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x44>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	0002      	movs	r2, r0
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff33 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ffaf 	bl	8000cbc <SysTick_Config>
 8000d5e:	0003      	movs	r3, r0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e061      	b.n	8000e3e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <HAL_DMA_Init+0xe0>)
 8000d80:	4694      	mov	ip, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	2114      	movs	r1, #20
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff f9d0 	bl	800012c <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	009a      	lsls	r2, r3, #2
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <HAL_DMA_Init+0xe4>)
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2225      	movs	r2, #37	; 0x25
 8000d9e:	2102      	movs	r1, #2
 8000da0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <HAL_DMA_Init+0xe8>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d018      	beq.n	8000e26 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_DMA_Init+0xec>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	211c      	movs	r1, #28
 8000dfe:	400b      	ands	r3, r1
 8000e00:	210f      	movs	r1, #15
 8000e02:	4099      	lsls	r1, r3
 8000e04:	000b      	movs	r3, r1
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_DMA_Init+0xec>)
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_DMA_Init+0xec>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	201c      	movs	r0, #28
 8000e1c:	4003      	ands	r3, r0
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_DMA_Init+0xec>)
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2225      	movs	r2, #37	; 0x25
 8000e30:	2101      	movs	r1, #1
 8000e32:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	; 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	bffdfff8 	.word	0xbffdfff8
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	ffff800f 	.word	0xffff800f
 8000e54:	400200a8 	.word	0x400200a8

08000e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2317      	movs	r3, #23
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2224      	movs	r2, #36	; 0x24
 8000e72:	5c9b      	ldrb	r3, [r3, r2]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_DMA_Start_IT+0x24>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e04f      	b.n	8000f1c <HAL_DMA_Start_IT+0xc4>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	2101      	movs	r1, #1
 8000e82:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2225      	movs	r2, #37	; 0x25
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d13a      	bne.n	8000f06 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2225      	movs	r2, #37	; 0x25
 8000e94:	2102      	movs	r1, #2
 8000e96:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	438a      	bics	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 f92a 	bl	800110e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d008      	beq.n	8000ed4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	210e      	movs	r1, #14
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00f      	b.n	8000ef4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2104      	movs	r1, #4
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	210a      	movs	r1, #10
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2224      	movs	r2, #36	; 0x24
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f0e:	2317      	movs	r3, #23
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000f16:	2317      	movs	r3, #23
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2225      	movs	r2, #37	; 0x25
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d006      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2204      	movs	r2, #4
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e02a      	b.n	8000fa4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	210e      	movs	r1, #14
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	438a      	bics	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	221c      	movs	r2, #28
 8000f74:	401a      	ands	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2225      	movs	r2, #37	; 0x25
 8000f86:	2101      	movs	r1, #1
 8000f88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2224      	movs	r2, #36	; 0x24
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	0010      	movs	r0, r2
 8000fa2:	4798      	blx	r3
    }
  }
  return status;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	221c      	movs	r2, #28
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d026      	beq.n	800102c <HAL_DMA_IRQHandler+0x7a>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d022      	beq.n	800102c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2220      	movs	r2, #32
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d107      	bne.n	8001002 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	221c      	movs	r2, #28
 8001008:	401a      	ands	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2104      	movs	r1, #4
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	2b00      	cmp	r3, #0
 800101c:	d100      	bne.n	8001020 <HAL_DMA_IRQHandler+0x6e>
 800101e:	e071      	b.n	8001104 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	0010      	movs	r0, r2
 8001028:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800102a:	e06b      	b.n	8001104 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	221c      	movs	r2, #28
 8001032:	4013      	ands	r3, r2
 8001034:	2202      	movs	r2, #2
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	d02d      	beq.n	800109c <HAL_DMA_IRQHandler+0xea>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d029      	beq.n	800109c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2220      	movs	r2, #32
 8001050:	4013      	ands	r3, r2
 8001052:	d10b      	bne.n	800106c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	210a      	movs	r1, #10
 8001060:	438a      	bics	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2225      	movs	r2, #37	; 0x25
 8001068:	2101      	movs	r1, #1
 800106a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	221c      	movs	r2, #28
 8001072:	401a      	ands	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2102      	movs	r1, #2
 800107a:	4091      	lsls	r1, r2
 800107c:	000a      	movs	r2, r1
 800107e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2224      	movs	r2, #36	; 0x24
 8001084:	2100      	movs	r1, #0
 8001086:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2b00      	cmp	r3, #0
 800108e:	d039      	beq.n	8001104 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	0010      	movs	r0, r2
 8001098:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800109a:	e033      	b.n	8001104 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	221c      	movs	r2, #28
 80010a2:	4013      	ands	r3, r2
 80010a4:	2208      	movs	r2, #8
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	d02a      	beq.n	8001106 <HAL_DMA_IRQHandler+0x154>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2208      	movs	r2, #8
 80010b4:	4013      	ands	r3, r2
 80010b6:	d026      	beq.n	8001106 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	210e      	movs	r1, #14
 80010c4:	438a      	bics	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	221c      	movs	r2, #28
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	2101      	movs	r1, #1
 80010d6:	4091      	lsls	r1, r2
 80010d8:	000a      	movs	r2, r1
 80010da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2225      	movs	r2, #37	; 0x25
 80010e6:	2101      	movs	r1, #1
 80010e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2224      	movs	r2, #36	; 0x24
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	0010      	movs	r0, r2
 8001102:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46c0      	nop			; (mov r8, r8)
}
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}

0800110e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	221c      	movs	r2, #28
 8001122:	401a      	ands	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2101      	movs	r1, #1
 800112a:	4091      	lsls	r1, r2
 800112c:	000a      	movs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b10      	cmp	r3, #16
 800113e:	d108      	bne.n	8001152 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001150:	e007      	b.n	8001162 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	60da      	str	r2, [r3, #12]
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001182:	e14f      	b.n	8001424 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <HAL_GPIO_Init+0x30>
 800119a:	e140      	b.n	800141e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	2201      	movs	r2, #1
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	4013      	ands	r3, r2
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	4013      	ands	r3, r2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	58d3      	ldr	r3, [r2, r3]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2207      	movs	r2, #7
 8001270:	4013      	ands	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2107      	movs	r1, #7
 800128a:	400b      	ands	r3, r1
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	6939      	ldr	r1, [r7, #16]
 80012a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	401a      	ands	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	029b      	lsls	r3, r3, #10
 80012e2:	4013      	ands	r3, r2
 80012e4:	d100      	bne.n	80012e8 <HAL_GPIO_Init+0x17c>
 80012e6:	e09a      	b.n	800141e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b54      	ldr	r3, [pc, #336]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80012ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	589b      	ldr	r3, [r3, r2]
 8001300:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	429a      	cmp	r2, r3
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x1ea>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a47      	ldr	r2, [pc, #284]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x1e6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a46      	ldr	r2, [pc, #280]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x1e2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x1de>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a44      	ldr	r2, [pc, #272]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x1da>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001346:	2306      	movs	r3, #6
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x1ec>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x1ec>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001356:	2300      	movs	r3, #0
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2103      	movs	r1, #3
 800135c:	400a      	ands	r2, r1
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	4013      	ands	r3, r2
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	035b      	lsls	r3, r3, #13
 80013e2:	4013      	ands	r3, r2
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43da      	mvns	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	039b      	lsls	r3, r3, #14
 800140c:	4013      	ands	r3, r2
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	40da      	lsrs	r2, r3
 800142c:	1e13      	subs	r3, r2, #0
 800142e:	d000      	beq.n	8001432 <HAL_GPIO_Init+0x2c6>
 8001430:	e6a8      	b.n	8001184 <HAL_GPIO_Init+0x18>
  }
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b006      	add	sp, #24
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	50000400 	.word	0x50000400
 8001448:	50000800 	.word	0x50000800
 800144c:	50000c00 	.word	0x50000c00
 8001450:	50001c00 	.word	0x50001c00
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	000a      	movs	r2, r1
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	1cba      	adds	r2, r7, #2
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	4013      	ands	r3, r2
 8001470:	d004      	beq.n	800147c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001472:	230f      	movs	r3, #15
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e003      	b.n	8001484 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	0008      	movs	r0, r1
 800149c:	0011      	movs	r1, r2
 800149e:	1cbb      	adds	r3, r7, #2
 80014a0:	1c02      	adds	r2, r0, #0
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	1c7b      	adds	r3, r7, #1
 80014a6:	1c0a      	adds	r2, r1, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014aa:	1c7b      	adds	r3, r7, #1
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	1cbb      	adds	r3, r7, #2
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014ba:	e003      	b.n	80014c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014bc:	1cbb      	adds	r3, r7, #2
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 fbaf 	bl	8001c3e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e0:	4bcf      	ldr	r3, [pc, #828]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	220c      	movs	r2, #12
 80014e6:	4013      	ands	r3, r2
 80014e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ea:	4bcd      	ldr	r3, [pc, #820]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4013      	ands	r3, r2
 80014f4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
 80014fe:	d100      	bne.n	8001502 <HAL_RCC_OscConfig+0x36>
 8001500:	e07e      	b.n	8001600 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x68>
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	429a      	cmp	r2, r3
 8001516:	d10d      	bne.n	8001534 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	4bc1      	ldr	r3, [pc, #772]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x5a>
 8001524:	e06b      	b.n	80015fe <HAL_RCC_OscConfig+0x132>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d167      	bne.n	80015fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 fb85 	bl	8001c3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x84>
 8001540:	4bb7      	ldr	r3, [pc, #732]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4bb6      	ldr	r3, [pc, #728]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0249      	lsls	r1, r1, #9
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e027      	b.n	80015a0 <HAL_RCC_OscConfig+0xd4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	23a0      	movs	r3, #160	; 0xa0
 8001556:	02db      	lsls	r3, r3, #11
 8001558:	429a      	cmp	r2, r3
 800155a:	d10e      	bne.n	800157a <HAL_RCC_OscConfig+0xae>
 800155c:	4bb0      	ldr	r3, [pc, #704]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4baf      	ldr	r3, [pc, #700]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	02c9      	lsls	r1, r1, #11
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	4bad      	ldr	r3, [pc, #692]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4bac      	ldr	r3, [pc, #688]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0249      	lsls	r1, r1, #9
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e012      	b.n	80015a0 <HAL_RCC_OscConfig+0xd4>
 800157a:	4ba9      	ldr	r3, [pc, #676]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001580:	49a8      	ldr	r1, [pc, #672]	; (8001824 <HAL_RCC_OscConfig+0x358>)
 8001582:	400a      	ands	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	4ba6      	ldr	r3, [pc, #664]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4ba2      	ldr	r3, [pc, #648]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4ba1      	ldr	r3, [pc, #644]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800159a:	49a3      	ldr	r1, [pc, #652]	; (8001828 <HAL_RCC_OscConfig+0x35c>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d015      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fad2 	bl	8000b50 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b0:	e009      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff facd 	bl	8000b50 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d902      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f000 fb3c 	bl	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c6:	4b96      	ldr	r3, [pc, #600]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d0ef      	beq.n	80015b2 <HAL_RCC_OscConfig+0xe6>
 80015d2:	e015      	b.n	8001600 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fabc 	bl	8000b50 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015de:	f7ff fab7 	bl	8000b50 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e326      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f0:	4b8b      	ldr	r3, [pc, #556]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x112>
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x140>
 800160a:	e08b      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d13e      	bne.n	800169c <HAL_RCC_OscConfig+0x1d0>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d13b      	bne.n	800169c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2204      	movs	r2, #4
 800162a:	4013      	ands	r3, r2
 800162c:	d004      	beq.n	8001638 <HAL_RCC_OscConfig+0x16c>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e302      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a7b      	ldr	r2, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x360>)
 800163e:	4013      	ands	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	021a      	lsls	r2, r3, #8
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800164e:	4b74      	ldr	r3, [pc, #464]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2209      	movs	r2, #9
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001660:	f000 fc40 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001664:	0001      	movs	r1, r0
 8001666:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	220f      	movs	r2, #15
 800166e:	4013      	ands	r3, r2
 8001670:	4a6f      	ldr	r2, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x364>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	000a      	movs	r2, r1
 8001676:	40da      	lsrs	r2, r3
 8001678:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x368>)
 800167a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800167c:	4b6e      	ldr	r3, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x36c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2513      	movs	r5, #19
 8001682:	197c      	adds	r4, r7, r5
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fa1d 	bl	8000ac4 <HAL_InitTick>
 800168a:	0003      	movs	r3, r0
 800168c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800168e:	197b      	adds	r3, r7, r5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d046      	beq.n	8001724 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001696:	197b      	adds	r3, r7, r5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	e2d0      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d027      	beq.n	80016f2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2209      	movs	r2, #9
 80016a8:	4393      	bics	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa4c 	bl	8000b50 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fa47 	bl	8000b50 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e2b6      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2204      	movs	r2, #4
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f1      	beq.n	80016be <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a53      	ldr	r2, [pc, #332]	; (800182c <HAL_RCC_OscConfig+0x360>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	021a      	lsls	r2, r3, #8
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	e018      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa27 	bl	8000b50 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fa22 	bl	8000b50 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e291      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2204      	movs	r2, #4
 8001720:	4013      	ands	r3, r2
 8001722:	d1f1      	bne.n	8001708 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2210      	movs	r2, #16
 800172a:	4013      	ands	r3, r2
 800172c:	d100      	bne.n	8001730 <HAL_RCC_OscConfig+0x264>
 800172e:	e0a1      	b.n	8001874 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d140      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x282>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e277      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_RCC_OscConfig+0x370>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	0a19      	lsrs	r1, r3, #8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	061a      	lsls	r2, r3, #24
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	0b5b      	lsrs	r3, r3, #13
 800177c:	3301      	adds	r3, #1
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0212      	lsls	r2, r2, #8
 8001782:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	210f      	movs	r1, #15
 800178c:	400b      	ands	r3, r1
 800178e:	4928      	ldr	r1, [pc, #160]	; (8001830 <HAL_RCC_OscConfig+0x364>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x368>)
 8001796:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x36c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2513      	movs	r5, #19
 800179e:	197c      	adds	r4, r7, r5
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff f98f 	bl	8000ac4 <HAL_InitTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d060      	beq.n	8001874 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	e242      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d03f      	beq.n	8001840 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0049      	lsls	r1, r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff f9bf 	bl	8000b50 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d8:	f7ff f9ba 	bl	8000b50 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e229      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x370>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	0a19      	lsrs	r1, r3, #8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	061a      	lsls	r2, r3, #24
 8001818:	4b01      	ldr	r3, [pc, #4]	; (8001820 <HAL_RCC_OscConfig+0x354>)
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x3a8>
 8001820:	40021000 	.word	0x40021000
 8001824:	fffeffff 	.word	0xfffeffff
 8001828:	fffbffff 	.word	0xfffbffff
 800182c:	ffffe0ff 	.word	0xffffe0ff
 8001830:	08003ef4 	.word	0x08003ef4
 8001834:	20000010 	.word	0x20000010
 8001838:	20000008 	.word	0x20000008
 800183c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001840:	4bbd      	ldr	r3, [pc, #756]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4bbc      	ldr	r3, [pc, #752]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001846:	49bd      	ldr	r1, [pc, #756]	; (8001b3c <HAL_RCC_OscConfig+0x670>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff f980 	bl	8000b50 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001856:	f7ff f97b 	bl	8000b50 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1ea      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001868:	4bb3      	ldr	r3, [pc, #716]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	4013      	ands	r3, r2
 800187c:	d036      	beq.n	80018ec <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4bac      	ldr	r3, [pc, #688]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800188a:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff f95d 	bl	8000b50 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff f958 	bl	8000b50 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1c7      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ae:	4ba2      	ldr	r3, [pc, #648]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f1      	beq.n	800189c <HAL_RCC_OscConfig+0x3d0>
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ba:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80018bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018be:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	438a      	bics	r2, r1
 80018c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f943 	bl	8000b50 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff f93e 	bl	8000b50 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1ad      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e2:	4b95      	ldr	r3, [pc, #596]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f1      	bne.n	80018d0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2204      	movs	r2, #4
 80018f2:	4013      	ands	r3, r2
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x42c>
 80018f6:	e0ae      	b.n	8001a56 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f8:	2027      	movs	r0, #39	; 0x27
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001900:	4b8d      	ldr	r3, [pc, #564]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b8a      	ldr	r3, [pc, #552]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 800190e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001910:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0549      	lsls	r1, r1, #21
 8001916:	430a      	orrs	r2, r1
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800191a:	183b      	adds	r3, r7, r0
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_RCC_OscConfig+0x674>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4013      	ands	r3, r2
 800192a:	d11a      	bne.n	8001962 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <HAL_RCC_OscConfig+0x674>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b83      	ldr	r3, [pc, #524]	; (8001b40 <HAL_RCC_OscConfig+0x674>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff f909 	bl	8000b50 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001944:	f7ff f904 	bl	8000b50 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e173      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b7a      	ldr	r3, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x674>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	429a      	cmp	r2, r3
 800196c:	d107      	bne.n	800197e <HAL_RCC_OscConfig+0x4b2>
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0049      	lsls	r1, r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	651a      	str	r2, [r3, #80]	; 0x50
 800197c:	e031      	b.n	80019e2 <HAL_RCC_OscConfig+0x516>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d4>
 8001986:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800198a:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 800198c:	496b      	ldr	r1, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x670>)
 800198e:	400a      	ands	r2, r1
 8001990:	651a      	str	r2, [r3, #80]	; 0x50
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001996:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001998:	496a      	ldr	r1, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x678>)
 800199a:	400a      	ands	r2, r1
 800199c:	651a      	str	r2, [r3, #80]	; 0x50
 800199e:	e020      	b.n	80019e2 <HAL_RCC_OscConfig+0x516>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	23a0      	movs	r3, #160	; 0xa0
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x4fe>
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	00c9      	lsls	r1, r1, #3
 80019b6:	430a      	orrs	r2, r1
 80019b8:	651a      	str	r2, [r3, #80]	; 0x50
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0049      	lsls	r1, r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x516>
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019d0:	495a      	ldr	r1, [pc, #360]	; (8001b3c <HAL_RCC_OscConfig+0x670>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	651a      	str	r2, [r3, #80]	; 0x50
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 80019dc:	4959      	ldr	r1, [pc, #356]	; (8001b44 <HAL_RCC_OscConfig+0x678>)
 80019de:	400a      	ands	r2, r1
 80019e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f8b1 	bl	8000b50 <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff f8ac 	bl	8000b50 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e11a      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0ef      	beq.n	80019f4 <HAL_RCC_OscConfig+0x528>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f89b 	bl	8000b50 <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a1e:	e009      	b.n	8001a34 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f896 	bl	8000b50 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e104      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1ef      	bne.n	8001a20 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a40:	2327      	movs	r3, #39	; 0x27
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a50:	493e      	ldr	r1, [pc, #248]	; (8001b4c <HAL_RCC_OscConfig+0x680>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d049      	beq.n	8001af4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d026      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x684>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x684>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0189      	lsls	r1, r1, #6
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f85f 	bl	8000b50 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff f85a 	bl	8000b50 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0c9      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5cc>
 8001ab4:	e01e      	b.n	8001af4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	438a      	bics	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_OscConfig+0x684>)
 8001ac4:	6a1a      	ldr	r2, [r3, #32]
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x684>)
 8001ac8:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_OscConfig+0x688>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff f83f 	bl	8000b50 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad8:	f7ff f83a 	bl	8000b50 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0a9      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d1f1      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x632>
 8001afc:	e09e      	b.n	8001c3c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x63a>
 8001b04:	e077      	b.n	8001bf6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d158      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_OscConfig+0x66c>)
 8001b14:	4910      	ldr	r1, [pc, #64]	; (8001b58 <HAL_RCC_OscConfig+0x68c>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f819 	bl	8000b50 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f814 	bl	8000b50 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d914      	bls.n	8001b5c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e083      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffffeff 	.word	0xfffffeff
 8001b40:	40007000 	.word	0x40007000
 8001b44:	fffffbff 	.word	0xfffffbff
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	efffffff 	.word	0xefffffff
 8001b50:	40010000 	.word	0x40010000
 8001b54:	ffffdfff 	.word	0xffffdfff
 8001b58:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	049b      	lsls	r3, r3, #18
 8001b64:	4013      	ands	r3, r2
 8001b66:	d1dd      	bne.n	8001b24 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	431a      	orrs	r2, r3
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	0449      	lsls	r1, r1, #17
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe ffdb 	bl	8000b50 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ffd6 	bl	8000b50 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e045      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	049b      	lsls	r3, r3, #18
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x6d4>
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001bc6:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ffc0 	bl	8000b50 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ffbb 	bl	8000b50 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e02a      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	049b      	lsls	r3, r3, #18
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x70a>
 8001bf4:	e022      	b.n	8001c3c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01d      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	23f0      	movs	r3, #240	; 0xf0
 8001c1c:	039b      	lsls	r3, r3, #14
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	23c0      	movs	r3, #192	; 0xc0
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b00a      	add	sp, #40	; 0x28
 8001c44:	bdb0      	pop	{r4, r5, r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	ff02ffff 	.word	0xff02ffff
 8001c50:	feffffff 	.word	0xfeffffff

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e128      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d91e      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c88:	f7fe ff62 	bl	8000b50 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f7fe ff5d 	bl	8000b50 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a8a      	ldr	r2, [pc, #552]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e109      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4013      	ands	r3, r2
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1ee      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	22f0      	movs	r2, #240	; 0xf0
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_ClockConfig+0x8a>
 8001cdc:	e089      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	029b      	lsls	r3, r3, #10
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d120      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0e1      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfe:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049b      	lsls	r3, r3, #18
 8001d06:	4013      	ands	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0d5      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d16:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0ca      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d24:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0c2      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4393      	bics	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe ff02 	bl	8000b50 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5a:	f7fe fef9 	bl	8000b50 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0a5      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	220c      	movs	r2, #12
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x106>
 8001d7a:	e03a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d111      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7fe fee3 	bl	8000b50 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a4d      	ldr	r2, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e08f      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d1ef      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x132>
 8001da6:	e024      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d11b      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db0:	e009      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f7fe fecd 	bl	8000b50 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	220c      	movs	r2, #12
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x15e>
 8001dd2:	e00e      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7fe febc 	bl	8000b50 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e068      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d21e      	bcs.n	8001e3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e12:	f7fe fe9d 	bl	8000b50 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe fe98 	bl	8000b50 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_RCC_ClockConfig+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e044      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2204      	movs	r2, #4
 8001e44:	4013      	ands	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x27c>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2208      	movs	r2, #8
 8001e62:	4013      	ands	r3, r2
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_RCC_ClockConfig+0x280>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	00da      	lsls	r2, r3, #3
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7c:	f000 f832 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e80:	0001      	movs	r1, r0
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x278>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	220f      	movs	r2, #15
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x284>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	000a      	movs	r2, r1
 8001e92:	40da      	lsrs	r2, r3
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_ClockConfig+0x288>)
 8001e96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_ClockConfig+0x28c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	250b      	movs	r5, #11
 8001e9e:	197c      	adds	r4, r7, r5
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7fe fe0f 	bl	8000ac4 <HAL_InitTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001eaa:	197b      	adds	r3, r7, r5
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001eb2:	197b      	adds	r3, r7, r5
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffff8ff 	.word	0xfffff8ff
 8001ed4:	ffffc7ff 	.word	0xffffc7ff
 8001ed8:	08003ef4 	.word	0x08003ef4
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_GetSysClockFreq+0x138>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d014      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x40>
 8001efa:	d900      	bls.n	8001efe <HAL_RCC_GetSysClockFreq+0x1a>
 8001efc:	e07b      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x112>
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x24>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f06:	e076      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f16:	e07c      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f1c:	e079      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f1e:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f22:	e076      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	0c9a      	lsrs	r2, r3, #18
 8001f28:	230f      	movs	r3, #15
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_GetSysClockFreq+0x148>)
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	0d9a      	lsrs	r2, r3, #22
 8001f36:	2303      	movs	r3, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	025b      	lsls	r3, r3, #9
 8001f46:	4013      	ands	r3, r2
 8001f48:	d01a      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f54:	2300      	movs	r3, #0
 8001f56:	69b8      	ldr	r0, [r7, #24]
 8001f58:	69f9      	ldr	r1, [r7, #28]
 8001f5a:	f7fe f993 	bl	8000284 <__aeabi_lmul>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	000b      	movs	r3, r1
 8001f62:	0010      	movs	r0, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f7fe f967 	bl	8000244 <__aeabi_uldivmod>
 8001f76:	0002      	movs	r2, r0
 8001f78:	000b      	movs	r3, r1
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7e:	e037      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	d01a      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f94:	2300      	movs	r3, #0
 8001f96:	68b8      	ldr	r0, [r7, #8]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	f7fe f973 	bl	8000284 <__aeabi_lmul>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f7fe f947 	bl	8000244 <__aeabi_uldivmod>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	000b      	movs	r3, r1
 8001fba:	0013      	movs	r3, r2
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	e017      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f7fe f95a 	bl	8000284 <__aeabi_lmul>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	001c      	movs	r4, r3
 8001fdc:	2300      	movs	r3, #0
 8001fde:	001d      	movs	r5, r3
 8001fe0:	0022      	movs	r2, r4
 8001fe2:	002b      	movs	r3, r5
 8001fe4:	f7fe f92e 	bl	8000244 <__aeabi_uldivmod>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	000b      	movs	r3, r1
 8001fec:	0013      	movs	r3, r2
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff4:	e00d      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0b5b      	lsrs	r3, r3, #13
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	4013      	ands	r3, r2
 8002000:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	3301      	adds	r3, #1
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	0212      	lsls	r2, r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	0013      	movs	r3, r2
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002010:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b00e      	add	sp, #56	; 0x38
 800201a:	bdb0      	pop	{r4, r5, r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	003d0900 	.word	0x003d0900
 8002024:	00f42400 	.word	0x00f42400
 8002028:	007a1200 	.word	0x007a1200
 800202c:	08003f04 	.word	0x08003f04

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e032      	b.n	80020a8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2239      	movs	r2, #57	; 0x39
 8002046:	5c9b      	ldrb	r3, [r3, r2]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2238      	movs	r2, #56	; 0x38
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f001 f943 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2239      	movs	r2, #57	; 0x39
 8002062:	2102      	movs	r1, #2
 8002064:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	0019      	movs	r1, r3
 8002070:	0010      	movs	r0, r2
 8002072:	f000 fd0d 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223e      	movs	r2, #62	; 0x3e
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223a      	movs	r2, #58	; 0x3a
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223b      	movs	r2, #59	; 0x3b
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223c      	movs	r2, #60	; 0x3c
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223d      	movs	r2, #61	; 0x3d
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2239      	movs	r2, #57	; 0x39
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e032      	b.n	8002128 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2239      	movs	r2, #57	; 0x39
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2238      	movs	r2, #56	; 0x38
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f829 	bl	8002130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2239      	movs	r2, #57	; 0x39
 80020e2:	2102      	movs	r1, #2
 80020e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	0019      	movs	r1, r3
 80020f0:	0010      	movs	r0, r2
 80020f2:	f000 fccd 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	223e      	movs	r2, #62	; 0x3e
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223a      	movs	r2, #58	; 0x3a
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	223b      	movs	r2, #59	; 0x3b
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223c      	movs	r2, #60	; 0x3c
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	223d      	movs	r2, #61	; 0x3d
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2239      	movs	r2, #57	; 0x39
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	001a      	movs	r2, r3
 800214e:	1cbb      	adds	r3, r7, #2
 8002150:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2317      	movs	r3, #23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_TIM_PWM_Start_DMA+0x32>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	223a      	movs	r2, #58	; 0x3a
 8002164:	5c9b      	ldrb	r3, [r3, r2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3b02      	subs	r3, #2
 800216a:	425a      	negs	r2, r3
 800216c:	4153      	adcs	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e01f      	b.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d108      	bne.n	800218a <HAL_TIM_PWM_Start_DMA+0x4a>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	223b      	movs	r2, #59	; 0x3b
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3b02      	subs	r3, #2
 8002182:	425a      	negs	r2, r3
 8002184:	4153      	adcs	r3, r2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e013      	b.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d108      	bne.n	80021a2 <HAL_TIM_PWM_Start_DMA+0x62>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	223c      	movs	r2, #60	; 0x3c
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3b02      	subs	r3, #2
 800219a:	425a      	negs	r2, r3
 800219c:	4153      	adcs	r3, r2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e007      	b.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	223d      	movs	r2, #61	; 0x3d
 80021a6:	5c9b      	ldrb	r3, [r3, r2]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b02      	subs	r3, #2
 80021ac:	425a      	negs	r2, r3
 80021ae:	4153      	adcs	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	e13d      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d108      	bne.n	80021d2 <HAL_TIM_PWM_Start_DMA+0x92>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	223a      	movs	r2, #58	; 0x3a
 80021c4:	5c9b      	ldrb	r3, [r3, r2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	425a      	negs	r2, r3
 80021cc:	4153      	adcs	r3, r2
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	e01f      	b.n	8002212 <HAL_TIM_PWM_Start_DMA+0xd2>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d108      	bne.n	80021ea <HAL_TIM_PWM_Start_DMA+0xaa>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	223b      	movs	r2, #59	; 0x3b
 80021dc:	5c9b      	ldrb	r3, [r3, r2]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	425a      	negs	r2, r3
 80021e4:	4153      	adcs	r3, r2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e013      	b.n	8002212 <HAL_TIM_PWM_Start_DMA+0xd2>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d108      	bne.n	8002202 <HAL_TIM_PWM_Start_DMA+0xc2>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	223c      	movs	r2, #60	; 0x3c
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	425a      	negs	r2, r3
 80021fc:	4153      	adcs	r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e007      	b.n	8002212 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	223d      	movs	r2, #61	; 0x3d
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	425a      	negs	r2, r3
 800220e:	4153      	adcs	r3, r2
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d025      	beq.n	8002262 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_TIM_PWM_Start_DMA+0xe8>
 800221c:	1cbb      	adds	r3, r7, #2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e106      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_TIM_PWM_Start_DMA+0xf8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	223a      	movs	r2, #58	; 0x3a
 8002232:	2102      	movs	r1, #2
 8002234:	5499      	strb	r1, [r3, r2]
 8002236:	e016      	b.n	8002266 <HAL_TIM_PWM_Start_DMA+0x126>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d104      	bne.n	8002248 <HAL_TIM_PWM_Start_DMA+0x108>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	223b      	movs	r2, #59	; 0x3b
 8002242:	2102      	movs	r1, #2
 8002244:	5499      	strb	r1, [r3, r2]
 8002246:	e00e      	b.n	8002266 <HAL_TIM_PWM_Start_DMA+0x126>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d104      	bne.n	8002258 <HAL_TIM_PWM_Start_DMA+0x118>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	223c      	movs	r2, #60	; 0x3c
 8002252:	2102      	movs	r1, #2
 8002254:	5499      	strb	r1, [r3, r2]
 8002256:	e006      	b.n	8002266 <HAL_TIM_PWM_Start_DMA+0x126>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	223d      	movs	r2, #61	; 0x3d
 800225c:	2102      	movs	r1, #2
 800225e:	5499      	strb	r1, [r3, r2]
 8002260:	e001      	b.n	8002266 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0e7      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d100      	bne.n	800226e <HAL_TIM_PWM_Start_DMA+0x12e>
 800226c:	e080      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x230>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d900      	bls.n	8002276 <HAL_TIM_PWM_Start_DMA+0x136>
 8002274:	e0a1      	b.n	80023ba <HAL_TIM_PWM_Start_DMA+0x27a>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d054      	beq.n	8002326 <HAL_TIM_PWM_Start_DMA+0x1e6>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b08      	cmp	r3, #8
 8002280:	d900      	bls.n	8002284 <HAL_TIM_PWM_Start_DMA+0x144>
 8002282:	e09a      	b.n	80023ba <HAL_TIM_PWM_Start_DMA+0x27a>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_PWM_Start_DMA+0x152>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d025      	beq.n	80022dc <HAL_TIM_PWM_Start_DMA+0x19c>
 8002290:	e093      	b.n	80023ba <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a69      	ldr	r2, [pc, #420]	; (8002444 <HAL_TIM_PWM_Start_DMA+0x304>)
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a68      	ldr	r2, [pc, #416]	; (8002448 <HAL_TIM_PWM_Start_DMA+0x308>)
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a18      	ldr	r0, [r3, #32]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3334      	adds	r3, #52	; 0x34
 80022b6:	001a      	movs	r2, r3
 80022b8:	1cbb      	adds	r3, r7, #2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	f7fe fdcc 	bl	8000e58 <HAL_DMA_Start_IT>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b6      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0089      	lsls	r1, r1, #2
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
      break;
 80022da:	e073      	b.n	80023c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	4a57      	ldr	r2, [pc, #348]	; (8002440 <HAL_TIM_PWM_Start_DMA+0x300>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	4a56      	ldr	r2, [pc, #344]	; (8002444 <HAL_TIM_PWM_Start_DMA+0x304>)
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	4a55      	ldr	r2, [pc, #340]	; (8002448 <HAL_TIM_PWM_Start_DMA+0x308>)
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3338      	adds	r3, #56	; 0x38
 8002300:	001a      	movs	r2, r3
 8002302:	1cbb      	adds	r3, r7, #2
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	f7fe fda7 	bl	8000e58 <HAL_DMA_Start_IT>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e091      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	00c9      	lsls	r1, r1, #3
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]
      break;
 8002324:	e04e      	b.n	80023c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	4a45      	ldr	r2, [pc, #276]	; (8002440 <HAL_TIM_PWM_Start_DMA+0x300>)
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002334:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	4a43      	ldr	r2, [pc, #268]	; (8002448 <HAL_TIM_PWM_Start_DMA+0x308>)
 800233c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	333c      	adds	r3, #60	; 0x3c
 800234a:	001a      	movs	r2, r3
 800234c:	1cbb      	adds	r3, r7, #2
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f7fe fd82 	bl	8000e58 <HAL_DMA_Start_IT>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d001      	beq.n	800235c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e06c      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	0109      	lsls	r1, r1, #4
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
      break;
 800236e:	e029      	b.n	80023c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_TIM_PWM_Start_DMA+0x304>)
 800237e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_TIM_PWM_Start_DMA+0x308>)
 8002386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3340      	adds	r3, #64	; 0x40
 8002394:	001a      	movs	r2, r3
 8002396:	1cbb      	adds	r3, r7, #2
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	f7fe fd5d 	bl	8000e58 <HAL_DMA_Start_IT>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e047      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0149      	lsls	r1, r1, #5
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]
      break;
 80023b8:	e004      	b.n	80023c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80023ba:	2317      	movs	r3, #23
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80023c4:	2317      	movs	r3, #23
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d130      	bne.n	8002430 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	2201      	movs	r2, #1
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fd4c 	bl	8002e74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d009      	beq.n	80023fc <HAL_TIM_PWM_Start_DMA+0x2bc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_TIM_PWM_Start_DMA+0x30c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_TIM_PWM_Start_DMA+0x2bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_TIM_PWM_Start_DMA+0x310>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2207      	movs	r2, #7
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b06      	cmp	r3, #6
 800240c:	d010      	beq.n	8002430 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	e007      	b.n	8002430 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b006      	add	sp, #24
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	0800297d 	.word	0x0800297d
 8002444:	08002a27 	.word	0x08002a27
 8002448:	080028e9 	.word	0x080028e9
 800244c:	40010800 	.word	0x40010800
 8002450:	40011400 	.word	0x40011400

08002454 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d039      	beq.n	80024e0 <HAL_TIM_PWM_Stop_DMA+0x8c>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d844      	bhi.n	80024fc <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d025      	beq.n	80024c4 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d83e      	bhi.n	80024fc <HAL_TIM_PWM_Stop_DMA+0xa8>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_TIM_PWM_Stop_DMA+0x38>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00e      	beq.n	80024a8 <HAL_TIM_PWM_Stop_DMA+0x54>
 800248a:	e037      	b.n	80024fc <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	493a      	ldr	r1, [pc, #232]	; (8002580 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8002498:	400a      	ands	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fe fd3f 	bl	8000f24 <HAL_DMA_Abort_IT>
      break;
 80024a6:	e02e      	b.n	8002506 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_TIM_PWM_Stop_DMA+0x130>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fd31 	bl	8000f24 <HAL_DMA_Abort_IT>
      break;
 80024c2:	e020      	b.n	8002506 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	492e      	ldr	r1, [pc, #184]	; (8002588 <HAL_TIM_PWM_Stop_DMA+0x134>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe fd23 	bl	8000f24 <HAL_DMA_Abort_IT>
      break;
 80024de:	e012      	b.n	8002506 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4928      	ldr	r1, [pc, #160]	; (800258c <HAL_TIM_PWM_Stop_DMA+0x138>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fe fd15 	bl	8000f24 <HAL_DMA_Abort_IT>
      break;
 80024fa:	e004      	b.n	8002506 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
      break;
 8002504:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002506:	230f      	movs	r3, #15
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d130      	bne.n	8002572 <HAL_TIM_PWM_Stop_DMA+0x11e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fcab 	bl	8002e74 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_TIM_PWM_Stop_DMA+0x13c>)
 8002526:	4013      	ands	r3, r2
 8002528:	d107      	bne.n	800253a <HAL_TIM_PWM_Stop_DMA+0xe6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_TIM_PWM_Stop_DMA+0xf6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	223a      	movs	r2, #58	; 0x3a
 8002544:	2101      	movs	r1, #1
 8002546:	5499      	strb	r1, [r3, r2]
 8002548:	e013      	b.n	8002572 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d104      	bne.n	800255a <HAL_TIM_PWM_Stop_DMA+0x106>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223b      	movs	r2, #59	; 0x3b
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]
 8002558:	e00b      	b.n	8002572 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d104      	bne.n	800256a <HAL_TIM_PWM_Stop_DMA+0x116>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223c      	movs	r2, #60	; 0x3c
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]
 8002568:	e003      	b.n	8002572 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	223d      	movs	r2, #61	; 0x3d
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	fffffdff 	.word	0xfffffdff
 8002584:	fffffbff 	.word	0xfffffbff
 8002588:	fffff7ff 	.word	0xfffff7ff
 800258c:	ffffefff 	.word	0xffffefff
 8002590:	00001111 	.word	0x00001111

08002594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2317      	movs	r3, #23
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2238      	movs	r2, #56	; 0x38
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0ad      	b.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2238      	movs	r2, #56	; 0x38
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	d100      	bne.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80025c4:	e076      	b.n	80026b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d900      	bls.n	80025ce <HAL_TIM_PWM_ConfigChannel+0x3a>
 80025cc:	e095      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d04e      	beq.n	8002672 <HAL_TIM_PWM_ConfigChannel+0xde>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d900      	bls.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x48>
 80025da:	e08e      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_PWM_ConfigChannel+0x56>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d021      	beq.n	800262c <HAL_TIM_PWM_ConfigChannel+0x98>
 80025e8:	e087      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	0011      	movs	r1, r2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 faa0 	bl	8002b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2108      	movs	r1, #8
 8002604:	430a      	orrs	r2, r1
 8002606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2104      	movs	r1, #4
 8002614:	438a      	bics	r2, r1
 8002616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6999      	ldr	r1, [r3, #24]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	619a      	str	r2, [r3, #24]
      break;
 800262a:	e06b      	b.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fabb 	bl	8002bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0109      	lsls	r1, r1, #4
 8002648:	430a      	orrs	r2, r1
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4931      	ldr	r1, [pc, #196]	; (800271c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002658:	400a      	ands	r2, r1
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	021a      	lsls	r2, r3, #8
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	619a      	str	r2, [r3, #24]
      break;
 8002670:	e048      	b.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	0011      	movs	r1, r2
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fada 	bl	8002c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2108      	movs	r1, #8
 800268c:	430a      	orrs	r2, r1
 800268e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2104      	movs	r1, #4
 800269c:	438a      	bics	r2, r1
 800269e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69d9      	ldr	r1, [r3, #28]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
      break;
 80026b2:	e027      	b.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 faf9 	bl	8002cb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0109      	lsls	r1, r1, #4
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	490f      	ldr	r1, [pc, #60]	; (800271c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69d9      	ldr	r1, [r3, #28]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]
      break;
 80026f8:	e004      	b.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80026fa:	2317      	movs	r3, #23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
      break;
 8002702:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2238      	movs	r2, #56	; 0x38
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

  return status;
 800270c:	2317      	movs	r3, #23
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b006      	add	sp, #24
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	fffffbff 	.word	0xfffffbff

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2238      	movs	r2, #56	; 0x38
 8002736:	5c9b      	ldrb	r3, [r3, r2]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIM_ConfigClockSource+0x20>
 800273c:	2302      	movs	r3, #2
 800273e:	e0bc      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x19a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2238      	movs	r2, #56	; 0x38
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2239      	movs	r2, #57	; 0x39
 800274c:	2102      	movs	r1, #2
 800274e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2277      	movs	r2, #119	; 0x77
 800275c:	4393      	bics	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	0192      	lsls	r2, r2, #6
 8002778:	4293      	cmp	r3, r2
 800277a:	d040      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xde>
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	0192      	lsls	r2, r2, #6
 8002780:	4293      	cmp	r3, r2
 8002782:	d900      	bls.n	8002786 <HAL_TIM_ConfigClockSource+0x66>
 8002784:	e088      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0152      	lsls	r2, r2, #5
 800278a:	4293      	cmp	r3, r2
 800278c:	d100      	bne.n	8002790 <HAL_TIM_ConfigClockSource+0x70>
 800278e:	e088      	b.n	80028a2 <HAL_TIM_ConfigClockSource+0x182>
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0152      	lsls	r2, r2, #5
 8002794:	4293      	cmp	r3, r2
 8002796:	d900      	bls.n	800279a <HAL_TIM_ConfigClockSource+0x7a>
 8002798:	e07e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 800279a:	2b70      	cmp	r3, #112	; 0x70
 800279c:	d018      	beq.n	80027d0 <HAL_TIM_ConfigClockSource+0xb0>
 800279e:	d900      	bls.n	80027a2 <HAL_TIM_ConfigClockSource+0x82>
 80027a0:	e07a      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027a2:	2b60      	cmp	r3, #96	; 0x60
 80027a4:	d04f      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x126>
 80027a6:	d900      	bls.n	80027aa <HAL_TIM_ConfigClockSource+0x8a>
 80027a8:	e076      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027aa:	2b50      	cmp	r3, #80	; 0x50
 80027ac:	d03b      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x106>
 80027ae:	d900      	bls.n	80027b2 <HAL_TIM_ConfigClockSource+0x92>
 80027b0:	e072      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d057      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x146>
 80027b6:	d900      	bls.n	80027ba <HAL_TIM_ConfigClockSource+0x9a>
 80027b8:	e06e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027ba:	2b30      	cmp	r3, #48	; 0x30
 80027bc:	d063      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x166>
 80027be:	d86b      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d060      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x166>
 80027c4:	d868      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d05d      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x166>
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d05b      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x166>
 80027ce:	e063      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f000 fb28 	bl	8002e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2277      	movs	r2, #119	; 0x77
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]
      break;
 80027fc:	e052      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f000 fb11 	bl	8002e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	01c9      	lsls	r1, r1, #7
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
      break;
 8002824:	e03e      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	001a      	movs	r2, r3
 8002834:	f000 fa84 	bl	8002d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2150      	movs	r1, #80	; 0x50
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fade 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002844:	e02e      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	001a      	movs	r2, r3
 8002854:	f000 faa2 	bl	8002d9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2160      	movs	r1, #96	; 0x60
 800285e:	0018      	movs	r0, r3
 8002860:	f000 face 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002864:	e01e      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	001a      	movs	r2, r3
 8002874:	f000 fa64 	bl	8002d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2140      	movs	r1, #64	; 0x40
 800287e:	0018      	movs	r0, r3
 8002880:	f000 fabe 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002884:	e00e      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f000 fab5 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002896:	e005      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002898:	230f      	movs	r3, #15
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
      break;
 80028a0:	e000      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80028a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2239      	movs	r2, #57	; 0x39
 80028a8:	2101      	movs	r1, #1
 80028aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2238      	movs	r2, #56	; 0x38
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

  return status;
 80028b4:	230f      	movs	r3, #15
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	781b      	ldrb	r3, [r3, #0]
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffff00ff 	.word	0xffff00ff

080028c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	223a      	movs	r2, #58	; 0x3a
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
 800290e:	e02a      	b.n	8002966 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d107      	bne.n	800292a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	223b      	movs	r2, #59	; 0x3b
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]
 8002928:	e01d      	b.n	8002966 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2204      	movs	r2, #4
 8002938:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	223c      	movs	r2, #60	; 0x3c
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]
 8002942:	e010      	b.n	8002966 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d107      	bne.n	800295e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2208      	movs	r2, #8
 8002952:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	223d      	movs	r2, #61	; 0x3d
 8002958:	2101      	movs	r1, #1
 800295a:	5499      	strb	r1, [r3, r2]
 800295c:	e003      	b.n	8002966 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2239      	movs	r2, #57	; 0x39
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff ffb5 	bl	80028d8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}

0800297c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d10b      	bne.n	80029ac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d136      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	223a      	movs	r2, #58	; 0x3a
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]
 80029aa:	e031      	b.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10b      	bne.n	80029ce <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2202      	movs	r2, #2
 80029ba:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d125      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	223b      	movs	r2, #59	; 0x3b
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]
 80029cc:	e020      	b.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10b      	bne.n	80029f0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2204      	movs	r2, #4
 80029dc:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d114      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	223c      	movs	r2, #60	; 0x3c
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
 80029ee:	e00f      	b.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d10a      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2208      	movs	r2, #8
 80029fe:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	223d      	movs	r2, #61	; 0x3d
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fe f822 	bl	8000a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	761a      	strb	r2, [r3, #24]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d103      	bne.n	8002a46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	761a      	strb	r2, [r3, #24]
 8002a44:	e019      	b.n	8002a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d103      	bne.n	8002a58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2202      	movs	r2, #2
 8002a54:	761a      	strb	r2, [r3, #24]
 8002a56:	e010      	b.n	8002a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d103      	bne.n	8002a6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2204      	movs	r2, #4
 8002a66:	761a      	strb	r2, [r3, #24]
 8002a68:	e007      	b.n	8002a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d102      	bne.n	8002a7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2208      	movs	r2, #8
 8002a78:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff ff23 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	761a      	strb	r2, [r3, #24]
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x2a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <TIM_Base_SetConfig+0x9c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x2a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <TIM_Base_SetConfig+0xa0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2270      	movs	r2, #112	; 0x70
 8002abe:	4393      	bics	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x56>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <TIM_Base_SetConfig+0x9c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x56>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <TIM_Base_SetConfig+0xa0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <TIM_Base_SetConfig+0xa4>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	4393      	bics	r3, r2
 8002afe:	001a      	movs	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	615a      	str	r2, [r3, #20]
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	40011400 	.word	0x40011400
 8002b34:	fffffcff 	.word	0xfffffcff

08002b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4393      	bics	r3, r2
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2270      	movs	r2, #112	; 0x70
 8002b66:	4393      	bics	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4393      	bics	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	4393      	bics	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	621a      	str	r2, [r3, #32]
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b006      	add	sp, #24
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <TIM_OC2_SetConfig+0x7c>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <TIM_OC2_SetConfig+0x80>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	ffff8fff 	.word	0xffff8fff
 8002c30:	fffffcff 	.word	0xfffffcff

08002c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <TIM_OC3_SetConfig+0x78>)
 8002c44:	401a      	ands	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2270      	movs	r2, #112	; 0x70
 8002c60:	4393      	bics	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2203      	movs	r2, #3
 8002c68:	4393      	bics	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <TIM_OC3_SetConfig+0x7c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	621a      	str	r2, [r3, #32]
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b006      	add	sp, #24
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	fffffeff 	.word	0xfffffeff
 8002cb0:	fffffdff 	.word	0xfffffdff

08002cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <TIM_OC4_SetConfig+0x7c>)
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <TIM_OC4_SetConfig+0x80>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <TIM_OC4_SetConfig+0x84>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <TIM_OC4_SetConfig+0x88>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b006      	add	sp, #24
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	ffffefff 	.word	0xffffefff
 8002d34:	ffff8fff 	.word	0xffff8fff
 8002d38:	fffffcff 	.word	0xfffffcff
 8002d3c:	ffffdfff 	.word	0xffffdfff

08002d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4393      	bics	r3, r2
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	22f0      	movs	r2, #240	; 0xf0
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	220a      	movs	r2, #10
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b006      	add	sp, #24
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	2210      	movs	r2, #16
 8002dae:	4393      	bics	r3, r2
 8002db0:	001a      	movs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <TIM_TI2_ConfigInputStage+0x60>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	22a0      	movs	r2, #160	; 0xa0
 8002dd8:	4393      	bics	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b006      	add	sp, #24
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	ffff0fff 	.word	0xffff0fff

08002e00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2270      	movs	r2, #112	; 0x70
 8002e14:	4393      	bics	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	2207      	movs	r2, #7
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <TIM_ETR_SetConfig+0x3c>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b006      	add	sp, #24
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	ffff00ff 	.word	0xffff00ff

08002e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	221f      	movs	r2, #31
 8002e84:	4013      	ands	r3, r2
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	43d2      	mvns	r2, r2
 8002e96:	401a      	ands	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	211f      	movs	r1, #31
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4099      	lsls	r1, r3
 8002eaa:	000b      	movs	r3, r1
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b006      	add	sp, #24
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2238      	movs	r2, #56	; 0x38
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e042      	b.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2238      	movs	r2, #56	; 0x38
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2239      	movs	r2, #57	; 0x39
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2270      	movs	r2, #112	; 0x70
 8002ef8:	4393      	bics	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	05db      	lsls	r3, r3, #23
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d009      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	4393      	bics	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2239      	movs	r2, #57	; 0x39
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2238      	movs	r2, #56	; 0x38
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40011400 	.word	0x40011400

08002f6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f70:	f7fd fd88 	bl	8000a84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f74:	f000 f80c 	bl	8002f90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f78:	f000 f902 	bl	8003180 <MX_GPIO_Init>
	MX_DMA_Init();
 8002f7c:	f000 f8e2 	bl	8003144 <MX_DMA_Init>
	MX_TIM2_Init();
 8002f80:	f000 f862 	bl	8003048 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	setUp();
 8002f84:	f7fd fc46 	bl	8000814 <setUp>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		appLoop();
 8002f88:	f7fd fc68 	bl	800085c <appLoop>
 8002f8c:	e7fc      	b.n	8002f88 <main+0x1c>
	...

08002f90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b095      	sub	sp, #84	; 0x54
 8002f94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f96:	2418      	movs	r4, #24
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2338      	movs	r3, #56	; 0x38
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	f000 fb0f 	bl	80035c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	0018      	movs	r0, r3
 8002faa:	2314      	movs	r3, #20
 8002fac:	001a      	movs	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f000 fb08 	bl	80035c4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <SystemClock_Config+0xb0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <SystemClock_Config+0xb4>)
 8002fba:	401a      	ands	r2, r3
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <SystemClock_Config+0xb0>)
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0109      	lsls	r1, r1, #4
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fc6:	0021      	movs	r1, r4
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2202      	movs	r2, #2
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	02d2      	lsls	r2, r2, #11
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	03d2      	lsls	r2, r2, #15
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fe fa67 	bl	80014cc <HAL_RCC_OscConfig>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0x76>
		Error_Handler();
 8003002:	f000 f955 	bl	80032b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	220f      	movs	r2, #15
 800300a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2203      	movs	r2, #3
 8003010:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2101      	movs	r1, #1
 8003028:	0018      	movs	r0, r3
 800302a:	f7fe fe13 	bl	8001c54 <HAL_RCC_ClockConfig>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0xa6>
		Error_Handler();
 8003032:	f000 f93d 	bl	80032b0 <Error_Handler>
	}
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b015      	add	sp, #84	; 0x54
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40007000 	.word	0x40007000
 8003044:	ffffe7ff 	.word	0xffffe7ff

08003048 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800304e:	2318      	movs	r3, #24
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	0018      	movs	r0, r3
 8003054:	2310      	movs	r3, #16
 8003056:	001a      	movs	r2, r3
 8003058:	2100      	movs	r1, #0
 800305a:	f000 fab3 	bl	80035c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800305e:	2310      	movs	r3, #16
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	0018      	movs	r0, r3
 8003064:	2308      	movs	r3, #8
 8003066:	001a      	movs	r2, r3
 8003068:	2100      	movs	r1, #0
 800306a:	f000 faab 	bl	80035c4 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800306e:	003b      	movs	r3, r7
 8003070:	0018      	movs	r0, r3
 8003072:	2310      	movs	r3, #16
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f000 faa4 	bl	80035c4 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800307c:	4b30      	ldr	r3, [pc, #192]	; (8003140 <MX_TIM2_Init+0xf8>)
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	05d2      	lsls	r2, r2, #23
 8003082:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <MX_TIM2_Init+0xf8>)
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <MX_TIM2_Init+0xf8>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40 - 1;
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <MX_TIM2_Init+0xf8>)
 8003092:	2227      	movs	r2, #39	; 0x27
 8003094:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <MX_TIM2_Init+0xf8>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <MX_TIM2_Init+0xf8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <MX_TIM2_Init+0xf8>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe ffc3 	bl	8002030 <HAL_TIM_Base_Init>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM2_Init+0x6a>
		Error_Handler();
 80030ae:	f000 f8ff 	bl	80032b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b2:	2118      	movs	r1, #24
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0152      	lsls	r2, r2, #5
 80030ba:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80030bc:	187a      	adds	r2, r7, r1
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <MX_TIM2_Init+0xf8>)
 80030c0:	0011      	movs	r1, r2
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7ff fb2c 	bl	8002720 <HAL_TIM_ConfigClockSource>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM2_Init+0x88>
		Error_Handler();
 80030cc:	f000 f8f0 	bl	80032b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <MX_TIM2_Init+0xf8>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fe ffec 	bl	80020b0 <HAL_TIM_PWM_Init>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM2_Init+0x98>
		Error_Handler();
 80030dc:	f000 f8e8 	bl	80032b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e0:	2110      	movs	r1, #16
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80030ee:	187a      	adds	r2, r7, r1
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <MX_TIM2_Init+0xf8>)
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff fee1 	bl	8002ebc <HAL_TIMEx_MasterConfigSynchronization>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 80030fe:	f000 f8d7 	bl	80032b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003102:	003b      	movs	r3, r7
 8003104:	2260      	movs	r2, #96	; 0x60
 8003106:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8003108:	003b      	movs	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310e:	003b      	movs	r3, r7
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003114:	003b      	movs	r3, r7
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800311a:	0039      	movs	r1, r7
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <MX_TIM2_Init+0xf8>)
 800311e:	2200      	movs	r2, #0
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff fa37 	bl	8002594 <HAL_TIM_PWM_ConfigChannel>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d001      	beq.n	800312e <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 800312a:	f000 f8c1 	bl	80032b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <MX_TIM2_Init+0xf8>)
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f91d 	bl	8003370 <HAL_TIM_MspPostInit>

}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b00a      	add	sp, #40	; 0x28
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	2000037c 	.word	0x2000037c

08003144 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_DMA_Init+0x38>)
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <MX_DMA_Init+0x38>)
 8003150:	2101      	movs	r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_DMA_Init+0x38>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	200b      	movs	r0, #11
 8003168:	f7fd fdcc 	bl	8000d04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800316c:	200b      	movs	r0, #11
 800316e:	f7fd fdde 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b002      	add	sp, #8
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000

08003180 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003186:	240c      	movs	r4, #12
 8003188:	193b      	adds	r3, r7, r4
 800318a:	0018      	movs	r0, r3
 800318c:	2314      	movs	r3, #20
 800318e:	001a      	movs	r2, r3
 8003190:	2100      	movs	r1, #0
 8003192:	f000 fa17 	bl	80035c4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <MX_GPIO_Init+0x120>)
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <MX_GPIO_Init+0x120>)
 800319c:	2104      	movs	r1, #4
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	2204      	movs	r2, #4
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2201      	movs	r2, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031cc:	2102      	movs	r1, #2
 80031ce:	430a      	orrs	r2, r1
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031d2:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <MX_GPIO_Init+0x120>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80031de:	23f8      	movs	r3, #248	; 0xf8
 80031e0:	00d9      	lsls	r1, r3, #3
 80031e2:	23a0      	movs	r3, #160	; 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	2201      	movs	r2, #1
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fe f952 	bl	8001492 <HAL_GPIO_WritePin>
			LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <MX_GPIO_Init+0x124>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	21fb      	movs	r1, #251	; 0xfb
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fe f94c 	bl	8001492 <HAL_GPIO_WritePin>
			LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin
					| LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	0219      	lsls	r1, r3, #8
 80031fe:	23a0      	movs	r3, #160	; 0xa0
 8003200:	05db      	lsls	r3, r3, #23
 8003202:	2200      	movs	r2, #0
 8003204:	0018      	movs	r0, r3
 8003206:	f7fe f944 	bl	8001492 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SW_A_Pin SW_B_Pin */
	GPIO_InitStruct.Pin = SW_A_Pin | SW_B_Pin;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	22c0      	movs	r2, #192	; 0xc0
 800320e:	0212      	lsls	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	2200      	movs	r2, #0
 8003216:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2201      	movs	r2, #1
 800321c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321e:	193b      	adds	r3, r7, r4
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <MX_GPIO_Init+0x128>)
 8003222:	0019      	movs	r1, r3
 8003224:	0010      	movs	r0, r2
 8003226:	f7fd ffa1 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
	GPIO_InitStruct.Pin = SW_ON_Pin | SW_AUTO_Pin | SW_LOCK_Pin;
 800322a:	193b      	adds	r3, r7, r4
 800322c:	221c      	movs	r2, #28
 800322e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003230:	193b      	adds	r3, r7, r4
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003236:	193b      	adds	r3, r7, r4
 8003238:	2201      	movs	r2, #1
 800323a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	193a      	adds	r2, r7, r4
 800323e:	23a0      	movs	r3, #160	; 0xa0
 8003240:	05db      	lsls	r3, r3, #23
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f7fd ff91 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
	 LED5_Pin BUZZ_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin
 800324a:	193b      	adds	r3, r7, r4
 800324c:	4a17      	ldr	r2, [pc, #92]	; (80032ac <MX_GPIO_Init+0x12c>)
 800324e:	601a      	str	r2, [r3, #0]
			| BUZZ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003250:	193b      	adds	r3, r7, r4
 8003252:	2201      	movs	r2, #1
 8003254:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	193b      	adds	r3, r7, r4
 800325e:	2203      	movs	r2, #3
 8003260:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003262:	193a      	adds	r2, r7, r4
 8003264:	23a0      	movs	r3, #160	; 0xa0
 8003266:	05db      	lsls	r3, r3, #23
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f7fd ff7e 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin
	 LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_RW_Pin | LCD_EN_Pin | LCD_D4_Pin
 8003270:	0021      	movs	r1, r4
 8003272:	187b      	adds	r3, r7, r1
 8003274:	22fb      	movs	r2, #251	; 0xfb
 8003276:	601a      	str	r2, [r3, #0]
			| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	187b      	adds	r3, r7, r1
 800327a:	2201      	movs	r2, #1
 800327c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	187b      	adds	r3, r7, r1
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	187b      	adds	r3, r7, r1
 8003286:	2203      	movs	r2, #3
 8003288:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328a:	187b      	adds	r3, r7, r1
 800328c:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <MX_GPIO_Init+0x124>)
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f7fd ff6b 	bl	800116c <HAL_GPIO_Init>

}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b009      	add	sp, #36	; 0x24
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	50000400 	.word	0x50000400
 80032a8:	50000800 	.word	0x50000800
 80032ac:	000087c0 	.word	0x000087c0

080032b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_MspInit+0x24>)
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x24>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_MspInit+0x24>)
 80032ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_MspInit+0x24>)
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	0549      	lsls	r1, r1, #21
 80032d6:	430a      	orrs	r2, r1
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	05db      	lsls	r3, r3, #23
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d130      	bne.n	800335a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_TIM_Base_MspInit+0x80>)
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_TIM_Base_MspInit+0x80>)
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_TIM_Base_MspInit+0x88>)
 8003308:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 800330c:	2208      	movs	r2, #8
 800330e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003312:	2210      	movs	r2, #16
 8003314:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	0052      	lsls	r2, r2, #1
 8003328:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	00d2      	lsls	r2, r2, #3
 8003330:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003334:	2200      	movs	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 800333a:	2200      	movs	r2, #0
 800333c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fd11 	bl	8000d68 <HAL_DMA_Init>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 800334a:	f7ff ffb1 	bl	80032b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003352:	621a      	str	r2, [r3, #32]
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_TIM_Base_MspInit+0x84>)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	200003bc 	.word	0x200003bc
 800336c:	40020058 	.word	0x40020058

08003370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	240c      	movs	r4, #12
 800337a:	193b      	adds	r3, r7, r4
 800337c:	0018      	movs	r0, r3
 800337e:	2314      	movs	r3, #20
 8003380:	001a      	movs	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	f000 f91e 	bl	80035c4 <memset>
  if(htim->Instance==TIM2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	05db      	lsls	r3, r3, #23
 8003390:	429a      	cmp	r2, r3
 8003392:	d122      	bne.n	80033da <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_TIM_MspPostInit+0x74>)
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_TIM_MspPostInit+0x74>)
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_TIM_MspPostInit+0x74>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033ac:	0021      	movs	r1, r4
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	2220      	movs	r2, #32
 80033b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2202      	movs	r2, #2
 80033b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2205      	movs	r2, #5
 80033ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	187a      	adds	r2, r7, r1
 80033ce:	23a0      	movs	r3, #160	; 0xa0
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	0011      	movs	r1, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fd fec9 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b009      	add	sp, #36	; 0x24
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40021000 	.word	0x40021000

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f6:	e7fe      	b.n	80033f6 <HardFault_Handler+0x4>

080033f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003410:	f7fd fb8c 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8003422:	0018      	movs	r0, r3
 8003424:	f7fd fdc5 	bl	8000fb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	200003bc 	.word	0x200003bc

08003434 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <_sbrk+0x50>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <_sbrk+0x16>
		heap_end = &end;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <_sbrk+0x50>)
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <_sbrk+0x54>)
 8003448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <_sbrk+0x50>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <_sbrk+0x50>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	18d2      	adds	r2, r2, r3
 8003458:	466b      	mov	r3, sp
 800345a:	429a      	cmp	r2, r3
 800345c:	d907      	bls.n	800346e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800345e:	f000 f87d 	bl	800355c <__errno>
 8003462:	0003      	movs	r3, r0
 8003464:	220c      	movs	r2, #12
 8003466:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
 800346c:	e006      	b.n	800347c <_sbrk+0x48>
	}

	heap_end += incr;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <_sbrk+0x50>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	18d2      	adds	r2, r2, r3
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <_sbrk+0x50>)
 8003478:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000404 	.word	0x20000404
 8003488:	20000418 	.word	0x20000418

0800348c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <SystemInit+0x64>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <SystemInit+0x64>)
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	0049      	lsls	r1, r1, #1
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <SystemInit+0x64>)
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <SystemInit+0x64>)
 80034a4:	4913      	ldr	r1, [pc, #76]	; (80034f4 <SystemInit+0x68>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <SystemInit+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <SystemInit+0x64>)
 80034b0:	4911      	ldr	r1, [pc, #68]	; (80034f8 <SystemInit+0x6c>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <SystemInit+0x64>)
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <SystemInit+0x64>)
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <SystemInit+0x64>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <SystemInit+0x64>)
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <SystemInit+0x70>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <SystemInit+0x64>)
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <SystemInit+0x64>)
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <SystemInit+0x74>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SystemInit+0x64>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <SystemInit+0x78>)
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0512      	lsls	r2, r2, #20
 80034e6:	609a      	str	r2, [r3, #8]
#endif
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40021000 	.word	0x40021000
 80034f4:	88ff400c 	.word	0x88ff400c
 80034f8:	fef6fff6 	.word	0xfef6fff6
 80034fc:	fffbffff 	.word	0xfffbffff
 8003500:	ff02ffff 	.word	0xff02ffff
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003508:	480d      	ldr	r0, [pc, #52]	; (8003540 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800350a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800350c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800350e:	e003      	b.n	8003518 <LoopCopyDataInit>

08003510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003516:	3104      	adds	r1, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003518:	480b      	ldr	r0, [pc, #44]	; (8003548 <LoopForever+0xa>)
  ldr  r3, =_edata
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <LoopForever+0xe>)
  adds  r2, r0, r1
 800351c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800351e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003520:	d3f6      	bcc.n	8003510 <CopyDataInit>
  ldr  r2, =_sbss
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003524:	e002      	b.n	800352c <LoopFillZerobss>

08003526 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003526:	2300      	movs	r3, #0
  str  r3, [r2]
 8003528:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800352a:	3204      	adds	r2, #4

0800352c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <LoopForever+0x16>)
  cmp  r2, r3
 800352e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003530:	d3f9      	bcc.n	8003526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003532:	f7ff ffab 	bl	800348c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003536:	f000 f817 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800353a:	f7ff fd17 	bl	8002f6c <main>

0800353e <LoopForever>:

LoopForever:
    b LoopForever
 800353e:	e7fe      	b.n	800353e <LoopForever>
   ldr   r0, =_estack
 8003540:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003544:	08003f50 	.word	0x08003f50
  ldr  r0, =_sdata
 8003548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800354c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003550:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003554:	20000418 	.word	0x20000418

08003558 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003558:	e7fe      	b.n	8003558 <ADC1_COMP_IRQHandler>
	...

0800355c <__errno>:
 800355c:	4b01      	ldr	r3, [pc, #4]	; (8003564 <__errno+0x8>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	4770      	bx	lr
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000014 	.word	0x20000014

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	2600      	movs	r6, #0
 800356c:	4d0c      	ldr	r5, [pc, #48]	; (80035a0 <__libc_init_array+0x38>)
 800356e:	4c0d      	ldr	r4, [pc, #52]	; (80035a4 <__libc_init_array+0x3c>)
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	2600      	movs	r6, #0
 800357a:	f000 fc93 	bl	8003ea4 <_init>
 800357e:	4d0a      	ldr	r5, [pc, #40]	; (80035a8 <__libc_init_array+0x40>)
 8003580:	4c0a      	ldr	r4, [pc, #40]	; (80035ac <__libc_init_array+0x44>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	00b3      	lsls	r3, r6, #2
 800358e:	58eb      	ldr	r3, [r5, r3]
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	00b3      	lsls	r3, r6, #2
 8003598:	58eb      	ldr	r3, [r5, r3]
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	08003f48 	.word	0x08003f48
 80035a4:	08003f48 	.word	0x08003f48
 80035a8:	08003f48 	.word	0x08003f48
 80035ac:	08003f4c 	.word	0x08003f4c

080035b0 <malloc>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <malloc+0x10>)
 80035b4:	0001      	movs	r1, r0
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	f000 f878 	bl	80036ac <_malloc_r>
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000014 	.word	0x20000014

080035c4 <memset>:
 80035c4:	0003      	movs	r3, r0
 80035c6:	1882      	adds	r2, r0, r2
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d100      	bne.n	80035ce <memset+0xa>
 80035cc:	4770      	bx	lr
 80035ce:	7019      	strb	r1, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	e7f9      	b.n	80035c8 <memset+0x4>

080035d4 <_free_r>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	0005      	movs	r5, r0
 80035d8:	2900      	cmp	r1, #0
 80035da:	d010      	beq.n	80035fe <_free_r+0x2a>
 80035dc:	1f0c      	subs	r4, r1, #4
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da00      	bge.n	80035e6 <_free_r+0x12>
 80035e4:	18e4      	adds	r4, r4, r3
 80035e6:	0028      	movs	r0, r5
 80035e8:	f000 f908 	bl	80037fc <__malloc_lock>
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <_free_r+0x90>)
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <_free_r+0x2c>
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	6014      	str	r4, [r2, #0]
 80035f8:	0028      	movs	r0, r5
 80035fa:	f000 f907 	bl	800380c <__malloc_unlock>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	42a3      	cmp	r3, r4
 8003602:	d908      	bls.n	8003616 <_free_r+0x42>
 8003604:	6821      	ldr	r1, [r4, #0]
 8003606:	1860      	adds	r0, r4, r1
 8003608:	4283      	cmp	r3, r0
 800360a:	d1f3      	bne.n	80035f4 <_free_r+0x20>
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	1841      	adds	r1, r0, r1
 8003612:	6021      	str	r1, [r4, #0]
 8003614:	e7ee      	b.n	80035f4 <_free_r+0x20>
 8003616:	001a      	movs	r2, r3
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <_free_r+0x4e>
 800361e:	42a3      	cmp	r3, r4
 8003620:	d9f9      	bls.n	8003616 <_free_r+0x42>
 8003622:	6811      	ldr	r1, [r2, #0]
 8003624:	1850      	adds	r0, r2, r1
 8003626:	42a0      	cmp	r0, r4
 8003628:	d10b      	bne.n	8003642 <_free_r+0x6e>
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	1809      	adds	r1, r1, r0
 800362e:	1850      	adds	r0, r2, r1
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	4283      	cmp	r3, r0
 8003634:	d1e0      	bne.n	80035f8 <_free_r+0x24>
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	1841      	adds	r1, r0, r1
 800363c:	6011      	str	r1, [r2, #0]
 800363e:	6053      	str	r3, [r2, #4]
 8003640:	e7da      	b.n	80035f8 <_free_r+0x24>
 8003642:	42a0      	cmp	r0, r4
 8003644:	d902      	bls.n	800364c <_free_r+0x78>
 8003646:	230c      	movs	r3, #12
 8003648:	602b      	str	r3, [r5, #0]
 800364a:	e7d5      	b.n	80035f8 <_free_r+0x24>
 800364c:	6821      	ldr	r1, [r4, #0]
 800364e:	1860      	adds	r0, r4, r1
 8003650:	4283      	cmp	r3, r0
 8003652:	d103      	bne.n	800365c <_free_r+0x88>
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	1841      	adds	r1, r0, r1
 800365a:	6021      	str	r1, [r4, #0]
 800365c:	6063      	str	r3, [r4, #4]
 800365e:	6054      	str	r4, [r2, #4]
 8003660:	e7ca      	b.n	80035f8 <_free_r+0x24>
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000408 	.word	0x20000408

08003668 <sbrk_aligned>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	4e0f      	ldr	r6, [pc, #60]	; (80036a8 <sbrk_aligned+0x40>)
 800366c:	000d      	movs	r5, r1
 800366e:	6831      	ldr	r1, [r6, #0]
 8003670:	0004      	movs	r4, r0
 8003672:	2900      	cmp	r1, #0
 8003674:	d102      	bne.n	800367c <sbrk_aligned+0x14>
 8003676:	f000 f88f 	bl	8003798 <_sbrk_r>
 800367a:	6030      	str	r0, [r6, #0]
 800367c:	0029      	movs	r1, r5
 800367e:	0020      	movs	r0, r4
 8003680:	f000 f88a 	bl	8003798 <_sbrk_r>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d00a      	beq.n	800369e <sbrk_aligned+0x36>
 8003688:	2303      	movs	r3, #3
 800368a:	1cc5      	adds	r5, r0, #3
 800368c:	439d      	bics	r5, r3
 800368e:	42a8      	cmp	r0, r5
 8003690:	d007      	beq.n	80036a2 <sbrk_aligned+0x3a>
 8003692:	1a29      	subs	r1, r5, r0
 8003694:	0020      	movs	r0, r4
 8003696:	f000 f87f 	bl	8003798 <_sbrk_r>
 800369a:	1c43      	adds	r3, r0, #1
 800369c:	d101      	bne.n	80036a2 <sbrk_aligned+0x3a>
 800369e:	2501      	movs	r5, #1
 80036a0:	426d      	negs	r5, r5
 80036a2:	0028      	movs	r0, r5
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	2000040c 	.word	0x2000040c

080036ac <_malloc_r>:
 80036ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ae:	2203      	movs	r2, #3
 80036b0:	1ccb      	adds	r3, r1, #3
 80036b2:	4393      	bics	r3, r2
 80036b4:	3308      	adds	r3, #8
 80036b6:	0006      	movs	r6, r0
 80036b8:	001f      	movs	r7, r3
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d232      	bcs.n	8003724 <_malloc_r+0x78>
 80036be:	270c      	movs	r7, #12
 80036c0:	42b9      	cmp	r1, r7
 80036c2:	d831      	bhi.n	8003728 <_malloc_r+0x7c>
 80036c4:	0030      	movs	r0, r6
 80036c6:	f000 f899 	bl	80037fc <__malloc_lock>
 80036ca:	4d32      	ldr	r5, [pc, #200]	; (8003794 <_malloc_r+0xe8>)
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	001c      	movs	r4, r3
 80036d0:	2c00      	cmp	r4, #0
 80036d2:	d12e      	bne.n	8003732 <_malloc_r+0x86>
 80036d4:	0039      	movs	r1, r7
 80036d6:	0030      	movs	r0, r6
 80036d8:	f7ff ffc6 	bl	8003668 <sbrk_aligned>
 80036dc:	0004      	movs	r4, r0
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d11e      	bne.n	8003720 <_malloc_r+0x74>
 80036e2:	682c      	ldr	r4, [r5, #0]
 80036e4:	0025      	movs	r5, r4
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	d14a      	bne.n	8003780 <_malloc_r+0xd4>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	0029      	movs	r1, r5
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	0030      	movs	r0, r6
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	f000 f850 	bl	8003798 <_sbrk_r>
 80036f8:	9b01      	ldr	r3, [sp, #4]
 80036fa:	4283      	cmp	r3, r0
 80036fc:	d143      	bne.n	8003786 <_malloc_r+0xda>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	3703      	adds	r7, #3
 8003702:	1aff      	subs	r7, r7, r3
 8003704:	2303      	movs	r3, #3
 8003706:	439f      	bics	r7, r3
 8003708:	3708      	adds	r7, #8
 800370a:	2f0c      	cmp	r7, #12
 800370c:	d200      	bcs.n	8003710 <_malloc_r+0x64>
 800370e:	270c      	movs	r7, #12
 8003710:	0039      	movs	r1, r7
 8003712:	0030      	movs	r0, r6
 8003714:	f7ff ffa8 	bl	8003668 <sbrk_aligned>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d034      	beq.n	8003786 <_malloc_r+0xda>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	19df      	adds	r7, r3, r7
 8003720:	6027      	str	r7, [r4, #0]
 8003722:	e013      	b.n	800374c <_malloc_r+0xa0>
 8003724:	2b00      	cmp	r3, #0
 8003726:	dacb      	bge.n	80036c0 <_malloc_r+0x14>
 8003728:	230c      	movs	r3, #12
 800372a:	2500      	movs	r5, #0
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	0028      	movs	r0, r5
 8003730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	1bd1      	subs	r1, r2, r7
 8003736:	d420      	bmi.n	800377a <_malloc_r+0xce>
 8003738:	290b      	cmp	r1, #11
 800373a:	d917      	bls.n	800376c <_malloc_r+0xc0>
 800373c:	19e2      	adds	r2, r4, r7
 800373e:	6027      	str	r7, [r4, #0]
 8003740:	42a3      	cmp	r3, r4
 8003742:	d111      	bne.n	8003768 <_malloc_r+0xbc>
 8003744:	602a      	str	r2, [r5, #0]
 8003746:	6863      	ldr	r3, [r4, #4]
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	0030      	movs	r0, r6
 800374e:	0025      	movs	r5, r4
 8003750:	f000 f85c 	bl	800380c <__malloc_unlock>
 8003754:	2207      	movs	r2, #7
 8003756:	350b      	adds	r5, #11
 8003758:	1d23      	adds	r3, r4, #4
 800375a:	4395      	bics	r5, r2
 800375c:	1aea      	subs	r2, r5, r3
 800375e:	429d      	cmp	r5, r3
 8003760:	d0e5      	beq.n	800372e <_malloc_r+0x82>
 8003762:	1b5b      	subs	r3, r3, r5
 8003764:	50a3      	str	r3, [r4, r2]
 8003766:	e7e2      	b.n	800372e <_malloc_r+0x82>
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e7ec      	b.n	8003746 <_malloc_r+0x9a>
 800376c:	6862      	ldr	r2, [r4, #4]
 800376e:	42a3      	cmp	r3, r4
 8003770:	d101      	bne.n	8003776 <_malloc_r+0xca>
 8003772:	602a      	str	r2, [r5, #0]
 8003774:	e7ea      	b.n	800374c <_malloc_r+0xa0>
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	e7e8      	b.n	800374c <_malloc_r+0xa0>
 800377a:	0023      	movs	r3, r4
 800377c:	6864      	ldr	r4, [r4, #4]
 800377e:	e7a7      	b.n	80036d0 <_malloc_r+0x24>
 8003780:	002c      	movs	r4, r5
 8003782:	686d      	ldr	r5, [r5, #4]
 8003784:	e7af      	b.n	80036e6 <_malloc_r+0x3a>
 8003786:	230c      	movs	r3, #12
 8003788:	0030      	movs	r0, r6
 800378a:	6033      	str	r3, [r6, #0]
 800378c:	f000 f83e 	bl	800380c <__malloc_unlock>
 8003790:	e7cd      	b.n	800372e <_malloc_r+0x82>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000408 	.word	0x20000408

08003798 <_sbrk_r>:
 8003798:	2300      	movs	r3, #0
 800379a:	b570      	push	{r4, r5, r6, lr}
 800379c:	4d06      	ldr	r5, [pc, #24]	; (80037b8 <_sbrk_r+0x20>)
 800379e:	0004      	movs	r4, r0
 80037a0:	0008      	movs	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7ff fe46 	bl	8003434 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d103      	bne.n	80037b4 <_sbrk_r+0x1c>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d000      	beq.n	80037b4 <_sbrk_r+0x1c>
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20000410 	.word	0x20000410

080037bc <siprintf>:
 80037bc:	b40e      	push	{r1, r2, r3}
 80037be:	b500      	push	{lr}
 80037c0:	490b      	ldr	r1, [pc, #44]	; (80037f0 <siprintf+0x34>)
 80037c2:	b09c      	sub	sp, #112	; 0x70
 80037c4:	ab1d      	add	r3, sp, #116	; 0x74
 80037c6:	9002      	str	r0, [sp, #8]
 80037c8:	9006      	str	r0, [sp, #24]
 80037ca:	9107      	str	r1, [sp, #28]
 80037cc:	9104      	str	r1, [sp, #16]
 80037ce:	4809      	ldr	r0, [pc, #36]	; (80037f4 <siprintf+0x38>)
 80037d0:	4909      	ldr	r1, [pc, #36]	; (80037f8 <siprintf+0x3c>)
 80037d2:	cb04      	ldmia	r3!, {r2}
 80037d4:	9105      	str	r1, [sp, #20]
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	a902      	add	r1, sp, #8
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	f000 f880 	bl	80038e0 <_svfiprintf_r>
 80037e0:	2300      	movs	r3, #0
 80037e2:	9a02      	ldr	r2, [sp, #8]
 80037e4:	7013      	strb	r3, [r2, #0]
 80037e6:	b01c      	add	sp, #112	; 0x70
 80037e8:	bc08      	pop	{r3}
 80037ea:	b003      	add	sp, #12
 80037ec:	4718      	bx	r3
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	7fffffff 	.word	0x7fffffff
 80037f4:	20000014 	.word	0x20000014
 80037f8:	ffff0208 	.word	0xffff0208

080037fc <__malloc_lock>:
 80037fc:	b510      	push	{r4, lr}
 80037fe:	4802      	ldr	r0, [pc, #8]	; (8003808 <__malloc_lock+0xc>)
 8003800:	f000 faf0 	bl	8003de4 <__retarget_lock_acquire_recursive>
 8003804:	bd10      	pop	{r4, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000414 	.word	0x20000414

0800380c <__malloc_unlock>:
 800380c:	b510      	push	{r4, lr}
 800380e:	4802      	ldr	r0, [pc, #8]	; (8003818 <__malloc_unlock+0xc>)
 8003810:	f000 fae9 	bl	8003de6 <__retarget_lock_release_recursive>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000414 	.word	0x20000414

0800381c <__ssputs_r>:
 800381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381e:	688e      	ldr	r6, [r1, #8]
 8003820:	b085      	sub	sp, #20
 8003822:	0007      	movs	r7, r0
 8003824:	000c      	movs	r4, r1
 8003826:	9203      	str	r2, [sp, #12]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	429e      	cmp	r6, r3
 800382c:	d83c      	bhi.n	80038a8 <__ssputs_r+0x8c>
 800382e:	2390      	movs	r3, #144	; 0x90
 8003830:	898a      	ldrh	r2, [r1, #12]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	421a      	tst	r2, r3
 8003836:	d034      	beq.n	80038a2 <__ssputs_r+0x86>
 8003838:	6909      	ldr	r1, [r1, #16]
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	6960      	ldr	r0, [r4, #20]
 800383e:	1a5b      	subs	r3, r3, r1
 8003840:	9302      	str	r3, [sp, #8]
 8003842:	2303      	movs	r3, #3
 8003844:	4343      	muls	r3, r0
 8003846:	0fdd      	lsrs	r5, r3, #31
 8003848:	18ed      	adds	r5, r5, r3
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	9802      	ldr	r0, [sp, #8]
 800384e:	3301      	adds	r3, #1
 8003850:	181b      	adds	r3, r3, r0
 8003852:	106d      	asrs	r5, r5, #1
 8003854:	42ab      	cmp	r3, r5
 8003856:	d900      	bls.n	800385a <__ssputs_r+0x3e>
 8003858:	001d      	movs	r5, r3
 800385a:	0553      	lsls	r3, r2, #21
 800385c:	d532      	bpl.n	80038c4 <__ssputs_r+0xa8>
 800385e:	0029      	movs	r1, r5
 8003860:	0038      	movs	r0, r7
 8003862:	f7ff ff23 	bl	80036ac <_malloc_r>
 8003866:	1e06      	subs	r6, r0, #0
 8003868:	d109      	bne.n	800387e <__ssputs_r+0x62>
 800386a:	230c      	movs	r3, #12
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	2001      	movs	r0, #1
 8003872:	89a2      	ldrh	r2, [r4, #12]
 8003874:	4240      	negs	r0, r0
 8003876:	4313      	orrs	r3, r2
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	b005      	add	sp, #20
 800387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387e:	9a02      	ldr	r2, [sp, #8]
 8003880:	6921      	ldr	r1, [r4, #16]
 8003882:	f000 fabc 	bl	8003dfe <memcpy>
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <__ssputs_r+0xc0>)
 800388a:	401a      	ands	r2, r3
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	4313      	orrs	r3, r2
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	9b02      	ldr	r3, [sp, #8]
 8003894:	6126      	str	r6, [r4, #16]
 8003896:	18f6      	adds	r6, r6, r3
 8003898:	6026      	str	r6, [r4, #0]
 800389a:	6165      	str	r5, [r4, #20]
 800389c:	9e01      	ldr	r6, [sp, #4]
 800389e:	1aed      	subs	r5, r5, r3
 80038a0:	60a5      	str	r5, [r4, #8]
 80038a2:	9b01      	ldr	r3, [sp, #4]
 80038a4:	429e      	cmp	r6, r3
 80038a6:	d900      	bls.n	80038aa <__ssputs_r+0x8e>
 80038a8:	9e01      	ldr	r6, [sp, #4]
 80038aa:	0032      	movs	r2, r6
 80038ac:	9903      	ldr	r1, [sp, #12]
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	f000 faae 	bl	8003e10 <memmove>
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	2000      	movs	r0, #0
 80038b8:	1b9b      	subs	r3, r3, r6
 80038ba:	60a3      	str	r3, [r4, #8]
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	199e      	adds	r6, r3, r6
 80038c0:	6026      	str	r6, [r4, #0]
 80038c2:	e7da      	b.n	800387a <__ssputs_r+0x5e>
 80038c4:	002a      	movs	r2, r5
 80038c6:	0038      	movs	r0, r7
 80038c8:	f000 fab5 	bl	8003e36 <_realloc_r>
 80038cc:	1e06      	subs	r6, r0, #0
 80038ce:	d1e0      	bne.n	8003892 <__ssputs_r+0x76>
 80038d0:	0038      	movs	r0, r7
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	f7ff fe7e 	bl	80035d4 <_free_r>
 80038d8:	e7c7      	b.n	800386a <__ssputs_r+0x4e>
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	fffffb7f 	.word	0xfffffb7f

080038e0 <_svfiprintf_r>:
 80038e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e2:	b0a1      	sub	sp, #132	; 0x84
 80038e4:	9003      	str	r0, [sp, #12]
 80038e6:	001d      	movs	r5, r3
 80038e8:	898b      	ldrh	r3, [r1, #12]
 80038ea:	000f      	movs	r7, r1
 80038ec:	0016      	movs	r6, r2
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	d511      	bpl.n	8003916 <_svfiprintf_r+0x36>
 80038f2:	690b      	ldr	r3, [r1, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10e      	bne.n	8003916 <_svfiprintf_r+0x36>
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	f7ff fed7 	bl	80036ac <_malloc_r>
 80038fe:	6038      	str	r0, [r7, #0]
 8003900:	6138      	str	r0, [r7, #16]
 8003902:	2800      	cmp	r0, #0
 8003904:	d105      	bne.n	8003912 <_svfiprintf_r+0x32>
 8003906:	230c      	movs	r3, #12
 8003908:	9a03      	ldr	r2, [sp, #12]
 800390a:	3801      	subs	r0, #1
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	b021      	add	sp, #132	; 0x84
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003912:	2340      	movs	r3, #64	; 0x40
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	2300      	movs	r3, #0
 8003918:	ac08      	add	r4, sp, #32
 800391a:	6163      	str	r3, [r4, #20]
 800391c:	3320      	adds	r3, #32
 800391e:	7663      	strb	r3, [r4, #25]
 8003920:	3310      	adds	r3, #16
 8003922:	76a3      	strb	r3, [r4, #26]
 8003924:	9507      	str	r5, [sp, #28]
 8003926:	0035      	movs	r5, r6
 8003928:	782b      	ldrb	r3, [r5, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <_svfiprintf_r+0x52>
 800392e:	2b25      	cmp	r3, #37	; 0x25
 8003930:	d147      	bne.n	80039c2 <_svfiprintf_r+0xe2>
 8003932:	1bab      	subs	r3, r5, r6
 8003934:	9305      	str	r3, [sp, #20]
 8003936:	42b5      	cmp	r5, r6
 8003938:	d00c      	beq.n	8003954 <_svfiprintf_r+0x74>
 800393a:	0032      	movs	r2, r6
 800393c:	0039      	movs	r1, r7
 800393e:	9803      	ldr	r0, [sp, #12]
 8003940:	f7ff ff6c 	bl	800381c <__ssputs_r>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d100      	bne.n	800394a <_svfiprintf_r+0x6a>
 8003948:	e0ae      	b.n	8003aa8 <_svfiprintf_r+0x1c8>
 800394a:	6962      	ldr	r2, [r4, #20]
 800394c:	9b05      	ldr	r3, [sp, #20]
 800394e:	4694      	mov	ip, r2
 8003950:	4463      	add	r3, ip
 8003952:	6163      	str	r3, [r4, #20]
 8003954:	782b      	ldrb	r3, [r5, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d100      	bne.n	800395c <_svfiprintf_r+0x7c>
 800395a:	e0a5      	b.n	8003aa8 <_svfiprintf_r+0x1c8>
 800395c:	2201      	movs	r2, #1
 800395e:	2300      	movs	r3, #0
 8003960:	4252      	negs	r2, r2
 8003962:	6062      	str	r2, [r4, #4]
 8003964:	a904      	add	r1, sp, #16
 8003966:	3254      	adds	r2, #84	; 0x54
 8003968:	1852      	adds	r2, r2, r1
 800396a:	1c6e      	adds	r6, r5, #1
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	60e3      	str	r3, [r4, #12]
 8003970:	60a3      	str	r3, [r4, #8]
 8003972:	7013      	strb	r3, [r2, #0]
 8003974:	65a3      	str	r3, [r4, #88]	; 0x58
 8003976:	2205      	movs	r2, #5
 8003978:	7831      	ldrb	r1, [r6, #0]
 800397a:	4854      	ldr	r0, [pc, #336]	; (8003acc <_svfiprintf_r+0x1ec>)
 800397c:	f000 fa34 	bl	8003de8 <memchr>
 8003980:	1c75      	adds	r5, r6, #1
 8003982:	2800      	cmp	r0, #0
 8003984:	d11f      	bne.n	80039c6 <_svfiprintf_r+0xe6>
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	06d3      	lsls	r3, r2, #27
 800398a:	d504      	bpl.n	8003996 <_svfiprintf_r+0xb6>
 800398c:	2353      	movs	r3, #83	; 0x53
 800398e:	a904      	add	r1, sp, #16
 8003990:	185b      	adds	r3, r3, r1
 8003992:	2120      	movs	r1, #32
 8003994:	7019      	strb	r1, [r3, #0]
 8003996:	0713      	lsls	r3, r2, #28
 8003998:	d504      	bpl.n	80039a4 <_svfiprintf_r+0xc4>
 800399a:	2353      	movs	r3, #83	; 0x53
 800399c:	a904      	add	r1, sp, #16
 800399e:	185b      	adds	r3, r3, r1
 80039a0:	212b      	movs	r1, #43	; 0x2b
 80039a2:	7019      	strb	r1, [r3, #0]
 80039a4:	7833      	ldrb	r3, [r6, #0]
 80039a6:	2b2a      	cmp	r3, #42	; 0x2a
 80039a8:	d016      	beq.n	80039d8 <_svfiprintf_r+0xf8>
 80039aa:	0035      	movs	r5, r6
 80039ac:	2100      	movs	r1, #0
 80039ae:	200a      	movs	r0, #10
 80039b0:	68e3      	ldr	r3, [r4, #12]
 80039b2:	782a      	ldrb	r2, [r5, #0]
 80039b4:	1c6e      	adds	r6, r5, #1
 80039b6:	3a30      	subs	r2, #48	; 0x30
 80039b8:	2a09      	cmp	r2, #9
 80039ba:	d94e      	bls.n	8003a5a <_svfiprintf_r+0x17a>
 80039bc:	2900      	cmp	r1, #0
 80039be:	d111      	bne.n	80039e4 <_svfiprintf_r+0x104>
 80039c0:	e017      	b.n	80039f2 <_svfiprintf_r+0x112>
 80039c2:	3501      	adds	r5, #1
 80039c4:	e7b0      	b.n	8003928 <_svfiprintf_r+0x48>
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <_svfiprintf_r+0x1ec>)
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	1ac0      	subs	r0, r0, r3
 80039cc:	2301      	movs	r3, #1
 80039ce:	4083      	lsls	r3, r0
 80039d0:	4313      	orrs	r3, r2
 80039d2:	002e      	movs	r6, r5
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	e7ce      	b.n	8003976 <_svfiprintf_r+0x96>
 80039d8:	9b07      	ldr	r3, [sp, #28]
 80039da:	1d19      	adds	r1, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9107      	str	r1, [sp, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	db01      	blt.n	80039e8 <_svfiprintf_r+0x108>
 80039e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e6:	e004      	b.n	80039f2 <_svfiprintf_r+0x112>
 80039e8:	425b      	negs	r3, r3
 80039ea:	60e3      	str	r3, [r4, #12]
 80039ec:	2302      	movs	r3, #2
 80039ee:	4313      	orrs	r3, r2
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	782b      	ldrb	r3, [r5, #0]
 80039f4:	2b2e      	cmp	r3, #46	; 0x2e
 80039f6:	d10a      	bne.n	8003a0e <_svfiprintf_r+0x12e>
 80039f8:	786b      	ldrb	r3, [r5, #1]
 80039fa:	2b2a      	cmp	r3, #42	; 0x2a
 80039fc:	d135      	bne.n	8003a6a <_svfiprintf_r+0x18a>
 80039fe:	9b07      	ldr	r3, [sp, #28]
 8003a00:	3502      	adds	r5, #2
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	9207      	str	r2, [sp, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db2b      	blt.n	8003a64 <_svfiprintf_r+0x184>
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0e:	4e30      	ldr	r6, [pc, #192]	; (8003ad0 <_svfiprintf_r+0x1f0>)
 8003a10:	2203      	movs	r2, #3
 8003a12:	0030      	movs	r0, r6
 8003a14:	7829      	ldrb	r1, [r5, #0]
 8003a16:	f000 f9e7 	bl	8003de8 <memchr>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d006      	beq.n	8003a2c <_svfiprintf_r+0x14c>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	1b80      	subs	r0, r0, r6
 8003a22:	4083      	lsls	r3, r0
 8003a24:	6822      	ldr	r2, [r4, #0]
 8003a26:	3501      	adds	r5, #1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	7829      	ldrb	r1, [r5, #0]
 8003a2e:	2206      	movs	r2, #6
 8003a30:	4828      	ldr	r0, [pc, #160]	; (8003ad4 <_svfiprintf_r+0x1f4>)
 8003a32:	1c6e      	adds	r6, r5, #1
 8003a34:	7621      	strb	r1, [r4, #24]
 8003a36:	f000 f9d7 	bl	8003de8 <memchr>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d03c      	beq.n	8003ab8 <_svfiprintf_r+0x1d8>
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <_svfiprintf_r+0x1f8>)
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d125      	bne.n	8003a90 <_svfiprintf_r+0x1b0>
 8003a44:	2207      	movs	r2, #7
 8003a46:	9b07      	ldr	r3, [sp, #28]
 8003a48:	3307      	adds	r3, #7
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	9307      	str	r3, [sp, #28]
 8003a50:	6963      	ldr	r3, [r4, #20]
 8003a52:	9a04      	ldr	r2, [sp, #16]
 8003a54:	189b      	adds	r3, r3, r2
 8003a56:	6163      	str	r3, [r4, #20]
 8003a58:	e765      	b.n	8003926 <_svfiprintf_r+0x46>
 8003a5a:	4343      	muls	r3, r0
 8003a5c:	0035      	movs	r5, r6
 8003a5e:	2101      	movs	r1, #1
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	e7a6      	b.n	80039b2 <_svfiprintf_r+0xd2>
 8003a64:	2301      	movs	r3, #1
 8003a66:	425b      	negs	r3, r3
 8003a68:	e7d0      	b.n	8003a0c <_svfiprintf_r+0x12c>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	200a      	movs	r0, #10
 8003a6e:	001a      	movs	r2, r3
 8003a70:	3501      	adds	r5, #1
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	7829      	ldrb	r1, [r5, #0]
 8003a76:	1c6e      	adds	r6, r5, #1
 8003a78:	3930      	subs	r1, #48	; 0x30
 8003a7a:	2909      	cmp	r1, #9
 8003a7c:	d903      	bls.n	8003a86 <_svfiprintf_r+0x1a6>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c5      	beq.n	8003a0e <_svfiprintf_r+0x12e>
 8003a82:	9209      	str	r2, [sp, #36]	; 0x24
 8003a84:	e7c3      	b.n	8003a0e <_svfiprintf_r+0x12e>
 8003a86:	4342      	muls	r2, r0
 8003a88:	0035      	movs	r5, r6
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	1852      	adds	r2, r2, r1
 8003a8e:	e7f1      	b.n	8003a74 <_svfiprintf_r+0x194>
 8003a90:	ab07      	add	r3, sp, #28
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	003a      	movs	r2, r7
 8003a96:	0021      	movs	r1, r4
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <_svfiprintf_r+0x1fc>)
 8003a9a:	9803      	ldr	r0, [sp, #12]
 8003a9c:	e000      	b.n	8003aa0 <_svfiprintf_r+0x1c0>
 8003a9e:	bf00      	nop
 8003aa0:	9004      	str	r0, [sp, #16]
 8003aa2:	9b04      	ldr	r3, [sp, #16]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	d1d3      	bne.n	8003a50 <_svfiprintf_r+0x170>
 8003aa8:	89bb      	ldrh	r3, [r7, #12]
 8003aaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003aac:	065b      	lsls	r3, r3, #25
 8003aae:	d400      	bmi.n	8003ab2 <_svfiprintf_r+0x1d2>
 8003ab0:	e72d      	b.n	800390e <_svfiprintf_r+0x2e>
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	4240      	negs	r0, r0
 8003ab6:	e72a      	b.n	800390e <_svfiprintf_r+0x2e>
 8003ab8:	ab07      	add	r3, sp, #28
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	003a      	movs	r2, r7
 8003abe:	0021      	movs	r1, r4
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <_svfiprintf_r+0x1fc>)
 8003ac2:	9803      	ldr	r0, [sp, #12]
 8003ac4:	f000 f87c 	bl	8003bc0 <_printf_i>
 8003ac8:	e7ea      	b.n	8003aa0 <_svfiprintf_r+0x1c0>
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	08003f0d 	.word	0x08003f0d
 8003ad0:	08003f13 	.word	0x08003f13
 8003ad4:	08003f17 	.word	0x08003f17
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	0800381d 	.word	0x0800381d

08003ae0 <_printf_common>:
 8003ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ae2:	0015      	movs	r5, r2
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	688a      	ldr	r2, [r1, #8]
 8003ae8:	690b      	ldr	r3, [r1, #16]
 8003aea:	000c      	movs	r4, r1
 8003aec:	9000      	str	r0, [sp, #0]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	da00      	bge.n	8003af4 <_printf_common+0x14>
 8003af2:	0013      	movs	r3, r2
 8003af4:	0022      	movs	r2, r4
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	3243      	adds	r2, #67	; 0x43
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d001      	beq.n	8003b04 <_printf_common+0x24>
 8003b00:	3301      	adds	r3, #1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	d502      	bpl.n	8003b10 <_printf_common+0x30>
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	6822      	ldr	r2, [r4, #0]
 8003b12:	2306      	movs	r3, #6
 8003b14:	0017      	movs	r7, r2
 8003b16:	401f      	ands	r7, r3
 8003b18:	421a      	tst	r2, r3
 8003b1a:	d027      	beq.n	8003b6c <_printf_common+0x8c>
 8003b1c:	0023      	movs	r3, r4
 8003b1e:	3343      	adds	r3, #67	; 0x43
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	4193      	sbcs	r3, r2
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	0692      	lsls	r2, r2, #26
 8003b2a:	d430      	bmi.n	8003b8e <_printf_common+0xae>
 8003b2c:	0022      	movs	r2, r4
 8003b2e:	9901      	ldr	r1, [sp, #4]
 8003b30:	9800      	ldr	r0, [sp, #0]
 8003b32:	9e08      	ldr	r6, [sp, #32]
 8003b34:	3243      	adds	r2, #67	; 0x43
 8003b36:	47b0      	blx	r6
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d025      	beq.n	8003b88 <_printf_common+0xa8>
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	6820      	ldr	r0, [r4, #0]
 8003b40:	682a      	ldr	r2, [r5, #0]
 8003b42:	68e1      	ldr	r1, [r4, #12]
 8003b44:	2500      	movs	r5, #0
 8003b46:	4003      	ands	r3, r0
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d103      	bne.n	8003b54 <_printf_common+0x74>
 8003b4c:	1a8d      	subs	r5, r1, r2
 8003b4e:	43eb      	mvns	r3, r5
 8003b50:	17db      	asrs	r3, r3, #31
 8003b52:	401d      	ands	r5, r3
 8003b54:	68a3      	ldr	r3, [r4, #8]
 8003b56:	6922      	ldr	r2, [r4, #16]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	dd01      	ble.n	8003b60 <_printf_common+0x80>
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	18ed      	adds	r5, r5, r3
 8003b60:	2700      	movs	r7, #0
 8003b62:	42bd      	cmp	r5, r7
 8003b64:	d120      	bne.n	8003ba8 <_printf_common+0xc8>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e010      	b.n	8003b8c <_printf_common+0xac>
 8003b6a:	3701      	adds	r7, #1
 8003b6c:	68e3      	ldr	r3, [r4, #12]
 8003b6e:	682a      	ldr	r2, [r5, #0]
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	42bb      	cmp	r3, r7
 8003b74:	ddd2      	ble.n	8003b1c <_printf_common+0x3c>
 8003b76:	0022      	movs	r2, r4
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9901      	ldr	r1, [sp, #4]
 8003b7c:	9800      	ldr	r0, [sp, #0]
 8003b7e:	9e08      	ldr	r6, [sp, #32]
 8003b80:	3219      	adds	r2, #25
 8003b82:	47b0      	blx	r6
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d1f0      	bne.n	8003b6a <_printf_common+0x8a>
 8003b88:	2001      	movs	r0, #1
 8003b8a:	4240      	negs	r0, r0
 8003b8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b8e:	2030      	movs	r0, #48	; 0x30
 8003b90:	18e1      	adds	r1, r4, r3
 8003b92:	3143      	adds	r1, #67	; 0x43
 8003b94:	7008      	strb	r0, [r1, #0]
 8003b96:	0021      	movs	r1, r4
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	3145      	adds	r1, #69	; 0x45
 8003b9c:	7809      	ldrb	r1, [r1, #0]
 8003b9e:	18a2      	adds	r2, r4, r2
 8003ba0:	3243      	adds	r2, #67	; 0x43
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	7011      	strb	r1, [r2, #0]
 8003ba6:	e7c1      	b.n	8003b2c <_printf_common+0x4c>
 8003ba8:	0022      	movs	r2, r4
 8003baa:	2301      	movs	r3, #1
 8003bac:	9901      	ldr	r1, [sp, #4]
 8003bae:	9800      	ldr	r0, [sp, #0]
 8003bb0:	9e08      	ldr	r6, [sp, #32]
 8003bb2:	321a      	adds	r2, #26
 8003bb4:	47b0      	blx	r6
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d0e6      	beq.n	8003b88 <_printf_common+0xa8>
 8003bba:	3701      	adds	r7, #1
 8003bbc:	e7d1      	b.n	8003b62 <_printf_common+0x82>
	...

08003bc0 <_printf_i>:
 8003bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc2:	b08b      	sub	sp, #44	; 0x2c
 8003bc4:	9206      	str	r2, [sp, #24]
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	3243      	adds	r2, #67	; 0x43
 8003bca:	9307      	str	r3, [sp, #28]
 8003bcc:	9005      	str	r0, [sp, #20]
 8003bce:	9204      	str	r2, [sp, #16]
 8003bd0:	7e0a      	ldrb	r2, [r1, #24]
 8003bd2:	000c      	movs	r4, r1
 8003bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bd6:	2a78      	cmp	r2, #120	; 0x78
 8003bd8:	d807      	bhi.n	8003bea <_printf_i+0x2a>
 8003bda:	2a62      	cmp	r2, #98	; 0x62
 8003bdc:	d809      	bhi.n	8003bf2 <_printf_i+0x32>
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d100      	bne.n	8003be4 <_printf_i+0x24>
 8003be2:	e0c1      	b.n	8003d68 <_printf_i+0x1a8>
 8003be4:	2a58      	cmp	r2, #88	; 0x58
 8003be6:	d100      	bne.n	8003bea <_printf_i+0x2a>
 8003be8:	e08c      	b.n	8003d04 <_printf_i+0x144>
 8003bea:	0026      	movs	r6, r4
 8003bec:	3642      	adds	r6, #66	; 0x42
 8003bee:	7032      	strb	r2, [r6, #0]
 8003bf0:	e022      	b.n	8003c38 <_printf_i+0x78>
 8003bf2:	0010      	movs	r0, r2
 8003bf4:	3863      	subs	r0, #99	; 0x63
 8003bf6:	2815      	cmp	r0, #21
 8003bf8:	d8f7      	bhi.n	8003bea <_printf_i+0x2a>
 8003bfa:	f7fc fa8d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003bfe:	0016      	.short	0x0016
 8003c00:	fff6001f 	.word	0xfff6001f
 8003c04:	fff6fff6 	.word	0xfff6fff6
 8003c08:	001ffff6 	.word	0x001ffff6
 8003c0c:	fff6fff6 	.word	0xfff6fff6
 8003c10:	fff6fff6 	.word	0xfff6fff6
 8003c14:	003600a8 	.word	0x003600a8
 8003c18:	fff6009a 	.word	0xfff6009a
 8003c1c:	00b9fff6 	.word	0x00b9fff6
 8003c20:	0036fff6 	.word	0x0036fff6
 8003c24:	fff6fff6 	.word	0xfff6fff6
 8003c28:	009e      	.short	0x009e
 8003c2a:	0026      	movs	r6, r4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	3642      	adds	r6, #66	; 0x42
 8003c30:	1d11      	adds	r1, r2, #4
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	7033      	strb	r3, [r6, #0]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0a7      	b.n	8003d8c <_printf_i+0x1cc>
 8003c3c:	6808      	ldr	r0, [r1, #0]
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	1d0a      	adds	r2, r1, #4
 8003c42:	0605      	lsls	r5, r0, #24
 8003c44:	d50b      	bpl.n	8003c5e <_printf_i+0x9e>
 8003c46:	680d      	ldr	r5, [r1, #0]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	da03      	bge.n	8003c56 <_printf_i+0x96>
 8003c4e:	232d      	movs	r3, #45	; 0x2d
 8003c50:	9a04      	ldr	r2, [sp, #16]
 8003c52:	426d      	negs	r5, r5
 8003c54:	7013      	strb	r3, [r2, #0]
 8003c56:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <_printf_i+0x21c>)
 8003c58:	270a      	movs	r7, #10
 8003c5a:	9303      	str	r3, [sp, #12]
 8003c5c:	e01b      	b.n	8003c96 <_printf_i+0xd6>
 8003c5e:	680d      	ldr	r5, [r1, #0]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	0641      	lsls	r1, r0, #25
 8003c64:	d5f1      	bpl.n	8003c4a <_printf_i+0x8a>
 8003c66:	b22d      	sxth	r5, r5
 8003c68:	e7ef      	b.n	8003c4a <_printf_i+0x8a>
 8003c6a:	680d      	ldr	r5, [r1, #0]
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	1d08      	adds	r0, r1, #4
 8003c70:	6018      	str	r0, [r3, #0]
 8003c72:	062e      	lsls	r6, r5, #24
 8003c74:	d501      	bpl.n	8003c7a <_printf_i+0xba>
 8003c76:	680d      	ldr	r5, [r1, #0]
 8003c78:	e003      	b.n	8003c82 <_printf_i+0xc2>
 8003c7a:	066d      	lsls	r5, r5, #25
 8003c7c:	d5fb      	bpl.n	8003c76 <_printf_i+0xb6>
 8003c7e:	680d      	ldr	r5, [r1, #0]
 8003c80:	b2ad      	uxth	r5, r5
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <_printf_i+0x21c>)
 8003c84:	2708      	movs	r7, #8
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	2a6f      	cmp	r2, #111	; 0x6f
 8003c8a:	d000      	beq.n	8003c8e <_printf_i+0xce>
 8003c8c:	3702      	adds	r7, #2
 8003c8e:	0023      	movs	r3, r4
 8003c90:	2200      	movs	r2, #0
 8003c92:	3343      	adds	r3, #67	; 0x43
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	60a3      	str	r3, [r4, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db03      	blt.n	8003ca6 <_printf_i+0xe6>
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	6821      	ldr	r1, [r4, #0]
 8003ca2:	4391      	bics	r1, r2
 8003ca4:	6021      	str	r1, [r4, #0]
 8003ca6:	2d00      	cmp	r5, #0
 8003ca8:	d102      	bne.n	8003cb0 <_printf_i+0xf0>
 8003caa:	9e04      	ldr	r6, [sp, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <_printf_i+0x10a>
 8003cb0:	9e04      	ldr	r6, [sp, #16]
 8003cb2:	0028      	movs	r0, r5
 8003cb4:	0039      	movs	r1, r7
 8003cb6:	f7fc fabf 	bl	8000238 <__aeabi_uidivmod>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	3e01      	subs	r6, #1
 8003cbe:	5c5b      	ldrb	r3, [r3, r1]
 8003cc0:	7033      	strb	r3, [r6, #0]
 8003cc2:	002b      	movs	r3, r5
 8003cc4:	0005      	movs	r5, r0
 8003cc6:	429f      	cmp	r7, r3
 8003cc8:	d9f3      	bls.n	8003cb2 <_printf_i+0xf2>
 8003cca:	2f08      	cmp	r7, #8
 8003ccc:	d109      	bne.n	8003ce2 <_printf_i+0x122>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	07db      	lsls	r3, r3, #31
 8003cd2:	d506      	bpl.n	8003ce2 <_printf_i+0x122>
 8003cd4:	6863      	ldr	r3, [r4, #4]
 8003cd6:	6922      	ldr	r2, [r4, #16]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	dc02      	bgt.n	8003ce2 <_printf_i+0x122>
 8003cdc:	2330      	movs	r3, #48	; 0x30
 8003cde:	3e01      	subs	r6, #1
 8003ce0:	7033      	strb	r3, [r6, #0]
 8003ce2:	9b04      	ldr	r3, [sp, #16]
 8003ce4:	1b9b      	subs	r3, r3, r6
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	0021      	movs	r1, r4
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	9805      	ldr	r0, [sp, #20]
 8003cf0:	9b06      	ldr	r3, [sp, #24]
 8003cf2:	aa09      	add	r2, sp, #36	; 0x24
 8003cf4:	f7ff fef4 	bl	8003ae0 <_printf_common>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d14c      	bne.n	8003d96 <_printf_i+0x1d6>
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	4240      	negs	r0, r0
 8003d00:	b00b      	add	sp, #44	; 0x2c
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	3145      	adds	r1, #69	; 0x45
 8003d06:	700a      	strb	r2, [r1, #0]
 8003d08:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <_printf_i+0x21c>)
 8003d0a:	9203      	str	r2, [sp, #12]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	ca20      	ldmia	r2!, {r5}
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	0608      	lsls	r0, r1, #24
 8003d16:	d516      	bpl.n	8003d46 <_printf_i+0x186>
 8003d18:	07cb      	lsls	r3, r1, #31
 8003d1a:	d502      	bpl.n	8003d22 <_printf_i+0x162>
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	4319      	orrs	r1, r3
 8003d20:	6021      	str	r1, [r4, #0]
 8003d22:	2710      	movs	r7, #16
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	d1b2      	bne.n	8003c8e <_printf_i+0xce>
 8003d28:	2320      	movs	r3, #32
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	439a      	bics	r2, r3
 8003d2e:	6022      	str	r2, [r4, #0]
 8003d30:	e7ad      	b.n	8003c8e <_printf_i+0xce>
 8003d32:	2220      	movs	r2, #32
 8003d34:	6809      	ldr	r1, [r1, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	0022      	movs	r2, r4
 8003d3c:	2178      	movs	r1, #120	; 0x78
 8003d3e:	3245      	adds	r2, #69	; 0x45
 8003d40:	7011      	strb	r1, [r2, #0]
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <_printf_i+0x220>)
 8003d44:	e7e1      	b.n	8003d0a <_printf_i+0x14a>
 8003d46:	0648      	lsls	r0, r1, #25
 8003d48:	d5e6      	bpl.n	8003d18 <_printf_i+0x158>
 8003d4a:	b2ad      	uxth	r5, r5
 8003d4c:	e7e4      	b.n	8003d18 <_printf_i+0x158>
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	680d      	ldr	r5, [r1, #0]
 8003d52:	1d10      	adds	r0, r2, #4
 8003d54:	6949      	ldr	r1, [r1, #20]
 8003d56:	6018      	str	r0, [r3, #0]
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	062e      	lsls	r6, r5, #24
 8003d5c:	d501      	bpl.n	8003d62 <_printf_i+0x1a2>
 8003d5e:	6019      	str	r1, [r3, #0]
 8003d60:	e002      	b.n	8003d68 <_printf_i+0x1a8>
 8003d62:	066d      	lsls	r5, r5, #25
 8003d64:	d5fb      	bpl.n	8003d5e <_printf_i+0x19e>
 8003d66:	8019      	strh	r1, [r3, #0]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9e04      	ldr	r6, [sp, #16]
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	e7bb      	b.n	8003ce8 <_printf_i+0x128>
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	1d11      	adds	r1, r2, #4
 8003d74:	6019      	str	r1, [r3, #0]
 8003d76:	6816      	ldr	r6, [r2, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	0030      	movs	r0, r6
 8003d7c:	6862      	ldr	r2, [r4, #4]
 8003d7e:	f000 f833 	bl	8003de8 <memchr>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d001      	beq.n	8003d8a <_printf_i+0x1ca>
 8003d86:	1b80      	subs	r0, r0, r6
 8003d88:	6060      	str	r0, [r4, #4]
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9a04      	ldr	r2, [sp, #16]
 8003d92:	7013      	strb	r3, [r2, #0]
 8003d94:	e7a8      	b.n	8003ce8 <_printf_i+0x128>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	0032      	movs	r2, r6
 8003d9a:	9906      	ldr	r1, [sp, #24]
 8003d9c:	9805      	ldr	r0, [sp, #20]
 8003d9e:	9d07      	ldr	r5, [sp, #28]
 8003da0:	47a8      	blx	r5
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d0aa      	beq.n	8003cfc <_printf_i+0x13c>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	079b      	lsls	r3, r3, #30
 8003daa:	d415      	bmi.n	8003dd8 <_printf_i+0x218>
 8003dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dae:	68e0      	ldr	r0, [r4, #12]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	daa5      	bge.n	8003d00 <_printf_i+0x140>
 8003db4:	0018      	movs	r0, r3
 8003db6:	e7a3      	b.n	8003d00 <_printf_i+0x140>
 8003db8:	0022      	movs	r2, r4
 8003dba:	2301      	movs	r3, #1
 8003dbc:	9906      	ldr	r1, [sp, #24]
 8003dbe:	9805      	ldr	r0, [sp, #20]
 8003dc0:	9e07      	ldr	r6, [sp, #28]
 8003dc2:	3219      	adds	r2, #25
 8003dc4:	47b0      	blx	r6
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	d098      	beq.n	8003cfc <_printf_i+0x13c>
 8003dca:	3501      	adds	r5, #1
 8003dcc:	68e3      	ldr	r3, [r4, #12]
 8003dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	42ab      	cmp	r3, r5
 8003dd4:	dcf0      	bgt.n	8003db8 <_printf_i+0x1f8>
 8003dd6:	e7e9      	b.n	8003dac <_printf_i+0x1ec>
 8003dd8:	2500      	movs	r5, #0
 8003dda:	e7f7      	b.n	8003dcc <_printf_i+0x20c>
 8003ddc:	08003f1e 	.word	0x08003f1e
 8003de0:	08003f2f 	.word	0x08003f2f

08003de4 <__retarget_lock_acquire_recursive>:
 8003de4:	4770      	bx	lr

08003de6 <__retarget_lock_release_recursive>:
 8003de6:	4770      	bx	lr

08003de8 <memchr>:
 8003de8:	b2c9      	uxtb	r1, r1
 8003dea:	1882      	adds	r2, r0, r2
 8003dec:	4290      	cmp	r0, r2
 8003dee:	d101      	bne.n	8003df4 <memchr+0xc>
 8003df0:	2000      	movs	r0, #0
 8003df2:	4770      	bx	lr
 8003df4:	7803      	ldrb	r3, [r0, #0]
 8003df6:	428b      	cmp	r3, r1
 8003df8:	d0fb      	beq.n	8003df2 <memchr+0xa>
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	e7f6      	b.n	8003dec <memchr+0x4>

08003dfe <memcpy>:
 8003dfe:	2300      	movs	r3, #0
 8003e00:	b510      	push	{r4, lr}
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d100      	bne.n	8003e08 <memcpy+0xa>
 8003e06:	bd10      	pop	{r4, pc}
 8003e08:	5ccc      	ldrb	r4, [r1, r3]
 8003e0a:	54c4      	strb	r4, [r0, r3]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	e7f8      	b.n	8003e02 <memcpy+0x4>

08003e10 <memmove>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	4288      	cmp	r0, r1
 8003e14:	d902      	bls.n	8003e1c <memmove+0xc>
 8003e16:	188b      	adds	r3, r1, r2
 8003e18:	4298      	cmp	r0, r3
 8003e1a:	d303      	bcc.n	8003e24 <memmove+0x14>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e007      	b.n	8003e30 <memmove+0x20>
 8003e20:	5c8b      	ldrb	r3, [r1, r2]
 8003e22:	5483      	strb	r3, [r0, r2]
 8003e24:	3a01      	subs	r2, #1
 8003e26:	d2fb      	bcs.n	8003e20 <memmove+0x10>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	5ccc      	ldrb	r4, [r1, r3]
 8003e2c:	54c4      	strb	r4, [r0, r3]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1fa      	bne.n	8003e2a <memmove+0x1a>
 8003e34:	e7f8      	b.n	8003e28 <memmove+0x18>

08003e36 <_realloc_r>:
 8003e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e38:	0007      	movs	r7, r0
 8003e3a:	000e      	movs	r6, r1
 8003e3c:	0014      	movs	r4, r2
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	d105      	bne.n	8003e4e <_realloc_r+0x18>
 8003e42:	0011      	movs	r1, r2
 8003e44:	f7ff fc32 	bl	80036ac <_malloc_r>
 8003e48:	0005      	movs	r5, r0
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	d103      	bne.n	8003e5a <_realloc_r+0x24>
 8003e52:	f7ff fbbf 	bl	80035d4 <_free_r>
 8003e56:	0025      	movs	r5, r4
 8003e58:	e7f7      	b.n	8003e4a <_realloc_r+0x14>
 8003e5a:	f000 f81b 	bl	8003e94 <_malloc_usable_size_r>
 8003e5e:	9001      	str	r0, [sp, #4]
 8003e60:	4284      	cmp	r4, r0
 8003e62:	d803      	bhi.n	8003e6c <_realloc_r+0x36>
 8003e64:	0035      	movs	r5, r6
 8003e66:	0843      	lsrs	r3, r0, #1
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d3ee      	bcc.n	8003e4a <_realloc_r+0x14>
 8003e6c:	0021      	movs	r1, r4
 8003e6e:	0038      	movs	r0, r7
 8003e70:	f7ff fc1c 	bl	80036ac <_malloc_r>
 8003e74:	1e05      	subs	r5, r0, #0
 8003e76:	d0e8      	beq.n	8003e4a <_realloc_r+0x14>
 8003e78:	9b01      	ldr	r3, [sp, #4]
 8003e7a:	0022      	movs	r2, r4
 8003e7c:	429c      	cmp	r4, r3
 8003e7e:	d900      	bls.n	8003e82 <_realloc_r+0x4c>
 8003e80:	001a      	movs	r2, r3
 8003e82:	0031      	movs	r1, r6
 8003e84:	0028      	movs	r0, r5
 8003e86:	f7ff ffba 	bl	8003dfe <memcpy>
 8003e8a:	0031      	movs	r1, r6
 8003e8c:	0038      	movs	r0, r7
 8003e8e:	f7ff fba1 	bl	80035d4 <_free_r>
 8003e92:	e7da      	b.n	8003e4a <_realloc_r+0x14>

08003e94 <_malloc_usable_size_r>:
 8003e94:	1f0b      	subs	r3, r1, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	1f18      	subs	r0, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da01      	bge.n	8003ea2 <_malloc_usable_size_r+0xe>
 8003e9e:	580b      	ldr	r3, [r1, r0]
 8003ea0:	18c0      	adds	r0, r0, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr

08003eb0 <_fini>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr
