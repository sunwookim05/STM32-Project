
Gas_Range_Provide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080027c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c0  2000000c  080027d0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000cc  080027d0  000200cc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008dde  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000178b  00000000  00000000  00028e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000938  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000880  00000000  00000000  0002aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00013d12  00000000  00000000  0002b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009a54  00000000  00000000  0003f46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007cd45  00000000  00000000  00048ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c5c03  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002120  00000000  00000000  000c5c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800277c 	.word	0x0800277c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800277c 	.word	0x0800277c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <HAL_Init+0x3c>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_Init+0x3c>)
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 f811 	bl	80004e8 <HAL_InitTick>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d003      	beq.n	80004d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e001      	b.n	80004d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004d2:	f002 f831 	bl	8002538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781b      	ldrb	r3, [r3, #0]
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40022000 	.word	0x40022000

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_InitTick+0x5c>)
 80004f2:	681c      	ldr	r4, [r3, #0]
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_InitTick+0x60>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	0019      	movs	r1, r3
 80004fa:	23fa      	movs	r3, #250	; 0xfa
 80004fc:	0098      	lsls	r0, r3, #2
 80004fe:	f7ff fe03 	bl	8000108 <__udivsi3>
 8000502:	0003      	movs	r3, r0
 8000504:	0019      	movs	r1, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f7ff fdfe 	bl	8000108 <__udivsi3>
 800050c:	0003      	movs	r3, r0
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fb49 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	e00f      	b.n	800053c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d80b      	bhi.n	800053a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	2301      	movs	r3, #1
 8000526:	425b      	negs	r3, r3
 8000528:	2200      	movs	r2, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fb16 	bl	8000b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_InitTick+0x64>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000536:	2300      	movs	r3, #0
 8000538:	e000      	b.n	800053c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	b003      	add	sp, #12
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	20000008 	.word	0x20000008
 8000548:	20000004 	.word	0x20000004
 800054c:	20000000 	.word	0x20000000

08000550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x1c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	001a      	movs	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x20>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	18d2      	adds	r2, r2, r3
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_IncTick+0x20>)
 8000562:	601a      	str	r2, [r3, #0]
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000004 	.word	0x20000004
 8000570:	20000028 	.word	0x20000028

08000574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  return uwTick;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <HAL_GetTick+0x10>)
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000590:	f7ff fff0 	bl	8000574 <HAL_GetTick>
 8000594:	0003      	movs	r3, r0
 8000596:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3301      	adds	r3, #1
 80005a0:	d005      	beq.n	80005ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_Delay+0x44>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	001a      	movs	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	189b      	adds	r3, r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	f7ff ffe0 	bl	8000574 <HAL_GetTick>
 80005b4:	0002      	movs	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f7      	bhi.n	80005b0 <HAL_Delay+0x28>
  {
  }
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e159      	b.n	8000896 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10a      	bne.n	8000600 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2250      	movs	r2, #80	; 0x50
 80005f4:	2100      	movs	r1, #0
 80005f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 ffb0 	bl	8002560 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000604:	2210      	movs	r2, #16
 8000606:	4013      	ands	r3, r2
 8000608:	2b10      	cmp	r3, #16
 800060a:	d005      	beq.n	8000618 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	2204      	movs	r2, #4
 8000614:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000616:	d00b      	beq.n	8000630 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800061c:	2210      	movs	r2, #16
 800061e:	431a      	orrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2250      	movs	r2, #80	; 0x50
 8000628:	2100      	movs	r1, #0
 800062a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e132      	b.n	8000896 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000634:	4a9a      	ldr	r2, [pc, #616]	; (80008a0 <HAL_ADC_Init+0x2d0>)
 8000636:	4013      	ands	r3, r2
 8000638:	2202      	movs	r2, #2
 800063a:	431a      	orrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2203      	movs	r2, #3
 8000648:	4013      	ands	r3, r2
 800064a:	2b01      	cmp	r3, #1
 800064c:	d108      	bne.n	8000660 <HAL_ADC_Init+0x90>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2201      	movs	r2, #1
 8000656:	4013      	ands	r3, r2
 8000658:	2b01      	cmp	r3, #1
 800065a:	d101      	bne.n	8000660 <HAL_ADC_Init+0x90>
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <HAL_ADC_Init+0x92>
 8000660:	2300      	movs	r3, #0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d149      	bne.n	80006fa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	23c0      	movs	r3, #192	; 0xc0
 800066c:	061b      	lsls	r3, r3, #24
 800066e:	429a      	cmp	r2, r3
 8000670:	d00b      	beq.n	800068a <HAL_ADC_Init+0xba>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	429a      	cmp	r2, r3
 800067c:	d005      	beq.n	800068a <HAL_ADC_Init+0xba>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	061b      	lsls	r3, r3, #24
 8000686:	429a      	cmp	r2, r3
 8000688:	d111      	bne.n	80006ae <HAL_ADC_Init+0xde>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	691a      	ldr	r2, [r3, #16]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	0892      	lsrs	r2, r2, #2
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6919      	ldr	r1, [r3, #16]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	430a      	orrs	r2, r1
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	e014      	b.n	80006d8 <HAL_ADC_Init+0x108>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	0092      	lsls	r2, r2, #2
 80006ba:	0892      	lsrs	r2, r2, #2
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	4b79      	ldr	r3, [pc, #484]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 80006c4:	4978      	ldr	r1, [pc, #480]	; (80008a8 <HAL_ADC_Init+0x2d8>)
 80006c6:	400a      	ands	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	4b76      	ldr	r3, [pc, #472]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	4b74      	ldr	r3, [pc, #464]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2118      	movs	r1, #24
 80006e4:	438a      	bics	r2, r1
 80006e6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68d9      	ldr	r1, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80006fa:	4b6a      	ldr	r3, [pc, #424]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b69      	ldr	r3, [pc, #420]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 8000700:	496a      	ldr	r1, [pc, #424]	; (80008ac <HAL_ADC_Init+0x2dc>)
 8000702:	400a      	ands	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000706:	4b67      	ldr	r3, [pc, #412]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	065a      	lsls	r2, r3, #25
 8000710:	4b64      	ldr	r3, [pc, #400]	; (80008a4 <HAL_ADC_Init+0x2d4>)
 8000712:	430a      	orrs	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	055b      	lsls	r3, r3, #21
 8000720:	4013      	ands	r3, r2
 8000722:	d108      	bne.n	8000736 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0549      	lsls	r1, r1, #21
 8000732:	430a      	orrs	r2, r1
 8000734:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	495b      	ldr	r1, [pc, #364]	; (80008b0 <HAL_ADC_Init+0x2e0>)
 8000742:	400a      	ands	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68d9      	ldr	r1, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d101      	bne.n	800075c <HAL_ADC_Init+0x18c>
 8000758:	2304      	movs	r3, #4
 800075a:	e000      	b.n	800075e <HAL_ADC_Init+0x18e>
 800075c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800075e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2020      	movs	r0, #32
 8000764:	5c1b      	ldrb	r3, [r3, r0]
 8000766:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000768:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	202c      	movs	r0, #44	; 0x2c
 800076e:	5c1b      	ldrb	r3, [r3, r0]
 8000770:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000772:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000778:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000780:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000788:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	430a      	orrs	r2, r1
 8000790:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000796:	23c2      	movs	r3, #194	; 0xc2
 8000798:	33ff      	adds	r3, #255	; 0xff
 800079a:	429a      	cmp	r2, r3
 800079c:	d00b      	beq.n	80007b6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68d9      	ldr	r1, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80007ac:	431a      	orrs	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2221      	movs	r2, #33	; 0x21
 80007ba:	5c9b      	ldrb	r3, [r3, r2]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d11a      	bne.n	80007f6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2220      	movs	r2, #32
 80007c4:	5c9b      	ldrb	r3, [r3, r2]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d109      	bne.n	80007de <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0249      	lsls	r1, r1, #9
 80007d8:	430a      	orrs	r2, r1
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	e00b      	b.n	80007f6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007e2:	2220      	movs	r2, #32
 80007e4:	431a      	orrs	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	2201      	movs	r2, #1
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d11f      	bne.n	800083e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	691a      	ldr	r2, [r3, #16]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	492a      	ldr	r1, [pc, #168]	; (80008b4 <HAL_ADC_Init+0x2e4>)
 800080a:	400a      	ands	r2, r1
 800080c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6919      	ldr	r1, [r3, #16]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800081c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000822:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	691a      	ldr	r2, [r3, #16]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2101      	movs	r1, #1
 8000838:	430a      	orrs	r2, r1
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	e00e      	b.n	800085c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2201      	movs	r2, #1
 8000846:	4013      	ands	r3, r2
 8000848:	2b01      	cmp	r3, #1
 800084a:	d107      	bne.n	800085c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	691a      	ldr	r2, [r3, #16]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2101      	movs	r1, #1
 8000858:	438a      	bics	r2, r1
 800085a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2107      	movs	r1, #7
 8000868:	438a      	bics	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6959      	ldr	r1, [r3, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000888:	2203      	movs	r2, #3
 800088a:	4393      	bics	r3, r2
 800088c:	2201      	movs	r2, #1
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	fffffefd 	.word	0xfffffefd
 80008a4:	40012708 	.word	0x40012708
 80008a8:	ffc3ffff 	.word	0xffc3ffff
 80008ac:	fdffffff 	.word	0xfdffffff
 80008b0:	fffe0219 	.word	0xfffe0219
 80008b4:	fffffc03 	.word	0xfffffc03

080008b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2250      	movs	r2, #80	; 0x50
 80008c6:	5c9b      	ldrb	r3, [r3, r2]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d101      	bne.n	80008d0 <HAL_ADC_ConfigChannel+0x18>
 80008cc:	2302      	movs	r3, #2
 80008ce:	e06c      	b.n	80009aa <HAL_ADC_ConfigChannel+0xf2>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2250      	movs	r2, #80	; 0x50
 80008d4:	2101      	movs	r1, #1
 80008d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2204      	movs	r2, #4
 80008e0:	4013      	ands	r3, r2
 80008e2:	d00b      	beq.n	80008fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008e8:	2220      	movs	r2, #32
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2250      	movs	r2, #80	; 0x50
 80008f4:	2100      	movs	r1, #0
 80008f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e056      	b.n	80009aa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <HAL_ADC_ConfigChannel+0xfc>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d028      	beq.n	8000958 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	035b      	lsls	r3, r3, #13
 8000912:	0b5a      	lsrs	r2, r3, #13
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	430a      	orrs	r2, r1
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	02db      	lsls	r3, r3, #11
 8000924:	4013      	ands	r3, r2
 8000926:	d009      	beq.n	800093c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	0409      	lsls	r1, r1, #16
 8000932:	430a      	orrs	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000936:	200a      	movs	r0, #10
 8000938:	f000 f844 	bl	80009c4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	d02b      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	03c9      	lsls	r1, r1, #15
 8000952:	430a      	orrs	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e023      	b.n	80009a0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	035b      	lsls	r3, r3, #13
 8000964:	0b5b      	lsrs	r3, r3, #13
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	400a      	ands	r2, r1
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	02db      	lsls	r3, r3, #11
 8000978:	4013      	ands	r3, r2
 800097a:	d005      	beq.n	8000988 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <HAL_ADC_ConfigChannel+0x104>)
 8000984:	400a      	ands	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	d005      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_ADC_ConfigChannel+0x100>)
 800099a:	4909      	ldr	r1, [pc, #36]	; (80009c0 <HAL_ADC_ConfigChannel+0x108>)
 800099c:	400a      	ands	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2250      	movs	r2, #80	; 0x50
 80009a4:	2100      	movs	r1, #0
 80009a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	00001001 	.word	0x00001001
 80009b8:	40012708 	.word	0x40012708
 80009bc:	ff7fffff 	.word	0xff7fffff
 80009c0:	ffbfffff 	.word	0xffbfffff

080009c4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <ADC_DelayMicroSecond+0x38>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	490b      	ldr	r1, [pc, #44]	; (8000a00 <ADC_DelayMicroSecond+0x3c>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	001a      	movs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4353      	muls	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80009e2:	e002      	b.n	80009ea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f9      	bne.n	80009e4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b004      	add	sp, #16
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000008 	.word	0x20000008
 8000a00:	000f4240 	.word	0x000f4240

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b7f      	cmp	r3, #127	; 0x7f
 8000a16:	d809      	bhi.n	8000a2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	231f      	movs	r3, #31
 8000a20:	401a      	ands	r2, r3
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_EnableIRQ+0x30>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	4091      	lsls	r1, r2
 8000a28:	000a      	movs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
  }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4c:	d828      	bhi.n	8000aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	33c0      	adds	r3, #192	; 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	589b      	ldr	r3, [r3, r2]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	; 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	481f      	ldr	r0, [pc, #124]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	33c0      	adds	r3, #192	; 0xc0
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9e:	e031      	b.n	8000b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	400b      	ands	r3, r1
 8000aac:	3b08      	subs	r3, #8
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	; 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001c      	movs	r4, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	4023      	ands	r3, r4
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	430a      	orrs	r2, r1
 8000afa:	3306      	adds	r3, #6
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	18c3      	adds	r3, r0, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	045b      	lsls	r3, r3, #17
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d301      	bcc.n	8000b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e010      	b.n	8000b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SysTick_Config+0x44>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	3a01      	subs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2103      	movs	r1, #3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ff7c 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x44>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	210f      	movs	r1, #15
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	1c02      	adds	r2, r0, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff33 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ffaf 	bl	8000b14 <SysTick_Config>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bd6:	e14f      	b.n	8000e78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4091      	lsls	r1, r2
 8000be2:	000a      	movs	r2, r1
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d100      	bne.n	8000bf0 <HAL_GPIO_Init+0x30>
 8000bee:	e140      	b.n	8000e72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d005      	beq.n	8000c08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	409a      	lsls	r2, r3
 8000c16:	0013      	movs	r3, r2
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	2201      	movs	r2, #1
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d017      	beq.n	8000ca6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d123      	bne.n	8000cfa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	58d3      	ldr	r3, [r2, r3]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2107      	movs	r1, #7
 8000cde:	400b      	ands	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	6939      	ldr	r1, [r7, #16]
 8000cf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2203      	movs	r2, #3
 8000d18:	401a      	ands	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	23c0      	movs	r3, #192	; 0xc0
 8000d34:	029b      	lsls	r3, r3, #10
 8000d36:	4013      	ands	r3, r2
 8000d38:	d100      	bne.n	8000d3c <HAL_GPIO_Init+0x17c>
 8000d3a:	e09a      	b.n	8000e72 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d40:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	430a      	orrs	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	589b      	ldr	r3, [r3, r2]
 8000d54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x1ea>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1e6>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1e2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x2e0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1de>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_GPIO_Init+0x2e4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1da>
 8000d96:	2305      	movs	r3, #5
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000daa:	2300      	movs	r3, #0
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	2103      	movs	r1, #3
 8000db0:	400a      	ands	r2, r1
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	4013      	ands	r3, r2
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	035b      	lsls	r3, r3, #13
 8000e36:	4013      	ands	r3, r2
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	039b      	lsls	r3, r3, #14
 8000e60:	4013      	ands	r3, r2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	40da      	lsrs	r2, r3
 8000e80:	1e13      	subs	r3, r2, #0
 8000e82:	d000      	beq.n	8000e86 <HAL_GPIO_Init+0x2c6>
 8000e84:	e6a8      	b.n	8000bd8 <HAL_GPIO_Init+0x18>
  }
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b006      	add	sp, #24
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	50000800 	.word	0x50000800
 8000ea0:	50000c00 	.word	0x50000c00
 8000ea4:	50001c00 	.word	0x50001c00
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	1cbb      	adds	r3, r7, #2
 8000eb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	1cba      	adds	r2, r7, #2
 8000ec0:	8812      	ldrh	r2, [r2, #0]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d004      	beq.n	8000ed0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e003      	b.n	8000ed8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	781b      	ldrb	r3, [r3, #0]
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	0008      	movs	r0, r1
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	1cbb      	adds	r3, r7, #2
 8000ef4:	1c02      	adds	r2, r0, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
 8000ef8:	1c7b      	adds	r3, r7, #1
 8000efa:	1c0a      	adds	r2, r1, #0
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efe:	1c7b      	adds	r3, r7, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	1cbb      	adds	r3, r7, #2
 8000f08:	881a      	ldrh	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f0e:	e003      	b.n	8000f18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f000 fbaf 	bl	8001692 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f34:	4bcf      	ldr	r3, [pc, #828]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	220c      	movs	r2, #12
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3e:	4bcd      	ldr	r3, [pc, #820]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	d100      	bne.n	8000f56 <HAL_RCC_OscConfig+0x36>
 8000f54:	e07e      	b.n	8001054 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d007      	beq.n	8000f6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d112      	bne.n	8000f88 <HAL_RCC_OscConfig+0x68>
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d10d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	4bc1      	ldr	r3, [pc, #772]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	029b      	lsls	r3, r3, #10
 8000f74:	4013      	ands	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5a>
 8000f78:	e06b      	b.n	8001052 <HAL_RCC_OscConfig+0x132>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d167      	bne.n	8001052 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f000 fb85 	bl	8001692 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d107      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x84>
 8000f94:	4bb7      	ldr	r3, [pc, #732]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4bb6      	ldr	r3, [pc, #728]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e027      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	02db      	lsls	r3, r3, #11
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10e      	bne.n	8000fce <HAL_RCC_OscConfig+0xae>
 8000fb0:	4bb0      	ldr	r3, [pc, #704]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4baf      	ldr	r3, [pc, #700]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	02c9      	lsls	r1, r1, #11
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	4bad      	ldr	r3, [pc, #692]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4bac      	ldr	r3, [pc, #688]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	0249      	lsls	r1, r1, #9
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e012      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fce:	4ba9      	ldr	r3, [pc, #676]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fd4:	49a8      	ldr	r1, [pc, #672]	; (8001278 <HAL_RCC_OscConfig+0x358>)
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	4ba6      	ldr	r3, [pc, #664]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	025b      	lsls	r3, r3, #9
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4ba1      	ldr	r3, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8000fee:	49a3      	ldr	r1, [pc, #652]	; (800127c <HAL_RCC_OscConfig+0x35c>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d015      	beq.n	8001028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff faba 	bl	8000574 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001004:	e009      	b.n	800101a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff fab5 	bl	8000574 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d902      	bls.n	800101a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	f000 fb3c 	bl	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800101a:	4b96      	ldr	r3, [pc, #600]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d0ef      	beq.n	8001006 <HAL_RCC_OscConfig+0xe6>
 8001026:	e015      	b.n	8001054 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff faa4 	bl	8000574 <HAL_GetTick>
 800102c:	0003      	movs	r3, r0
 800102e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001032:	f7ff fa9f 	bl	8000574 <HAL_GetTick>
 8001036:	0002      	movs	r2, r0
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e326      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001044:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	4013      	ands	r3, r2
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x112>
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001052:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d100      	bne.n	8001060 <HAL_RCC_OscConfig+0x140>
 800105e:	e08b      	b.n	8001178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	2b0c      	cmp	r3, #12
 8001070:	d13e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1d0>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d13b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001078:	4b7e      	ldr	r3, [pc, #504]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2204      	movs	r2, #4
 800107e:	4013      	ands	r3, r2
 8001080:	d004      	beq.n	800108c <HAL_RCC_OscConfig+0x16c>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e302      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x360>)
 8001092:	4013      	ands	r3, r2
 8001094:	0019      	movs	r1, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	021a      	lsls	r2, r3, #8
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010a2:	4b74      	ldr	r3, [pc, #464]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2209      	movs	r2, #9
 80010a8:	4393      	bics	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b4:	f000 fc40 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80010b8:	0001      	movs	r1, r0
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	220f      	movs	r2, #15
 80010c2:	4013      	ands	r3, r2
 80010c4:	4a6f      	ldr	r2, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x364>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	000a      	movs	r2, r1
 80010ca:	40da      	lsrs	r2, r3
 80010cc:	4b6e      	ldr	r3, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x368>)
 80010ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x36c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2513      	movs	r5, #19
 80010d6:	197c      	adds	r4, r7, r5
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fa05 	bl	80004e8 <HAL_InitTick>
 80010de:	0003      	movs	r3, r0
 80010e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010e2:	197b      	adds	r3, r7, r5
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d046      	beq.n	8001178 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	e2d0      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d027      	beq.n	8001146 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2209      	movs	r2, #9
 80010fc:	4393      	bics	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fa34 	bl	8000574 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fa2f 	bl	8000574 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e2b6      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001124:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	d0f1      	beq.n	8001112 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x360>)
 8001134:	4013      	ands	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	021a      	lsls	r2, r3, #8
 800113e:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	e018      	b.n	8001178 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800114c:	2101      	movs	r1, #1
 800114e:	438a      	bics	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fa0f 	bl	8000574 <HAL_GetTick>
 8001156:	0003      	movs	r3, r0
 8001158:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fa0a 	bl	8000574 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e291      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2204      	movs	r2, #4
 8001174:	4013      	ands	r3, r2
 8001176:	d1f1      	bne.n	800115c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2210      	movs	r2, #16
 800117e:	4013      	ands	r3, r2
 8001180:	d100      	bne.n	8001184 <HAL_RCC_OscConfig+0x264>
 8001182:	e0a1      	b.n	80012c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d140      	bne.n	800120c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x282>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e277      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a2:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <HAL_RCC_OscConfig+0x370>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	0019      	movs	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	0a19      	lsrs	r1, r3, #8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	061a      	lsls	r2, r3, #24
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80011c6:	430a      	orrs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	0b5b      	lsrs	r3, r3, #13
 80011d0:	3301      	adds	r3, #1
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0212      	lsls	r2, r2, #8
 80011d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	210f      	movs	r1, #15
 80011e0:	400b      	ands	r3, r1
 80011e2:	4928      	ldr	r1, [pc, #160]	; (8001284 <HAL_RCC_OscConfig+0x364>)
 80011e4:	5ccb      	ldrb	r3, [r1, r3]
 80011e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x368>)
 80011ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_RCC_OscConfig+0x36c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2513      	movs	r5, #19
 80011f2:	197c      	adds	r4, r7, r5
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff f977 	bl	80004e8 <HAL_InitTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011fe:	197b      	adds	r3, r7, r5
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d060      	beq.n	80012c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001206:	197b      	adds	r3, r7, r5
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	e242      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d03f      	beq.n	8001294 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0049      	lsls	r1, r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff f9a7 	bl	8000574 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122c:	f7ff f9a2 	bl	8000574 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e229      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_RCC_OscConfig+0x370>)
 8001250:	4013      	ands	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800125a:	430a      	orrs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	0a19      	lsrs	r1, r3, #8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	061a      	lsls	r2, r3, #24
 800126c:	4b01      	ldr	r3, [pc, #4]	; (8001274 <HAL_RCC_OscConfig+0x354>)
 800126e:	430a      	orrs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e029      	b.n	80012c8 <HAL_RCC_OscConfig+0x3a8>
 8001274:	40021000 	.word	0x40021000
 8001278:	fffeffff 	.word	0xfffeffff
 800127c:	fffbffff 	.word	0xfffbffff
 8001280:	ffffe0ff 	.word	0xffffe0ff
 8001284:	08002798 	.word	0x08002798
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000
 8001290:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001294:	4bbd      	ldr	r3, [pc, #756]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4bbc      	ldr	r3, [pc, #752]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 800129a:	49bd      	ldr	r1, [pc, #756]	; (8001590 <HAL_RCC_OscConfig+0x670>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff f968 	bl	8000574 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012aa:	f7ff f963 	bl	8000574 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1ea      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012bc:	4bb3      	ldr	r3, [pc, #716]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2208      	movs	r2, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d019      	beq.n	800130e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4bac      	ldr	r3, [pc, #688]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	4bab      	ldr	r3, [pc, #684]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff f945 	bl	8000574 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff f940 	bl	8000574 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1c7      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001302:	4ba2      	ldr	r3, [pc, #648]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	d0f1      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3d0>
 800130c:	e018      	b.n	8001340 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130e:	4b9f      	ldr	r3, [pc, #636]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001312:	4b9e      	ldr	r3, [pc, #632]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001314:	2101      	movs	r1, #1
 8001316:	438a      	bics	r2, r1
 8001318:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff f92b 	bl	8000574 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff f926 	bl	8000574 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1ad      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001336:	4b95      	ldr	r3, [pc, #596]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d1f1      	bne.n	8001324 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2204      	movs	r2, #4
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_RCC_OscConfig+0x42c>
 800134a:	e0ae      	b.n	80014aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134c:	2027      	movs	r0, #39	; 0x27
 800134e:	183b      	adds	r3, r7, r0
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001354:	4b8d      	ldr	r3, [pc, #564]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	055b      	lsls	r3, r3, #21
 800135c:	4013      	ands	r3, r2
 800135e:	d109      	bne.n	8001374 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	4b8a      	ldr	r3, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001364:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	0549      	lsls	r1, r1, #21
 800136a:	430a      	orrs	r2, r1
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800136e:	183b      	adds	r3, r7, r0
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b87      	ldr	r3, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x674>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4013      	ands	r3, r2
 800137e:	d11a      	bne.n	80013b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001380:	4b84      	ldr	r3, [pc, #528]	; (8001594 <HAL_RCC_OscConfig+0x674>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b83      	ldr	r3, [pc, #524]	; (8001594 <HAL_RCC_OscConfig+0x674>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0049      	lsls	r1, r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138e:	f7ff f8f1 	bl	8000574 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001398:	f7ff f8ec 	bl	8000574 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e173      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x674>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	429a      	cmp	r2, r3
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4b2>
 80013c2:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0049      	lsls	r1, r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
 80013d0:	e031      	b.n	8001436 <HAL_RCC_OscConfig+0x516>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4d4>
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013de:	4b6b      	ldr	r3, [pc, #428]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013e0:	496b      	ldr	r1, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x670>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	651a      	str	r2, [r3, #80]	; 0x50
 80013e6:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80013ec:	496a      	ldr	r1, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x678>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	651a      	str	r2, [r3, #80]	; 0x50
 80013f2:	e020      	b.n	8001436 <HAL_RCC_OscConfig+0x516>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	23a0      	movs	r3, #160	; 0xa0
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d10e      	bne.n	800141e <HAL_RCC_OscConfig+0x4fe>
 8001400:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	00c9      	lsls	r1, r1, #3
 800140a:	430a      	orrs	r2, r1
 800140c:	651a      	str	r2, [r3, #80]	; 0x50
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0049      	lsls	r1, r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	651a      	str	r2, [r3, #80]	; 0x50
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x516>
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001424:	495a      	ldr	r1, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x670>)
 8001426:	400a      	ands	r2, r1
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 800142c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001430:	4959      	ldr	r1, [pc, #356]	; (8001598 <HAL_RCC_OscConfig+0x678>)
 8001432:	400a      	ands	r2, r1
 8001434:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff f899 	bl	8000574 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001446:	e009      	b.n	800145c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff f894 	bl	8000574 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_RCC_OscConfig+0x67c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e11a      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 800145e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d0ef      	beq.n	8001448 <HAL_RCC_OscConfig+0x528>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff f883 	bl	8000574 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001472:	e009      	b.n	8001488 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff f87e 	bl	8000574 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x67c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e104      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 800148a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d1ef      	bne.n	8001474 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001494:	2327      	movs	r3, #39	; 0x27
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014a4:	493e      	ldr	r1, [pc, #248]	; (80015a0 <HAL_RCC_OscConfig+0x680>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	4013      	ands	r3, r2
 80014b2:	d049      	beq.n	8001548 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d026      	beq.n	800150a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_RCC_OscConfig+0x684>)
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_RCC_OscConfig+0x684>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0189      	lsls	r1, r1, #6
 80014de:	430a      	orrs	r2, r1
 80014e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff f847 	bl	8000574 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ec:	f7ff f842 	bl	8000574 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0c9      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d0f1      	beq.n	80014ec <HAL_RCC_OscConfig+0x5cc>
 8001508:	e01e      	b.n	8001548 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x684>)
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x684>)
 800151c:	4922      	ldr	r1, [pc, #136]	; (80015a8 <HAL_RCC_OscConfig+0x688>)
 800151e:	400a      	ands	r2, r1
 8001520:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f827 	bl	8000574 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152c:	f7ff f822 	bl	8000574 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0a9      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d1f1      	bne.n	800152c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x632>
 8001550:	e09e      	b.n	8001690 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d100      	bne.n	800155a <HAL_RCC_OscConfig+0x63a>
 8001558:	e077      	b.n	800164a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	2b02      	cmp	r3, #2
 8001560:	d158      	bne.n	8001614 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x66c>)
 8001568:	4910      	ldr	r1, [pc, #64]	; (80015ac <HAL_RCC_OscConfig+0x68c>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff f801 	bl	8000574 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7fe fffc 	bl	8000574 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d914      	bls.n	80015b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e083      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40021000 	.word	0x40021000
 8001590:	fffffeff 	.word	0xfffffeff
 8001594:	40007000 	.word	0x40007000
 8001598:	fffffbff 	.word	0xfffffbff
 800159c:	00001388 	.word	0x00001388
 80015a0:	efffffff 	.word	0xefffffff
 80015a4:	40010000 	.word	0x40010000
 80015a8:	ffffdfff 	.word	0xffffdfff
 80015ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	049b      	lsls	r3, r3, #18
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1dd      	bne.n	8001578 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	431a      	orrs	r2, r3
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0449      	lsls	r1, r1, #17
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7fe ffc3 	bl	8000574 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe ffbe 	bl	8000574 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e045      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	049b      	lsls	r3, r3, #18
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x6d4>
 8001612:	e03d      	b.n	8001690 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 800161a:	4922      	ldr	r1, [pc, #136]	; (80016a4 <HAL_RCC_OscConfig+0x784>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7fe ffa8 	bl	8000574 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe ffa3 	bl	8000574 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e02a      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	049b      	lsls	r3, r3, #18
 8001644:	4013      	ands	r3, r2
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x70a>
 8001648:	e022      	b.n	8001690 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e01d      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_RCC_OscConfig+0x77c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	429a      	cmp	r2, r3
 800166a:	d10f      	bne.n	800168c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	23f0      	movs	r3, #240	; 0xf0
 8001670:	039b      	lsls	r3, r3, #14
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b00a      	add	sp, #40	; 0x28
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	ff02ffff 	.word	0xff02ffff
 80016a4:	feffffff 	.word	0xfeffffff

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e128      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b96      	ldr	r3, [pc, #600]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d91e      	bls.n	8001708 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	4b90      	ldr	r3, [pc, #576]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016dc:	f7fe ff4a 	bl	8000574 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e4:	e009      	b.n	80016fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e6:	f7fe ff45 	bl	8000574 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	4a8a      	ldr	r2, [pc, #552]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e109      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b87      	ldr	r3, [pc, #540]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001712:	4b83      	ldr	r3, [pc, #524]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	22f0      	movs	r2, #240	; 0xf0
 8001718:	4393      	bics	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 8001722:	430a      	orrs	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_ClockConfig+0x8a>
 8001730:	e089      	b.n	8001846 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	d120      	bne.n	8001788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0e1      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	049b      	lsls	r3, r3, #18
 800175a:	4013      	ands	r3, r2
 800175c:	d114      	bne.n	8001788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0d5      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d106      	bne.n	8001778 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176a:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2204      	movs	r2, #4
 8001770:	4013      	ands	r3, r2
 8001772:	d109      	bne.n	8001788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0ca      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001778:	4b69      	ldr	r3, [pc, #420]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0c2      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001788:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2203      	movs	r2, #3
 800178e:	4393      	bics	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7fe feea 	bl	8000574 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d111      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7fe fee1 	bl	8000574 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0a5      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	220c      	movs	r2, #12
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d1ef      	bne.n	80017ae <HAL_RCC_ClockConfig+0x106>
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d111      	bne.n	80017fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	e009      	b.n	80017ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017da:	f7fe fecb 	bl	8000574 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e08f      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	220c      	movs	r2, #12
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_ClockConfig+0x132>
 80017fa:	e024      	b.n	8001846 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d11b      	bne.n	800183c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001804:	e009      	b.n	800181a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7fe feb5 	bl	8000574 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e079      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	220c      	movs	r2, #12
 8001820:	4013      	ands	r3, r2
 8001822:	2b04      	cmp	r3, #4
 8001824:	d1ef      	bne.n	8001806 <HAL_RCC_ClockConfig+0x15e>
 8001826:	e00e      	b.n	8001846 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7fe fea4 	bl	8000574 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e068      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	220c      	movs	r2, #12
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d21e      	bcs.n	8001892 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	4393      	bics	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001866:	f7fe fe85 	bl	8000574 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	e009      	b.n	8001884 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7fe fe80 	bl	8000574 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_RCC_ClockConfig+0x274>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e044      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_ClockConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d1ee      	bne.n	8001870 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2204      	movs	r2, #4
 8001898:	4013      	ands	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_ClockConfig+0x27c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2208      	movs	r2, #8
 80018b6:	4013      	ands	r3, r2
 80018b8:	d00a      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_RCC_ClockConfig+0x280>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00da      	lsls	r2, r3, #3
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d0:	f000 f832 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018d4:	0001      	movs	r1, r0
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x278>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	220f      	movs	r2, #15
 80018de:	4013      	ands	r3, r2
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x284>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	000a      	movs	r2, r1
 80018e6:	40da      	lsrs	r2, r3
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_ClockConfig+0x288>)
 80018ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_RCC_ClockConfig+0x28c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	250b      	movs	r5, #11
 80018f2:	197c      	adds	r4, r7, r5
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fdf7 	bl	80004e8 <HAL_InitTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018fe:	197b      	adds	r3, r7, r5
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001906:	197b      	adds	r3, r7, r5
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	e000      	b.n	800190e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bdb0      	pop	{r4, r5, r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40022000 	.word	0x40022000
 800191c:	00001388 	.word	0x00001388
 8001920:	40021000 	.word	0x40021000
 8001924:	fffff8ff 	.word	0xfffff8ff
 8001928:	ffffc7ff 	.word	0xffffc7ff
 800192c:	08002798 	.word	0x08002798
 8001930:	20000008 	.word	0x20000008
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b08e      	sub	sp, #56	; 0x38
 800193c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001946:	230c      	movs	r3, #12
 8001948:	4013      	ands	r3, r2
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d014      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800194e:	d900      	bls.n	8001952 <HAL_RCC_GetSysClockFreq+0x1a>
 8001950:	e07b      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x112>
 8001952:	2b04      	cmp	r3, #4
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x24>
 8001956:	2b08      	cmp	r3, #8
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e076      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800195c:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x138>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	4013      	ands	r3, r2
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800196a:	e07c      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x140>)
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001970:	e079      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001976:	e076      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	0c9a      	lsrs	r2, r3, #18
 800197c:	230f      	movs	r3, #15
 800197e:	401a      	ands	r2, r3
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x148>)
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	0d9a      	lsrs	r2, r3, #22
 800198a:	2303      	movs	r3, #3
 800198c:	4013      	ands	r3, r2
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4013      	ands	r3, r2
 800199c:	d01a      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x144>)
 80019a8:	2300      	movs	r3, #0
 80019aa:	69b8      	ldr	r0, [r7, #24]
 80019ac:	69f9      	ldr	r1, [r7, #28]
 80019ae:	f7fe fc57 	bl	8000260 <__aeabi_lmul>
 80019b2:	0002      	movs	r2, r0
 80019b4:	000b      	movs	r3, r1
 80019b6:	0010      	movs	r0, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f7fe fc2b 	bl	8000220 <__aeabi_uldivmod>
 80019ca:	0002      	movs	r2, r0
 80019cc:	000b      	movs	r3, r1
 80019ce:	0013      	movs	r3, r2
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
 80019d2:	e037      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x138>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2210      	movs	r2, #16
 80019da:	4013      	ands	r3, r2
 80019dc:	d01a      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019e8:	2300      	movs	r3, #0
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	f7fe fc37 	bl	8000260 <__aeabi_lmul>
 80019f2:	0002      	movs	r2, r0
 80019f4:	000b      	movs	r3, r1
 80019f6:	0010      	movs	r0, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f7fe fc0b 	bl	8000220 <__aeabi_uldivmod>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	000b      	movs	r3, r1
 8001a0e:	0013      	movs	r3, r2
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
 8001a12:	e017      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	0018      	movs	r0, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f7fe fc1e 	bl	8000260 <__aeabi_lmul>
 8001a24:	0002      	movs	r2, r0
 8001a26:	000b      	movs	r3, r1
 8001a28:	0010      	movs	r0, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	001c      	movs	r4, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	001d      	movs	r5, r3
 8001a34:	0022      	movs	r2, r4
 8001a36:	002b      	movs	r3, r5
 8001a38:	f7fe fbf2 	bl	8000220 <__aeabi_uldivmod>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	000b      	movs	r3, r1
 8001a40:	0013      	movs	r3, r2
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a48:	e00d      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0b5b      	lsrs	r3, r3, #13
 8001a50:	2207      	movs	r2, #7
 8001a52:	4013      	ands	r3, r2
 8001a54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0212      	lsls	r2, r2, #8
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b00e      	add	sp, #56	; 0x38
 8001a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	003d0900 	.word	0x003d0900
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200
 8001a80:	080027a8 	.word	0x080027a8

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e032      	b.n	8001afc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2239      	movs	r2, #57	; 0x39
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2238      	movs	r2, #56	; 0x38
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fd93 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2239      	movs	r2, #57	; 0x39
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f000 f971 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	223e      	movs	r2, #62	; 0x3e
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223a      	movs	r2, #58	; 0x3a
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223b      	movs	r2, #59	; 0x3b
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	223c      	movs	r2, #60	; 0x3c
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	; 0x3d
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2239      	movs	r2, #57	; 0x39
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2239      	movs	r2, #57	; 0x39
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d001      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e036      	b.n	8001b8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2239      	movs	r2, #57	; 0x39
 8001b20:	2102      	movs	r1, #2
 8001b22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	05db      	lsls	r3, r3, #23
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d009      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x50>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_TIM_Base_Start_IT+0x90>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x50>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_TIM_Base_Start_IT+0x94>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d111      	bne.n	8001b78 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d010      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b76:	e007      	b.n	8001b88 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40010800 	.word	0x40010800
 8001b98:	40011400 	.word	0x40011400

08001b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d124      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d11d      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4252      	negs	r2, r2
 8001bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f8cc 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001be4:	e007      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f8bf 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 f8cb 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d125      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d11e      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	4252      	negs	r2, r2
 8001c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f89f 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001c3e:	e007      	b.n	8001c50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f892 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f89e 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d124      	bne.n	8001cae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11d      	bne.n	8001cae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2209      	movs	r2, #9
 8001c78:	4252      	negs	r2, r2
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f873 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001c96:	e007      	b.n	8001ca8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 f866 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f872 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d125      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d11e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2211      	movs	r2, #17
 8001cd0:	4252      	negs	r2, r2
 8001cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f846 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e007      	b.n	8001d02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f839 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 f845 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10f      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d108      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4252      	negs	r2, r2
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fa09 	bl	8002148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d10f      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d108      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2241      	movs	r2, #65	; 0x41
 8001d58:	4252      	negs	r2, r2
 8001d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f81c 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	05db      	lsls	r3, r3, #23
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d007      	beq.n	8001dd6 <TIM_Base_SetConfig+0x2a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <TIM_Base_SetConfig+0x9c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <TIM_Base_SetConfig+0x2a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <TIM_Base_SetConfig+0xa0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d108      	bne.n	8001de8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2270      	movs	r2, #112	; 0x70
 8001dda:	4393      	bics	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d007      	beq.n	8001e02 <TIM_Base_SetConfig+0x56>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <TIM_Base_SetConfig+0x9c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d003      	beq.n	8001e02 <TIM_Base_SetConfig+0x56>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <TIM_Base_SetConfig+0xa0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d108      	bne.n	8001e14 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <TIM_Base_SetConfig+0xa4>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	4393      	bics	r3, r2
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	615a      	str	r2, [r3, #20]
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40011400 	.word	0x40011400
 8001e50:	fffffcff 	.word	0xfffffcff

08001e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e042      	b.n	8001ef2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2238      	movs	r2, #56	; 0x38
 8001e70:	2101      	movs	r1, #1
 8001e72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2239      	movs	r2, #57	; 0x39
 8001e78:	2102      	movs	r1, #2
 8001e7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2270      	movs	r2, #112	; 0x70
 8001e90:	4393      	bics	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	05db      	lsls	r3, r3, #23
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d009      	beq.n	8001ec6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	4393      	bics	r3, r2
 8001ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2239      	movs	r2, #57	; 0x39
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2238      	movs	r2, #56	; 0x38
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40010800 	.word	0x40010800
 8001f00:	40011400 	.word	0x40011400

08001f04 <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	003b      	movs	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	003b      	movs	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	003b      	movs	r3, r7
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f20:	0019      	movs	r1, r3
 8001f22:	0010      	movs	r0, r2
 8001f24:	f7fe fe4c 	bl	8000bc0 <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe ffd9 	bl	8000ee6 <HAL_GPIO_WritePin>
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	2108      	movs	r1, #8
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7fe ffd3 	bl	8000ee6 <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 8001f40:	2517      	movs	r5, #23
 8001f42:	197c      	adds	r4, r7, r5
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7fe ffaf 	bl	8000eac <HAL_GPIO_ReadPin>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	2108      	movs	r1, #8
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7fe ffc4 	bl	8000ee6 <HAL_GPIO_WritePin>
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	2108      	movs	r1, #8
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7fe ffbe 	bl	8000ee6 <HAL_GPIO_WritePin>
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2108      	movs	r1, #8
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7fe ffb8 	bl	8000ee6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8001f76:	003b      	movs	r3, r7
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7c:	003b      	movs	r3, r7
 8001f7e:	2201      	movs	r2, #1
 8001f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	003b      	movs	r3, r7
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	003b      	movs	r3, r7
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	003b      	movs	r3, r7
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <LcdReadByte+0xa4>)
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f7fe fe13 	bl	8000bc0 <HAL_GPIO_Init>
  
  return lcdBusy;
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	50000400 	.word	0x50000400

08001fac <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	481c      	ldr	r0, [pc, #112]	; (8002034 <LcdSendNibble+0x88>)
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	f7fe ff8d 	bl	8000ee6 <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4816      	ldr	r0, [pc, #88]	; (8002034 <LcdSendNibble+0x88>)
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2120      	movs	r1, #32
 8001fe0:	f7fe ff81 	bl	8000ee6 <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <LcdSendNibble+0x88>)
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	f7fe ff75 	bl	8000ee6 <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	b2db      	uxtb	r3, r3
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <LcdSendNibble+0x88>)
 800200c:	001a      	movs	r2, r3
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	f7fe ff69 	bl	8000ee6 <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <LcdSendNibble+0x88>)
 8002016:	2201      	movs	r2, #1
 8002018:	2108      	movs	r1, #8
 800201a:	0018      	movs	r0, r3
 800201c:	f7fe ff63 	bl	8000ee6 <HAL_GPIO_WritePin>
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <LcdSendNibble+0x88>)
 8002022:	2200      	movs	r2, #0
 8002024:	2108      	movs	r1, #8
 8002026:	0018      	movs	r0, r3
 8002028:	f7fe ff5d 	bl	8000ee6 <HAL_GPIO_WritePin>
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}
 8002034:	50000400 	.word	0x50000400

08002038 <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	1dbb      	adds	r3, r7, #6
 8002046:	1c0a      	adds	r2, r1, #0
 8002048:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <LcdSendByte+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	2101      	movs	r1, #1
 8002050:	0018      	movs	r0, r3
 8002052:	f7fe ff48 	bl	8000ee6 <HAL_GPIO_WritePin>
  while(LcdReadByte());
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	f7ff ff54 	bl	8001f04 <LcdReadByte>
 800205c:	1e03      	subs	r3, r0, #0
 800205e:	d1fb      	bne.n	8002058 <LcdSendByte+0x20>
  LCD_RS(address);
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4811      	ldr	r0, [pc, #68]	; (80020ac <LcdSendByte+0x74>)
 8002066:	001a      	movs	r2, r3
 8002068:	2101      	movs	r1, #1
 800206a:	f7fe ff3c 	bl	8000ee6 <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <LcdSendByte+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	2102      	movs	r1, #2
 8002074:	0018      	movs	r0, r3
 8002076:	f7fe ff36 	bl	8000ee6 <HAL_GPIO_WritePin>
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LcdSendByte+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	2108      	movs	r1, #8
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe ff30 	bl	8000ee6 <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 8002086:	1dbb      	adds	r3, r7, #6
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	b2db      	uxtb	r3, r3
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff8c 	bl	8001fac <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	220f      	movs	r2, #15
 800209a:	4013      	ands	r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff ff84 	bl	8001fac <LcdSendNibble>
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	50000400 	.word	0x50000400

080020b0 <LcdInit>:

void LcdInit() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <LcdInit+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	2101      	movs	r1, #1
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe ff12 	bl	8000ee6 <HAL_GPIO_WritePin>
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <LcdInit+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	2102      	movs	r1, #2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe ff0c 	bl	8000ee6 <HAL_GPIO_WritePin>
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <LcdInit+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	2108      	movs	r1, #8
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe ff06 	bl	8000ee6 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 80020da:	200f      	movs	r0, #15
 80020dc:	f7fe fa54 	bl	8000588 <HAL_Delay>
  for(i=0; i<3; i++) {
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e00a      	b.n	80020fe <LcdInit+0x4e>
    LcdSendNibble(3);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7ff ff5f 	bl	8001fac <LcdSendNibble>
    HAL_Delay(5);
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7fe fa4a 	bl	8000588 <HAL_Delay>
  for(i=0; i<3; i++) {
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	3201      	adds	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d9f0      	bls.n	80020e8 <LcdInit+0x38>
  }
  LcdSendNibble(2);
 8002106:	2002      	movs	r0, #2
 8002108:	f7ff ff50 	bl	8001fac <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e00c      	b.n	800212e <LcdInit+0x7e>
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <LcdInit+0x94>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	0019      	movs	r1, r3
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff ff8a 	bl	8002038 <LcdSendByte>
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	3201      	adds	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d9ee      	bls.n	8002114 <LcdInit+0x64>
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	50000400 	.word	0x50000400
 8002144:	08002794 	.word	0x08002794

08002148 <HAL_TIM_PeriodElapsedCallback>:

uint32_t getTick() {
	return usNOW;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d104      	bne.n	8002166 <HAL_TIM_PeriodElapsedCallback+0x1e>
		usNOW++;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002164:	601a      	str	r2, [r3, #0]
	}
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	20000088 	.word	0x20000088
 8002174:	200000c8 	.word	0x200000c8

08002178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217c:	f7fe f994 	bl	80004a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002180:	f000 f812 	bl	80021a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002184:	f000 f926 	bl	80023d4 <MX_GPIO_Init>
  MX_ADC_Init();
 8002188:	f000 f878 	bl	800227c <MX_ADC_Init>
  MX_TIM6_Init();
 800218c:	f000 f8e8 	bl	8002360 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002190:	f000 f866 	bl	8002260 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	LcdInit();
 8002194:	f7ff ff8c 	bl	80020b0 <LcdInit>
	HAL_TIM_Base_Start_IT(&htim6);
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <main+0x2c>)
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff fcb2 	bl	8001b04 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80021a0:	e7fe      	b.n	80021a0 <main+0x28>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	20000088 	.word	0x20000088

080021a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b095      	sub	sp, #84	; 0x54
 80021ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ae:	2418      	movs	r4, #24
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	0018      	movs	r0, r3
 80021b4:	2338      	movs	r3, #56	; 0x38
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f000 fad7 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	0018      	movs	r0, r3
 80021c2:	2314      	movs	r3, #20
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f000 fad0 	bl	800276c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <SystemClock_Config+0xb0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <SystemClock_Config+0xb4>)
 80021d2:	401a      	ands	r2, r3
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <SystemClock_Config+0xb0>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0109      	lsls	r1, r1, #4
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021de:	0021      	movs	r1, r4
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2202      	movs	r2, #2
 80021e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2201      	movs	r2, #1
 80021ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2210      	movs	r2, #16
 80021f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2202      	movs	r2, #2
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2200      	movs	r2, #0
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	02d2      	lsls	r2, r2, #11
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002206:	187b      	adds	r3, r7, r1
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	03d2      	lsls	r2, r2, #15
 800220c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220e:	187b      	adds	r3, r7, r1
 8002210:	0018      	movs	r0, r3
 8002212:	f7fe fe85 	bl	8000f20 <HAL_RCC_OscConfig>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800221a:	f000 f987 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	220f      	movs	r2, #15
 8002222:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2203      	movs	r2, #3
 8002228:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	2101      	movs	r1, #1
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff fa31 	bl	80016a8 <HAL_RCC_ClockConfig>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800224a:	f000 f96f 	bl	800252c <Error_Handler>
  }
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b015      	add	sp, #84	; 0x54
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	40007000 	.word	0x40007000
 800225c:	ffffe7ff 	.word	0xffffe7ff

08002260 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2011      	movs	r0, #17
 800226a:	f7fe fc77 	bl	8000b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800226e:	2011      	movs	r0, #17
 8002270:	f7fe fc89 	bl	8000b86 <HAL_NVIC_EnableIRQ>
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002282:	003b      	movs	r3, r7
 8002284:	0018      	movs	r0, r3
 8002286:	2308      	movs	r3, #8
 8002288:	001a      	movs	r2, r3
 800228a:	2100      	movs	r1, #0
 800228c:	f000 fa6e 	bl	800276c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <MX_ADC_Init+0xd8>)
 8002292:	4a31      	ldr	r2, [pc, #196]	; (8002358 <MX_ADC_Init+0xdc>)
 8002294:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002296:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <MX_ADC_Init+0xd8>)
 8002298:	2200      	movs	r2, #0
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <MX_ADC_Init+0xd8>)
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	05d2      	lsls	r2, r2, #23
 80022a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <MX_ADC_Init+0xd8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <MX_ADC_Init+0xd8>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <MX_ADC_Init+0xd8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <MX_ADC_Init+0xd8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <MX_ADC_Init+0xd8>)
 80022be:	2220      	movs	r2, #32
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <MX_ADC_Init+0xd8>)
 80022c6:	2221      	movs	r2, #33	; 0x21
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <MX_ADC_Init+0xd8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_ADC_Init+0xd8>)
 80022d4:	22c2      	movs	r2, #194	; 0xc2
 80022d6:	32ff      	adds	r2, #255	; 0xff
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_ADC_Init+0xd8>)
 80022dc:	222c      	movs	r2, #44	; 0x2c
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_ADC_Init+0xd8>)
 80022e4:	2204      	movs	r2, #4
 80022e6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_ADC_Init+0xd8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_ADC_Init+0xd8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_ADC_Init+0xd8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_ADC_Init+0xd8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <MX_ADC_Init+0xd8>)
 8002302:	0018      	movs	r0, r3
 8002304:	f7fe f964 	bl	80005d0 <HAL_ADC_Init>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800230c:	f000 f90e 	bl	800252c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002310:	003b      	movs	r3, r7
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002316:	003b      	movs	r3, r7
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	0152      	lsls	r2, r2, #5
 800231c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800231e:	003a      	movs	r2, r7
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_ADC_Init+0xd8>)
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f7fe fac7 	bl	80008b8 <HAL_ADC_ConfigChannel>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800232e:	f000 f8fd 	bl	800252c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002332:	003b      	movs	r3, r7
 8002334:	4a09      	ldr	r2, [pc, #36]	; (800235c <MX_ADC_Init+0xe0>)
 8002336:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002338:	003a      	movs	r2, r7
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_ADC_Init+0xd8>)
 800233c:	0011      	movs	r1, r2
 800233e:	0018      	movs	r0, r3
 8002340:	f7fe faba 	bl	80008b8 <HAL_ADC_ConfigChannel>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d001      	beq.n	800234c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002348:	f000 f8f0 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000002c 	.word	0x2000002c
 8002358:	40012400 	.word	0x40012400
 800235c:	04000002 	.word	0x04000002

08002360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002366:	003b      	movs	r3, r7
 8002368:	0018      	movs	r0, r3
 800236a:	2308      	movs	r3, #8
 800236c:	001a      	movs	r2, r3
 800236e:	2100      	movs	r1, #0
 8002370:	f000 f9fc 	bl	800276c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <MX_TIM6_Init+0x6c>)
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <MX_TIM6_Init+0x70>)
 8002378:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_TIM6_Init+0x6c>)
 800237c:	221f      	movs	r2, #31
 800237e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <MX_TIM6_Init+0x6c>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_TIM6_Init+0x6c>)
 8002388:	2201      	movs	r2, #1
 800238a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_TIM6_Init+0x6c>)
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_TIM6_Init+0x6c>)
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff fb75 	bl	8001a84 <HAL_TIM_Base_Init>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800239e:	f000 f8c5 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a2:	003b      	movs	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	003b      	movs	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ae:	003a      	movs	r2, r7
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_TIM6_Init+0x6c>)
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff fd4d 	bl	8001e54 <HAL_TIMEx_MasterConfigSynchronization>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80023be:	f000 f8b5 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000088 	.word	0x20000088
 80023d0:	40001000 	.word	0x40001000

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	240c      	movs	r4, #12
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	0018      	movs	r0, r3
 80023e0:	2314      	movs	r3, #20
 80023e2:	001a      	movs	r2, r3
 80023e4:	2100      	movs	r1, #0
 80023e6:	f000 f9c1 	bl	800276c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <MX_GPIO_Init+0x144>)
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <MX_GPIO_Init+0x144>)
 80023f0:	2104      	movs	r1, #4
 80023f2:	430a      	orrs	r2, r1
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <MX_GPIO_Init+0x144>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	2204      	movs	r2, #4
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <MX_GPIO_Init+0x144>)
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <MX_GPIO_Init+0x144>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
 800240e:	4b42      	ldr	r3, [pc, #264]	; (8002518 <MX_GPIO_Init+0x144>)
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <MX_GPIO_Init+0x144>)
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <MX_GPIO_Init+0x144>)
 8002420:	2102      	movs	r1, #2
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <MX_GPIO_Init+0x144>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RING_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <MX_GPIO_Init+0x148>)
 8002434:	23a0      	movs	r3, #160	; 0xa0
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	2200      	movs	r2, #0
 800243a:	0018      	movs	r0, r3
 800243c:	f7fe fd53 	bl	8000ee6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002440:	23f8      	movs	r3, #248	; 0xf8
 8002442:	00d9      	lsls	r1, r3, #3
 8002444:	23a0      	movs	r3, #160	; 0xa0
 8002446:	05db      	lsls	r3, r3, #23
 8002448:	2201      	movs	r2, #1
 800244a:	0018      	movs	r0, r3
 800244c:	f7fe fd4b 	bl	8000ee6 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002452:	2200      	movs	r2, #0
 8002454:	21fb      	movs	r1, #251	; 0xfb
 8002456:	0018      	movs	r0, r3
 8002458:	f7fe fd45 	bl	8000ee6 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_A_Pin SW_B_Pin */
  GPIO_InitStruct.Pin = SW_A_Pin|SW_B_Pin;
 800245c:	193b      	adds	r3, r7, r4
 800245e:	22c0      	movs	r2, #192	; 0xc0
 8002460:	0212      	lsls	r2, r2, #8
 8002462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	193b      	adds	r3, r7, r4
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	2201      	movs	r2, #1
 800246e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	193b      	adds	r3, r7, r4
 8002472:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <MX_GPIO_Init+0x150>)
 8002474:	0019      	movs	r1, r3
 8002476:	0010      	movs	r0, r2
 8002478:	f7fe fba2 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
  GPIO_InitStruct.Pin = SW_ON_Pin|SW_AUTO_Pin|SW_LOCK_Pin;
 800247c:	193b      	adds	r3, r7, r4
 800247e:	221c      	movs	r2, #28
 8002480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	193b      	adds	r3, r7, r4
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002488:	193b      	adds	r3, r7, r4
 800248a:	2201      	movs	r2, #1
 800248c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	193a      	adds	r2, r7, r4
 8002490:	23a0      	movs	r3, #160	; 0xa0
 8002492:	05db      	lsls	r3, r3, #23
 8002494:	0011      	movs	r1, r2
 8002496:	0018      	movs	r0, r3
 8002498:	f7fe fb92 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RING_Pin */
  GPIO_InitStruct.Pin = LED_RING_Pin;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2220      	movs	r2, #32
 80024a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2211      	movs	r2, #17
 80024a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2203      	movs	r2, #3
 80024b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RING_GPIO_Port, &GPIO_InitStruct);
 80024b4:	193a      	adds	r2, r7, r4
 80024b6:	23a0      	movs	r3, #160	; 0xa0
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fb7f 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <MX_GPIO_Init+0x154>)
 80024c6:	601a      	str	r2, [r3, #0]
                          |LED5_Pin|BUZZ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2201      	movs	r2, #1
 80024cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	2203      	movs	r2, #3
 80024d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	193a      	adds	r2, r7, r4
 80024dc:	23a0      	movs	r3, #160	; 0xa0
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7fe fb6c 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin
 80024e8:	0021      	movs	r1, r4
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	22fb      	movs	r2, #251	; 0xfb
 80024ee:	601a      	str	r2, [r3, #0]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2201      	movs	r2, #1
 80024f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2203      	movs	r2, #3
 8002500:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002502:	187b      	adds	r3, r7, r1
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <MX_GPIO_Init+0x14c>)
 8002506:	0019      	movs	r1, r3
 8002508:	0010      	movs	r0, r2
 800250a:	f7fe fb59 	bl	8000bc0 <HAL_GPIO_Init>

}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b009      	add	sp, #36	; 0x24
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40021000 	.word	0x40021000
 800251c:	00008020 	.word	0x00008020
 8002520:	50000400 	.word	0x50000400
 8002524:	50000800 	.word	0x50000800
 8002528:	000087c0 	.word	0x000087c0

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_MspInit+0x24>)
 800253e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_MspInit+0x24>)
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_MspInit+0x24>)
 800254a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_MspInit+0x24>)
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	0549      	lsls	r1, r1, #21
 8002552:	430a      	orrs	r2, r1
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	240c      	movs	r4, #12
 800256a:	193b      	adds	r3, r7, r4
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f000 f8fa 	bl	800276c <memset>
  if(hadc->Instance==ADC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_ADC_MspInit+0x70>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d122      	bne.n	80025c8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0089      	lsls	r1, r1, #2
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	2203      	movs	r2, #3
 80025ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	2203      	movs	r2, #3
 80025b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	193a      	adds	r2, r7, r4
 80025bc:	23a0      	movs	r3, #160	; 0xa0
 80025be:	05db      	lsls	r3, r3, #23
 80025c0:	0011      	movs	r1, r2
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fe fafc 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b009      	add	sp, #36	; 0x24
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	40012400 	.word	0x40012400
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_TIM_Base_MspInit+0x28>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d105      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_TIM_Base_MspInit+0x2c>)
 80025ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_TIM_Base_MspInit+0x2c>)
 80025f0:	2110      	movs	r1, #16
 80025f2:	430a      	orrs	r2, r1
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40001000 	.word	0x40001000
 8002604:	40021000 	.word	0x40021000

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f7fd ff8e 	bl	8000550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <TIM6_DAC_IRQHandler+0x14>)
 8002642:	0018      	movs	r0, r3
 8002644:	f7ff faaa 	bl	8001b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	20000088 	.word	0x20000088

08002654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <SystemInit+0x64>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <SystemInit+0x64>)
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	0049      	lsls	r1, r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <SystemInit+0x64>)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <SystemInit+0x64>)
 800266c:	4913      	ldr	r1, [pc, #76]	; (80026bc <SystemInit+0x68>)
 800266e:	400a      	ands	r2, r1
 8002670:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <SystemInit+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <SystemInit+0x64>)
 8002678:	4911      	ldr	r1, [pc, #68]	; (80026c0 <SystemInit+0x6c>)
 800267a:	400a      	ands	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <SystemInit+0x64>)
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <SystemInit+0x64>)
 8002684:	2101      	movs	r1, #1
 8002686:	438a      	bics	r2, r1
 8002688:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <SystemInit+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <SystemInit+0x64>)
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <SystemInit+0x70>)
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <SystemInit+0x64>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <SystemInit+0x64>)
 800269c:	490a      	ldr	r1, [pc, #40]	; (80026c8 <SystemInit+0x74>)
 800269e:	400a      	ands	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SystemInit+0x64>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <SystemInit+0x78>)
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0512      	lsls	r2, r2, #20
 80026ae:	609a      	str	r2, [r3, #8]
#endif
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000
 80026bc:	88ff400c 	.word	0x88ff400c
 80026c0:	fef6fff6 	.word	0xfef6fff6
 80026c4:	fffbffff 	.word	0xfffbffff
 80026c8:	ff02ffff 	.word	0xff02ffff
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026d0:	480d      	ldr	r0, [pc, #52]	; (8002708 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80026d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d6:	e003      	b.n	80026e0 <LoopCopyDataInit>

080026d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80026da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026de:	3104      	adds	r1, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80026e0:	480b      	ldr	r0, [pc, #44]	; (8002710 <LoopForever+0xa>)
  ldr  r3, =_edata
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <LoopForever+0xe>)
  adds  r2, r0, r1
 80026e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e8:	d3f6      	bcc.n	80026d8 <CopyDataInit>
  ldr  r2, =_sbss
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <LoopForever+0x12>)
  b  LoopFillZerobss
 80026ec:	e002      	b.n	80026f4 <LoopFillZerobss>

080026ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80026ee:	2300      	movs	r3, #0
  str  r3, [r2]
 80026f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f2:	3204      	adds	r2, #4

080026f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <LoopForever+0x16>)
  cmp  r2, r3
 80026f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f8:	d3f9      	bcc.n	80026ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026fa:	f7ff ffab 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f000 f811 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7ff fd39 	bl	8002178 <main>

08002706 <LoopForever>:

LoopForever:
    b LoopForever
 8002706:	e7fe      	b.n	8002706 <LoopForever>
   ldr   r0, =_estack
 8002708:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800270c:	080027c4 	.word	0x080027c4
  ldr  r0, =_sdata
 8002710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002714:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002718:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800271c:	200000cc 	.word	0x200000cc

08002720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_COMP_IRQHandler>
	...

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	2600      	movs	r6, #0
 8002728:	4d0c      	ldr	r5, [pc, #48]	; (800275c <__libc_init_array+0x38>)
 800272a:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272c:	1b64      	subs	r4, r4, r5
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	42a6      	cmp	r6, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	2600      	movs	r6, #0
 8002736:	f000 f821 	bl	800277c <_init>
 800273a:	4d0a      	ldr	r5, [pc, #40]	; (8002764 <__libc_init_array+0x40>)
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <__libc_init_array+0x44>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	42a6      	cmp	r6, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	00b3      	lsls	r3, r6, #2
 800274a:	58eb      	ldr	r3, [r5, r3]
 800274c:	4798      	blx	r3
 800274e:	3601      	adds	r6, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	00b3      	lsls	r3, r6, #2
 8002754:	58eb      	ldr	r3, [r5, r3]
 8002756:	4798      	blx	r3
 8002758:	3601      	adds	r6, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	080027bc 	.word	0x080027bc
 8002760:	080027bc 	.word	0x080027bc
 8002764:	080027bc 	.word	0x080027bc
 8002768:	080027c0 	.word	0x080027c0

0800276c <memset>:
 800276c:	0003      	movs	r3, r0
 800276e:	1882      	adds	r2, r0, r2
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	7019      	strb	r1, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <_init>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

08002788 <_fini>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr
